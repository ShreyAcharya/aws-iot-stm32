
002_OTA_Firmware_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001474c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022d0  08014920  08014920  00015920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bf0  08016bf0  000181dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016bf0  08016bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016bf8  08016bf8  000181dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016bf8  08016bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016bfc  08016bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08016c00  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010784  200001dc  08016ddc  000181dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  20010960  08016ddc  00018960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228a3  00000000  00000000  0001820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058fe  00000000  00000000  0003aaaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  000403b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001896  00000000  00000000  000422f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295da  00000000  00000000  00043b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000294e9  00000000  00000000  0006d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecb65  00000000  00000000  00096651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001831b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c08  00000000  00000000  001831fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0018ce04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014904 	.word	0x08014904

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08014904 	.word	0x08014904

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <custom_parser_parse_job_doc_file>:

#include "core_json.h"

int8_t custom_parser_parse_job_doc_file( const char * job_doc,
                                         const size_t job_doc_length,
                                         custom_job_doc_fields_t * result ) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b090      	sub	sp, #64	@ 0x40
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]

  JSONStatus_t json_result = JSONNotFound;
 800106c:	2304      	movs	r3, #4
 800106e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  const char *json_value = NULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  size_t json_value_length = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Parse "streamID" */
  json_result = JSON_SearchConst(job_doc,
 800107a:	2300      	movs	r3, #0
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2308      	movs	r3, #8
 800108c:	4a27      	ldr	r2, [pc, #156]	@ (800112c <custom_parser_parse_job_doc_file+0xcc>)
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f00e fa43 	bl	800f51c <JSON_SearchConst>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                 "streamID",
                                 8U,
                                 &json_value,
                                 &json_value_length,
                                 NULL);
  if (json_result != JSONSuccess) return -1;
 800109c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d002      	beq.n	80010aa <custom_parser_parse_job_doc_file+0x4a>
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	e03b      	b.n	8001122 <custom_parser_parse_job_doc_file+0xc2>

  result->image_ref = json_value;
 80010aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	601a      	str	r2, [r3, #0]
  result->image_ref_len = json_value_length;
 80010b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	605a      	str	r2, [r3, #4]

  /* Parse "files[0].fileSize" */
  json_result = JSON_SearchConst(job_doc,
 80010b6:	2300      	movs	r3, #0
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2311      	movs	r3, #17
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <custom_parser_parse_job_doc_file+0xd0>)
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f00e fa25 	bl	800f51c <JSON_SearchConst>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                 "files[0].fileSize",
                                 17U,
                                 &json_value,
                                 &json_value_length,
                                 NULL);
  if (json_result != JSONSuccess) return -1;
 80010d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d002      	beq.n	80010e6 <custom_parser_parse_job_doc_file+0x86>
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	e01d      	b.n	8001122 <custom_parser_parse_job_doc_file+0xc2>

  char size_buf[16] = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  memcpy(size_buf, json_value, json_value_length);
 80010f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f010 f8c0 	bl	8011282 <memcpy>
  size_buf[json_value_length] = '\0';
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	3330      	adds	r3, #48	@ 0x30
 8001106:	443b      	add	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  result->file_size = (uint32_t)atoi(size_buf);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4618      	mov	r0, r3
 8001114:	f00e fb6e 	bl	800f7f4 <atoi>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	60da      	str	r2, [r3, #12]

  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08014920 	.word	0x08014920
 8001130:	0801492c 	.word	0x0801492c

08001134 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	b29a      	uxth	r2, r3
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <_write+0x28>)
 800114c:	f004 ff24 	bl	8005f98 <HAL_UART_Transmit>
  return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000294 	.word	0x20000294

08001160 <ota_task>:

/**
 * @brief OTA Task
 */
static void ota_task( void *pvParameters )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    (void) pvParameters;

    OTA_Status_t rc = ota_start();
 8001168:	f000 fe08 	bl	8001d7c <ota_start>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]

    if (rc != OTA_SUCCESS) {
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00f      	beq.n	8001198 <ota_task+0x38>
        LogError( ("OTA start failed: %d", rc) );
 8001178:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <ota_task+0x60>)
 800117a:	235b      	movs	r3, #91	@ 0x5b
 800117c:	4911      	ldr	r1, [pc, #68]	@ (80011c4 <ota_task+0x64>)
 800117e:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <ota_task+0x68>)
 8001180:	f00f fd9e 	bl	8010cc0 <iprintf>
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4619      	mov	r1, r3
 800118a:	4810      	ldr	r0, [pc, #64]	@ (80011cc <ota_task+0x6c>)
 800118c:	f00f fd98 	bl	8010cc0 <iprintf>
 8001190:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <ota_task+0x70>)
 8001192:	f00f fdfd 	bl	8010d90 <puts>
 8001196:	e00b      	b.n	80011b0 <ota_task+0x50>
        /* TODO: notify a supervisor task or set an event here if needed */
    } else {
        LogInfo( ("OTA start succeeded") );
 8001198:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <ota_task+0x60>)
 800119a:	235e      	movs	r3, #94	@ 0x5e
 800119c:	4909      	ldr	r1, [pc, #36]	@ (80011c4 <ota_task+0x64>)
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <ota_task+0x74>)
 80011a0:	f00f fd8e 	bl	8010cc0 <iprintf>
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <ota_task+0x78>)
 80011a6:	f00f fd8b 	bl	8010cc0 <iprintf>
 80011aa:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <ota_task+0x70>)
 80011ac:	f00f fdf0 	bl	8010d90 <puts>
    }

    vTaskDelete( NULL );
 80011b0:	2000      	movs	r0, #0
 80011b2:	f007 feb1 	bl	8008f18 <vTaskDelete>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0801494c 	.word	0x0801494c
 80011c4:	08014954 	.word	0x08014954
 80011c8:	08014960 	.word	0x08014960
 80011cc:	08014978 	.word	0x08014978
 80011d0:	08014990 	.word	0x08014990
 80011d4:	08014994 	.word	0x08014994
 80011d8:	080149ac 	.word	0x080149ac

080011dc <mqtt_receive_task>:

// this task receives unsolicited MQTT messages from the AWS server
void mqtt_receive_task(void *parameters)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	f5ad 6de0 	sub.w	sp, sp, #1792	@ 0x700
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 80011e8:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 80011ec:	6018      	str	r0, [r3, #0]
  mqtt_queue_item_t item = { 0 };
 80011ee:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 80011f2:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 80011fc:	461a      	mov	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	f00f ff56 	bl	80110b0 <memset>

  while (1)
  {
    xQueueReceive(mqtt_rx_queue, &item, portMAX_DELAY);
 8001204:	4b49      	ldr	r3, [pc, #292]	@ (800132c <mqtt_receive_task+0x150>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f107 010c 	add.w	r1, r7, #12
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	4618      	mov	r0, r3
 8001212:	f007 fa4f 	bl	80086b4 <xQueueReceive>

    if (item.topic_length   > sizeof(item.topic) ||
 8001216:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800121a:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 800121e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001222:	2b96      	cmp	r3, #150	@ 0x96
 8001224:	d808      	bhi.n	8001238 <mqtt_receive_task+0x5c>
        item.payload_length > sizeof(item.payload))
 8001226:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800122a:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 800122e:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
    if (item.topic_length   > sizeof(item.topic) ||
 8001232:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001236:	d90c      	bls.n	8001252 <mqtt_receive_task+0x76>
    {
        LogError(("mqtt_rx_task: length field overflow"));
 8001238:	4a3d      	ldr	r2, [pc, #244]	@ (8001330 <mqtt_receive_task+0x154>)
 800123a:	2370      	movs	r3, #112	@ 0x70
 800123c:	493d      	ldr	r1, [pc, #244]	@ (8001334 <mqtt_receive_task+0x158>)
 800123e:	483e      	ldr	r0, [pc, #248]	@ (8001338 <mqtt_receive_task+0x15c>)
 8001240:	f00f fd3e 	bl	8010cc0 <iprintf>
 8001244:	483d      	ldr	r0, [pc, #244]	@ (800133c <mqtt_receive_task+0x160>)
 8001246:	f00f fd3b 	bl	8010cc0 <iprintf>
 800124a:	483d      	ldr	r0, [pc, #244]	@ (8001340 <mqtt_receive_task+0x164>)
 800124c:	f00f fda0 	bl	8010d90 <puts>
        continue;
 8001250:	e06a      	b.n	8001328 <mqtt_receive_task+0x14c>
    }

    // Check if both topic and payload contain valid data
    if (item.operation == MQTT_OPERATION_RECEIVE &&
 8001252:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8001256:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d14f      	bne.n	8001300 <mqtt_receive_task+0x124>
        item.topic_length  > 0 &&
 8001260:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8001264:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
    if (item.operation == MQTT_OPERATION_RECEIVE &&
 800126c:	2b00      	cmp	r3, #0
 800126e:	d047      	beq.n	8001300 <mqtt_receive_task+0x124>
        item.payload_length > 0)
 8001270:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8001274:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001278:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
        item.topic_length  > 0 &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	d03f      	beq.n	8001300 <mqtt_receive_task+0x124>
    {
        // Extract topic and payload
        const char   *topic       = item.topic;
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	3301      	adds	r3, #1
 8001286:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
        size_t        topic_len   = item.topic_length;
 800128a:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800128e:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001296:	f8c7 36f8 	str.w	r3, [r7, #1784]	@ 0x6f8
        const uint8_t *payload    = item.payload;
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	339c      	adds	r3, #156	@ 0x9c
 80012a0:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
        size_t        payload_len = item.payload_length;
 80012a4:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 80012a8:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 80012ac:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 80012b0:	f8c7 36f0 	str.w	r3, [r7, #1776]	@ 0x6f0

        // Pass to OTA handler
        bool message_handled = ota_handle_incoming_mqtt_message(
 80012b4:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	@ 0x6f0
 80012b8:	f8d7 26f4 	ldr.w	r2, [r7, #1780]	@ 0x6f4
 80012bc:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 80012c0:	f8d7 06fc 	ldr.w	r0, [r7, #1788]	@ 0x6fc
 80012c4:	f000 fea2 	bl	800200c <ota_handle_incoming_mqtt_message>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f887 36ef 	strb.w	r3, [r7, #1775]	@ 0x6ef
                                    (char*)topic, topic_len,
                                    (char*)payload, payload_len);

        if (!message_handled)
 80012ce:	f897 36ef 	ldrb.w	r3, [r7, #1775]	@ 0x6ef
 80012d2:	f083 0301 	eor.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d024      	beq.n	8001326 <mqtt_receive_task+0x14a>
        {
            LogError(("mqtt_receive_task: unhandled message on %.*s",
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <mqtt_receive_task+0x154>)
 80012de:	2386      	movs	r3, #134	@ 0x86
 80012e0:	4914      	ldr	r1, [pc, #80]	@ (8001334 <mqtt_receive_task+0x158>)
 80012e2:	4815      	ldr	r0, [pc, #84]	@ (8001338 <mqtt_receive_task+0x15c>)
 80012e4:	f00f fcec 	bl	8010cc0 <iprintf>
 80012e8:	f8d7 36f8 	ldr.w	r3, [r7, #1784]	@ 0x6f8
 80012ec:	f8d7 26fc 	ldr.w	r2, [r7, #1788]	@ 0x6fc
 80012f0:	4619      	mov	r1, r3
 80012f2:	4814      	ldr	r0, [pc, #80]	@ (8001344 <mqtt_receive_task+0x168>)
 80012f4:	f00f fce4 	bl	8010cc0 <iprintf>
 80012f8:	4811      	ldr	r0, [pc, #68]	@ (8001340 <mqtt_receive_task+0x164>)
 80012fa:	f00f fd49 	bl	8010d90 <puts>
    {
 80012fe:	e012      	b.n	8001326 <mqtt_receive_task+0x14a>
                      (int)topic_len, topic));
        }
    }
    else
    {
        LogWarn(("mqtt_receive_task: op=%d ignored or empty message",
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <mqtt_receive_task+0x154>)
 8001302:	238c      	movs	r3, #140	@ 0x8c
 8001304:	490b      	ldr	r1, [pc, #44]	@ (8001334 <mqtt_receive_task+0x158>)
 8001306:	4810      	ldr	r0, [pc, #64]	@ (8001348 <mqtt_receive_task+0x16c>)
 8001308:	f00f fcda 	bl	8010cc0 <iprintf>
 800130c:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8001310:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <mqtt_receive_task+0x170>)
 800131a:	f00f fcd1 	bl	8010cc0 <iprintf>
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <mqtt_receive_task+0x164>)
 8001320:	f00f fd36 	bl	8010d90 <puts>
 8001324:	e76e      	b.n	8001204 <mqtt_receive_task+0x28>
    {
 8001326:	bf00      	nop
    xQueueReceive(mqtt_rx_queue, &item, portMAX_DELAY);
 8001328:	e76c      	b.n	8001204 <mqtt_receive_task+0x28>
 800132a:	bf00      	nop
 800132c:	20000340 	.word	0x20000340
 8001330:	0801494c 	.word	0x0801494c
 8001334:	08014954 	.word	0x08014954
 8001338:	08014960 	.word	0x08014960
 800133c:	080149c0 	.word	0x080149c0
 8001340:	08014990 	.word	0x08014990
 8001344:	080149e4 	.word	0x080149e4
 8001348:	08014a14 	.word	0x08014a14
 800134c:	08014a2c 	.word	0x08014a2c

08001350 <at_cmd_handle_task>:
}



void at_cmd_handle_task(void *parameters)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	f6ad 5dec 	subw	sp, sp, #3564	@ 0xdec
 8001356:	af02      	add	r7, sp, #8
 8001358:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 800135c:	f6a3 53dc 	subw	r3, r3, #3548	@ 0xddc
 8001360:	6018      	str	r0, [r3, #0]
    (void)parameters;

    mqtt_queue_item_t   tx_item, rx_item = { 0 };
 8001362:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001366:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 800136a:	4618      	mov	r0, r3
 800136c:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f00f fe9c 	bl	80110b0 <memset>
    mqtt_status_t       mqtt_result      = MQTT_ERROR;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3ddf 	strb.w	r3, [r7, #3551]	@ 0xddf
    mqtt_receive_t      incoming_data    = { 0 };
 800137e:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001382:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 8001386:	461a      	mov	r2, r3
 8001388:	2300      	movs	r3, #0
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	6053      	str	r3, [r2, #4]
 800138e:	6093      	str	r3, [r2, #8]
 8001390:	60d3      	str	r3, [r2, #12]

    /* Static buffers reused for every incoming MQTT frame */
    static char topic_buf  [ MAX_MQTT_TOPIC_SIZE   ] = { 0 };
    static char payload_buf[ MAX_MQTT_PAYLOAD_SIZE ] = { 0 };

    incoming_data.p_payload       = payload_buf;
 8001392:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001396:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 800139a:	4ab1      	ldr	r2, [pc, #708]	@ (8001660 <at_cmd_handle_task+0x310>)
 800139c:	609a      	str	r2, [r3, #8]
    incoming_data.p_topic         = topic_buf;
 800139e:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80013a2:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80013a6:	4aaf      	ldr	r2, [pc, #700]	@ (8001664 <at_cmd_handle_task+0x314>)
 80013a8:	601a      	str	r2, [r3, #0]
    incoming_data.topic_length    = 0;
 80013aa:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80013ae:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
    incoming_data.payload_length  = 0;
 80013b6:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80013ba:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]

    for ( ;; )
    {
        /* 1. De-queue MQTT TX queue */
        if (xQueueReceive(mqtt_tx_queue, &tx_item, 0) == pdPASS)
 80013c2:	4ba9      	ldr	r3, [pc, #676]	@ (8001668 <at_cmd_handle_task+0x318>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f207 61fc 	addw	r1, r7, #1788	@ 0x6fc
 80013ca:	2200      	movs	r2, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 f971 	bl	80086b4 <xQueueReceive>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 80a9 	bne.w	800152c <at_cmd_handle_task+0x1dc>
        {
            if (tx_item.operation == MQTT_OPERATION_PUBLISH)
 80013da:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80013de:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d157      	bne.n	8001498 <at_cmd_handle_task+0x148>
            {
                /* 2. Issue MQTT PUBLISH via AT command */
                mqtt_result = mqtt_publish(tx_item.topic,   tx_item.topic_length,
 80013e8:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80013ec:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80013f0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80013f4:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80013f8:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80013fc:	f8d3 46dc 	ldr.w	r4, [r3, #1756]	@ 0x6dc
 8001400:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 8001404:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8001408:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 800140c:	1c58      	adds	r0, r3, #1
 800140e:	4623      	mov	r3, r4
 8001410:	f00e f966 	bl	800f6e0 <mqtt_publish>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 3ddf 	strb.w	r3, [r7, #3551]	@ 0xddf
                                           tx_item.payload, tx_item.payload_length);

                if (mqtt_result == MQTT_SUCCESS)
 800141a:	f897 3ddf 	ldrb.w	r3, [r7, #3551]	@ 0xddf
 800141e:	2b01      	cmp	r3, #1
 8001420:	d122      	bne.n	8001468 <at_cmd_handle_task+0x118>
                {
                    LogInfo(("MQTT Publish successful: Topic='%.*s', Payload='%.*s'",
 8001422:	4a92      	ldr	r2, [pc, #584]	@ (800166c <at_cmd_handle_task+0x31c>)
 8001424:	23b2      	movs	r3, #178	@ 0xb2
 8001426:	4992      	ldr	r1, [pc, #584]	@ (8001670 <at_cmd_handle_task+0x320>)
 8001428:	4892      	ldr	r0, [pc, #584]	@ (8001674 <at_cmd_handle_task+0x324>)
 800142a:	f00f fc49 	bl	8010cc0 <iprintf>
 800142e:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001432:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 8001436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800143a:	4619      	mov	r1, r3
 800143c:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001440:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 8001444:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 8001448:	4618      	mov	r0, r3
 800144a:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 8001454:	339c      	adds	r3, #156	@ 0x9c
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4603      	mov	r3, r0
 800145a:	4887      	ldr	r0, [pc, #540]	@ (8001678 <at_cmd_handle_task+0x328>)
 800145c:	f00f fc30 	bl	8010cc0 <iprintf>
 8001460:	4886      	ldr	r0, [pc, #536]	@ (800167c <at_cmd_handle_task+0x32c>)
 8001462:	f00f fc95 	bl	8010d90 <puts>
 8001466:	e061      	b.n	800152c <at_cmd_handle_task+0x1dc>
                             (int)tx_item.topic_length,  tx_item.topic,
                             (int)tx_item.payload_length, (char *)tx_item.payload));
                }
                else
                {
                    LogError(("MQTT Publish failed: Topic='%.*s'",
 8001468:	4a80      	ldr	r2, [pc, #512]	@ (800166c <at_cmd_handle_task+0x31c>)
 800146a:	23b8      	movs	r3, #184	@ 0xb8
 800146c:	4980      	ldr	r1, [pc, #512]	@ (8001670 <at_cmd_handle_task+0x320>)
 800146e:	4884      	ldr	r0, [pc, #528]	@ (8001680 <at_cmd_handle_task+0x330>)
 8001470:	f00f fc26 	bl	8010cc0 <iprintf>
 8001474:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001478:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 800147c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001480:	4619      	mov	r1, r3
 8001482:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 8001486:	3301      	adds	r3, #1
 8001488:	461a      	mov	r2, r3
 800148a:	487e      	ldr	r0, [pc, #504]	@ (8001684 <at_cmd_handle_task+0x334>)
 800148c:	f00f fc18 	bl	8010cc0 <iprintf>
 8001490:	487a      	ldr	r0, [pc, #488]	@ (800167c <at_cmd_handle_task+0x32c>)
 8001492:	f00f fc7d 	bl	8010d90 <puts>
 8001496:	e049      	b.n	800152c <at_cmd_handle_task+0x1dc>
                              (int)tx_item.topic_length, tx_item.topic));
                }
            }
            else if (tx_item.operation == MQTT_OPERATION_SUBSCRIBE)
 8001498:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 800149c:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d142      	bne.n	800152c <at_cmd_handle_task+0x1dc>
            {
                /* 2. Issue MQTT SUBSCRIBE via AT command */
                mqtt_result = mqtt_subscribe(tx_item.topic, tx_item.topic_length);
 80014a6:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80014aa:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80014ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80014b2:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 80014b6:	3301      	adds	r3, #1
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00e f951 	bl	800f762 <mqtt_subscribe>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 3ddf 	strb.w	r3, [r7, #3551]	@ 0xddf

                if (mqtt_result == MQTT_SUCCESS)
 80014c6:	f897 3ddf 	ldrb.w	r3, [r7, #3551]	@ 0xddf
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d117      	bne.n	80014fe <at_cmd_handle_task+0x1ae>
                {
                    LogInfo(("MQTT Subscribe successful: Topic='%.*s'",
 80014ce:	4a67      	ldr	r2, [pc, #412]	@ (800166c <at_cmd_handle_task+0x31c>)
 80014d0:	23c3      	movs	r3, #195	@ 0xc3
 80014d2:	4967      	ldr	r1, [pc, #412]	@ (8001670 <at_cmd_handle_task+0x320>)
 80014d4:	4867      	ldr	r0, [pc, #412]	@ (8001674 <at_cmd_handle_task+0x324>)
 80014d6:	f00f fbf3 	bl	8010cc0 <iprintf>
 80014da:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80014de:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80014e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014e6:	4619      	mov	r1, r3
 80014e8:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 80014ec:	3301      	adds	r3, #1
 80014ee:	461a      	mov	r2, r3
 80014f0:	4865      	ldr	r0, [pc, #404]	@ (8001688 <at_cmd_handle_task+0x338>)
 80014f2:	f00f fbe5 	bl	8010cc0 <iprintf>
 80014f6:	4861      	ldr	r0, [pc, #388]	@ (800167c <at_cmd_handle_task+0x32c>)
 80014f8:	f00f fc4a 	bl	8010d90 <puts>
 80014fc:	e016      	b.n	800152c <at_cmd_handle_task+0x1dc>
                             (int)tx_item.topic_length, tx_item.topic));
                }
                else
                {
                    LogError(("MQTT Subscribe failed: Topic='%.*s'",
 80014fe:	4a5b      	ldr	r2, [pc, #364]	@ (800166c <at_cmd_handle_task+0x31c>)
 8001500:	23c8      	movs	r3, #200	@ 0xc8
 8001502:	495b      	ldr	r1, [pc, #364]	@ (8001670 <at_cmd_handle_task+0x320>)
 8001504:	485e      	ldr	r0, [pc, #376]	@ (8001680 <at_cmd_handle_task+0x330>)
 8001506:	f00f fbdb 	bl	8010cc0 <iprintf>
 800150a:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 800150e:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 8001512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001516:	4619      	mov	r1, r3
 8001518:	f207 63fc 	addw	r3, r7, #1788	@ 0x6fc
 800151c:	3301      	adds	r3, #1
 800151e:	461a      	mov	r2, r3
 8001520:	485a      	ldr	r0, [pc, #360]	@ (800168c <at_cmd_handle_task+0x33c>)
 8001522:	f00f fbcd 	bl	8010cc0 <iprintf>
 8001526:	4855      	ldr	r0, [pc, #340]	@ (800167c <at_cmd_handle_task+0x32c>)
 8001528:	f00f fc32 	bl	8010d90 <puts>
                }
            }
        }

        /* 3. Check for unsolicited MQTT data from ESP32 */
        esp32_status_t esp32_result = esp32_recv_mqtt_data(&incoming_data);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4618      	mov	r0, r3
 8001532:	f006 fa2b 	bl	800798c <esp32_recv_mqtt_data>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 3dde 	strb.w	r3, [r7, #3550]	@ 0xdde

        if (incoming_data.topic_length >= sizeof(rx_item.topic) &&
 800153c:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001540:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b95      	cmp	r3, #149	@ 0x95
 8001548:	d914      	bls.n	8001574 <at_cmd_handle_task+0x224>
            incoming_data.payload_length >= sizeof(rx_item.payload))
 800154a:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 800154e:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 8001552:	68db      	ldr	r3, [r3, #12]
        if (incoming_data.topic_length >= sizeof(rx_item.topic) &&
 8001554:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001558:	d30c      	bcc.n	8001574 <at_cmd_handle_task+0x224>
        {
            LogError(("ESP32 frame too large – discarded"));
 800155a:	4a44      	ldr	r2, [pc, #272]	@ (800166c <at_cmd_handle_task+0x31c>)
 800155c:	23d4      	movs	r3, #212	@ 0xd4
 800155e:	4944      	ldr	r1, [pc, #272]	@ (8001670 <at_cmd_handle_task+0x320>)
 8001560:	4847      	ldr	r0, [pc, #284]	@ (8001680 <at_cmd_handle_task+0x330>)
 8001562:	f00f fbad 	bl	8010cc0 <iprintf>
 8001566:	484a      	ldr	r0, [pc, #296]	@ (8001690 <at_cmd_handle_task+0x340>)
 8001568:	f00f fbaa 	bl	8010cc0 <iprintf>
 800156c:	4843      	ldr	r0, [pc, #268]	@ (800167c <at_cmd_handle_task+0x32c>)
 800156e:	f00f fc0f 	bl	8010d90 <puts>
            continue;
 8001572:	e073      	b.n	800165c <at_cmd_handle_task+0x30c>
        }

        if (esp32_result != ESP32_ERROR &&
 8001574:	f897 3dde 	ldrb.w	r3, [r7, #3550]	@ 0xdde
 8001578:	2b01      	cmp	r3, #1
 800157a:	f43f af22 	beq.w	80013c2 <at_cmd_handle_task+0x72>
            incoming_data.payload_length > 0 &&
 800157e:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001582:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 8001586:	68db      	ldr	r3, [r3, #12]
        if (esp32_result != ESP32_ERROR &&
 8001588:	2b00      	cmp	r3, #0
 800158a:	f43f af1a 	beq.w	80013c2 <at_cmd_handle_task+0x72>
            incoming_data.topic_length   > 0)
 800158e:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001592:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 8001596:	685b      	ldr	r3, [r3, #4]
            incoming_data.payload_length > 0 &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	f43f af12 	beq.w	80013c2 <at_cmd_handle_task+0x72>
        {
            rx_item.operation      = MQTT_OPERATION_RECEIVE;
 800159e:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015a2:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
            rx_item.payload_length = incoming_data.payload_length;
 80015aa:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015ae:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015b8:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80015bc:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
            rx_item.topic_length   = incoming_data.topic_length;
 80015c0:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015c4:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015ce:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80015d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

            memcpy(rx_item.payload, incoming_data.p_payload, incoming_data.payload_length);
 80015d6:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015da:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015e4:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	339c      	adds	r3, #156	@ 0x9c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00f fe46 	bl	8011282 <memcpy>
            memcpy(rx_item.topic,   incoming_data.p_topic,   incoming_data.topic_length);
 80015f6:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 80015fa:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 8001604:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	3301      	adds	r3, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f00f fe36 	bl	8011282 <memcpy>

            if (xQueueSend(mqtt_rx_queue, &rx_item, 0) == pdPASS)
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <at_cmd_handle_task+0x344>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f107 011c 	add.w	r1, r7, #28
 800161e:	2300      	movs	r3, #0
 8001620:	2200      	movs	r2, #0
 8001622:	f006 ff45 	bl	80084b0 <xQueueGenericSend>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	f47f aeca 	bne.w	80013c2 <at_cmd_handle_task+0x72>
            {
                LogInfo(("Queued MQTT receive: Topic='%.*s'",
 800162e:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <at_cmd_handle_task+0x31c>)
 8001630:	23e5      	movs	r3, #229	@ 0xe5
 8001632:	490f      	ldr	r1, [pc, #60]	@ (8001670 <at_cmd_handle_task+0x320>)
 8001634:	480f      	ldr	r0, [pc, #60]	@ (8001674 <at_cmd_handle_task+0x324>)
 8001636:	f00f fb43 	bl	8010cc0 <iprintf>
 800163a:	f507 635e 	add.w	r3, r7, #3552	@ 0xde0
 800163e:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 8001642:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001646:	4619      	mov	r1, r3
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	3301      	adds	r3, #1
 800164e:	461a      	mov	r2, r3
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <at_cmd_handle_task+0x348>)
 8001652:	f00f fb35 	bl	8010cc0 <iprintf>
 8001656:	4809      	ldr	r0, [pc, #36]	@ (800167c <at_cmd_handle_task+0x32c>)
 8001658:	f00f fb9a 	bl	8010d90 <puts>
    {
 800165c:	e6b1      	b.n	80013c2 <at_cmd_handle_task+0x72>
 800165e:	bf00      	nop
 8001660:	20000344 	.word	0x20000344
 8001664:	20000984 	.word	0x20000984
 8001668:	2000033c 	.word	0x2000033c
 800166c:	0801494c 	.word	0x0801494c
 8001670:	08014954 	.word	0x08014954
 8001674:	08014994 	.word	0x08014994
 8001678:	08014a60 	.word	0x08014a60
 800167c:	08014990 	.word	0x08014990
 8001680:	08014960 	.word	0x08014960
 8001684:	08014a98 	.word	0x08014a98
 8001688:	08014abc 	.word	0x08014abc
 800168c:	08014ae4 	.word	0x08014ae4
 8001690:	08014b08 	.word	0x08014b08
 8001694:	20000340 	.word	0x20000340
 8001698:	08014b2c 	.word	0x08014b2c

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b091      	sub	sp, #68	@ 0x44
 80016a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f001 fd53 	bl	800314c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f9c1 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f000 facd 	bl	8001c48 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ae:	f000 faab 	bl	8001c08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fa7f 	bl	8001bb4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80016b6:	f000 fa53 	bl	8001b60 <MX_UART4_Init>
  MX_I2C1_Init();
 80016ba:	f000 fa23 	bl	8001b04 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  /* Step 1:Initialize the ESP32 Wi-Fi module */
  LogInfo(("Initializing Wi-Fi module..."));
 80016be:	4aab      	ldr	r2, [pc, #684]	@ (800196c <main+0x2d0>)
 80016c0:	f240 1313 	movw	r3, #275	@ 0x113
 80016c4:	49aa      	ldr	r1, [pc, #680]	@ (8001970 <main+0x2d4>)
 80016c6:	48ab      	ldr	r0, [pc, #684]	@ (8001974 <main+0x2d8>)
 80016c8:	f00f fafa 	bl	8010cc0 <iprintf>
 80016cc:	48aa      	ldr	r0, [pc, #680]	@ (8001978 <main+0x2dc>)
 80016ce:	f00f faf7 	bl	8010cc0 <iprintf>
 80016d2:	48aa      	ldr	r0, [pc, #680]	@ (800197c <main+0x2e0>)
 80016d4:	f00f fb5c 	bl	8010d90 <puts>
  if (esp32_init() != ESP32_OK) {
 80016d8:	f005 febe 	bl	8007458 <esp32_init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00e      	beq.n	8001700 <main+0x64>
    LogError(("Failed to initialize Wi-Fi module."));
 80016e2:	4aa2      	ldr	r2, [pc, #648]	@ (800196c <main+0x2d0>)
 80016e4:	f240 1315 	movw	r3, #277	@ 0x115
 80016e8:	49a1      	ldr	r1, [pc, #644]	@ (8001970 <main+0x2d4>)
 80016ea:	48a5      	ldr	r0, [pc, #660]	@ (8001980 <main+0x2e4>)
 80016ec:	f00f fae8 	bl	8010cc0 <iprintf>
 80016f0:	48a4      	ldr	r0, [pc, #656]	@ (8001984 <main+0x2e8>)
 80016f2:	f00f fae5 	bl	8010cc0 <iprintf>
 80016f6:	48a1      	ldr	r0, [pc, #644]	@ (800197c <main+0x2e0>)
 80016f8:	f00f fb4a 	bl	8010d90 <puts>
    Error_Handler();
 80016fc:	f000 fb38 	bl	8001d70 <Error_Handler>
  }
  LogInfo(("Wi-Fi module initialized successfully.\n"));
 8001700:	4a9a      	ldr	r2, [pc, #616]	@ (800196c <main+0x2d0>)
 8001702:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001706:	499a      	ldr	r1, [pc, #616]	@ (8001970 <main+0x2d4>)
 8001708:	489a      	ldr	r0, [pc, #616]	@ (8001974 <main+0x2d8>)
 800170a:	f00f fad9 	bl	8010cc0 <iprintf>
 800170e:	489e      	ldr	r0, [pc, #632]	@ (8001988 <main+0x2ec>)
 8001710:	f00f fb3e 	bl	8010d90 <puts>
 8001714:	4899      	ldr	r0, [pc, #612]	@ (800197c <main+0x2e0>)
 8001716:	f00f fb3b 	bl	8010d90 <puts>


  /* Step 2: Connect to Wi-Fi network*/
  LogInfo(("Joining Access Point: '%s' ...", WIFI_SSID));
 800171a:	4a94      	ldr	r2, [pc, #592]	@ (800196c <main+0x2d0>)
 800171c:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 8001720:	4993      	ldr	r1, [pc, #588]	@ (8001970 <main+0x2d4>)
 8001722:	4894      	ldr	r0, [pc, #592]	@ (8001974 <main+0x2d8>)
 8001724:	f00f facc 	bl	8010cc0 <iprintf>
 8001728:	4998      	ldr	r1, [pc, #608]	@ (800198c <main+0x2f0>)
 800172a:	4899      	ldr	r0, [pc, #612]	@ (8001990 <main+0x2f4>)
 800172c:	f00f fac8 	bl	8010cc0 <iprintf>
 8001730:	4892      	ldr	r0, [pc, #584]	@ (800197c <main+0x2e0>)
 8001732:	f00f fb2d 	bl	8010d90 <puts>
  /* Keep attempting to connect to the specified Wi-Fi access point until
   * successful */
  while (esp32_join_ap((uint8_t *)WIFI_SSID, (uint8_t *)WIFI_PASSWORD) !=
 8001736:	e00d      	b.n	8001754 <main+0xb8>
         ESP32_OK) {
    LogInfo(("Retrying to join Access Point: %s", WIFI_SSID));
 8001738:	4a8c      	ldr	r2, [pc, #560]	@ (800196c <main+0x2d0>)
 800173a:	f240 1321 	movw	r3, #289	@ 0x121
 800173e:	498c      	ldr	r1, [pc, #560]	@ (8001970 <main+0x2d4>)
 8001740:	488c      	ldr	r0, [pc, #560]	@ (8001974 <main+0x2d8>)
 8001742:	f00f fabd 	bl	8010cc0 <iprintf>
 8001746:	4991      	ldr	r1, [pc, #580]	@ (800198c <main+0x2f0>)
 8001748:	4892      	ldr	r0, [pc, #584]	@ (8001994 <main+0x2f8>)
 800174a:	f00f fab9 	bl	8010cc0 <iprintf>
 800174e:	488b      	ldr	r0, [pc, #556]	@ (800197c <main+0x2e0>)
 8001750:	f00f fb1e 	bl	8010d90 <puts>
  while (esp32_join_ap((uint8_t *)WIFI_SSID, (uint8_t *)WIFI_PASSWORD) !=
 8001754:	4990      	ldr	r1, [pc, #576]	@ (8001998 <main+0x2fc>)
 8001756:	488d      	ldr	r0, [pc, #564]	@ (800198c <main+0x2f0>)
 8001758:	f005 fecc 	bl	80074f4 <esp32_join_ap>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ea      	bne.n	8001738 <main+0x9c>
  }
  LogInfo(("Successfully joined Access Point: %s", WIFI_SSID));
 8001762:	4a82      	ldr	r2, [pc, #520]	@ (800196c <main+0x2d0>)
 8001764:	f240 1323 	movw	r3, #291	@ 0x123
 8001768:	4981      	ldr	r1, [pc, #516]	@ (8001970 <main+0x2d4>)
 800176a:	4882      	ldr	r0, [pc, #520]	@ (8001974 <main+0x2d8>)
 800176c:	f00f faa8 	bl	8010cc0 <iprintf>
 8001770:	4986      	ldr	r1, [pc, #536]	@ (800198c <main+0x2f0>)
 8001772:	488a      	ldr	r0, [pc, #552]	@ (800199c <main+0x300>)
 8001774:	f00f faa4 	bl	8010cc0 <iprintf>
 8001778:	4880      	ldr	r0, [pc, #512]	@ (800197c <main+0x2e0>)
 800177a:	f00f fb09 	bl	8010d90 <puts>

  /* Step 3: Configure SNTP for time synchronization */
  /* Configure Simple Network Time Protocol (SNTP) with a specified server */
  if (esp32_config_sntp(UTC_OFFSET) != ESP32_OK) {
 800177e:	f240 2012 	movw	r0, #530	@ 0x212
 8001782:	f005 fee3 	bl	800754c <esp32_config_sntp>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00e      	beq.n	80017aa <main+0x10e>
    LogError(("Failed to configure SNTP."));
 800178c:	4a77      	ldr	r2, [pc, #476]	@ (800196c <main+0x2d0>)
 800178e:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8001792:	4977      	ldr	r1, [pc, #476]	@ (8001970 <main+0x2d4>)
 8001794:	487a      	ldr	r0, [pc, #488]	@ (8001980 <main+0x2e4>)
 8001796:	f00f fa93 	bl	8010cc0 <iprintf>
 800179a:	4881      	ldr	r0, [pc, #516]	@ (80019a0 <main+0x304>)
 800179c:	f00f fa90 	bl	8010cc0 <iprintf>
 80017a0:	4876      	ldr	r0, [pc, #472]	@ (800197c <main+0x2e0>)
 80017a2:	f00f faf5 	bl	8010d90 <puts>
    Error_Handler();
 80017a6:	f000 fae3 	bl	8001d70 <Error_Handler>
  }
  LogInfo(("SNTP configured !"));
 80017aa:	4a70      	ldr	r2, [pc, #448]	@ (800196c <main+0x2d0>)
 80017ac:	f240 132b 	movw	r3, #299	@ 0x12b
 80017b0:	496f      	ldr	r1, [pc, #444]	@ (8001970 <main+0x2d4>)
 80017b2:	4870      	ldr	r0, [pc, #448]	@ (8001974 <main+0x2d8>)
 80017b4:	f00f fa84 	bl	8010cc0 <iprintf>
 80017b8:	487a      	ldr	r0, [pc, #488]	@ (80019a4 <main+0x308>)
 80017ba:	f00f fa81 	bl	8010cc0 <iprintf>
 80017be:	486f      	ldr	r0, [pc, #444]	@ (800197c <main+0x2e0>)
 80017c0:	f00f fae6 	bl	8010d90 <puts>

  /* Retrieve the current time from SNTP */
  sntp_time_t sntp_time;
  if (esp32_get_sntp_time(&sntp_time) != ESP32_OK) {
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fef4 	bl	80075b4 <esp32_get_sntp_time>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00e      	beq.n	80017f0 <main+0x154>
    LogError(("Failed to retrieve current time from SNTP."));
 80017d2:	4a66      	ldr	r2, [pc, #408]	@ (800196c <main+0x2d0>)
 80017d4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80017d8:	4965      	ldr	r1, [pc, #404]	@ (8001970 <main+0x2d4>)
 80017da:	4869      	ldr	r0, [pc, #420]	@ (8001980 <main+0x2e4>)
 80017dc:	f00f fa70 	bl	8010cc0 <iprintf>
 80017e0:	4871      	ldr	r0, [pc, #452]	@ (80019a8 <main+0x30c>)
 80017e2:	f00f fa6d 	bl	8010cc0 <iprintf>
 80017e6:	4865      	ldr	r0, [pc, #404]	@ (800197c <main+0x2e0>)
 80017e8:	f00f fad2 	bl	8010d90 <puts>
    Error_Handler();
 80017ec:	f000 fac0 	bl	8001d70 <Error_Handler>
  }
  LogInfo(("SNTP time retrieved: %s, %02d %s %04d %02d:%02d:%02d",
 80017f0:	4a5e      	ldr	r2, [pc, #376]	@ (800196c <main+0x2d0>)
 80017f2:	f240 1333 	movw	r3, #307	@ 0x133
 80017f6:	495e      	ldr	r1, [pc, #376]	@ (8001970 <main+0x2d4>)
 80017f8:	485e      	ldr	r0, [pc, #376]	@ (8001974 <main+0x2d8>)
 80017fa:	f00f fa61 	bl	8010cc0 <iprintf>
 80017fe:	68fd      	ldr	r5, [r7, #12]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	69f8      	ldr	r0, [r7, #28]
 8001808:	1d3c      	adds	r4, r7, #4
 800180a:	1d26      	adds	r6, r4, #4
 800180c:	1d3c      	adds	r4, r7, #4
 800180e:	9003      	str	r0, [sp, #12]
 8001810:	9102      	str	r1, [sp, #8]
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	4633      	mov	r3, r6
 8001818:	462a      	mov	r2, r5
 800181a:	4621      	mov	r1, r4
 800181c:	4863      	ldr	r0, [pc, #396]	@ (80019ac <main+0x310>)
 800181e:	f00f fa4f 	bl	8010cc0 <iprintf>
 8001822:	4856      	ldr	r0, [pc, #344]	@ (800197c <main+0x2e0>)
 8001824:	f00f fab4 	bl	8010d90 <puts>
           sntp_time.day, sntp_time.date, sntp_time.month, sntp_time.year,
           sntp_time.hour, sntp_time.min, sntp_time.sec));


  /*  Step 4: Configure the MQTT client and establish the connection */
  LogInfo(("Connecting to MQTT broker at %s:%d...", MQTT_BROKER, MQTT_PORT));
 8001828:	4a50      	ldr	r2, [pc, #320]	@ (800196c <main+0x2d0>)
 800182a:	f240 1339 	movw	r3, #313	@ 0x139
 800182e:	4950      	ldr	r1, [pc, #320]	@ (8001970 <main+0x2d4>)
 8001830:	4850      	ldr	r0, [pc, #320]	@ (8001974 <main+0x2d8>)
 8001832:	f00f fa45 	bl	8010cc0 <iprintf>
 8001836:	f242 22b3 	movw	r2, #8883	@ 0x22b3
 800183a:	495d      	ldr	r1, [pc, #372]	@ (80019b0 <main+0x314>)
 800183c:	485d      	ldr	r0, [pc, #372]	@ (80019b4 <main+0x318>)
 800183e:	f00f fa3f 	bl	8010cc0 <iprintf>
 8001842:	484e      	ldr	r0, [pc, #312]	@ (800197c <main+0x2e0>)
 8001844:	f00f faa4 	bl	8010d90 <puts>
  if (mqtt_connect(CLIENT_ID, MQTT_BROKER, MQTT_PORT) != MQTT_SUCCESS) {
 8001848:	f242 22b3 	movw	r2, #8883	@ 0x22b3
 800184c:	4958      	ldr	r1, [pc, #352]	@ (80019b0 <main+0x314>)
 800184e:	485a      	ldr	r0, [pc, #360]	@ (80019b8 <main+0x31c>)
 8001850:	f00d fed2 	bl	800f5f8 <mqtt_connect>
 8001854:	4603      	mov	r3, r0
 8001856:	2b01      	cmp	r3, #1
 8001858:	d00e      	beq.n	8001878 <main+0x1dc>
    LogError(("MQTT connection failed."));
 800185a:	4a44      	ldr	r2, [pc, #272]	@ (800196c <main+0x2d0>)
 800185c:	f240 133b 	movw	r3, #315	@ 0x13b
 8001860:	4943      	ldr	r1, [pc, #268]	@ (8001970 <main+0x2d4>)
 8001862:	4847      	ldr	r0, [pc, #284]	@ (8001980 <main+0x2e4>)
 8001864:	f00f fa2c 	bl	8010cc0 <iprintf>
 8001868:	4854      	ldr	r0, [pc, #336]	@ (80019bc <main+0x320>)
 800186a:	f00f fa29 	bl	8010cc0 <iprintf>
 800186e:	4843      	ldr	r0, [pc, #268]	@ (800197c <main+0x2e0>)
 8001870:	f00f fa8e 	bl	8010d90 <puts>
    Error_Handler();
 8001874:	f000 fa7c 	bl	8001d70 <Error_Handler>
  }
  LogInfo(("Successfully connected to MQTT broker: %s", MQTT_BROKER));
 8001878:	4a3c      	ldr	r2, [pc, #240]	@ (800196c <main+0x2d0>)
 800187a:	f44f 739f 	mov.w	r3, #318	@ 0x13e
 800187e:	493c      	ldr	r1, [pc, #240]	@ (8001970 <main+0x2d4>)
 8001880:	483c      	ldr	r0, [pc, #240]	@ (8001974 <main+0x2d8>)
 8001882:	f00f fa1d 	bl	8010cc0 <iprintf>
 8001886:	494a      	ldr	r1, [pc, #296]	@ (80019b0 <main+0x314>)
 8001888:	484d      	ldr	r0, [pc, #308]	@ (80019c0 <main+0x324>)
 800188a:	f00f fa19 	bl	8010cc0 <iprintf>
 800188e:	483b      	ldr	r0, [pc, #236]	@ (800197c <main+0x2e0>)
 8001890:	f00f fa7e 	bl	8010d90 <puts>


  /* Create queues */
  mqtt_tx_queue = xQueueCreate(5, sizeof(mqtt_queue_item_t));
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
 800189a:	2005      	movs	r0, #5
 800189c:	f006 fd95 	bl	80083ca <xQueueGenericCreate>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a48      	ldr	r2, [pc, #288]	@ (80019c4 <main+0x328>)
 80018a4:	6013      	str	r3, [r2, #0]
  mqtt_rx_queue = xQueueCreate(5, sizeof(mqtt_queue_item_t));
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
 80018ac:	2005      	movs	r0, #5
 80018ae:	f006 fd8c 	bl	80083ca <xQueueGenericCreate>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a44      	ldr	r2, [pc, #272]	@ (80019c8 <main+0x32c>)
 80018b6:	6013      	str	r3, [r2, #0]
  if (mqtt_tx_queue == NULL || mqtt_rx_queue == NULL) {
 80018b8:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <main+0x328>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <main+0x22c>
 80018c0:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <main+0x32c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10f      	bne.n	80018e8 <main+0x24c>
    LogError(("Queue creation failed."));
 80018c8:	4a28      	ldr	r2, [pc, #160]	@ (800196c <main+0x2d0>)
 80018ca:	f240 1345 	movw	r3, #325	@ 0x145
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <main+0x2d4>)
 80018d0:	482b      	ldr	r0, [pc, #172]	@ (8001980 <main+0x2e4>)
 80018d2:	f00f f9f5 	bl	8010cc0 <iprintf>
 80018d6:	483d      	ldr	r0, [pc, #244]	@ (80019cc <main+0x330>)
 80018d8:	f00f f9f2 	bl	8010cc0 <iprintf>
 80018dc:	4827      	ldr	r0, [pc, #156]	@ (800197c <main+0x2e0>)
 80018de:	f00f fa57 	bl	8010d90 <puts>
    Error_Handler();
 80018e2:	f000 fa45 	bl	8001d70 <Error_Handler>
 80018e6:	e00c      	b.n	8001902 <main+0x266>
  } else {
    LogInfo(("MQTT TX and RX queues created successfully."));
 80018e8:	4a20      	ldr	r2, [pc, #128]	@ (800196c <main+0x2d0>)
 80018ea:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 80018ee:	4920      	ldr	r1, [pc, #128]	@ (8001970 <main+0x2d4>)
 80018f0:	4820      	ldr	r0, [pc, #128]	@ (8001974 <main+0x2d8>)
 80018f2:	f00f f9e5 	bl	8010cc0 <iprintf>
 80018f6:	4836      	ldr	r0, [pc, #216]	@ (80019d0 <main+0x334>)
 80018f8:	f00f f9e2 	bl	8010cc0 <iprintf>
 80018fc:	481f      	ldr	r0, [pc, #124]	@ (800197c <main+0x2e0>)
 80018fe:	f00f fa47 	bl	8010d90 <puts>

  //create 3 freertos tasks

  BaseType_t status;

  status = xTaskCreate( ota_task, "OTA start", 128, NULL, 2, NULL );
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	2280      	movs	r2, #128	@ 0x80
 800190e:	4931      	ldr	r1, [pc, #196]	@ (80019d4 <main+0x338>)
 8001910:	4831      	ldr	r0, [pc, #196]	@ (80019d8 <main+0x33c>)
 8001912:	f007 f9ba 	bl	8008c8a <xTaskCreate>
 8001916:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	2b01      	cmp	r3, #1
 800191c:	d00b      	beq.n	8001936 <main+0x29a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800191e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001922:	f383 8811 	msr	BASEPRI, r3
 8001926:	f3bf 8f6f 	isb	sy
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	e7fd      	b.n	8001932 <main+0x296>

  status = xTaskCreate(mqtt_receive_task, "Receive sensor data", 2048,
 8001936:	2300      	movs	r3, #0
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2302      	movs	r3, #2
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001944:	4925      	ldr	r1, [pc, #148]	@ (80019dc <main+0x340>)
 8001946:	4826      	ldr	r0, [pc, #152]	@ (80019e0 <main+0x344>)
 8001948:	f007 f99f 	bl	8008c8a <xTaskCreate>
 800194c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                       NULL, 2, NULL);
  configASSERT(status == pdPASS);
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	2b01      	cmp	r3, #1
 8001952:	d047      	beq.n	80019e4 <main+0x348>
    __asm volatile
 8001954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <main+0x2cc>
 800196c:	0801494c 	.word	0x0801494c
 8001970:	08014954 	.word	0x08014954
 8001974:	08014994 	.word	0x08014994
 8001978:	08014b50 	.word	0x08014b50
 800197c:	08014990 	.word	0x08014990
 8001980:	08014960 	.word	0x08014960
 8001984:	08014b70 	.word	0x08014b70
 8001988:	08014b94 	.word	0x08014b94
 800198c:	08014bbc 	.word	0x08014bbc
 8001990:	08014bd0 	.word	0x08014bd0
 8001994:	08014bf0 	.word	0x08014bf0
 8001998:	08014c14 	.word	0x08014c14
 800199c:	08014c20 	.word	0x08014c20
 80019a0:	08014c48 	.word	0x08014c48
 80019a4:	08014c64 	.word	0x08014c64
 80019a8:	08014c78 	.word	0x08014c78
 80019ac:	08014ca4 	.word	0x08014ca4
 80019b0:	08014cdc 	.word	0x08014cdc
 80019b4:	08014d0c 	.word	0x08014d0c
 80019b8:	08014d34 	.word	0x08014d34
 80019bc:	08014d44 	.word	0x08014d44
 80019c0:	08014d5c 	.word	0x08014d5c
 80019c4:	2000033c 	.word	0x2000033c
 80019c8:	20000340 	.word	0x20000340
 80019cc:	08014d88 	.word	0x08014d88
 80019d0:	08014da0 	.word	0x08014da0
 80019d4:	08014dcc 	.word	0x08014dcc
 80019d8:	08001161 	.word	0x08001161
 80019dc:	08014dd8 	.word	0x08014dd8
 80019e0:	080011dd 	.word	0x080011dd

  status = xTaskCreate(at_cmd_handle_task, "MQTT send and receive", 2048, NULL,
 80019e4:	2300      	movs	r3, #0
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	2301      	movs	r3, #1
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2300      	movs	r3, #0
 80019ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019f2:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <main+0x388>)
 80019f4:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <main+0x38c>)
 80019f6:	f007 f948 	bl	8008c8a <xTaskCreate>
 80019fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                       1, NULL);
  configASSERT(status == pdPASS);
 80019fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00b      	beq.n	8001a1a <main+0x37e>
    __asm volatile
 8001a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	623b      	str	r3, [r7, #32]
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	e7fd      	b.n	8001a16 <main+0x37a>


  vTaskStartScheduler();
 8001a1a:	f007 fbbd 	bl	8009198 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <main+0x382>
 8001a22:	bf00      	nop
 8001a24:	08014dec 	.word	0x08014dec
 8001a28:	08001351 	.word	0x08001351

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	@ 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2234      	movs	r2, #52	@ 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00f fb38 	bl	80110b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <SystemClock_Config+0xd0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a28      	ldr	r2, [pc, #160]	@ (8001afc <SystemClock_Config+0xd0>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <SystemClock_Config+0xd0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <SystemClock_Config+0xd4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <SystemClock_Config+0xd4>)
 8001a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <SystemClock_Config+0xd4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2310      	movs	r3, #16
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001aa0:	23a0      	movs	r3, #160	@ 0xa0
 8001aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fcb3 	bl	8005420 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac0:	f000 f956 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ad0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ad4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f828 	bl	8004b38 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aee:	f000 f93f 	bl	8001d70 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	@ 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b0a:	4a13      	ldr	r2, [pc, #76]	@ (8001b58 <MX_I2C1_Init+0x54>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <MX_I2C1_Init+0x58>)
 8001b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b42:	f002 feb5 	bl	80048b0 <HAL_I2C_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b4c:	f000 f910 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200001f8 	.word	0x200001f8
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <MX_UART4_Init+0x50>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	@ (8001bac <MX_UART4_Init+0x4c>)
 8001b98:	f004 f97c 	bl	8005e94 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ba2:	f000 f8e5 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000024c 	.word	0x2000024c
 8001bb0:	40004c00 	.word	0x40004c00

08001bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <MX_USART2_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bec:	f004 f952 	bl	8005e94 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bf6:	f000 f8bb 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000294 	.word	0x20000294
 8001c04:	40004400 	.word	0x40004400

08001c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_DMA_Init+0x3c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <MX_DMA_Init+0x3c>)
 8001c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_DMA_Init+0x3c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	200d      	movs	r0, #13
 8001c30:	f001 fc1b 	bl	800346a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c34:	200d      	movs	r0, #13
 8001c36:	f001 fc34 	bl	80034a2 <HAL_NVIC_EnableIRQ>

}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a28      	ldr	r2, [pc, #160]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_GPIO_Init+0xf8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PURPLE_LED_Pin|EMERALD_LED_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <MX_GPIO_Init+0xfc>)
 8001cd4:	f002 fdd2 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2120      	movs	r1, #32
 8001cdc:	481a      	ldr	r0, [pc, #104]	@ (8001d48 <MX_GPIO_Init+0x100>)
 8001cde:	f002 fdcd 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <MX_GPIO_Init+0xfc>)
 8001cfa:	f002 fb37 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pins : PURPLE_LED_Pin EMERALD_LED_Pin */
  GPIO_InitStruct.Pin = PURPLE_LED_Pin|EMERALD_LED_Pin;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <MX_GPIO_Init+0xfc>)
 8001d16:	f002 fb29 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <MX_GPIO_Init+0x100>)
 8001d32:	f002 fb1b 	bl	800436c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001d5e:	f001 fa4d 	bl	80031fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40001000 	.word	0x40001000

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <Error_Handler+0x8>

08001d7c <ota_start>:
static bool job_handler_chain( char * message,
                            size_t message_length );

extern QueueHandle_t mqtt_tx_queue;

OTA_Status_t  ota_start( void ) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	f6ad 7d68 	subw	sp, sp, #3944	@ 0xf68
 8001d82:	af02      	add	r7, sp, #8

  char topic_buf[ TOPIC_BUFFER_SIZE + 1 ] = { 0 };
 8001d84:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f240 1301 	movw	r3, #257	@ 0x101
 8001d92:	461a      	mov	r2, r3
 8001d94:	2100      	movs	r1, #0
 8001d96:	f00f f98b 	bl	80110b0 <memset>
  char msg_buf  [ START_JOB_MSG_LENGTH   ] = { 0 };
 8001d9a:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001d9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001da2:	4618      	mov	r0, r3
 8001da4:	2393      	movs	r3, #147	@ 0x93
 8001da6:	461a      	mov	r2, r3
 8001da8:	2100      	movs	r1, #0
 8001daa:	f00f f981 	bl	80110b0 <memset>
  size_t topic_len, msg_len;
  mqtt_queue_item_t sub_item = { 0 }, pub_item = { 0 };
 8001dae:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001db2:	f5a3 6308 	sub.w	r3, r3, #2176	@ 0x880
 8001db6:	4618      	mov	r0, r3
 8001db8:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	f00f f976 	bl	80110b0 <memset>
 8001dc4:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001dc8:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f00f f96b 	bl	80110b0 <memset>

  /*
  * Subscribe to the AWS IoT Jobs notify-next topic.
  * This will passively receive job details when a new job is created for this thing.
  */
  topic_len = snprintf(topic_buf, sizeof(topic_buf),
 8001dda:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 8001dde:	4a7e      	ldr	r2, [pc, #504]	@ (8001fd8 <ota_start+0x25c>)
 8001de0:	f240 1101 	movw	r1, #257	@ 0x101
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00e ffdb 	bl	8010da0 <sniprintf>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001df2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001df6:	601a      	str	r2, [r3, #0]
                      JOBS_API_SUBSCRIBE_NEXTJOBCHANGED(CLIENT_ID));

  if (topic_len >= sizeof(topic_buf)) {
 8001df8:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001dfc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e06:	d90e      	bls.n	8001e26 <ota_start+0xaa>
     LogError(("Subscribe topic truncated"));
 8001e08:	4a74      	ldr	r2, [pc, #464]	@ (8001fdc <ota_start+0x260>)
 8001e0a:	2342      	movs	r3, #66	@ 0x42
 8001e0c:	4974      	ldr	r1, [pc, #464]	@ (8001fe0 <ota_start+0x264>)
 8001e0e:	4875      	ldr	r0, [pc, #468]	@ (8001fe4 <ota_start+0x268>)
 8001e10:	f00e ff56 	bl	8010cc0 <iprintf>
 8001e14:	4874      	ldr	r0, [pc, #464]	@ (8001fe8 <ota_start+0x26c>)
 8001e16:	f00e ff53 	bl	8010cc0 <iprintf>
 8001e1a:	4874      	ldr	r0, [pc, #464]	@ (8001fec <ota_start+0x270>)
 8001e1c:	f00e ffb8 	bl	8010d90 <puts>
     return OTA_ERR_TOPIC_TRUNC;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	e0d3      	b.n	8001fce <ota_start+0x252>
  }

  sub_item.operation    = MQTT_OPERATION_SUBSCRIBE;
 8001e26:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001e2a:	f5a3 6308 	sub.w	r3, r3, #2176	@ 0x880
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
  sub_item.topic_length = topic_len;
 8001e32:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001e36:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001e40:	f5a3 6308 	sub.w	r3, r3, #2176	@ 0x880
 8001e44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  memcpy(sub_item.topic, topic_buf, topic_len + 1U);
 8001e48:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001e4c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	f607 6158 	addw	r1, r7, #3672	@ 0xe58
 8001e58:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f00f fa0f 	bl	8011282 <memcpy>

  // Send SUBSCRIBE to MQTT TX queue
  if (xQueueSend(mqtt_tx_queue, &sub_item, 0) != pdPASS) {
 8001e64:	4b62      	ldr	r3, [pc, #392]	@ (8001ff0 <ota_start+0x274>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f507 61dc 	add.w	r1, r7, #1760	@ 0x6e0
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f006 fb1e 	bl	80084b0 <xQueueGenericSend>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00e      	beq.n	8001e98 <ota_start+0x11c>
      LogError(("SUBSCRIBE enqueue failed"));
 8001e7a:	4a58      	ldr	r2, [pc, #352]	@ (8001fdc <ota_start+0x260>)
 8001e7c:	234c      	movs	r3, #76	@ 0x4c
 8001e7e:	4958      	ldr	r1, [pc, #352]	@ (8001fe0 <ota_start+0x264>)
 8001e80:	4858      	ldr	r0, [pc, #352]	@ (8001fe4 <ota_start+0x268>)
 8001e82:	f00e ff1d 	bl	8010cc0 <iprintf>
 8001e86:	485b      	ldr	r0, [pc, #364]	@ (8001ff4 <ota_start+0x278>)
 8001e88:	f00e ff1a 	bl	8010cc0 <iprintf>
 8001e8c:	4857      	ldr	r0, [pc, #348]	@ (8001fec <ota_start+0x270>)
 8001e8e:	f00e ff7f 	bl	8010d90 <puts>
      return OTA_ERR_QUEUE_FULL;
 8001e92:	f06f 0303 	mvn.w	r3, #3
 8001e96:	e09a      	b.n	8001fce <ota_start+0x252>
  /*
  * AWS IoT Jobs library:
  * Creates the topic string for a StartNextPendingJobExecution request.
  * It used to check if any pending jobs are available.
  */
  if (Jobs_StartNext(topic_buf, sizeof(topic_buf),
 8001e98:	f607 6058 	addw	r0, r7, #3672	@ 0xe58
 8001e9c:	f507 635c 	add.w	r3, r7, #3520	@ 0xdc0
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	4a54      	ldr	r2, [pc, #336]	@ (8001ff8 <ota_start+0x27c>)
 8001ea6:	f240 1101 	movw	r1, #257	@ 0x101
 8001eaa:	f00a fbd9 	bl	800c660 <Jobs_StartNext>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d00e      	beq.n	8001ed2 <ota_start+0x156>
                    CLIENT_ID, strlen(CLIENT_ID),
                    &topic_len) != JobsSuccess)
  {
     LogError(("Jobs_StartNext failed"));
 8001eb4:	4a49      	ldr	r2, [pc, #292]	@ (8001fdc <ota_start+0x260>)
 8001eb6:	2359      	movs	r3, #89	@ 0x59
 8001eb8:	4949      	ldr	r1, [pc, #292]	@ (8001fe0 <ota_start+0x264>)
 8001eba:	484a      	ldr	r0, [pc, #296]	@ (8001fe4 <ota_start+0x268>)
 8001ebc:	f00e ff00 	bl	8010cc0 <iprintf>
 8001ec0:	484e      	ldr	r0, [pc, #312]	@ (8001ffc <ota_start+0x280>)
 8001ec2:	f00e fefd 	bl	8010cc0 <iprintf>
 8001ec6:	4849      	ldr	r0, [pc, #292]	@ (8001fec <ota_start+0x270>)
 8001ec8:	f00e ff62 	bl	8010d90 <puts>
     return OTA_ERR_TOPIC_BUILD;
 8001ecc:	f06f 0302 	mvn.w	r3, #2
 8001ed0:	e07d      	b.n	8001fce <ota_start+0x252>
  /*
  * AWS IoT Jobs library:
  * Creates the message string for a StartNextPendingJobExecution request.
  * It will be sent on the topic created in the previous step.
  */
  msg_len = Jobs_StartNextMsg(OTA_CLIENT_TOKEN,
 8001ed2:	f607 52c4 	addw	r2, r7, #3524	@ 0xdc4
 8001ed6:	2393      	movs	r3, #147	@ 0x93
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4849      	ldr	r0, [pc, #292]	@ (8002000 <ota_start+0x284>)
 8001edc:	f00a fc08 	bl	800c6f0 <Jobs_StartNextMsg>
 8001ee0:	f8c7 0f5c 	str.w	r0, [r7, #3932]	@ 0xf5c
                               sizeof(OTA_CLIENT_TOKEN) - 1U,
                               msg_buf, sizeof(msg_buf));

   if (msg_len > sizeof(msg_buf)) {
 8001ee4:	f8d7 3f5c 	ldr.w	r3, [r7, #3932]	@ 0xf5c
 8001ee8:	2b93      	cmp	r3, #147	@ 0x93
 8001eea:	d90e      	bls.n	8001f0a <ota_start+0x18e>
       LogError(("StartNextMsg truncated"));
 8001eec:	4a3b      	ldr	r2, [pc, #236]	@ (8001fdc <ota_start+0x260>)
 8001eee:	2367      	movs	r3, #103	@ 0x67
 8001ef0:	493b      	ldr	r1, [pc, #236]	@ (8001fe0 <ota_start+0x264>)
 8001ef2:	483c      	ldr	r0, [pc, #240]	@ (8001fe4 <ota_start+0x268>)
 8001ef4:	f00e fee4 	bl	8010cc0 <iprintf>
 8001ef8:	4842      	ldr	r0, [pc, #264]	@ (8002004 <ota_start+0x288>)
 8001efa:	f00e fee1 	bl	8010cc0 <iprintf>
 8001efe:	483b      	ldr	r0, [pc, #236]	@ (8001fec <ota_start+0x270>)
 8001f00:	f00e ff46 	bl	8010d90 <puts>
       return OTA_ERR_MSG_TRUNC;
 8001f04:	f06f 0301 	mvn.w	r3, #1
 8001f08:	e061      	b.n	8001fce <ota_start+0x252>
   }



  // Prepare queue item
   pub_item.operation      = MQTT_OPERATION_PUBLISH;
 8001f0a:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001f0e:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
   pub_item.topic_length   = topic_len;
 8001f16:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001f1a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001f24:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8001f28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   pub_item.payload_length = msg_len;
 8001f2c:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001f30:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8001f34:	f8d7 2f5c 	ldr.w	r2, [r7, #3932]	@ 0xf5c
 8001f38:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
   memcpy(pub_item.topic, topic_buf, topic_len + 1U);
 8001f3c:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8001f40:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	f607 6158 	addw	r1, r7, #3672	@ 0xe58
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	3301      	adds	r3, #1
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00f f996 	bl	8011282 <memcpy>
   memcpy(pub_item.payload, msg_buf, msg_len);
 8001f56:	f607 51c4 	addw	r1, r7, #3524	@ 0xdc4
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	339c      	adds	r3, #156	@ 0x9c
 8001f5e:	f8d7 2f5c 	ldr.w	r2, [r7, #3932]	@ 0xf5c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00f f98d 	bl	8011282 <memcpy>

   if (xQueueSend(mqtt_tx_queue, &pub_item, 0) != pdPASS) {
 8001f68:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <ota_start+0x274>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	4639      	mov	r1, r7
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2200      	movs	r2, #0
 8001f72:	f006 fa9d 	bl	80084b0 <xQueueGenericSend>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d00e      	beq.n	8001f9a <ota_start+0x21e>
       LogError(("PUBLISH enqueue failed"));
 8001f7c:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <ota_start+0x260>)
 8001f7e:	2375      	movs	r3, #117	@ 0x75
 8001f80:	4917      	ldr	r1, [pc, #92]	@ (8001fe0 <ota_start+0x264>)
 8001f82:	4818      	ldr	r0, [pc, #96]	@ (8001fe4 <ota_start+0x268>)
 8001f84:	f00e fe9c 	bl	8010cc0 <iprintf>
 8001f88:	481f      	ldr	r0, [pc, #124]	@ (8002008 <ota_start+0x28c>)
 8001f8a:	f00e fe99 	bl	8010cc0 <iprintf>
 8001f8e:	4817      	ldr	r0, [pc, #92]	@ (8001fec <ota_start+0x270>)
 8001f90:	f00e fefe 	bl	8010d90 <puts>
       return OTA_ERR_QUEUE_FULL;
 8001f94:	f06f 0303 	mvn.w	r3, #3
 8001f98:	e019      	b.n	8001fce <ota_start+0x252>
   }


  // Send to TX queue
   if (xQueueSend(mqtt_tx_queue, &pub_item, 0) != pdPASS) {
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <ota_start+0x274>)
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	4639      	mov	r1, r7
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f006 fa84 	bl	80084b0 <xQueueGenericSend>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d00e      	beq.n	8001fcc <ota_start+0x250>
       LogError(("PUBLISH enqueue failed"));
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <ota_start+0x260>)
 8001fb0:	237c      	movs	r3, #124	@ 0x7c
 8001fb2:	490b      	ldr	r1, [pc, #44]	@ (8001fe0 <ota_start+0x264>)
 8001fb4:	480b      	ldr	r0, [pc, #44]	@ (8001fe4 <ota_start+0x268>)
 8001fb6:	f00e fe83 	bl	8010cc0 <iprintf>
 8001fba:	4813      	ldr	r0, [pc, #76]	@ (8002008 <ota_start+0x28c>)
 8001fbc:	f00e fe80 	bl	8010cc0 <iprintf>
 8001fc0:	480a      	ldr	r0, [pc, #40]	@ (8001fec <ota_start+0x270>)
 8001fc2:	f00e fee5 	bl	8010d90 <puts>
       return OTA_ERR_QUEUE_FULL;
 8001fc6:	f06f 0303 	mvn.w	r3, #3
 8001fca:	e000      	b.n	8001fce <ota_start+0x252>
   }

  return OTA_SUCCESS;
 8001fcc:	2300      	movs	r3, #0


}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f507 6776 	add.w	r7, r7, #3936	@ 0xf60
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	08014e04 	.word	0x08014e04
 8001fdc:	08014e40 	.word	0x08014e40
 8001fe0:	08014e54 	.word	0x08014e54
 8001fe4:	08014e58 	.word	0x08014e58
 8001fe8:	08014e70 	.word	0x08014e70
 8001fec:	08014e8c 	.word	0x08014e8c
 8001ff0:	2000033c 	.word	0x2000033c
 8001ff4:	08014e90 	.word	0x08014e90
 8001ff8:	08014eac 	.word	0x08014eac
 8001ffc:	08014ebc 	.word	0x08014ebc
 8002000:	08014ed4 	.word	0x08014ed4
 8002004:	08014edc 	.word	0x08014edc
 8002008:	08014ef4 	.word	0x08014ef4

0800200c <ota_handle_incoming_mqtt_message>:

/* Implemented for use by the MQTT library */
bool ota_handle_incoming_mqtt_message(  char * topic,
                                       size_t topic_length,
                                       char * message,
                                       size_t message_length ) {
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 8002012:	af04      	add	r7, sp, #16
 8002014:	f507 6485 	add.w	r4, r7, #1064	@ 0x428
 8002018:	f2a4 441c 	subw	r4, r4, #1052	@ 0x41c
 800201c:	6020      	str	r0, [r4, #0]
 800201e:	f507 6085 	add.w	r0, r7, #1064	@ 0x428
 8002022:	f5a0 6084 	sub.w	r0, r0, #1056	@ 0x420
 8002026:	6001      	str	r1, [r0, #0]
 8002028:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 800202c:	f2a1 4124 	subw	r1, r1, #1060	@ 0x424
 8002030:	600a      	str	r2, [r1, #0]
 8002032:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8002036:	f5a2 6285 	sub.w	r2, r2, #1064	@ 0x428
 800203a:	6013      	str	r3, [r2, #0]

  bool handled = false;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
  int32_t file_id = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
  int32_t block_id = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
  int32_t block_size = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418

  handled = job_metadata_handler_chain( topic, topic_length );
 8002054:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002058:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 800205c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002060:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8002064:	6811      	ldr	r1, [r2, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f000 f8b2 	bl	80021d0 <job_metadata_handler_chain>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427

  if( !handled ) {
 8002072:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 8002076:	f083 0301 	eor.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d06a      	beq.n	8002156 <ota_handle_incoming_mqtt_message+0x14a>

    /*
     * AWS IoT Jobs library:
     * Checks if a message comes from the start-next/accepted reserved topic.
     */
    handled = Jobs_IsStartNextAccepted( topic, topic_length, CLIENT_ID, strlen(CLIENT_ID) );
 8002080:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002084:	f5a3 6184 	sub.w	r1, r3, #1056	@ 0x420
 8002088:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800208c:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8002090:	230f      	movs	r3, #15
 8002092:	4a48      	ldr	r2, [pc, #288]	@ (80021b4 <ota_handle_incoming_mqtt_message+0x1a8>)
 8002094:	6809      	ldr	r1, [r1, #0]
 8002096:	6800      	ldr	r0, [r0, #0]
 8002098:	f00a fc3a 	bl	800c910 <Jobs_IsStartNextAccepted>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427

    if( handled ) {
 80020a2:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00f      	beq.n	80020ca <ota_handle_incoming_mqtt_message+0xbe>

      handled = job_handler_chain( ( char * ) message, message_length );
 80020aa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020ae:	f5a3 6285 	sub.w	r2, r3, #1064	@ 0x428
 80020b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020b6:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80020ba:	6811      	ldr	r1, [r2, #0]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	f000 f9ab 	bl	8002418 <job_handler_chain>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
 80020c8:	e045      	b.n	8002156 <ota_handle_incoming_mqtt_message+0x14a>
      /*
       * MQTT streams Library:
       * Checks if the incoming message contains the requested data block. It is performed by
       * comparing the incoming MQTT message topic with MQTT streams topics.
       */
      handled = mqttDownloader_isDataBlockReceived( &mqtt_file_downloader_context,
 80020ca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020ce:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 80020d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020d6:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	4836      	ldr	r0, [pc, #216]	@ (80021b8 <ota_handle_incoming_mqtt_message+0x1ac>)
 80020e0:	f00b f805 	bl	800d0ee <mqttDownloader_isDataBlockReceived>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
                                                   topic,
                                                   topic_length );

      if( handled ) {
 80020f2:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02d      	beq.n	8002156 <ota_handle_incoming_mqtt_message+0x14a>

        uint8_t decoded_data[ mqttFileDownloader_CONFIG_BLOCK_SIZE ];
        size_t decoded_data_length = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414

        /*
         * MQTT streams Library:
         * Extracting and decoding the received data block from the incoming MQTT message.
         */
        handled = mqttDownloader_processReceivedDataBlock( &mqtt_file_downloader_context,
 8002100:	f507 6084 	add.w	r0, r7, #1056	@ 0x420
 8002104:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002108:	f5a3 6285 	sub.w	r2, r3, #1064	@ 0x428
 800210c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002110:	f2a3 4124 	subw	r1, r3, #1060	@ 0x424
 8002114:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8002118:	9303      	str	r3, [sp, #12]
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4603      	mov	r3, r0
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	6809      	ldr	r1, [r1, #0]
 8002132:	4821      	ldr	r0, [pc, #132]	@ (80021b8 <ota_handle_incoming_mqtt_message+0x1ac>)
 8002134:	f00b f802 	bl	800d13c <mqttDownloader_processReceivedDataBlock>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf14      	ite	ne
 800213e:	2301      	movne	r3, #1
 8002140:	2300      	moveq	r3, #0
 8002142:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
                                                           &block_id,
                                                           &block_size,
                                                           decoded_data,
                                                           &decoded_data_length );

        handle_mqtt_streams_block_arrived( decoded_data, decoded_data_length );
 8002146:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fa7d 	bl	8002650 <handle_mqtt_streams_block_arrived>
      }
    }
  }

  if( !handled ) {
 8002156:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 800215a:	f083 0301 	eor.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <ota_handle_incoming_mqtt_message+0x19a>
    LogError( ( "Unrecognized incoming MQTT message received on topic: "
 8002164:	4a15      	ldr	r2, [pc, #84]	@ (80021bc <ota_handle_incoming_mqtt_message+0x1b0>)
 8002166:	23c0      	movs	r3, #192	@ 0xc0
 8002168:	4915      	ldr	r1, [pc, #84]	@ (80021c0 <ota_handle_incoming_mqtt_message+0x1b4>)
 800216a:	4816      	ldr	r0, [pc, #88]	@ (80021c4 <ota_handle_incoming_mqtt_message+0x1b8>)
 800216c:	f00e fda8 	bl	8010cc0 <iprintf>
 8002170:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002174:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8002178:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 800217c:	f2a2 421c 	subw	r2, r2, #1052	@ 0x41c
 8002180:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 8002184:	f5a1 6184 	sub.w	r1, r1, #1056	@ 0x420
 8002188:	f507 6085 	add.w	r0, r7, #1064	@ 0x428
 800218c:	f2a0 4024 	subw	r0, r0, #1060	@ 0x424
 8002190:	6800      	ldr	r0, [r0, #0]
 8002192:	9000      	str	r0, [sp, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6809      	ldr	r1, [r1, #0]
 800219a:	480b      	ldr	r0, [pc, #44]	@ (80021c8 <ota_handle_incoming_mqtt_message+0x1bc>)
 800219c:	f00e fd90 	bl	8010cc0 <iprintf>
 80021a0:	480a      	ldr	r0, [pc, #40]	@ (80021cc <ota_handle_incoming_mqtt_message+0x1c0>)
 80021a2:	f00e fdf5 	bl	8010d90 <puts>
                topic,
                ( unsigned int ) message_length,
                ( char * ) message ) );
    }

   return handled;
 80021a6:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	f207 472c 	addw	r7, r7, #1068	@ 0x42c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	08014eac 	.word	0x08014eac
 80021b8:	20000a1c 	.word	0x20000a1c
 80021bc:	08014e40 	.word	0x08014e40
 80021c0:	08014e54 	.word	0x08014e54
 80021c4:	08014e58 	.word	0x08014e58
 80021c8:	08014f0c 	.word	0x08014f0c
 80021cc:	08014e8c 	.word	0x08014e8c

080021d0 <job_metadata_handler_chain>:

static bool job_metadata_handler_chain( char * topic,
                                    size_t topic_length ) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af04      	add	r7, sp, #16
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

  bool handled = false;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]

  if( global_job_id[ 0 ] != 0 ) {
 80021de:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d048      	beq.n	8002278 <job_metadata_handler_chain+0xa8>

    handled = Jobs_IsJobUpdateStatus( topic,
 80021e6:	2140      	movs	r1, #64	@ 0x40
 80021e8:	4826      	ldr	r0, [pc, #152]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 80021ea:	f00e ffa1 	bl	8011130 <strnlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2200      	movs	r2, #0
 80021f2:	9202      	str	r2, [sp, #8]
 80021f4:	220f      	movs	r2, #15
 80021f6:	9201      	str	r2, [sp, #4]
 80021f8:	4a23      	ldr	r2, [pc, #140]	@ (8002288 <job_metadata_handler_chain+0xb8>)
 80021fa:	9200      	str	r2, [sp, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f00a fb9d 	bl	800c940 <Jobs_IsJobUpdateStatus>
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]
                                              MAX_JOB_ID_LENGTH ),
                                      CLIENT_ID,
                                      strlen(CLIENT_ID),
                                      JobUpdateStatus_Accepted );

    if( handled ) {
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00f      	beq.n	8002230 <job_metadata_handler_chain+0x60>

      LogInfo( ( "Job was accepted! Clearing Job ID." ) );
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <job_metadata_handler_chain+0xbc>)
 8002212:	23dd      	movs	r3, #221	@ 0xdd
 8002214:	491e      	ldr	r1, [pc, #120]	@ (8002290 <job_metadata_handler_chain+0xc0>)
 8002216:	481f      	ldr	r0, [pc, #124]	@ (8002294 <job_metadata_handler_chain+0xc4>)
 8002218:	f00e fd52 	bl	8010cc0 <iprintf>
 800221c:	481e      	ldr	r0, [pc, #120]	@ (8002298 <job_metadata_handler_chain+0xc8>)
 800221e:	f00e fd4f 	bl	8010cc0 <iprintf>
 8002222:	481e      	ldr	r0, [pc, #120]	@ (800229c <job_metadata_handler_chain+0xcc>)
 8002224:	f00e fdb4 	bl	8010d90 <puts>
      global_job_id[ 0 ] = 0;
 8002228:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e011      	b.n	8002254 <job_metadata_handler_chain+0x84>
    } else {

      handled = Jobs_IsJobUpdateStatus( topic,
 8002230:	2140      	movs	r1, #64	@ 0x40
 8002232:	4814      	ldr	r0, [pc, #80]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 8002234:	f00e ff7c 	bl	8011130 <strnlen>
 8002238:	4603      	mov	r3, r0
 800223a:	2201      	movs	r2, #1
 800223c:	9202      	str	r2, [sp, #8]
 800223e:	220f      	movs	r2, #15
 8002240:	9201      	str	r2, [sp, #4]
 8002242:	4a11      	ldr	r2, [pc, #68]	@ (8002288 <job_metadata_handler_chain+0xb8>)
 8002244:	9200      	str	r2, [sp, #0]
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f00a fb78 	bl	800c940 <Jobs_IsJobUpdateStatus>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]
                                                 CLIENT_ID,
                                                 strlen(CLIENT_ID),
                                        JobUpdateStatus_Rejected );
    }

    if( handled ) {
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00e      	beq.n	8002278 <job_metadata_handler_chain+0xa8>

      LogInfo( ( "Job was rejected! Clearing Job ID." ) );
 800225a:	4a0c      	ldr	r2, [pc, #48]	@ (800228c <job_metadata_handler_chain+0xbc>)
 800225c:	23ed      	movs	r3, #237	@ 0xed
 800225e:	490c      	ldr	r1, [pc, #48]	@ (8002290 <job_metadata_handler_chain+0xc0>)
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <job_metadata_handler_chain+0xc4>)
 8002262:	f00e fd2d 	bl	8010cc0 <iprintf>
 8002266:	480e      	ldr	r0, [pc, #56]	@ (80022a0 <job_metadata_handler_chain+0xd0>)
 8002268:	f00e fd2a 	bl	8010cc0 <iprintf>
 800226c:	480b      	ldr	r0, [pc, #44]	@ (800229c <job_metadata_handler_chain+0xcc>)
 800226e:	f00e fd8f 	bl	8010d90 <puts>
      global_job_id[ 0 ] = 0;
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <job_metadata_handler_chain+0xb4>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    }
  }

  return handled;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000bd0 	.word	0x20000bd0
 8002288:	08014eac 	.word	0x08014eac
 800228c:	08014e40 	.word	0x08014e40
 8002290:	08014e54 	.word	0x08014e54
 8002294:	08014f58 	.word	0x08014f58
 8002298:	08014f70 	.word	0x08014f70
 800229c:	08014e8c 	.word	0x08014e8c
 80022a0:	08014f94 	.word	0x08014f94

080022a4 <process_job_file>:

/* Custom OTA library callback */
static void process_job_file( custom_job_doc_fields_t * params )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	f5ad 6dde 	sub.w	sp, sp, #1776	@ 0x6f0
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 80022b0:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80022b4:	6018      	str	r0, [r3, #0]
  num_of_blocks_remaining = params->file_size /
 80022b6:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 80022ba:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	4a45      	ldr	r2, [pc, #276]	@ (80023dc <process_job_file+0x138>)
 80022c6:	6013      	str	r3, [r2, #0]
                            mqttFileDownloader_CONFIG_BLOCK_SIZE;
  num_of_blocks_remaining += ( params->file_size %
 80022c8:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 80022cc:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
                            mqttFileDownloader_CONFIG_BLOCK_SIZE >
                            0 )
                            ? 1
                            : 0;
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <process_job_file+0x3c>
 80022dc:	2201      	movs	r2, #1
 80022de:	e000      	b.n	80022e2 <process_job_file+0x3e>
 80022e0:	2200      	movs	r2, #0
  num_of_blocks_remaining += ( params->file_size %
 80022e2:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <process_job_file+0x138>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a3c      	ldr	r2, [pc, #240]	@ (80023dc <process_job_file+0x138>)
 80022ea:	6013      	str	r3, [r2, #0]

  current_file_id = params->file_id;
 80022ec:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 80022f0:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b39      	ldr	r3, [pc, #228]	@ (80023e0 <process_job_file+0x13c>)
 80022fc:	701a      	strb	r2, [r3, #0]
  current_block_offset = 0;
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <process_job_file+0x140>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
  total_bytes_received = 0;
 8002304:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <process_job_file+0x144>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
   * MQTT streams Library:
   * Initializing the MQTT streams downloader. Passing the
   * parameters extracted from the AWS IoT OTA jobs document
   * using OTA jobs parser.
   */
  mqttDownloader_init( &mqtt_file_downloader_context,
 800230a:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 800230e:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 800231a:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	230f      	movs	r3, #15
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4b30      	ldr	r3, [pc, #192]	@ (80023ec <process_job_file+0x148>)
 800232c:	4830      	ldr	r0, [pc, #192]	@ (80023f0 <process_job_file+0x14c>)
 800232e:	f00a fc77 	bl	800cc20 <mqttDownloader_init>
                       CLIENT_ID,
                       strlen(CLIENT_ID),
                       DATA_TYPE_JSON );

  // Prepare queue item
  mqtt_queue_item_t queue_item = { 0 };
 8002332:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 8002336:	f5a3 63dc 	sub.w	r3, r3, #1760	@ 0x6e0
 800233a:	4618      	mov	r0, r3
 800233c:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 8002340:	461a      	mov	r2, r3
 8002342:	2100      	movs	r1, #0
 8002344:	f00e feb4 	bl	80110b0 <memset>
  queue_item.operation = MQTT_OPERATION_SUBSCRIBE;
 8002348:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 800234c:	f5a3 63dc 	sub.w	r3, r3, #1760	@ 0x6e0
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
  queue_item.topic_length = mqtt_file_downloader_context.topicStreamDataLength;
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <process_job_file+0x14c>)
 8002356:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800235a:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 800235e:	f5a3 63dc 	sub.w	r3, r3, #1760	@ 0x6e0
 8002362:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  memcpy(queue_item.topic, mqtt_file_downloader_context.topicStreamData,
 8002366:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <process_job_file+0x14c>)
 8002368:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	3301      	adds	r3, #1
 8002372:	491f      	ldr	r1, [pc, #124]	@ (80023f0 <process_job_file+0x14c>)
 8002374:	4618      	mov	r0, r3
 8002376:	f00e ff84 	bl	8011282 <memcpy>
         mqtt_file_downloader_context.topicStreamDataLength );

  // Send to TX queue
  if (xQueueSend(mqtt_tx_queue, &queue_item, portMAX_DELAY) != pdPASS) {
 800237a:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <process_job_file+0x150>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f107 0108 	add.w	r1, r7, #8
 8002382:	2300      	movs	r3, #0
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	f006 f892 	bl	80084b0 <xQueueGenericSend>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d00d      	beq.n	80023ae <process_job_file+0x10a>
    LogError( ("Failed to queue MQTT subscribe: Topic='%s'", mqtt_file_downloader_context.topicStreamData) );
 8002392:	4a19      	ldr	r2, [pc, #100]	@ (80023f8 <process_job_file+0x154>)
 8002394:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8002398:	4918      	ldr	r1, [pc, #96]	@ (80023fc <process_job_file+0x158>)
 800239a:	4819      	ldr	r0, [pc, #100]	@ (8002400 <process_job_file+0x15c>)
 800239c:	f00e fc90 	bl	8010cc0 <iprintf>
 80023a0:	4913      	ldr	r1, [pc, #76]	@ (80023f0 <process_job_file+0x14c>)
 80023a2:	4818      	ldr	r0, [pc, #96]	@ (8002404 <process_job_file+0x160>)
 80023a4:	f00e fc8c 	bl	8010cc0 <iprintf>
 80023a8:	4817      	ldr	r0, [pc, #92]	@ (8002408 <process_job_file+0x164>)
 80023aa:	f00e fcf1 	bl	8010d90 <puts>
  }

  LogInfo( ( "Starting The Download." ) );
 80023ae:	4a12      	ldr	r2, [pc, #72]	@ (80023f8 <process_job_file+0x154>)
 80023b0:	f240 131d 	movw	r3, #285	@ 0x11d
 80023b4:	4911      	ldr	r1, [pc, #68]	@ (80023fc <process_job_file+0x158>)
 80023b6:	4815      	ldr	r0, [pc, #84]	@ (800240c <process_job_file+0x168>)
 80023b8:	f00e fc82 	bl	8010cc0 <iprintf>
 80023bc:	4814      	ldr	r0, [pc, #80]	@ (8002410 <process_job_file+0x16c>)
 80023be:	f00e fc7f 	bl	8010cc0 <iprintf>
 80023c2:	4811      	ldr	r0, [pc, #68]	@ (8002408 <process_job_file+0x164>)
 80023c4:	f00e fce4 	bl	8010d90 <puts>


  flash_erase(USER_FLASH_SECOND_SECTOR_ADDRESS);
 80023c8:	4812      	ldr	r0, [pc, #72]	@ (8002414 <process_job_file+0x170>)
 80023ca:	f005 fdad 	bl	8007f28 <flash_erase>

  /* Request the first block */
  request_data_block();
 80023ce:	f000 f8c1 	bl	8002554 <request_data_block>
}
 80023d2:	bf00      	nop
 80023d4:	f507 67dd 	add.w	r7, r7, #1768	@ 0x6e8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000bc0 	.word	0x20000bc0
 80023e0:	20000bc8 	.word	0x20000bc8
 80023e4:	20000bc4 	.word	0x20000bc4
 80023e8:	20000bcc 	.word	0x20000bcc
 80023ec:	08014eac 	.word	0x08014eac
 80023f0:	20000a1c 	.word	0x20000a1c
 80023f4:	2000033c 	.word	0x2000033c
 80023f8:	08014e40 	.word	0x08014e40
 80023fc:	08014e54 	.word	0x08014e54
 8002400:	08014e58 	.word	0x08014e58
 8002404:	08014fb8 	.word	0x08014fb8
 8002408:	08014e8c 	.word	0x08014e8c
 800240c:	08014f58 	.word	0x08014f58
 8002410:	08014fe4 	.word	0x08014fe4
 8002414:	08040000 	.word	0x08040000

08002418 <job_handler_chain>:

static bool job_handler_chain( char * message,
                               size_t message_length ) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	@ 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]

  char * job_doc;
  size_t job_doc_length = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
  char * jobId;
  size_t job_id_length = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  int8_t file_index = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * AWS IoT Jobs library:
  * Extracting the custom job document from the jobs message recevied from AWS IoT core.
  */
  job_doc_length = Jobs_GetJobDocument( message, message_length, ( const char ** ) &job_doc );
 8002430:	f107 0320 	add.w	r3, r7, #32
 8002434:	461a      	mov	r2, r3
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f00a fb31 	bl	800caa0 <Jobs_GetJobDocument>
 800243e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /*
  * AWS IoT Jobs library:
  * Extracting the job ID from the received OTA job document.
  */
  job_id_length = Jobs_GetJobId( message, message_length, ( const char ** ) &jobId );
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	461a      	mov	r2, r3
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f00a faff 	bl	800ca4c <Jobs_GetJobId>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24

  if( global_job_id[ 0 ] == 0 ) {
 8002450:	4b37      	ldr	r3, [pc, #220]	@ (8002530 <job_handler_chain+0x118>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <job_handler_chain+0x4c>

     strncpy( global_job_id, jobId, job_id_length );
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	4834      	ldr	r0, [pc, #208]	@ (8002530 <job_handler_chain+0x118>)
 8002460:	f00e fe53 	bl	801110a <strncpy>
  }

  if( ( job_doc_length != 0U ) && ( job_id_length != 0U ) ) {
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03b      	beq.n	80024e2 <job_handler_chain+0xca>
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	2b00      	cmp	r3, #0
 800246e:	d038      	beq.n	80024e2 <job_handler_chain+0xca>

    custom_job_doc_fields_t job_fields = { 0 };
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]

      do {
        /*
         * See custom_job_parser.c for this function
         */
        file_index = custom_parser_parse_job_doc_file( job_doc,
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f107 020c 	add.w	r2, r7, #12
 8002484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fdea 	bl	8001060 <custom_parser_parse_job_doc_file>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                       job_doc_length,
                                                       &job_fields );

         if( file_index >= 0 ) {
 8002492:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002496:	2b00      	cmp	r3, #0
 8002498:	db1e      	blt.n	80024d8 <job_handler_chain+0xc0>

           LogInfo( ( "Received Custom Job Document" ) );
 800249a:	4a26      	ldr	r2, [pc, #152]	@ (8002534 <job_handler_chain+0x11c>)
 800249c:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 80024a0:	4925      	ldr	r1, [pc, #148]	@ (8002538 <job_handler_chain+0x120>)
 80024a2:	4826      	ldr	r0, [pc, #152]	@ (800253c <job_handler_chain+0x124>)
 80024a4:	f00e fc0c 	bl	8010cc0 <iprintf>
 80024a8:	4825      	ldr	r0, [pc, #148]	@ (8002540 <job_handler_chain+0x128>)
 80024aa:	f00e fc09 	bl	8010cc0 <iprintf>
 80024ae:	4825      	ldr	r0, [pc, #148]	@ (8002544 <job_handler_chain+0x12c>)
 80024b0:	f00e fc6e 	bl	8010d90 <puts>

           /* Process the job file here */
           process_job_file(&job_fields);
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fef3 	bl	80022a4 <process_job_file>
           LogInfo( ( "Successfully processed job document.\n" ) );
 80024be:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <job_handler_chain+0x11c>)
 80024c0:	f44f 73a9 	mov.w	r3, #338	@ 0x152
 80024c4:	491c      	ldr	r1, [pc, #112]	@ (8002538 <job_handler_chain+0x120>)
 80024c6:	481d      	ldr	r0, [pc, #116]	@ (800253c <job_handler_chain+0x124>)
 80024c8:	f00e fbfa 	bl	8010cc0 <iprintf>
 80024cc:	481e      	ldr	r0, [pc, #120]	@ (8002548 <job_handler_chain+0x130>)
 80024ce:	f00e fc5f 	bl	8010d90 <puts>
 80024d2:	481c      	ldr	r0, [pc, #112]	@ (8002544 <job_handler_chain+0x12c>)
 80024d4:	f00e fc5c 	bl	8010d90 <puts>
         }
     } while( file_index > 0 );
 80024d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80024dc:	2b00      	cmp	r3, #0
 80024de:	dcce      	bgt.n	800247e <job_handler_chain+0x66>
  if( ( job_doc_length != 0U ) && ( job_id_length != 0U ) ) {
 80024e0:	e01b      	b.n	800251a <job_handler_chain+0x102>

  } else {

    LogInfo( ( "No job available..." ) );
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <job_handler_chain+0x11c>)
 80024e4:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80024e8:	4913      	ldr	r1, [pc, #76]	@ (8002538 <job_handler_chain+0x120>)
 80024ea:	4814      	ldr	r0, [pc, #80]	@ (800253c <job_handler_chain+0x124>)
 80024ec:	f00e fbe8 	bl	8010cc0 <iprintf>
 80024f0:	4816      	ldr	r0, [pc, #88]	@ (800254c <job_handler_chain+0x134>)
 80024f2:	f00e fbe5 	bl	8010cc0 <iprintf>
 80024f6:	4813      	ldr	r0, [pc, #76]	@ (8002544 <job_handler_chain+0x12c>)
 80024f8:	f00e fc4a 	bl	8010d90 <puts>
    LogInfo( ( "Running  current application" ) );
 80024fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <job_handler_chain+0x11c>)
 80024fe:	f240 1359 	movw	r3, #345	@ 0x159
 8002502:	490d      	ldr	r1, [pc, #52]	@ (8002538 <job_handler_chain+0x120>)
 8002504:	480d      	ldr	r0, [pc, #52]	@ (800253c <job_handler_chain+0x124>)
 8002506:	f00e fbdb 	bl	8010cc0 <iprintf>
 800250a:	4811      	ldr	r0, [pc, #68]	@ (8002550 <job_handler_chain+0x138>)
 800250c:	f00e fbd8 	bl	8010cc0 <iprintf>
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <job_handler_chain+0x12c>)
 8002512:	f00e fc3d 	bl	8010d90 <puts>
    run_application();
 8002516:	f000 f963 	bl	80027e0 <run_application>
  }

  /* File index will be -1 if an error occured, and 0 if all files were */
  /* processed */
  return file_index == 0;
 800251a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	3730      	adds	r7, #48	@ 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000bd0 	.word	0x20000bd0
 8002534:	08014e40 	.word	0x08014e40
 8002538:	08014e54 	.word	0x08014e54
 800253c:	08014f58 	.word	0x08014f58
 8002540:	08014ffc 	.word	0x08014ffc
 8002544:	08014e8c 	.word	0x08014e8c
 8002548:	0801501c 	.word	0x0801501c
 800254c:	08015044 	.word	0x08015044
 8002550:	08015058 	.word	0x08015058

08002554 <request_data_block>:

static void request_data_block( void ) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b0c6      	sub	sp, #280	@ 0x118
 8002558:	af04      	add	r7, sp, #16

  char get_stream_request[ GET_STREAM_REQUEST_BUFFER_SIZE ];
  size_t get_stream_request_length = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  /*
   * MQTT streams Library:
   * Creating the Get data block request. MQTT streams library only
   * creates the get block request.
   */
  get_stream_request_length = mqttDownloader_createGetDataBlockRequest( mqtt_file_downloader_context.dataType,
 8002560:	4b2e      	ldr	r3, [pc, #184]	@ (800261c <request_data_block+0xc8>)
 8002562:	f893 01a0 	ldrb.w	r0, [r3, #416]	@ 0x1a0
 8002566:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <request_data_block+0xcc>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <request_data_block+0xd0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002576:	9302      	str	r3, [sp, #8]
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	2301      	movs	r3, #1
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002586:	f00a fbdb 	bl	800cd40 <mqttDownloader_createGetDataBlockRequest>
 800258a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
                                                                        get_stream_request,
                                                                        GET_STREAM_REQUEST_BUFFER_SIZE );


  // Populate queue item
  queue_item.operation = MQTT_OPERATION_PUBLISH;
 800258e:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <request_data_block+0xd4>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  queue_item.payload_length = get_stream_request_length;
 8002594:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <request_data_block+0xd4>)
 8002596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800259a:	f8c2 36dc 	str.w	r3, [r2, #1756]	@ 0x6dc
  queue_item.topic_length = mqtt_file_downloader_context.topicGetStreamLength;
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <request_data_block+0xc8>)
 80025a0:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 80025a4:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <request_data_block+0xd4>)
 80025a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
  memcpy( queue_item.payload, get_stream_request, get_stream_request_length );
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80025b0:	4619      	mov	r1, r3
 80025b2:	481e      	ldr	r0, [pc, #120]	@ (800262c <request_data_block+0xd8>)
 80025b4:	f00e fe65 	bl	8011282 <memcpy>
  memcpy( queue_item.topic, mqtt_file_downloader_context.topicGetStream,
 80025b8:	4b18      	ldr	r3, [pc, #96]	@ (800261c <request_data_block+0xc8>)
 80025ba:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 80025be:	461a      	mov	r2, r3
 80025c0:	491b      	ldr	r1, [pc, #108]	@ (8002630 <request_data_block+0xdc>)
 80025c2:	481c      	ldr	r0, [pc, #112]	@ (8002634 <request_data_block+0xe0>)
 80025c4:	f00e fe5d 	bl	8011282 <memcpy>
          mqtt_file_downloader_context.topicGetStreamLength );

  // Send to TX queue
  if (xQueueSend(mqtt_tx_queue, &queue_item, portMAX_DELAY) != pdPASS) {
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <request_data_block+0xe4>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	2300      	movs	r3, #0
 80025ce:	f04f 32ff 	mov.w	r2, #4294967295
 80025d2:	4915      	ldr	r1, [pc, #84]	@ (8002628 <request_data_block+0xd4>)
 80025d4:	f005 ff6c 	bl	80084b0 <xQueueGenericSend>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d018      	beq.n	8002610 <request_data_block+0xbc>
     LogError( ("Failed to queue MQTT publish: Topic='%.*s', Payload='%.*s'",
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <request_data_block+0xe8>)
 80025e0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025e4:	4916      	ldr	r1, [pc, #88]	@ (8002640 <request_data_block+0xec>)
 80025e6:	4817      	ldr	r0, [pc, #92]	@ (8002644 <request_data_block+0xf0>)
 80025e8:	f00e fb6a 	bl	8010cc0 <iprintf>
 80025ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <request_data_block+0xd4>)
 80025ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025f2:	4619      	mov	r1, r3
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <request_data_block+0xd4>)
 80025f6:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <request_data_block+0xd8>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <request_data_block+0xe0>)
 8002604:	4810      	ldr	r0, [pc, #64]	@ (8002648 <request_data_block+0xf4>)
 8002606:	f00e fb5b 	bl	8010cc0 <iprintf>
 800260a:	4810      	ldr	r0, [pc, #64]	@ (800264c <request_data_block+0xf8>)
 800260c:	f00e fbc0 	bl	8010d90 <puts>
               (int)queue_item.topic_length, queue_item.topic,
               (int)queue_item.payload_length, (char *)queue_item.payload) );
  }
}
 8002610:	bf00      	nop
 8002612:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000a1c 	.word	0x20000a1c
 8002620:	20000bc8 	.word	0x20000bc8
 8002624:	20000bc4 	.word	0x20000bc4
 8002628:	20000c10 	.word	0x20000c10
 800262c:	20000cac 	.word	0x20000cac
 8002630:	20000aec 	.word	0x20000aec
 8002634:	20000c11 	.word	0x20000c11
 8002638:	2000033c 	.word	0x2000033c
 800263c:	08014e40 	.word	0x08014e40
 8002640:	08014e54 	.word	0x08014e54
 8002644:	08014e58 	.word	0x08014e58
 8002648:	08015078 	.word	0x08015078
 800264c:	08014e8c 	.word	0x08014e8c

08002650 <handle_mqtt_streams_block_arrived>:

uint32_t flash_write_address = USER_FLASH_SECOND_SECTOR_ADDRESS;
/* Implemented for the MQTT Streams library */
static void handle_mqtt_streams_block_arrived( uint8_t * data,
                                               size_t data_length ) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]

  uint32_t flash_length = data_length / 4;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]

  flash_status_t f_status = FLASH_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	72fb      	strb	r3, [r7, #11]
  f_status = flash_write(&flash_write_address, (uint32_t*)data, flash_length);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4823      	ldr	r0, [pc, #140]	@ (80026fc <handle_mqtt_streams_block_arrived+0xac>)
 800266e:	f005 fc91 	bl	8007f94 <flash_write>
 8002672:	4603      	mov	r3, r0
 8002674:	72fb      	strb	r3, [r7, #11]

  if (f_status != FLASH_OK) {
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00c      	beq.n	8002696 <handle_mqtt_streams_block_arrived+0x46>
    LogError(("Flash write error"));
 800267c:	4a20      	ldr	r2, [pc, #128]	@ (8002700 <handle_mqtt_streams_block_arrived+0xb0>)
 800267e:	f240 1391 	movw	r3, #401	@ 0x191
 8002682:	4920      	ldr	r1, [pc, #128]	@ (8002704 <handle_mqtt_streams_block_arrived+0xb4>)
 8002684:	4820      	ldr	r0, [pc, #128]	@ (8002708 <handle_mqtt_streams_block_arrived+0xb8>)
 8002686:	f00e fb1b 	bl	8010cc0 <iprintf>
 800268a:	4820      	ldr	r0, [pc, #128]	@ (800270c <handle_mqtt_streams_block_arrived+0xbc>)
 800268c:	f00e fb18 	bl	8010cc0 <iprintf>
 8002690:	481f      	ldr	r0, [pc, #124]	@ (8002710 <handle_mqtt_streams_block_arrived+0xc0>)
 8002692:	f00e fb7d 	bl	8010d90 <puts>
  }

  total_bytes_received += data_length;
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <handle_mqtt_streams_block_arrived+0xc4>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <handle_mqtt_streams_block_arrived+0xc4>)
 80026a0:	6013      	str	r3, [r2, #0]
  num_of_blocks_remaining--;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <handle_mqtt_streams_block_arrived+0xc8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002718 <handle_mqtt_streams_block_arrived+0xc8>)
 80026aa:	6013      	str	r3, [r2, #0]

  LogInfo( ( "Downloaded block %lu of %lu.",
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <handle_mqtt_streams_block_arrived+0xb0>)
 80026ae:	f240 1397 	movw	r3, #407	@ 0x197
 80026b2:	4914      	ldr	r1, [pc, #80]	@ (8002704 <handle_mqtt_streams_block_arrived+0xb4>)
 80026b4:	4819      	ldr	r0, [pc, #100]	@ (800271c <handle_mqtt_streams_block_arrived+0xcc>)
 80026b6:	f00e fb03 	bl	8010cc0 <iprintf>
 80026ba:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <handle_mqtt_streams_block_arrived+0xd0>)
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <handle_mqtt_streams_block_arrived+0xd0>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <handle_mqtt_streams_block_arrived+0xc8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4816      	ldr	r0, [pc, #88]	@ (8002724 <handle_mqtt_streams_block_arrived+0xd4>)
 80026cc:	f00e faf8 	bl	8010cc0 <iprintf>
 80026d0:	480f      	ldr	r0, [pc, #60]	@ (8002710 <handle_mqtt_streams_block_arrived+0xc0>)
 80026d2:	f00e fb5d 	bl	8010d90 <puts>
             current_block_offset,
             ( current_block_offset + num_of_blocks_remaining ) ) );

  if (num_of_blocks_remaining == 0) {
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <handle_mqtt_streams_block_arrived+0xc8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <handle_mqtt_streams_block_arrived+0x94>
    finish_download();
 80026de:	f000 f8ed 	bl	80028bc <finish_download>
  } else {
    current_block_offset++;
    request_data_block();
  }
}
 80026e2:	e006      	b.n	80026f2 <handle_mqtt_streams_block_arrived+0xa2>
    current_block_offset++;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <handle_mqtt_streams_block_arrived+0xd0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <handle_mqtt_streams_block_arrived+0xd0>)
 80026ec:	6013      	str	r3, [r2, #0]
    request_data_block();
 80026ee:	f7ff ff31 	bl	8002554 <request_data_block>
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000000 	.word	0x20000000
 8002700:	08014e40 	.word	0x08014e40
 8002704:	08014e54 	.word	0x08014e54
 8002708:	08014e58 	.word	0x08014e58
 800270c:	080150b4 	.word	0x080150b4
 8002710:	08014e8c 	.word	0x08014e8c
 8002714:	20000bcc 	.word	0x20000bcc
 8002718:	20000bc0 	.word	0x20000bc0
 800271c:	08014f58 	.word	0x08014f58
 8002720:	20000bc4 	.word	0x20000bc4
 8002724:	080150c8 	.word	0x080150c8

08002728 <jump_to_application>:

static void jump_to_application(void) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0

  LogInfo( ("Gonna Jump to Application\r\n"));
 800272e:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <jump_to_application+0x8c>)
 8002730:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8002734:	4920      	ldr	r1, [pc, #128]	@ (80027b8 <jump_to_application+0x90>)
 8002736:	4821      	ldr	r0, [pc, #132]	@ (80027bc <jump_to_application+0x94>)
 8002738:	f00e fac2 	bl	8010cc0 <iprintf>
 800273c:	4820      	ldr	r0, [pc, #128]	@ (80027c0 <jump_to_application+0x98>)
 800273e:	f00e fb27 	bl	8010d90 <puts>
 8002742:	4820      	ldr	r0, [pc, #128]	@ (80027c4 <jump_to_application+0x9c>)
 8002744:	f00e fb24 	bl	8010d90 <puts>

  // Get the application reset handler (start of application)
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (USER_FLASH_FIRST_SECTOR_ADDRESS + 4U)));
 8002748:	4b1f      	ldr	r3, [pc, #124]	@ (80027c8 <jump_to_application+0xa0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  // Check if the reset handler is valid (not erased)
  if (app_reset_handler != (void*)0xFFFFFFFF) {
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d01c      	beq.n	8002790 <jump_to_application+0x68>

    /* Reset the Clock system */
    HAL_RCC_DeInit();
 8002756:	f002 fd6b 	bl	8005230 <HAL_RCC_DeInit>
    HAL_DeInit();
 800275a:	f000 fd19 	bl	8003190 <HAL_DeInit>

    /* Set the MSP (Main Stack Pointer) to the application's stack pointer */
    __set_MSP(*(volatile uint32_t*) USER_FLASH_FIRST_SECTOR_ADDRESS);
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <jump_to_application+0xa4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f383 8808 	msr	MSP, r3
}
 800276a:	bf00      	nop

    /* Set the vector table to the application address */
    SCB->VTOR = USER_FLASH_FIRST_SECTOR_ADDRESS;
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <jump_to_application+0xa8>)
 800276e:	4a17      	ldr	r2, [pc, #92]	@ (80027cc <jump_to_application+0xa4>)
 8002770:	609a      	str	r2, [r3, #8]

    /* Reset the sysTick timer */
    SysTick->CTRL = 0;
 8002772:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <jump_to_application+0xac>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002782:	f3bf 8f6f 	isb	sy
}
 8002786:	bf00      	nop
}
 8002788:	bf00      	nop

    /* Switch to use the Main Stack Pointer (MSP) */
    __set_CONTROL(0);

    /* call application reset handler */
    app_reset_handler();
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4798      	blx	r3
  } else {
    LogError( ("Application is not present or corrupted\r\n") );
  }
}
 800278e:	e00c      	b.n	80027aa <jump_to_application+0x82>
    LogError( ("Application is not present or corrupted\r\n") );
 8002790:	4a08      	ldr	r2, [pc, #32]	@ (80027b4 <jump_to_application+0x8c>)
 8002792:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002796:	4908      	ldr	r1, [pc, #32]	@ (80027b8 <jump_to_application+0x90>)
 8002798:	480f      	ldr	r0, [pc, #60]	@ (80027d8 <jump_to_application+0xb0>)
 800279a:	f00e fa91 	bl	8010cc0 <iprintf>
 800279e:	480f      	ldr	r0, [pc, #60]	@ (80027dc <jump_to_application+0xb4>)
 80027a0:	f00e faf6 	bl	8010d90 <puts>
 80027a4:	4807      	ldr	r0, [pc, #28]	@ (80027c4 <jump_to_application+0x9c>)
 80027a6:	f00e faf3 	bl	8010d90 <puts>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	08014e40 	.word	0x08014e40
 80027b8:	08014e54 	.word	0x08014e54
 80027bc:	08014f58 	.word	0x08014f58
 80027c0:	080150e8 	.word	0x080150e8
 80027c4:	08014e8c 	.word	0x08014e8c
 80027c8:	08020004 	.word	0x08020004
 80027cc:	08020000 	.word	0x08020000
 80027d0:	e000ed00 	.word	0xe000ed00
 80027d4:	e000e010 	.word	0xe000e010
 80027d8:	08014e58 	.word	0x08014e58
 80027dc:	08015104 	.word	0x08015104

080027e0 <run_application>:

void run_application() {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  jump_to_application();
 80027e4:	f7ff ffa0 	bl	8002728 <jump_to_application>
  //printf("Resetting system\r\n");
  //HAL_Delay(1000);
  HAL_NVIC_SystemReset();
 80027e8:	f000 fe77 	bl	80034da <HAL_NVIC_SystemReset>
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <copy_firmware_to_second_sector>:

static bool copy_firmware_to_second_sector( uint32_t src_address,
                                            uint32_t dest_address,
                                            uint32_t length) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

  flash_status_t f_status = FLASH_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
  uint32_t *src = (uint32_t *)src_address;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	61bb      	str	r3, [r7, #24]
  uint32_t write_address = dest_address;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	613b      	str	r3, [r7, #16]
  uint32_t words = length / 4;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	617b      	str	r3, [r7, #20]

  // Erase the destination sector
  f_status = flash_erase(dest_address);
 800280e:	68b8      	ldr	r0, [r7, #8]
 8002810:	f005 fb8a 	bl	8007f28 <flash_erase>
 8002814:	4603      	mov	r3, r0
 8002816:	77fb      	strb	r3, [r7, #31]
  if (f_status != FLASH_OK) {
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <copy_firmware_to_second_sector+0x4c>

    LogError(("Failed to erase second flash sector"));
 800281e:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <copy_firmware_to_second_sector+0xac>)
 8002820:	f44f 73ec 	mov.w	r3, #472	@ 0x1d8
 8002824:	491e      	ldr	r1, [pc, #120]	@ (80028a0 <copy_firmware_to_second_sector+0xb0>)
 8002826:	481f      	ldr	r0, [pc, #124]	@ (80028a4 <copy_firmware_to_second_sector+0xb4>)
 8002828:	f00e fa4a 	bl	8010cc0 <iprintf>
 800282c:	481e      	ldr	r0, [pc, #120]	@ (80028a8 <copy_firmware_to_second_sector+0xb8>)
 800282e:	f00e fa47 	bl	8010cc0 <iprintf>
 8002832:	481e      	ldr	r0, [pc, #120]	@ (80028ac <copy_firmware_to_second_sector+0xbc>)
 8002834:	f00e faac 	bl	8010d90 <puts>
    return false;
 8002838:	2300      	movs	r3, #0
 800283a:	e02a      	b.n	8002892 <copy_firmware_to_second_sector+0xa2>
  }

  // Copy data from source to destination
  f_status = flash_write(&write_address, src, words);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	b29a      	uxth	r2, r3
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	4618      	mov	r0, r3
 8002848:	f005 fba4 	bl	8007f94 <flash_write>
 800284c:	4603      	mov	r3, r0
 800284e:	77fb      	strb	r3, [r7, #31]
  if (f_status != FLASH_OK) {
 8002850:	7ffb      	ldrb	r3, [r7, #31]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00e      	beq.n	8002874 <copy_firmware_to_second_sector+0x84>

     LogError(("Failed to write to second flash sector"));
 8002856:	4a11      	ldr	r2, [pc, #68]	@ (800289c <copy_firmware_to_second_sector+0xac>)
 8002858:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800285c:	4910      	ldr	r1, [pc, #64]	@ (80028a0 <copy_firmware_to_second_sector+0xb0>)
 800285e:	4811      	ldr	r0, [pc, #68]	@ (80028a4 <copy_firmware_to_second_sector+0xb4>)
 8002860:	f00e fa2e 	bl	8010cc0 <iprintf>
 8002864:	4812      	ldr	r0, [pc, #72]	@ (80028b0 <copy_firmware_to_second_sector+0xc0>)
 8002866:	f00e fa2b 	bl	8010cc0 <iprintf>
 800286a:	4810      	ldr	r0, [pc, #64]	@ (80028ac <copy_firmware_to_second_sector+0xbc>)
 800286c:	f00e fa90 	bl	8010d90 <puts>
     return false;
 8002870:	2300      	movs	r3, #0
 8002872:	e00e      	b.n	8002892 <copy_firmware_to_second_sector+0xa2>
  }

  LogInfo(("Successfully copied firmware to second sector at 0x%08lX", dest_address));
 8002874:	4a09      	ldr	r2, [pc, #36]	@ (800289c <copy_firmware_to_second_sector+0xac>)
 8002876:	f44f 73f2 	mov.w	r3, #484	@ 0x1e4
 800287a:	4909      	ldr	r1, [pc, #36]	@ (80028a0 <copy_firmware_to_second_sector+0xb0>)
 800287c:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <copy_firmware_to_second_sector+0xc4>)
 800287e:	f00e fa1f 	bl	8010cc0 <iprintf>
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <copy_firmware_to_second_sector+0xc8>)
 8002886:	f00e fa1b 	bl	8010cc0 <iprintf>
 800288a:	4808      	ldr	r0, [pc, #32]	@ (80028ac <copy_firmware_to_second_sector+0xbc>)
 800288c:	f00e fa80 	bl	8010d90 <puts>
  return true;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	08014e40 	.word	0x08014e40
 80028a0:	08014e54 	.word	0x08014e54
 80028a4:	08014e58 	.word	0x08014e58
 80028a8:	08015130 	.word	0x08015130
 80028ac:	08014e8c 	.word	0x08014e8c
 80028b0:	08015154 	.word	0x08015154
 80028b4:	08014f58 	.word	0x08014f58
 80028b8:	0801517c 	.word	0x0801517c

080028bc <finish_download>:

static void finish_download() {
 80028bc:	b580      	push	{r7, lr}
 80028be:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 80028c2:	af04      	add	r7, sp, #16

  /* TODO: Do something with the completed download */
  /* Start the bootloader */
  char topic_buffer[ TOPIC_BUFFER_SIZE + 1 ] = { 0 };
 80028c4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80028c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028cc:	4618      	mov	r0, r3
 80028ce:	f240 1301 	movw	r3, #257	@ 0x101
 80028d2:	461a      	mov	r2, r3
 80028d4:	2100      	movs	r1, #0
 80028d6:	f00e fbeb 	bl	80110b0 <memset>
  size_t topic_buffer_length = 0U;
 80028da:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80028de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  char message_buffer[ UPDATE_JOB_MSG_LENGTH ] = { 0 };
 80028e6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80028ea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80028ee:	4618      	mov	r0, r3
 80028f0:	2330      	movs	r3, #48	@ 0x30
 80028f2:	461a      	mov	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f00e fbdb 	bl	80110b0 <memset>
  mqtt_queue_item_t queue_item = { 0 };
 80028fa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80028fe:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 8002902:	4618      	mov	r0, r3
 8002904:	f44f 63dc 	mov.w	r3, #1760	@ 0x6e0
 8002908:	461a      	mov	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f00e fbd0 	bl	80110b0 <memset>


  if (!copy_firmware_to_second_sector(USER_FLASH_SECOND_SECTOR_ADDRESS, USER_FLASH_FIRST_SECTOR_ADDRESS , total_bytes_received)){
 8002910:	4b80      	ldr	r3, [pc, #512]	@ (8002b14 <finish_download+0x258>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4980      	ldr	r1, [pc, #512]	@ (8002b18 <finish_download+0x25c>)
 8002918:	4880      	ldr	r0, [pc, #512]	@ (8002b1c <finish_download+0x260>)
 800291a:	f7ff ff69 	bl	80027f0 <copy_firmware_to_second_sector>
 800291e:	4603      	mov	r3, r0
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8082 	beq.w	8002a30 <finish_download+0x174>
    LogError(("Failed to copy firmware to second sector! Aborting OTA update."));
 800292c:	4a7c      	ldr	r2, [pc, #496]	@ (8002b20 <finish_download+0x264>)
 800292e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002932:	497c      	ldr	r1, [pc, #496]	@ (8002b24 <finish_download+0x268>)
 8002934:	487c      	ldr	r0, [pc, #496]	@ (8002b28 <finish_download+0x26c>)
 8002936:	f00e f9c3 	bl	8010cc0 <iprintf>
 800293a:	487c      	ldr	r0, [pc, #496]	@ (8002b2c <finish_download+0x270>)
 800293c:	f00e f9c0 	bl	8010cc0 <iprintf>
 8002940:	487b      	ldr	r0, [pc, #492]	@ (8002b30 <finish_download+0x274>)
 8002942:	f00e fa25 	bl	8010d90 <puts>
    /*
     * AWS IoT Jobs library:
     * Creating the MQTT topic to update the status of OTA job.
     */
    Jobs_Update(topic_buffer, TOPIC_BUFFER_SIZE, CLIENT_ID, strlen(CLIENT_ID),
                global_job_id, strlen(global_job_id), &topic_buffer_length);
 8002946:	487b      	ldr	r0, [pc, #492]	@ (8002b34 <finish_download+0x278>)
 8002948:	f7fd fcb2 	bl	80002b0 <strlen>
 800294c:	4603      	mov	r3, r0
    Jobs_Update(topic_buffer, TOPIC_BUFFER_SIZE, CLIENT_ID, strlen(CLIENT_ID),
 800294e:	b29b      	uxth	r3, r3
 8002950:	f207 7014 	addw	r0, r7, #1812	@ 0x714
 8002954:	f507 62e2 	add.w	r2, r7, #1808	@ 0x710
 8002958:	9202      	str	r2, [sp, #8]
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	4b75      	ldr	r3, [pc, #468]	@ (8002b34 <finish_download+0x278>)
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	230f      	movs	r3, #15
 8002962:	4a75      	ldr	r2, [pc, #468]	@ (8002b38 <finish_download+0x27c>)
 8002964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002968:	f009 fefa 	bl	800c760 <Jobs_Update>
    /*
     * AWS IoT Jobs library:
     * Creating the message which contains the status of OTA job.
     * It will be published on the topic created in the previous step.
     */
    size_t message_buffer_length = Jobs_UpdateMsg(Failed, "CRC Error", 8U,
 800296c:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 8002970:	2230      	movs	r2, #48	@ 0x30
 8002972:	9200      	str	r2, [sp, #0]
 8002974:	2208      	movs	r2, #8
 8002976:	4971      	ldr	r1, [pc, #452]	@ (8002b3c <finish_download+0x280>)
 8002978:	2002      	movs	r0, #2
 800297a:	f009 ff55 	bl	800c828 <Jobs_UpdateMsg>
 800297e:	f8c7 0818 	str.w	r0, [r7, #2072]	@ 0x818
                                                 message_buffer, UPDATE_JOB_MSG_LENGTH);
    mqtt_publish(topic_buffer, topic_buffer_length, (uint8_t *)message_buffer, message_buffer_length);
 8002982:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002986:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	f507 62dc 	add.w	r2, r7, #1760	@ 0x6e0
 8002990:	f207 7014 	addw	r0, r7, #1812	@ 0x714
 8002994:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002998:	f00c fea2 	bl	800f6e0 <mqtt_publish>

    // Populate queue item
    queue_item.operation = MQTT_OPERATION_PUBLISH;
 800299c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80029a0:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    queue_item.payload_length = message_buffer_length;
 80029a8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80029ac:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 80029b0:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80029b4:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
    queue_item.topic_length = topic_buffer_length;
 80029b8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80029bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80029c6:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 80029ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    memcpy(queue_item.payload, message_buffer, message_buffer_length );
 80029ce:	f507 61dc 	add.w	r1, r7, #1760	@ 0x6e0
 80029d2:	463b      	mov	r3, r7
 80029d4:	339c      	adds	r3, #156	@ 0x9c
 80029d6:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80029da:	4618      	mov	r0, r3
 80029dc:	f00e fc51 	bl	8011282 <memcpy>
    memcpy(queue_item.topic, topic_buffer, topic_buffer_length );
 80029e0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80029e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f207 7114 	addw	r1, r7, #1812	@ 0x714
 80029ee:	463b      	mov	r3, r7
 80029f0:	3301      	adds	r3, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f00e fc45 	bl	8011282 <memcpy>

    // Send to TX queue
    if (xQueueSend(mqtt_tx_queue, &queue_item, portMAX_DELAY) == pdPASS) {
 80029f8:	4b51      	ldr	r3, [pc, #324]	@ (8002b40 <finish_download+0x284>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	4639      	mov	r1, r7
 80029fe:	2300      	movs	r3, #0
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	f005 fd54 	bl	80084b0 <xQueueGenericSend>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d17c      	bne.n	8002b08 <finish_download+0x24c>
      LogInfo(("Queued MQTT publish: Topic='%s'", topic_buffer));
 8002a0e:	4a44      	ldr	r2, [pc, #272]	@ (8002b20 <finish_download+0x264>)
 8002a10:	f240 230e 	movw	r3, #526	@ 0x20e
 8002a14:	4943      	ldr	r1, [pc, #268]	@ (8002b24 <finish_download+0x268>)
 8002a16:	484b      	ldr	r0, [pc, #300]	@ (8002b44 <finish_download+0x288>)
 8002a18:	f00e f952 	bl	8010cc0 <iprintf>
 8002a1c:	f207 7314 	addw	r3, r7, #1812	@ 0x714
 8002a20:	4619      	mov	r1, r3
 8002a22:	4849      	ldr	r0, [pc, #292]	@ (8002b48 <finish_download+0x28c>)
 8002a24:	f00e f94c 	bl	8010cc0 <iprintf>
 8002a28:	4841      	ldr	r0, [pc, #260]	@ (8002b30 <finish_download+0x274>)
 8002a2a:	f00e f9b1 	bl	8010d90 <puts>

    LogInfo( ("\033[1;32mOTA Completed successfully!\033[0m\n" ) );

    run_application();
  }
}
 8002a2e:	e06b      	b.n	8002b08 <finish_download+0x24c>
    LogInfo(("Flash complete.... Jumping to User App"));
 8002a30:	4a3b      	ldr	r2, [pc, #236]	@ (8002b20 <finish_download+0x264>)
 8002a32:	f240 2312 	movw	r3, #530	@ 0x212
 8002a36:	493b      	ldr	r1, [pc, #236]	@ (8002b24 <finish_download+0x268>)
 8002a38:	4842      	ldr	r0, [pc, #264]	@ (8002b44 <finish_download+0x288>)
 8002a3a:	f00e f941 	bl	8010cc0 <iprintf>
 8002a3e:	4843      	ldr	r0, [pc, #268]	@ (8002b4c <finish_download+0x290>)
 8002a40:	f00e f93e 	bl	8010cc0 <iprintf>
 8002a44:	483a      	ldr	r0, [pc, #232]	@ (8002b30 <finish_download+0x274>)
 8002a46:	f00e f9a3 	bl	8010d90 <puts>
                 strlen( global_job_id ),
 8002a4a:	483a      	ldr	r0, [pc, #232]	@ (8002b34 <finish_download+0x278>)
 8002a4c:	f7fd fc30 	bl	80002b0 <strlen>
 8002a50:	4603      	mov	r3, r0
    Jobs_Update( topic_buffer,
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f207 7014 	addw	r0, r7, #1812	@ 0x714
 8002a58:	f507 62e2 	add.w	r2, r7, #1808	@ 0x710
 8002a5c:	9202      	str	r2, [sp, #8]
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <finish_download+0x278>)
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	230f      	movs	r3, #15
 8002a66:	4a34      	ldr	r2, [pc, #208]	@ (8002b38 <finish_download+0x27c>)
 8002a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a6c:	f009 fe78 	bl	800c760 <Jobs_Update>
    size_t message_buffer_length = Jobs_UpdateMsg( Succeeded,
 8002a70:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 8002a74:	2230      	movs	r2, #48	@ 0x30
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4935      	ldr	r1, [pc, #212]	@ (8002b50 <finish_download+0x294>)
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f009 fed3 	bl	800c828 <Jobs_UpdateMsg>
 8002a82:	f8c7 081c 	str.w	r0, [r7, #2076]	@ 0x81c
    queue_item.operation = MQTT_OPERATION_PUBLISH;
 8002a86:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002a8a:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    queue_item.payload_length = message_buffer_length;
 8002a92:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002a96:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 8002a9a:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8002a9e:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
    queue_item.topic_length = topic_buffer_length;
 8002aa2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002aa6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002ab0:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 8002ab4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    memcpy(queue_item.payload, message_buffer, message_buffer_length );
 8002ab8:	f507 61dc 	add.w	r1, r7, #1760	@ 0x6e0
 8002abc:	463b      	mov	r3, r7
 8002abe:	339c      	adds	r3, #156	@ 0x9c
 8002ac0:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00e fbdc 	bl	8011282 <memcpy>
    memcpy(queue_item.topic, topic_buffer, topic_buffer_length );
 8002aca:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002ace:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f207 7114 	addw	r1, r7, #1812	@ 0x714
 8002ad8:	463b      	mov	r3, r7
 8002ada:	3301      	adds	r3, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00e fbd0 	bl	8011282 <memcpy>
    vTaskDelay(pdMS_TO_TICKS(1000));
 8002ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ae6:	f006 fab9 	bl	800905c <vTaskDelay>
    LogInfo( ("\033[1;32mOTA Completed successfully!\033[0m\n" ) );
 8002aea:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <finish_download+0x264>)
 8002aec:	f240 233a 	movw	r3, #570	@ 0x23a
 8002af0:	490c      	ldr	r1, [pc, #48]	@ (8002b24 <finish_download+0x268>)
 8002af2:	4814      	ldr	r0, [pc, #80]	@ (8002b44 <finish_download+0x288>)
 8002af4:	f00e f8e4 	bl	8010cc0 <iprintf>
 8002af8:	4816      	ldr	r0, [pc, #88]	@ (8002b54 <finish_download+0x298>)
 8002afa:	f00e f949 	bl	8010d90 <puts>
 8002afe:	480c      	ldr	r0, [pc, #48]	@ (8002b30 <finish_download+0x274>)
 8002b00:	f00e f946 	bl	8010d90 <puts>
    run_application();
 8002b04:	f7ff fe6c 	bl	80027e0 <run_application>
}
 8002b08:	bf00      	nop
 8002b0a:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000bcc 	.word	0x20000bcc
 8002b18:	08020000 	.word	0x08020000
 8002b1c:	08040000 	.word	0x08040000
 8002b20:	08014e40 	.word	0x08014e40
 8002b24:	08014e54 	.word	0x08014e54
 8002b28:	08014e58 	.word	0x08014e58
 8002b2c:	080151b8 	.word	0x080151b8
 8002b30:	08014e8c 	.word	0x08014e8c
 8002b34:	20000bd0 	.word	0x20000bd0
 8002b38:	08014eac 	.word	0x08014eac
 8002b3c:	080151f8 	.word	0x080151f8
 8002b40:	2000033c 	.word	0x2000033c
 8002b44:	08014f58 	.word	0x08014f58
 8002b48:	08015204 	.word	0x08015204
 8002b4c:	08015224 	.word	0x08015224
 8002b50:	0801524c 	.word	0x0801524c
 8002b54:	08015250 	.word	0x08015250

08002b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	@ (8002c2c <HAL_I2C_MspInit+0x84>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d12c      	bne.n	8002c24 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_I2C_MspInit+0x88>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <HAL_I2C_MspInit+0x88>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_I2C_MspInit+0x88>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bec:	2312      	movs	r3, #18
 8002bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <HAL_I2C_MspInit+0x8c>)
 8002c04:	f001 fbb2 	bl	800436c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <HAL_I2C_MspInit+0x88>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <HAL_I2C_MspInit+0x88>)
 8002c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_I2C_MspInit+0x88>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	@ 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020400 	.word	0x40020400

08002c38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	@ 0x30
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4d      	ldr	r2, [pc, #308]	@ (8002d8c <HAL_UART_MspInit+0x154>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d163      	bne.n	8002d22 <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	4a4b      	ldr	r2, [pc, #300]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002c64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6a:	4b49      	ldr	r3, [pc, #292]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a44      	ldr	r2, [pc, #272]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b42      	ldr	r3, [pc, #264]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c92:	2303      	movs	r3, #3
 8002c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	4619      	mov	r1, r3
 8002cac:	4839      	ldr	r0, [pc, #228]	@ (8002d94 <HAL_UART_MspInit+0x15c>)
 8002cae:	f001 fb5d 	bl	800436c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002cb2:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cb4:	4a39      	ldr	r2, [pc, #228]	@ (8002d9c <HAL_UART_MspInit+0x164>)
 8002cb6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002cb8:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cbe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc0:	4b35      	ldr	r3, [pc, #212]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cd2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cda:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002ce2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ce6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cee:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002cf4:	4828      	ldr	r0, [pc, #160]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002cf6:	f000 fbf5 	bl	80034e4 <HAL_DMA_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d00:	f7ff f836 	bl	8001d70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002d08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <HAL_UART_MspInit+0x160>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	2034      	movs	r0, #52	@ 0x34
 8002d16:	f000 fba8 	bl	800346a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d1a:	2034      	movs	r0, #52	@ 0x34
 8002d1c:	f000 fbc1 	bl	80034a2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d20:	e030      	b.n	8002d84 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	@ (8002da0 <HAL_UART_MspInit+0x168>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d12b      	bne.n	8002d84 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <HAL_UART_MspInit+0x158>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d64:	230c      	movs	r3, #12
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d74:	2307      	movs	r3, #7
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <HAL_UART_MspInit+0x15c>)
 8002d80:	f001 faf4 	bl	800436c <HAL_GPIO_Init>
}
 8002d84:	bf00      	nop
 8002d86:	3730      	adds	r7, #48	@ 0x30
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40004c00 	.word	0x40004c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	200002dc 	.word	0x200002dc
 8002d9c:	40026040 	.word	0x40026040
 8002da0:	40004400 	.word	0x40004400

08002da4 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <HAL_UART_MspDeInit+0x60>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d112      	bne.n	8002ddc <HAL_UART_MspDeInit+0x38>
  {
    /* USER CODE BEGIN UART4_MspDeInit 0 */

    /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8002db6:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <HAL_UART_MspDeInit+0x64>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	4a13      	ldr	r2, [pc, #76]	@ (8002e08 <HAL_UART_MspDeInit+0x64>)
 8002dbc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002dc0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <HAL_UART_MspDeInit+0x68>)
 8002dc6:	f001 fc65 	bl	8004694 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fc36 	bl	8003640 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8002dd4:	2034      	movs	r0, #52	@ 0x34
 8002dd6:	f000 fb72 	bl	80034be <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002dda:	e00e      	b.n	8002dfa <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e10 <HAL_UART_MspDeInit+0x6c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d109      	bne.n	8002dfa <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002de6:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_UART_MspDeInit+0x64>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <HAL_UART_MspDeInit+0x64>)
 8002dec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002df0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8002df2:	210c      	movs	r1, #12
 8002df4:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <HAL_UART_MspDeInit+0x68>)
 8002df6:	f001 fc4d 	bl	8004694 <HAL_GPIO_DeInit>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40004c00 	.word	0x40004c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40004400 	.word	0x40004400

08002e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08e      	sub	sp, #56	@ 0x38
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_InitTick+0xe4>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	4a32      	ldr	r2, [pc, #200]	@ (8002ef8 <HAL_InitTick+0xe4>)
 8002e2e:	f043 0310 	orr.w	r3, r3, #16
 8002e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e34:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_InitTick+0xe4>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e40:	f107 0210 	add.w	r2, r7, #16
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 ff8e 	bl	8004d6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e5a:	f001 ff5f 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8002e5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002e60:	e004      	b.n	8002e6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e62:	f001 ff5b 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8002e66:	4603      	mov	r3, r0
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6e:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_InitTick+0xe8>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	3b01      	subs	r3, #1
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e7a:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <HAL_InitTick+0xec>)
 8002e7c:	4a21      	ldr	r2, [pc, #132]	@ (8002f04 <HAL_InitTick+0xf0>)
 8002e7e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e80:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <HAL_InitTick+0xec>)
 8002e82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e88:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_InitTick+0xec>)
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <HAL_InitTick+0xec>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e94:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <HAL_InitTick+0xec>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9a:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <HAL_InitTick+0xec>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ea0:	4817      	ldr	r0, [pc, #92]	@ (8002f00 <HAL_InitTick+0xec>)
 8002ea2:	f002 fd5b 	bl	800595c <HAL_TIM_Base_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002eac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11b      	bne.n	8002eec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002eb4:	4812      	ldr	r0, [pc, #72]	@ (8002f00 <HAL_InitTick+0xec>)
 8002eb6:	f002 fdab 	bl	8005a10 <HAL_TIM_Base_Start_IT>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ec8:	2036      	movs	r0, #54	@ 0x36
 8002eca:	f000 faea 	bl	80034a2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	d808      	bhi.n	8002ee6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	2036      	movs	r0, #54	@ 0x36
 8002eda:	f000 fac6 	bl	800346a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_InitTick+0xf4>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e002      	b.n	8002eec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002eec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3738      	adds	r7, #56	@ 0x38
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	431bde83 	.word	0x431bde83
 8002f00:	200012f0 	.word	0x200012f0
 8002f04:	40001000 	.word	0x40001000
 8002f08:	20000008 	.word	0x20000008

08002f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <NMI_Handler+0x4>

08002f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  //__BKPT(0);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <HardFault_Handler+0x4>

08002f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <MemManage_Handler+0x4>

08002f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f34 <DebugMon_Handler>:
#endif
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002f48:	4802      	ldr	r0, [pc, #8]	@ (8002f54 <DMA1_Stream2_IRQHandler+0x10>)
 8002f4a:	f000 fcc1 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200002dc 	.word	0x200002dc

08002f58 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002f5c:	4802      	ldr	r0, [pc, #8]	@ (8002f68 <UART4_IRQHandler+0x10>)
 8002f5e:	f003 f97f 	bl	8006260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000024c 	.word	0x2000024c

08002f6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f70:	4802      	ldr	r0, [pc, #8]	@ (8002f7c <TIM6_DAC_IRQHandler+0x10>)
 8002f72:	f002 fdbd 	bl	8005af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200012f0 	.word	0x200012f0

08002f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return 1;
 8002f84:	2301      	movs	r3, #1
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_kill>:

int _kill(int pid, int sig)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f9a:	f00e f945 	bl	8011228 <__errno>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2216      	movs	r2, #22
 8002fa2:	601a      	str	r2, [r3, #0]
  return -1;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_exit>:

void _exit (int status)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ffe7 	bl	8002f90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fc2:	bf00      	nop
 8002fc4:	e7fd      	b.n	8002fc2 <_exit+0x12>

08002fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e00a      	b.n	8002fee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fd8:	f3af 8000 	nop.w
 8002fdc:	4601      	mov	r1, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	60ba      	str	r2, [r7, #8]
 8002fe4:	b2ca      	uxtb	r2, r1
 8002fe6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	dbf0      	blt.n	8002fd8 <_read+0x12>
  }

  return len;
 8002ff6:	687b      	ldr	r3, [r7, #4]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003028:	605a      	str	r2, [r3, #4]
  return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_isatty>:

int _isatty(int file)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003040:	2301      	movs	r3, #1
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003070:	4a14      	ldr	r2, [pc, #80]	@ (80030c4 <_sbrk+0x5c>)
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <_sbrk+0x60>)
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800307c:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <_sbrk+0x64>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <_sbrk+0x64>)
 8003086:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <_sbrk+0x68>)
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800308a:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	429a      	cmp	r2, r3
 8003096:	d207      	bcs.n	80030a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003098:	f00e f8c6 	bl	8011228 <__errno>
 800309c:	4603      	mov	r3, r0
 800309e:	220c      	movs	r2, #12
 80030a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	e009      	b.n	80030bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <_sbrk+0x64>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ae:	4b07      	ldr	r3, [pc, #28]	@ (80030cc <_sbrk+0x64>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	4a05      	ldr	r2, [pc, #20]	@ (80030cc <_sbrk+0x64>)
 80030b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20020000 	.word	0x20020000
 80030c8:	00000600 	.word	0x00000600
 80030cc:	20001338 	.word	0x20001338
 80030d0:	20010960 	.word	0x20010960

080030d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <SystemInit+0x20>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <SystemInit+0x20>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <Reset_Handler>:
 80030f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003130 <LoopFillZerobss+0xe>
 80030fc:	f7ff ffea 	bl	80030d4 <SystemInit>
 8003100:	480c      	ldr	r0, [pc, #48]	@ (8003134 <LoopFillZerobss+0x12>)
 8003102:	490d      	ldr	r1, [pc, #52]	@ (8003138 <LoopFillZerobss+0x16>)
 8003104:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <LoopFillZerobss+0x1a>)
 8003106:	2300      	movs	r3, #0
 8003108:	e002      	b.n	8003110 <LoopCopyDataInit>

0800310a <CopyDataInit>:
 800310a:	58d4      	ldr	r4, [r2, r3]
 800310c:	50c4      	str	r4, [r0, r3]
 800310e:	3304      	adds	r3, #4

08003110 <LoopCopyDataInit>:
 8003110:	18c4      	adds	r4, r0, r3
 8003112:	428c      	cmp	r4, r1
 8003114:	d3f9      	bcc.n	800310a <CopyDataInit>
 8003116:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <LoopFillZerobss+0x1e>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	@ (8003144 <LoopFillZerobss+0x22>)
 800311a:	2300      	movs	r3, #0
 800311c:	e001      	b.n	8003122 <LoopFillZerobss>

0800311e <FillZerobss>:
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	3204      	adds	r2, #4

08003122 <LoopFillZerobss>:
 8003122:	42a2      	cmp	r2, r4
 8003124:	d3fb      	bcc.n	800311e <FillZerobss>
 8003126:	f00e f885 	bl	8011234 <__libc_init_array>
 800312a:	f7fe fab7 	bl	800169c <main>
 800312e:	4770      	bx	lr
 8003130:	20020000 	.word	0x20020000
 8003134:	20000000 	.word	0x20000000
 8003138:	200001dc 	.word	0x200001dc
 800313c:	08016c00 	.word	0x08016c00
 8003140:	200001dc 	.word	0x200001dc
 8003144:	20010960 	.word	0x20010960

08003148 <ADC_IRQHandler>:
 8003148:	e7fe      	b.n	8003148 <ADC_IRQHandler>
	...

0800314c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003150:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <HAL_Init+0x40>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0d      	ldr	r2, [pc, #52]	@ (800318c <HAL_Init+0x40>)
 8003156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800315a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <HAL_Init+0x40>)
 8003162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003168:	4b08      	ldr	r3, [pc, #32]	@ (800318c <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a07      	ldr	r2, [pc, #28]	@ (800318c <HAL_Init+0x40>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003174:	2003      	movs	r0, #3
 8003176:	f000 f96d 	bl	8003454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800317a:	200f      	movs	r0, #15
 800317c:	f7ff fe4a 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003180:	f7ff fcea 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023c00 	.word	0x40023c00

08003190 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <HAL_DeInit+0x4c>)
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <HAL_DeInit+0x50>)
 8003198:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800319a:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <HAL_DeInit+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80031a0:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <HAL_DeInit+0x4c>)
 80031a2:	4a10      	ldr	r2, [pc, #64]	@ (80031e4 <HAL_DeInit+0x54>)
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80031a6:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <HAL_DeInit+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_DeInit+0x4c>)
 80031ae:	4a0e      	ldr	r2, [pc, #56]	@ (80031e8 <HAL_DeInit+0x58>)
 80031b0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_DeInit+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80031b8:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <HAL_DeInit+0x4c>)
 80031ba:	2281      	movs	r2, #129	@ 0x81
 80031bc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <HAL_DeInit+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_DeInit+0x4c>)
 80031c6:	2203      	movs	r2, #3
 80031c8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80031ca:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <HAL_DeInit+0x4c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80031d0:	f000 f80c 	bl	80031ec <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	3fffc9ff 	.word	0x3fffc9ff
 80031e4:	00c77933 	.word	0x00c77933
 80031e8:	206010ff 	.word	0x206010ff

080031ec <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	@ (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000000c 	.word	0x2000000c
 8003220:	2000133c 	.word	0x2000133c

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	2000133c 	.word	0x2000133c

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff ffee 	bl	8003224 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <HAL_Delay+0x44>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffde 	bl	8003224 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000000c 	.word	0x2000000c

08003284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003294:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032a0:	4013      	ands	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b6:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	60d3      	str	r3, [r2, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <__NVIC_GetPriorityGrouping+0x18>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 0307 	and.w	r3, r3, #7
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	db0b      	blt.n	8003312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4907      	ldr	r1, [pc, #28]	@ (8003320 <__NVIC_EnableIRQ+0x38>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2001      	movs	r0, #1
 800330a:	fa00 f202 	lsl.w	r2, r0, r2
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db12      	blt.n	800335c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	490a      	ldr	r1, [pc, #40]	@ (8003368 <__NVIC_DisableIRQ+0x44>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2001      	movs	r0, #1
 8003346:	fa00 f202 	lsl.w	r2, r0, r2
 800334a:	3320      	adds	r3, #32
 800334c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003350:	f3bf 8f4f 	dsb	sy
}
 8003354:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003356:	f3bf 8f6f 	isb	sy
}
 800335a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	@ (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	@ 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800342c:	f3bf 8f4f 	dsb	sy
}
 8003430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <__NVIC_SystemReset+0x24>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800343a:	4904      	ldr	r1, [pc, #16]	@ (800344c <__NVIC_SystemReset+0x24>)
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <__NVIC_SystemReset+0x28>)
 800343e:	4313      	orrs	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003442:	f3bf 8f4f 	dsb	sy
}
 8003446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <__NVIC_SystemReset+0x20>
 800344c:	e000ed00 	.word	0xe000ed00
 8003450:	05fa0004 	.word	0x05fa0004

08003454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff11 	bl	8003284 <__NVIC_SetPriorityGrouping>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800347c:	f7ff ff26 	bl	80032cc <__NVIC_GetPriorityGrouping>
 8003480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff9a 	bl	80033c0 <NVIC_EncodePriority>
 800348c:	4602      	mov	r2, r0
 800348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff69 	bl	800336c <__NVIC_SetPriority>
}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff19 	bl	80032e8 <__NVIC_EnableIRQ>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_DisableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80034de:	f7ff ffa3 	bl	8003428 <__NVIC_SystemReset>
	...

080034e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff fe98 	bl	8003224 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e099      	b.n	8003634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003520:	e00f      	b.n	8003542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003522:	f7ff fe7f 	bl	8003224 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b05      	cmp	r3, #5
 800352e:	d908      	bls.n	8003542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e078      	b.n	8003634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e8      	bne.n	8003522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4b38      	ldr	r3, [pc, #224]	@ (800363c <HAL_DMA_Init+0x158>)
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800356e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d117      	bne.n	8003606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fb5f 	bl	8003cac <DMA_CheckFifoParam>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2240      	movs	r2, #64	@ 0x40
 80035f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003602:	2301      	movs	r3, #1
 8003604:	e016      	b.n	8003634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fb16 	bl	8003c40 <DMA_CalcBaseAndBitshift>
 8003614:	4603      	mov	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361c:	223f      	movs	r2, #63	@ 0x3f
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	f010803f 	.word	0xf010803f

08003640 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e050      	b.n	80036f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d101      	bne.n	8003662 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	e048      	b.n	80036f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2221      	movs	r2, #33	@ 0x21
 80036a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 facc 	bl	8003c40 <DMA_CalcBaseAndBitshift>
 80036a8:	4603      	mov	r3, r0
 80036aa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	223f      	movs	r2, #63	@ 0x3f
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_DMA_Start_IT+0x26>
 800371e:	2302      	movs	r3, #2
 8003720:	e040      	b.n	80037a4 <HAL_DMA_Start_IT+0xa8>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d12f      	bne.n	8003796 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fa4a 	bl	8003be4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	223f      	movs	r2, #63	@ 0x3f
 8003756:	409a      	lsls	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0216 	orr.w	r2, r2, #22
 800376a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e005      	b.n	80037a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7ff fd33 	bl	8003224 <HAL_GetTick>
 80037be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d008      	beq.n	80037de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2280      	movs	r2, #128	@ 0x80
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e052      	b.n	8003884 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0216 	bic.w	r2, r2, #22
 80037ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_DMA_Abort+0x62>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0208 	bic.w	r2, r2, #8
 800381c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382e:	e013      	b.n	8003858 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003830:	f7ff fcf8 	bl	8003224 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b05      	cmp	r3, #5
 800383c:	d90c      	bls.n	8003858 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e015      	b.n	8003884 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e4      	bne.n	8003830 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	223f      	movs	r2, #63	@ 0x3f
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d004      	beq.n	80038aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2280      	movs	r2, #128	@ 0x80
 80038a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e00c      	b.n	80038c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2205      	movs	r2, #5
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b18 <HAL_DMA_IRQHandler+0x248>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a8e      	ldr	r2, [pc, #568]	@ (8003b1c <HAL_DMA_IRQHandler+0x24c>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	2208      	movs	r2, #8
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01a      	beq.n	800393c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	2208      	movs	r2, #8
 800392a:	409a      	lsls	r2, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	2201      	movs	r2, #1
 8003942:	409a      	lsls	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395e:	2201      	movs	r2, #1
 8003960:	409a      	lsls	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	2204      	movs	r2, #4
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003994:	2204      	movs	r2, #4
 8003996:	409a      	lsls	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	2210      	movs	r2, #16
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d043      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03c      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	2210      	movs	r2, #16
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d018      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d024      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
 80039fe:	e01f      	b.n	8003a40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
 8003a10:	e016      	b.n	8003a40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0208 	bic.w	r2, r2, #8
 8003a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	2220      	movs	r2, #32
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 808f 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8087 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	2220      	movs	r2, #32
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d136      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0216 	bic.w	r2, r2, #22
 8003a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x1da>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	223f      	movs	r2, #63	@ 0x3f
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d07e      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
        }
        return;
 8003ae6:	e079      	b.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d031      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
 8003b14:	e02c      	b.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
 8003b16:	bf00      	nop
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d023      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
 8003b30:	e01e      	b.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10f      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0210 	bic.w	r2, r2, #16
 8003b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d032      	beq.n	8003bde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2205      	movs	r2, #5
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d307      	bcc.n	8003bb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f2      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x2cc>
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
 8003bda:	e000      	b.n	8003bde <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bdc:	bf00      	nop
    }
  }
}
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d108      	bne.n	8003c24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c22:	e007      	b.n	8003c34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	3b10      	subs	r3, #16
 8003c50:	4a14      	ldr	r2, [pc, #80]	@ (8003ca4 <DMA_CalcBaseAndBitshift+0x64>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c5a:	4a13      	ldr	r2, [pc, #76]	@ (8003ca8 <DMA_CalcBaseAndBitshift+0x68>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d909      	bls.n	8003c82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c80:	e007      	b.n	8003c92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	aaaaaaab 	.word	0xaaaaaaab
 8003ca8:	08016314 	.word	0x08016314

08003cac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11f      	bne.n	8003d06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d856      	bhi.n	8003d7a <DMA_CheckFifoParam+0xce>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <DMA_CheckFifoParam+0x28>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf7 	.word	0x08003cf7
 8003cdc:	08003ce5 	.word	0x08003ce5
 8003ce0:	08003d7b 	.word	0x08003d7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d046      	beq.n	8003d7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e043      	b.n	8003d7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cfe:	d140      	bne.n	8003d82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d04:	e03d      	b.n	8003d82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d0e:	d121      	bne.n	8003d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d837      	bhi.n	8003d86 <DMA_CheckFifoParam+0xda>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <DMA_CheckFifoParam+0x70>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d33 	.word	0x08003d33
 8003d24:	08003d2d 	.word	0x08003d2d
 8003d28:	08003d45 	.word	0x08003d45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	e030      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d025      	beq.n	8003d8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d42:	e022      	b.n	8003d8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d4c:	d11f      	bne.n	8003d8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d52:	e01c      	b.n	8003d8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d903      	bls.n	8003d62 <DMA_CheckFifoParam+0xb6>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d003      	beq.n	8003d68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d60:	e018      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
      break;
 8003d66:	e015      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      break;
 8003d78:	e00b      	b.n	8003d92 <DMA_CheckFifoParam+0xe6>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e00a      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e008      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e006      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e004      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e002      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
    }
  } 
  
  return status; 
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003db2:	4b23      	ldr	r3, [pc, #140]	@ (8003e40 <HAL_FLASH_Program+0x9c>)
 8003db4:	7e1b      	ldrb	r3, [r3, #24]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_FLASH_Program+0x1a>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e03b      	b.n	8003e36 <HAL_FLASH_Program+0x92>
 8003dbe:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <HAL_FLASH_Program+0x9c>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dc4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003dc8:	f000 f870 	bl	8003eac <FLASH_WaitForLastOperation>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d12b      	bne.n	8003e2e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003ddc:	783b      	ldrb	r3, [r7, #0]
 8003dde:	4619      	mov	r1, r3
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	f000 f91b 	bl	800401c <FLASH_Program_Byte>
 8003de6:	e016      	b.n	8003e16 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003dee:	883b      	ldrh	r3, [r7, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	68b8      	ldr	r0, [r7, #8]
 8003df4:	f000 f8ee 	bl	8003fd4 <FLASH_Program_HalfWord>
 8003df8:	e00d      	b.n	8003e16 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d105      	bne.n	8003e0c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f000 f8c3 	bl	8003f90 <FLASH_Program_Word>
 8003e0a:	e004      	b.n	8003e16 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e10:	68b8      	ldr	r0, [r7, #8]
 8003e12:	f000 f88b 	bl	8003f2c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e16:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e1a:	f000 f847 	bl	8003eac <FLASH_WaitForLastOperation>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003e22:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <HAL_FLASH_Program+0xa0>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4a07      	ldr	r2, [pc, #28]	@ (8003e44 <HAL_FLASH_Program+0xa0>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e2e:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <HAL_FLASH_Program+0x9c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	761a      	strb	r2, [r3, #24]

  return status;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20001340 	.word	0x20001340
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e52:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_FLASH_Unlock+0x38>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da0b      	bge.n	8003e72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_FLASH_Unlock+0x38>)
 8003e5c:	4a09      	ldr	r2, [pc, #36]	@ (8003e84 <HAL_FLASH_Unlock+0x3c>)
 8003e5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e60:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <HAL_FLASH_Unlock+0x38>)
 8003e62:	4a09      	ldr	r2, [pc, #36]	@ (8003e88 <HAL_FLASH_Unlock+0x40>)
 8003e64:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_FLASH_Unlock+0x38>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da01      	bge.n	8003e72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003e72:	79fb      	ldrb	r3, [r7, #7]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40023c00 	.word	0x40023c00
 8003e84:	45670123 	.word	0x45670123
 8003e88:	cdef89ab 	.word	0xcdef89ab

08003e8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_FLASH_Lock+0x1c>)
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <HAL_FLASH_Lock+0x1c>)
 8003e96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e9a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40023c00 	.word	0x40023c00

08003eac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <FLASH_WaitForLastOperation+0x78>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ebe:	f7ff f9b1 	bl	8003224 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003ec4:	e010      	b.n	8003ee8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d00c      	beq.n	8003ee8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <FLASH_WaitForLastOperation+0x38>
 8003ed4:	f7ff f9a6 	bl	8003224 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d201      	bcs.n	8003ee8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e019      	b.n	8003f1c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <FLASH_WaitForLastOperation+0x7c>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e8      	bne.n	8003ec6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <FLASH_WaitForLastOperation+0x7c>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <FLASH_WaitForLastOperation+0x7c>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003f06:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <FLASH_WaitForLastOperation+0x7c>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f12:	f000 f8a5 	bl	8004060 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0

}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20001340 	.word	0x20001340
 8003f28:	40023c00 	.word	0x40023c00

08003f2c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f38:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <FLASH_Program_DoubleWord+0x60>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4a13      	ldr	r2, [pc, #76]	@ (8003f8c <FLASH_Program_DoubleWord+0x60>)
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003f44:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <FLASH_Program_DoubleWord+0x60>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4a10      	ldr	r2, [pc, #64]	@ (8003f8c <FLASH_Program_DoubleWord+0x60>)
 8003f4a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003f4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003f50:	4b0e      	ldr	r3, [pc, #56]	@ (8003f8c <FLASH_Program_DoubleWord+0x60>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a0d      	ldr	r2, [pc, #52]	@ (8003f8c <FLASH_Program_DoubleWord+0x60>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003f62:	f3bf 8f6f 	isb	sy
}
 8003f66:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	000a      	movs	r2, r1
 8003f76:	2300      	movs	r3, #0
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	3104      	adds	r1, #4
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40023c00 	.word	0x40023c00

08003f90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd0 <FLASH_Program_Word+0x40>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd0 <FLASH_Program_Word+0x40>)
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <FLASH_Program_Word+0x40>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <FLASH_Program_Word+0x40>)
 8003fac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fb2:	4b07      	ldr	r3, [pc, #28]	@ (8003fd0 <FLASH_Program_Word+0x40>)
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4a06      	ldr	r2, [pc, #24]	@ (8003fd0 <FLASH_Program_Word+0x40>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40023c00 	.word	0x40023c00

08003fd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <FLASH_Program_HalfWord+0x44>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8004018 <FLASH_Program_HalfWord+0x44>)
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <FLASH_Program_HalfWord+0x44>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	4a09      	ldr	r2, [pc, #36]	@ (8004018 <FLASH_Program_HalfWord+0x44>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ff8:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <FLASH_Program_HalfWord+0x44>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	4a06      	ldr	r2, [pc, #24]	@ (8004018 <FLASH_Program_HalfWord+0x44>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	801a      	strh	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023c00 	.word	0x40023c00

0800401c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <FLASH_Program_Byte+0x40>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	4a0b      	ldr	r2, [pc, #44]	@ (800405c <FLASH_Program_Byte+0x40>)
 800402e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004034:	4b09      	ldr	r3, [pc, #36]	@ (800405c <FLASH_Program_Byte+0x40>)
 8004036:	4a09      	ldr	r2, [pc, #36]	@ (800405c <FLASH_Program_Byte+0x40>)
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800403c:	4b07      	ldr	r3, [pc, #28]	@ (800405c <FLASH_Program_Byte+0x40>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4a06      	ldr	r2, [pc, #24]	@ (800405c <FLASH_Program_Byte+0x40>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	701a      	strb	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40023c00 	.word	0x40023c00

08004060 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004064:	4b2f      	ldr	r3, [pc, #188]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004070:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f043 0310 	orr.w	r3, r3, #16
 8004078:	4a2b      	ldr	r2, [pc, #172]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 800407a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800407c:	4b29      	ldr	r3, [pc, #164]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 800407e:	2210      	movs	r2, #16
 8004080:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004082:	4b28      	ldr	r3, [pc, #160]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800408e:	4b26      	ldr	r3, [pc, #152]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f043 0308 	orr.w	r3, r3, #8
 8004096:	4a24      	ldr	r2, [pc, #144]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 8004098:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800409a:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 800409c:	2220      	movs	r2, #32
 800409e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80040a0:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 80040b6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80040b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040ba:	2240      	movs	r2, #64	@ 0x40
 80040bc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80040be:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80040ca:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 80040d4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80040d6:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040d8:	2280      	movs	r2, #128	@ 0x80
 80040da:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80040e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 80040f2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040fa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004108:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	4a05      	ldr	r2, [pc, #20]	@ (8004128 <FLASH_SetErrorCode+0xc8>)
 8004112:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004114:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <FLASH_SetErrorCode+0xc4>)
 8004116:	2202      	movs	r2, #2
 8004118:	60da      	str	r2, [r3, #12]
  }
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40023c00 	.word	0x40023c00
 8004128:	20001340 	.word	0x20001340

0800412c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800413a:	4b31      	ldr	r3, [pc, #196]	@ (8004200 <HAL_FLASHEx_Erase+0xd4>)
 800413c:	7e1b      	ldrb	r3, [r3, #24]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_FLASHEx_Erase+0x1a>
 8004142:	2302      	movs	r3, #2
 8004144:	e058      	b.n	80041f8 <HAL_FLASHEx_Erase+0xcc>
 8004146:	4b2e      	ldr	r3, [pc, #184]	@ (8004200 <HAL_FLASHEx_Erase+0xd4>)
 8004148:	2201      	movs	r2, #1
 800414a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800414c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004150:	f7ff feac 	bl	8003eac <FLASH_WaitForLastOperation>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d148      	bne.n	80041f0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f04f 32ff 	mov.w	r2, #4294967295
 8004164:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d115      	bne.n	800419a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 f844 	bl	8004208 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004180:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004184:	f7ff fe92 	bl	8003eac <FLASH_WaitForLastOperation>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800418c:	4b1d      	ldr	r3, [pc, #116]	@ (8004204 <HAL_FLASHEx_Erase+0xd8>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a1c      	ldr	r2, [pc, #112]	@ (8004204 <HAL_FLASHEx_Erase+0xd8>)
 8004192:	f023 0304 	bic.w	r3, r3, #4
 8004196:	6113      	str	r3, [r2, #16]
 8004198:	e028      	b.n	80041ec <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	e01c      	b.n	80041dc <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	68b8      	ldr	r0, [r7, #8]
 80041ac:	f000 f850 	bl	8004250 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80041b4:	f7ff fe7a 	bl	8003eac <FLASH_WaitForLastOperation>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <HAL_FLASHEx_Erase+0xd8>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4a10      	ldr	r2, [pc, #64]	@ (8004204 <HAL_FLASHEx_Erase+0xd8>)
 80041c2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80041c6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	601a      	str	r2, [r3, #0]
          break;
 80041d4:	e00a      	b.n	80041ec <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d3da      	bcc.n	80041a2 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80041ec:	f000 f878 	bl	80042e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <HAL_FLASHEx_Erase+0xd4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	761a      	strb	r2, [r3, #24]

  return status;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20001340 	.word	0x20001340
 8004204:	40023c00 	.word	0x40023c00

08004208 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <FLASH_MassErase+0x44>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4a0c      	ldr	r2, [pc, #48]	@ (800424c <FLASH_MassErase+0x44>)
 800421a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800421e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <FLASH_MassErase+0x44>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4a09      	ldr	r2, [pc, #36]	@ (800424c <FLASH_MassErase+0x44>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800422c:	4b07      	ldr	r3, [pc, #28]	@ (800424c <FLASH_MassErase+0x44>)
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	4313      	orrs	r3, r2
 8004236:	4a05      	ldr	r2, [pc, #20]	@ (800424c <FLASH_MassErase+0x44>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423c:	6113      	str	r3, [r2, #16]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40023c00 	.word	0x40023c00

08004250 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e010      	b.n	800428e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d103      	bne.n	800427a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e009      	b.n	800428e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d103      	bne.n	8004288 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e002      	b.n	800428e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004288:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800428c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800428e:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800429a:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	490f      	ldr	r1, [pc, #60]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4a0c      	ldr	r2, [pc, #48]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80042b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4a07      	ldr	r2, [pc, #28]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042be:	f043 0302 	orr.w	r3, r3, #2
 80042c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80042c4:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <FLASH_Erase_Sector+0x8c>)
 80042ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ce:	6113      	str	r3, [r2, #16]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40023c00 	.word	0x40023c00

080042e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80042e4:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <FLASH_FlushCaches+0x88>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80042f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004368 <FLASH_FlushCaches+0x88>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004368 <FLASH_FlushCaches+0x88>)
 80042f6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80042fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <FLASH_FlushCaches+0x88>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a19      	ldr	r2, [pc, #100]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004302:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a16      	ldr	r2, [pc, #88]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800430e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004312:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004314:	4b14      	ldr	r3, [pc, #80]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800431a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800431e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004320:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d017      	beq.n	800435c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800432c:	4b0e      	ldr	r3, [pc, #56]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004336:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004338:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800433e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a07      	ldr	r2, [pc, #28]	@ (8004368 <FLASH_FlushCaches+0x88>)
 800434a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800434e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <FLASH_FlushCaches+0x88>)
 8004356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800435a:	6013      	str	r3, [r2, #0]
  }
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40023c00 	.word	0x40023c00

0800436c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e165      	b.n	8004654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004388:	2201      	movs	r2, #1
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	f040 8154 	bne.w	800464e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d005      	beq.n	80043be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d130      	bne.n	8004420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f4:	2201      	movs	r2, #1
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 0201 	and.w	r2, r3, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b03      	cmp	r3, #3
 800442a:	d017      	beq.n	800445c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	2203      	movs	r2, #3
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d123      	bne.n	80044b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	08da      	lsrs	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3208      	adds	r2, #8
 8004470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	220f      	movs	r2, #15
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	08da      	lsrs	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3208      	adds	r2, #8
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0203 	and.w	r2, r3, #3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80ae 	beq.w	800464e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4b5d      	ldr	r3, [pc, #372]	@ (800466c <HAL_GPIO_Init+0x300>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	4a5c      	ldr	r2, [pc, #368]	@ (800466c <HAL_GPIO_Init+0x300>)
 80044fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004500:	6453      	str	r3, [r2, #68]	@ 0x44
 8004502:	4b5a      	ldr	r3, [pc, #360]	@ (800466c <HAL_GPIO_Init+0x300>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450e:	4a58      	ldr	r2, [pc, #352]	@ (8004670 <HAL_GPIO_Init+0x304>)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	220f      	movs	r2, #15
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4f      	ldr	r2, [pc, #316]	@ (8004674 <HAL_GPIO_Init+0x308>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d025      	beq.n	8004586 <HAL_GPIO_Init+0x21a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4e      	ldr	r2, [pc, #312]	@ (8004678 <HAL_GPIO_Init+0x30c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <HAL_GPIO_Init+0x216>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4d      	ldr	r2, [pc, #308]	@ (800467c <HAL_GPIO_Init+0x310>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d019      	beq.n	800457e <HAL_GPIO_Init+0x212>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4c      	ldr	r2, [pc, #304]	@ (8004680 <HAL_GPIO_Init+0x314>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_GPIO_Init+0x20e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4b      	ldr	r2, [pc, #300]	@ (8004684 <HAL_GPIO_Init+0x318>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00d      	beq.n	8004576 <HAL_GPIO_Init+0x20a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4a      	ldr	r2, [pc, #296]	@ (8004688 <HAL_GPIO_Init+0x31c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_Init+0x206>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a49      	ldr	r2, [pc, #292]	@ (800468c <HAL_GPIO_Init+0x320>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_GPIO_Init+0x202>
 800456a:	2306      	movs	r3, #6
 800456c:	e00c      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 800456e:	2307      	movs	r3, #7
 8004570:	e00a      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 8004572:	2305      	movs	r3, #5
 8004574:	e008      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 8004576:	2304      	movs	r3, #4
 8004578:	e006      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 800457a:	2303      	movs	r3, #3
 800457c:	e004      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 800457e:	2302      	movs	r3, #2
 8004580:	e002      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_GPIO_Init+0x21c>
 8004586:	2300      	movs	r3, #0
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	f002 0203 	and.w	r2, r2, #3
 800458e:	0092      	lsls	r2, r2, #2
 8004590:	4093      	lsls	r3, r2
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004598:	4935      	ldr	r1, [pc, #212]	@ (8004670 <HAL_GPIO_Init+0x304>)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	3302      	adds	r3, #2
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004690 <HAL_GPIO_Init+0x324>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ca:	4a31      	ldr	r2, [pc, #196]	@ (8004690 <HAL_GPIO_Init+0x324>)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004690 <HAL_GPIO_Init+0x324>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f4:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <HAL_GPIO_Init+0x324>)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045fa:	4b25      	ldr	r3, [pc, #148]	@ (8004690 <HAL_GPIO_Init+0x324>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800461e:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <HAL_GPIO_Init+0x324>)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004624:	4b1a      	ldr	r3, [pc, #104]	@ (8004690 <HAL_GPIO_Init+0x324>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004648:	4a11      	ldr	r2, [pc, #68]	@ (8004690 <HAL_GPIO_Init+0x324>)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	f67f ae96 	bls.w	8004388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	3724      	adds	r7, #36	@ 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	40013800 	.word	0x40013800
 8004674:	40020000 	.word	0x40020000
 8004678:	40020400 	.word	0x40020400
 800467c:	40020800 	.word	0x40020800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40021000 	.word	0x40021000
 8004688:	40021400 	.word	0x40021400
 800468c:	40021800 	.word	0x40021800
 8004690:	40013c00 	.word	0x40013c00

08004694 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e0c7      	b.n	8004840 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046b0:	2201      	movs	r2, #1
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f040 80b7 	bne.w	800483a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046cc:	4a62      	ldr	r2, [pc, #392]	@ (8004858 <HAL_GPIO_DeInit+0x1c4>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	4013      	ands	r3, r2
 80046ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a5a      	ldr	r2, [pc, #360]	@ (800485c <HAL_GPIO_DeInit+0x1c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d025      	beq.n	8004742 <HAL_GPIO_DeInit+0xae>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a59      	ldr	r2, [pc, #356]	@ (8004860 <HAL_GPIO_DeInit+0x1cc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01f      	beq.n	800473e <HAL_GPIO_DeInit+0xaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a58      	ldr	r2, [pc, #352]	@ (8004864 <HAL_GPIO_DeInit+0x1d0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d019      	beq.n	800473a <HAL_GPIO_DeInit+0xa6>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a57      	ldr	r2, [pc, #348]	@ (8004868 <HAL_GPIO_DeInit+0x1d4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_DeInit+0xa2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a56      	ldr	r2, [pc, #344]	@ (800486c <HAL_GPIO_DeInit+0x1d8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_DeInit+0x9e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a55      	ldr	r2, [pc, #340]	@ (8004870 <HAL_GPIO_DeInit+0x1dc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_DeInit+0x9a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a54      	ldr	r2, [pc, #336]	@ (8004874 <HAL_GPIO_DeInit+0x1e0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_DeInit+0x96>
 8004726:	2306      	movs	r3, #6
 8004728:	e00c      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 800472a:	2307      	movs	r3, #7
 800472c:	e00a      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 800472e:	2305      	movs	r3, #5
 8004730:	e008      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 8004732:	2304      	movs	r3, #4
 8004734:	e006      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 8004736:	2303      	movs	r3, #3
 8004738:	e004      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 800473a:	2302      	movs	r3, #2
 800473c:	e002      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <HAL_GPIO_DeInit+0xb0>
 8004742:	2300      	movs	r3, #0
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	f002 0203 	and.w	r2, r2, #3
 800474a:	0092      	lsls	r2, r2, #2
 800474c:	4093      	lsls	r3, r2
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	d132      	bne.n	80047ba <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004754:	4b48      	ldr	r3, [pc, #288]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	43db      	mvns	r3, r3
 800475c:	4946      	ldr	r1, [pc, #280]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 800475e:	4013      	ands	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004762:	4b45      	ldr	r3, [pc, #276]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	43db      	mvns	r3, r3
 800476a:	4943      	ldr	r1, [pc, #268]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 800476c:	4013      	ands	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004770:	4b41      	ldr	r3, [pc, #260]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43db      	mvns	r3, r3
 8004778:	493f      	ldr	r1, [pc, #252]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 800477a:	4013      	ands	r3, r2
 800477c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800477e:	4b3e      	ldr	r3, [pc, #248]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	43db      	mvns	r3, r3
 8004786:	493c      	ldr	r1, [pc, #240]	@ (8004878 <HAL_GPIO_DeInit+0x1e4>)
 8004788:	4013      	ands	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	220f      	movs	r2, #15
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800479c:	4a2e      	ldr	r2, [pc, #184]	@ (8004858 <HAL_GPIO_DeInit+0x1c4>)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	3302      	adds	r3, #2
 80047a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	43da      	mvns	r2, r3
 80047ac:	482a      	ldr	r0, [pc, #168]	@ (8004858 <HAL_GPIO_DeInit+0x1c4>)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	400a      	ands	r2, r1
 80047b4:	3302      	adds	r3, #2
 80047b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	2103      	movs	r1, #3
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	220f      	movs	r2, #15
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	08d2      	lsrs	r2, r2, #3
 80047f0:	4019      	ands	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2103      	movs	r1, #3
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	2101      	movs	r1, #1
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	401a      	ands	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2103      	movs	r1, #3
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	401a      	ands	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	3301      	adds	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	f67f af34 	bls.w	80046b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40013800 	.word	0x40013800
 800485c:	40020000 	.word	0x40020000
 8004860:	40020400 	.word	0x40020400
 8004864:	40020800 	.word	0x40020800
 8004868:	40020c00 	.word	0x40020c00
 800486c:	40021000 	.word	0x40021000
 8004870:	40021400 	.word	0x40021400
 8004874:	40021800 	.word	0x40021800
 8004878:	40013c00 	.word	0x40013c00

0800487c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
 8004888:	4613      	mov	r3, r2
 800488a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800488c:	787b      	ldrb	r3, [r7, #1]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004898:	e003      	b.n	80048a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	041a      	lsls	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	619a      	str	r2, [r3, #24]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e12b      	b.n	8004b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fe f966 	bl	8002ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004914:	f000 fa02 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8004918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4a81      	ldr	r2, [pc, #516]	@ (8004b24 <HAL_I2C_Init+0x274>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d807      	bhi.n	8004934 <HAL_I2C_Init+0x84>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a80      	ldr	r2, [pc, #512]	@ (8004b28 <HAL_I2C_Init+0x278>)
 8004928:	4293      	cmp	r3, r2
 800492a:	bf94      	ite	ls
 800492c:	2301      	movls	r3, #1
 800492e:	2300      	movhi	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e006      	b.n	8004942 <HAL_I2C_Init+0x92>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a7d      	ldr	r2, [pc, #500]	@ (8004b2c <HAL_I2C_Init+0x27c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	bf94      	ite	ls
 800493c:	2301      	movls	r3, #1
 800493e:	2300      	movhi	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e0e7      	b.n	8004b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a78      	ldr	r2, [pc, #480]	@ (8004b30 <HAL_I2C_Init+0x280>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	0c9b      	lsrs	r3, r3, #18
 8004954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4a6a      	ldr	r2, [pc, #424]	@ (8004b24 <HAL_I2C_Init+0x274>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d802      	bhi.n	8004984 <HAL_I2C_Init+0xd4>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3301      	adds	r3, #1
 8004982:	e009      	b.n	8004998 <HAL_I2C_Init+0xe8>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	4a69      	ldr	r2, [pc, #420]	@ (8004b34 <HAL_I2C_Init+0x284>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	3301      	adds	r3, #1
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	430b      	orrs	r3, r1
 800499e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	495c      	ldr	r1, [pc, #368]	@ (8004b24 <HAL_I2C_Init+0x274>)
 80049b4:	428b      	cmp	r3, r1
 80049b6:	d819      	bhi.n	80049ec <HAL_I2C_Init+0x13c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1e59      	subs	r1, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c6:	1c59      	adds	r1, r3, #1
 80049c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049cc:	400b      	ands	r3, r1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_I2C_Init+0x138>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1e59      	subs	r1, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e0:	3301      	adds	r3, #1
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e6:	e051      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 80049e8:	2304      	movs	r3, #4
 80049ea:	e04f      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d111      	bne.n	8004a18 <HAL_I2C_Init+0x168>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1e58      	subs	r0, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	440b      	add	r3, r1
 8004a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e012      	b.n	8004a3e <HAL_I2C_Init+0x18e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e58      	subs	r0, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	0099      	lsls	r1, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Init+0x196>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e022      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10e      	bne.n	8004a6c <HAL_I2C_Init+0x1bc>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e58      	subs	r0, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	440b      	add	r3, r1
 8004a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a60:	3301      	adds	r3, #1
 8004a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6a:	e00f      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1e58      	subs	r0, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	0099      	lsls	r1, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	6809      	ldr	r1, [r1, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6911      	ldr	r1, [r2, #16]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68d2      	ldr	r2, [r2, #12]
 8004ac6:	4311      	orrs	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	000186a0 	.word	0x000186a0
 8004b28:	001e847f 	.word	0x001e847f
 8004b2c:	003d08ff 	.word	0x003d08ff
 8004b30:	431bde83 	.word	0x431bde83
 8004b34:	10624dd3 	.word	0x10624dd3

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0cc      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b68      	ldr	r3, [pc, #416]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d90c      	bls.n	8004b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b65      	ldr	r3, [pc, #404]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b63      	ldr	r3, [pc, #396]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0b8      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b8c:	4b59      	ldr	r3, [pc, #356]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a58      	ldr	r2, [pc, #352]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba4:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a52      	ldr	r2, [pc, #328]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb0:	4b50      	ldr	r3, [pc, #320]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	494d      	ldr	r1, [pc, #308]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d044      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d119      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e07f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e06f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c06:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e067      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c16:	4b37      	ldr	r3, [pc, #220]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 0203 	bic.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4934      	ldr	r1, [pc, #208]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c28:	f7fe fafc 	bl	8003224 <HAL_GetTick>
 8004c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c30:	f7fe faf8 	bl	8003224 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e04f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 020c 	and.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1eb      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c58:	4b25      	ldr	r3, [pc, #148]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d20c      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b22      	ldr	r3, [pc, #136]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b20      	ldr	r3, [pc, #128]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e032      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8c:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4916      	ldr	r1, [pc, #88]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	490e      	ldr	r1, [pc, #56]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cbe:	f000 f887 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	490a      	ldr	r1, [pc, #40]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	5ccb      	ldrb	r3, [r1, r3]
 8004cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd6:	4a09      	ldr	r2, [pc, #36]	@ (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cda:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe f898 	bl	8002e14 <HAL_InitTick>

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023c00 	.word	0x40023c00
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	080162fc 	.word	0x080162fc
 8004cfc:	20000004 	.word	0x20000004
 8004d00:	20000008 	.word	0x20000008

08004d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d08:	4b03      	ldr	r3, [pc, #12]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000004 	.word	0x20000004

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d20:	f7ff fff0 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0a9b      	lsrs	r3, r3, #10
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	@ (8004d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	0801630c 	.word	0x0801630c

08004d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d48:	f7ff ffdc 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	0b5b      	lsrs	r3, r3, #13
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4903      	ldr	r1, [pc, #12]	@ (8004d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0801630c 	.word	0x0801630c

08004d6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	220f      	movs	r2, #15
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d88:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004da0:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dae:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <HAL_RCC_GetClockConfig+0x60>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40023c00 	.word	0x40023c00

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b0ae      	sub	sp, #184	@ 0xb8
 8004dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df6:	4bcb      	ldr	r3, [pc, #812]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	f200 8206 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x440>
 8004e04:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08005211 	.word	0x08005211
 8004e14:	08005211 	.word	0x08005211
 8004e18:	08005211 	.word	0x08005211
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08005211 	.word	0x08005211
 8004e24:	08005211 	.word	0x08005211
 8004e28:	08005211 	.word	0x08005211
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08005211 	.word	0x08005211
 8004e34:	08005211 	.word	0x08005211
 8004e38:	08005211 	.word	0x08005211
 8004e3c:	08005041 	.word	0x08005041
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4bb9      	ldr	r3, [pc, #740]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e46:	e1e7      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e48:	4bb8      	ldr	r3, [pc, #736]	@ (800512c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e4e:	e1e3      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e50:	4bb4      	ldr	r3, [pc, #720]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5c:	4bb1      	ldr	r3, [pc, #708]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d071      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e68:	4bae      	ldr	r3, [pc, #696]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	099b      	lsrs	r3, r3, #6
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	0159      	lsls	r1, r3, #5
 8004e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea0:	0150      	lsls	r0, r2, #5
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	1a51      	subs	r1, r2, r1
 8004eaa:	6439      	str	r1, [r7, #64]	@ 0x40
 8004eac:	4629      	mov	r1, r5
 8004eae:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	018b      	lsls	r3, r1, #6
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eca:	4641      	mov	r1, r8
 8004ecc:	018a      	lsls	r2, r1, #6
 8004ece:	4641      	mov	r1, r8
 8004ed0:	1a51      	subs	r1, r2, r1
 8004ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ee8:	4649      	mov	r1, r9
 8004eea:	00cb      	lsls	r3, r1, #3
 8004eec:	4641      	mov	r1, r8
 8004eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	00ca      	lsls	r2, r1, #3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	4622      	mov	r2, r4
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f02:	462b      	mov	r3, r5
 8004f04:	460a      	mov	r2, r1
 8004f06:	eb42 0303 	adc.w	r3, r2, r3
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f18:	4629      	mov	r1, r5
 8004f1a:	024b      	lsls	r3, r1, #9
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f22:	4621      	mov	r1, r4
 8004f24:	024a      	lsls	r2, r1, #9
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f3c:	f7fb fec4 	bl	8000cc8 <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4613      	mov	r3, r2
 8004f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f4a:	e067      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4c:	4b75      	ldr	r3, [pc, #468]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f66:	2300      	movs	r3, #0
 8004f68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	0159      	lsls	r1, r3, #5
 8004f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f80:	0150      	lsls	r0, r2, #5
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4621      	mov	r1, r4
 8004f88:	1a51      	subs	r1, r2, r1
 8004f8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	018b      	lsls	r3, r1, #6
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004faa:	4641      	mov	r1, r8
 8004fac:	018a      	lsls	r2, r1, #6
 8004fae:	4641      	mov	r1, r8
 8004fb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fc6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fce:	4692      	mov	sl, r2
 8004fd0:	469b      	mov	fp, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	eb1a 0303 	adds.w	r3, sl, r3
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	462b      	mov	r3, r5
 8004fdc:	eb4b 0303 	adc.w	r3, fp, r3
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fee:	4629      	mov	r1, r5
 8004ff0:	028b      	lsls	r3, r1, #10
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	028a      	lsls	r2, r1, #10
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005004:	2200      	movs	r2, #0
 8005006:	673b      	str	r3, [r7, #112]	@ 0x70
 8005008:	677a      	str	r2, [r7, #116]	@ 0x74
 800500a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800500e:	f7fb fe5b 	bl	8000cc8 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4613      	mov	r3, r2
 8005018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800501c:	4b41      	ldr	r3, [pc, #260]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	3301      	adds	r3, #1
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800502e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800503e:	e0eb      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005040:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800504c:	4b35      	ldr	r3, [pc, #212]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d06b      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005058:	4b32      	ldr	r3, [pc, #200]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x354>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	099b      	lsrs	r3, r3, #6
 800505e:	2200      	movs	r2, #0
 8005060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	663b      	str	r3, [r7, #96]	@ 0x60
 800506c:	2300      	movs	r3, #0
 800506e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005070:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	f04f 0000 	mov.w	r0, #0
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	0159      	lsls	r1, r3, #5
 8005082:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005086:	0150      	lsls	r0, r2, #5
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4621      	mov	r1, r4
 800508e:	1a51      	subs	r1, r2, r1
 8005090:	61b9      	str	r1, [r7, #24]
 8005092:	4629      	mov	r1, r5
 8005094:	eb63 0301 	sbc.w	r3, r3, r1
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050a6:	4659      	mov	r1, fp
 80050a8:	018b      	lsls	r3, r1, #6
 80050aa:	4651      	mov	r1, sl
 80050ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050b0:	4651      	mov	r1, sl
 80050b2:	018a      	lsls	r2, r1, #6
 80050b4:	4651      	mov	r1, sl
 80050b6:	ebb2 0801 	subs.w	r8, r2, r1
 80050ba:	4659      	mov	r1, fp
 80050bc:	eb63 0901 	sbc.w	r9, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050d4:	4690      	mov	r8, r2
 80050d6:	4699      	mov	r9, r3
 80050d8:	4623      	mov	r3, r4
 80050da:	eb18 0303 	adds.w	r3, r8, r3
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	462b      	mov	r3, r5
 80050e2:	eb49 0303 	adc.w	r3, r9, r3
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050f4:	4629      	mov	r1, r5
 80050f6:	024b      	lsls	r3, r1, #9
 80050f8:	4621      	mov	r1, r4
 80050fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050fe:	4621      	mov	r1, r4
 8005100:	024a      	lsls	r2, r1, #9
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800510a:	2200      	movs	r2, #0
 800510c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800510e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005110:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005114:	f7fb fdd8 	bl	8000cc8 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4613      	mov	r3, r2
 800511e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005122:	e065      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x420>
 8005124:	40023800 	.word	0x40023800
 8005128:	00f42400 	.word	0x00f42400
 800512c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005130:	4b3d      	ldr	r3, [pc, #244]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x458>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	099b      	lsrs	r3, r3, #6
 8005136:	2200      	movs	r2, #0
 8005138:	4618      	mov	r0, r3
 800513a:	4611      	mov	r1, r2
 800513c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005140:	653b      	str	r3, [r7, #80]	@ 0x50
 8005142:	2300      	movs	r3, #0
 8005144:	657b      	str	r3, [r7, #84]	@ 0x54
 8005146:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800514a:	4642      	mov	r2, r8
 800514c:	464b      	mov	r3, r9
 800514e:	f04f 0000 	mov.w	r0, #0
 8005152:	f04f 0100 	mov.w	r1, #0
 8005156:	0159      	lsls	r1, r3, #5
 8005158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800515c:	0150      	lsls	r0, r2, #5
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4641      	mov	r1, r8
 8005164:	1a51      	subs	r1, r2, r1
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	4649      	mov	r1, r9
 800516a:	eb63 0301 	sbc.w	r3, r3, r1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800517c:	4659      	mov	r1, fp
 800517e:	018b      	lsls	r3, r1, #6
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005186:	4651      	mov	r1, sl
 8005188:	018a      	lsls	r2, r1, #6
 800518a:	4651      	mov	r1, sl
 800518c:	1a54      	subs	r4, r2, r1
 800518e:	4659      	mov	r1, fp
 8005190:	eb63 0501 	sbc.w	r5, r3, r1
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	00eb      	lsls	r3, r5, #3
 800519e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051a2:	00e2      	lsls	r2, r4, #3
 80051a4:	4614      	mov	r4, r2
 80051a6:	461d      	mov	r5, r3
 80051a8:	4643      	mov	r3, r8
 80051aa:	18e3      	adds	r3, r4, r3
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	464b      	mov	r3, r9
 80051b0:	eb45 0303 	adc.w	r3, r5, r3
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051c2:	4629      	mov	r1, r5
 80051c4:	028b      	lsls	r3, r1, #10
 80051c6:	4621      	mov	r1, r4
 80051c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051cc:	4621      	mov	r1, r4
 80051ce:	028a      	lsls	r2, r1, #10
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051d8:	2200      	movs	r2, #0
 80051da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051e2:	f7fb fd71 	bl	8000cc8 <__aeabi_uldivmod>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4613      	mov	r3, r2
 80051ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x458>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	0f1b      	lsrs	r3, r3, #28
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80051fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800520e:	e003      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005218:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800521c:	4618      	mov	r0, r3
 800521e:	37b8      	adds	r7, #184	@ 0xb8
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	00f42400 	.word	0x00f42400

08005230 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005236:	f7fd fff5 	bl	8003224 <HAL_GetTick>
 800523a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800523c:	4b72      	ldr	r3, [pc, #456]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a71      	ldr	r2, [pc, #452]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524a:	f7fd ffeb 	bl	8003224 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e0d0      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800525c:	4b6a      	ldr	r3, [pc, #424]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005268:	4b67      	ldr	r3, [pc, #412]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a66      	ldr	r2, [pc, #408]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800526e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005272:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005274:	f7fd ffd6 	bl	8003224 <HAL_GetTick>
 8005278:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800527a:	4b63      	ldr	r3, [pc, #396]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005280:	e00a      	b.n	8005298 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005282:	f7fd ffcf 	bl	8003224 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0b2      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005298:	4b5b      	ldr	r3, [pc, #364]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1ee      	bne.n	8005282 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80052a4:	f7fd ffbe 	bl	8003224 <HAL_GetTick>
 80052a8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80052aa:	4b57      	ldr	r3, [pc, #348]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a56      	ldr	r2, [pc, #344]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80052b0:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80052b4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fd ffb4 	bl	8003224 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	@ 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e099      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80052ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80052d6:	f7fd ffa5 	bl	8003224 <HAL_GetTick>
 80052da:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a49      	ldr	r2, [pc, #292]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fd ff9b 	bl	8003224 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e080      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80052fc:	4b42      	ldr	r3, [pc, #264]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005308:	f7fd ff8c 	bl	8003224 <HAL_GetTick>
 800530c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800530e:	4b3e      	ldr	r3, [pc, #248]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3d      	ldr	r2, [pc, #244]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005314:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005318:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800531c:	f7fd ff82 	bl	8003224 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e067      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800532e:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800533a:	f7fd ff73 	bl	8003224 <HAL_GetTick>
 800533e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8005340:	4b31      	ldr	r3, [pc, #196]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a30      	ldr	r2, [pc, #192]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800534a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800534e:	f7fd ff69 	bl	8003224 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e04e      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8005360:	4b29      	ldr	r3, [pc, #164]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 800536c:	4b26      	ldr	r3, [pc, #152]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800536e:	4a27      	ldr	r2, [pc, #156]	@ (800540c <HAL_RCC_DeInit+0x1dc>)
 8005370:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005372:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005374:	4a25      	ldr	r2, [pc, #148]	@ (800540c <HAL_RCC_DeInit+0x1dc>)
 8005376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800537a:	4b23      	ldr	r3, [pc, #140]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800537c:	4a24      	ldr	r2, [pc, #144]	@ (8005410 <HAL_RCC_DeInit+0x1e0>)
 800537e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005382:	4b21      	ldr	r3, [pc, #132]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4a20      	ldr	r2, [pc, #128]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005388:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800538c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 8005394:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005398:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800539a:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	4a1a      	ldr	r2, [pc, #104]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 80053a6:	4b18      	ldr	r3, [pc, #96]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053ac:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80053b0:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	4a14      	ldr	r2, [pc, #80]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80053ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053da:	4a0b      	ldr	r2, [pc, #44]	@ (8005408 <HAL_RCC_DeInit+0x1d8>)
 80053dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053e0:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80053e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <HAL_RCC_DeInit+0x1e4>)
 80053e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005418 <HAL_RCC_DeInit+0x1e8>)
 80053e6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053e8:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <HAL_RCC_DeInit+0x1ec>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fd fd11 	bl	8002e14 <HAL_InitTick>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80053fc:	2300      	movs	r3, #0
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	24003010 	.word	0x24003010
 8005410:	04003010 	.word	0x04003010
 8005414:	20000004 	.word	0x20000004
 8005418:	00f42400 	.word	0x00f42400
 800541c:	20000008 	.word	0x20000008

08005420 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e28d      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8083 	beq.w	8005546 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005440:	4b94      	ldr	r3, [pc, #592]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 030c 	and.w	r3, r3, #12
 8005448:	2b04      	cmp	r3, #4
 800544a:	d019      	beq.n	8005480 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800544c:	4b91      	ldr	r3, [pc, #580]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 030c 	and.w	r3, r3, #12
        || \
 8005454:	2b08      	cmp	r3, #8
 8005456:	d106      	bne.n	8005466 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005458:	4b8e      	ldr	r3, [pc, #568]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005460:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005464:	d00c      	beq.n	8005480 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005466:	4b8b      	ldr	r3, [pc, #556]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800546e:	2b0c      	cmp	r3, #12
 8005470:	d112      	bne.n	8005498 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005472:	4b88      	ldr	r3, [pc, #544]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547e:	d10b      	bne.n	8005498 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	4b84      	ldr	r3, [pc, #528]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05b      	beq.n	8005544 <HAL_RCC_OscConfig+0x124>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d157      	bne.n	8005544 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e25a      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d106      	bne.n	80054b0 <HAL_RCC_OscConfig+0x90>
 80054a2:	4b7c      	ldr	r3, [pc, #496]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a7b      	ldr	r2, [pc, #492]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e01d      	b.n	80054ec <HAL_RCC_OscConfig+0xcc>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0xb4>
 80054ba:	4b76      	ldr	r3, [pc, #472]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a75      	ldr	r2, [pc, #468]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b73      	ldr	r3, [pc, #460]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a72      	ldr	r2, [pc, #456]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0xcc>
 80054d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fd fe96 	bl	8003224 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fd fe92 	bl	8003224 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	@ 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e21f      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b61      	ldr	r3, [pc, #388]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0xdc>
 800551a:	e014      	b.n	8005546 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fd fe82 	bl	8003224 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005524:	f7fd fe7e 	bl	8003224 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	@ 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e20b      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005536:	4b57      	ldr	r3, [pc, #348]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x104>
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d06f      	beq.n	8005632 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005552:	4b50      	ldr	r3, [pc, #320]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b00      	cmp	r3, #0
 800555c:	d017      	beq.n	800558e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800555e:	4b4d      	ldr	r3, [pc, #308]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
        || \
 8005566:	2b08      	cmp	r3, #8
 8005568:	d105      	bne.n	8005576 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800556a:	4b4a      	ldr	r3, [pc, #296]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005576:	4b47      	ldr	r3, [pc, #284]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d11c      	bne.n	80055bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005582:	4b44      	ldr	r3, [pc, #272]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d116      	bne.n	80055bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558e:	4b41      	ldr	r3, [pc, #260]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_RCC_OscConfig+0x186>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e1d3      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4937      	ldr	r1, [pc, #220]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ba:	e03a      	b.n	8005632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d020      	beq.n	8005606 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055c4:	4b34      	ldr	r3, [pc, #208]	@ (8005698 <HAL_RCC_OscConfig+0x278>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fd fe2b 	bl	8003224 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055d2:	f7fd fe27 	bl	8003224 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e1b4      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f0:	4b28      	ldr	r3, [pc, #160]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4925      	ldr	r1, [pc, #148]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]
 8005604:	e015      	b.n	8005632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005606:	4b24      	ldr	r3, [pc, #144]	@ (8005698 <HAL_RCC_OscConfig+0x278>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fd fe0a 	bl	8003224 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005614:	f7fd fe06 	bl	8003224 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e193      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005626:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d036      	beq.n	80056ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005646:	4b15      	ldr	r3, [pc, #84]	@ (800569c <HAL_RCC_OscConfig+0x27c>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fd fdea 	bl	8003224 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005654:	f7fd fde6 	bl	8003224 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e173      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005666:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x234>
 8005672:	e01b      	b.n	80056ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005674:	4b09      	ldr	r3, [pc, #36]	@ (800569c <HAL_RCC_OscConfig+0x27c>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fd fdd3 	bl	8003224 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005680:	e00e      	b.n	80056a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005682:	f7fd fdcf 	bl	8003224 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d907      	bls.n	80056a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e15c      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
 8005694:	40023800 	.word	0x40023800
 8005698:	42470000 	.word	0x42470000
 800569c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a0:	4b8a      	ldr	r3, [pc, #552]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80056a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ea      	bne.n	8005682 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8097 	beq.w	80057e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056be:	4b83      	ldr	r3, [pc, #524]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	4b7f      	ldr	r3, [pc, #508]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	4a7e      	ldr	r2, [pc, #504]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056da:	4b7c      	ldr	r3, [pc, #496]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	4b79      	ldr	r3, [pc, #484]	@ (80058d0 <HAL_RCC_OscConfig+0x4b0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d118      	bne.n	8005728 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056f6:	4b76      	ldr	r3, [pc, #472]	@ (80058d0 <HAL_RCC_OscConfig+0x4b0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a75      	ldr	r2, [pc, #468]	@ (80058d0 <HAL_RCC_OscConfig+0x4b0>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005702:	f7fd fd8f 	bl	8003224 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570a:	f7fd fd8b 	bl	8003224 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e118      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571c:	4b6c      	ldr	r3, [pc, #432]	@ (80058d0 <HAL_RCC_OscConfig+0x4b0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0f0      	beq.n	800570a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x31e>
 8005730:	4b66      	ldr	r3, [pc, #408]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005734:	4a65      	ldr	r2, [pc, #404]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6713      	str	r3, [r2, #112]	@ 0x70
 800573c:	e01c      	b.n	8005778 <HAL_RCC_OscConfig+0x358>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d10c      	bne.n	8005760 <HAL_RCC_OscConfig+0x340>
 8005746:	4b61      	ldr	r3, [pc, #388]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574a:	4a60      	ldr	r2, [pc, #384]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 800574c:	f043 0304 	orr.w	r3, r3, #4
 8005750:	6713      	str	r3, [r2, #112]	@ 0x70
 8005752:	4b5e      	ldr	r3, [pc, #376]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005756:	4a5d      	ldr	r2, [pc, #372]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6713      	str	r3, [r2, #112]	@ 0x70
 800575e:	e00b      	b.n	8005778 <HAL_RCC_OscConfig+0x358>
 8005760:	4b5a      	ldr	r3, [pc, #360]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005764:	4a59      	ldr	r2, [pc, #356]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	6713      	str	r3, [r2, #112]	@ 0x70
 800576c:	4b57      	ldr	r3, [pc, #348]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	4a56      	ldr	r2, [pc, #344]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005772:	f023 0304 	bic.w	r3, r3, #4
 8005776:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fd fd50 	bl	8003224 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	e00a      	b.n	800579e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fd fd4c 	bl	8003224 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e0d7      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579e:	4b4b      	ldr	r3, [pc, #300]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0ee      	beq.n	8005788 <HAL_RCC_OscConfig+0x368>
 80057aa:	e014      	b.n	80057d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fd fd3a 	bl	8003224 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b4:	f7fd fd36 	bl	8003224 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0c1      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ca:	4b40      	ldr	r3, [pc, #256]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1ee      	bne.n	80057b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057dc:	4b3b      	ldr	r3, [pc, #236]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	4a3a      	ldr	r2, [pc, #232]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80057e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80ad 	beq.w	800594c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f2:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d060      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d145      	bne.n	8005892 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005806:	4b33      	ldr	r3, [pc, #204]	@ (80058d4 <HAL_RCC_OscConfig+0x4b4>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fd fd0a 	bl	8003224 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005814:	f7fd fd06 	bl	8003224 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e093      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	3b01      	subs	r3, #1
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	071b      	lsls	r3, r3, #28
 800585e:	491b      	ldr	r1, [pc, #108]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <HAL_RCC_OscConfig+0x4b4>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fd fcdb 	bl	8003224 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005872:	f7fd fcd7 	bl	8003224 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e064      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005884:	4b11      	ldr	r3, [pc, #68]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x452>
 8005890:	e05c      	b.n	800594c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005892:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <HAL_RCC_OscConfig+0x4b4>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fcc4 	bl	8003224 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a0:	f7fd fcc0 	bl	8003224 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e04d      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCC_OscConfig+0x4ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x480>
 80058be:	e045      	b.n	800594c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e040      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40007000 	.word	0x40007000
 80058d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <HAL_RCC_OscConfig+0x538>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d030      	beq.n	8005948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d129      	bne.n	8005948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d122      	bne.n	8005948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800590e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005910:	4293      	cmp	r3, r2
 8005912:	d119      	bne.n	8005948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	3b01      	subs	r3, #1
 8005922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d10f      	bne.n	8005948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d107      	bne.n	8005948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800

0800595c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e041      	b.n	80059f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f839 	bl	80059fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 f9c0 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d001      	beq.n	8005a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e04e      	b.n	8005ac6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a23      	ldr	r2, [pc, #140]	@ (8005ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a52:	d01d      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1e      	ldr	r2, [pc, #120]	@ (8005adc <HAL_TIM_Base_Start_IT+0xcc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x80>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <HAL_TIM_Base_Start_IT+0xdc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d111      	bne.n	8005ab4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d010      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	e007      	b.n	8005ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40001800 	.word	0x40001800

08005af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0202 	mvn.w	r2, #2
 8005b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8d2 	bl	8005ce4 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8c4 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f8d5 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d020      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01b      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0204 	mvn.w	r2, #4
 8005b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8ac 	bl	8005ce4 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f89e 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f8af 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d020      	beq.n	8005bec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01b      	beq.n	8005bec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0208 	mvn.w	r2, #8
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f886 	bl	8005ce4 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f878 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f889 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d020      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01b      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0210 	mvn.w	r2, #16
 8005c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f860 	bl	8005ce4 <HAL_TIM_IC_CaptureCallback>
 8005c24:	e005      	b.n	8005c32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f852 	bl	8005cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f863 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00c      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0201 	mvn.w	r2, #1
 8005c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fc f878 	bl	8001d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f900 	bl	8005e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f834 	bl	8005d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0220 	mvn.w	r2, #32
 8005cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8d2 	bl	8005e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a43      	ldr	r2, [pc, #268]	@ (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3e:	d00f      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a40      	ldr	r2, [pc, #256]	@ (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e48 <TIM_Base_SetConfig+0x128>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3e      	ldr	r2, [pc, #248]	@ (8005e4c <TIM_Base_SetConfig+0x12c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e50 <TIM_Base_SetConfig+0x130>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a32      	ldr	r2, [pc, #200]	@ (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d02b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d80:	d027      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	@ (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d023      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e48 <TIM_Base_SetConfig+0x128>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01f      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2d      	ldr	r2, [pc, #180]	@ (8005e4c <TIM_Base_SetConfig+0x12c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e50 <TIM_Base_SetConfig+0x130>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d017      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e54 <TIM_Base_SetConfig+0x134>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2a      	ldr	r2, [pc, #168]	@ (8005e58 <TIM_Base_SetConfig+0x138>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a29      	ldr	r2, [pc, #164]	@ (8005e5c <TIM_Base_SetConfig+0x13c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a28      	ldr	r2, [pc, #160]	@ (8005e60 <TIM_Base_SetConfig+0x140>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a27      	ldr	r2, [pc, #156]	@ (8005e64 <TIM_Base_SetConfig+0x144>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a26      	ldr	r2, [pc, #152]	@ (8005e68 <TIM_Base_SetConfig+0x148>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d108      	bne.n	8005de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a0e      	ldr	r2, [pc, #56]	@ (8005e40 <TIM_Base_SetConfig+0x120>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_Base_SetConfig+0xf2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a10      	ldr	r2, [pc, #64]	@ (8005e50 <TIM_Base_SetConfig+0x130>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d103      	bne.n	8005e1a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f043 0204 	orr.w	r2, r3, #4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800
 8005e60:	40001800 	.word	0x40001800
 8005e64:	40001c00 	.word	0x40001c00
 8005e68:	40002000 	.word	0x40002000

08005e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e042      	b.n	8005f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fc febc 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	@ 0x24
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f849 	bl	8006f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e024      	b.n	8005f90 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	@ 0x24
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f5c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fc ff20 	bl	8002da4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	@ 0x28
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d175      	bne.n	80060a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Transmit+0x2c>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e06e      	b.n	80060a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2221      	movs	r2, #33	@ 0x21
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fd f925 	bl	8003224 <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff0:	d108      	bne.n	8006004 <HAL_UART_Transmit+0x6c>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	e003      	b.n	800600c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800600c:	e02e      	b.n	800606c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	@ 0x80
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fce7 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e03a      	b.n	80060a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006044:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	3302      	adds	r3, #2
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	e007      	b.n	800605e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3301      	adds	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1cb      	bne.n	800600e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2200      	movs	r2, #0
 800607e:	2140      	movs	r1, #64	@ 0x40
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fcb3 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e006      	b.n	80060a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b090      	sub	sp, #64	@ 0x40
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c4:	2b80      	cmp	r3, #128	@ 0x80
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b21      	cmp	r3, #33	@ 0x21
 80060da:	d128      	bne.n	800612e <HAL_UART_DMAStop+0x80>
 80060dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d025      	beq.n	800612e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	623b      	str	r3, [r7, #32]
   return(result);
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006102:	633a      	str	r2, [r7, #48]	@ 0x30
 8006104:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd fb42 	bl	80037ac <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fd5f 	bl	8006bec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b22      	cmp	r3, #34	@ 0x22
 800614e:	d128      	bne.n	80061a2 <HAL_UART_DMAStop+0xf4>
 8006150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d025      	beq.n	80061a2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	60fb      	str	r3, [r7, #12]
   return(result);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006176:	61fa      	str	r2, [r7, #28]
 8006178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	69b9      	ldr	r1, [r7, #24]
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	617b      	str	r3, [r7, #20]
   return(result);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd fb08 	bl	80037ac <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fd4d 	bl	8006c3c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3740      	adds	r7, #64	@ 0x40
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	@ 0x30
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d146      	bne.n	8006254 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e03f      	b.n	8006256 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	461a      	mov	r2, r3
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fc59 	bl	8006aa0 <UART_Start_Receive_DMA>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d125      	bne.n	8006248 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	617b      	str	r3, [r7, #20]
   return(result);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f043 0310 	orr.w	r3, r3, #16
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006232:	627a      	str	r2, [r7, #36]	@ 0x24
 8006234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6a39      	ldr	r1, [r7, #32]
 8006238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e5      	bne.n	8006212 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006246:	e002      	b.n	800624e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800624e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006252:	e000      	b.n	8006256 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3730      	adds	r7, #48	@ 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b0ba      	sub	sp, #232	@ 0xe8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006286:	2300      	movs	r3, #0
 8006288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800629e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10f      	bne.n	80062c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <HAL_UART_IRQHandler+0x66>
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fd98 	bl	8006df4 <UART_Receive_IT>
      return;
 80062c4:	e273      	b.n	80067ae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80de 	beq.w	800648c <HAL_UART_IRQHandler+0x22c>
 80062d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80d1 	beq.w	800648c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_UART_IRQHandler+0xae>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <HAL_UART_IRQHandler+0xd2>
 800631a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632a:	f043 0202 	orr.w	r2, r3, #2
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_UART_IRQHandler+0xf6>
 800633e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634e:	f043 0204 	orr.w	r2, r3, #4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d011      	beq.n	8006386 <HAL_UART_IRQHandler+0x126>
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d105      	bne.n	800637a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f043 0208 	orr.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 820a 	beq.w	80067a4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_UART_IRQHandler+0x14e>
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fd23 	bl	8006df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d103      	bne.n	80063da <HAL_UART_IRQHandler+0x17a>
 80063d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04f      	beq.n	800647a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fc2e 	bl	8006c3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ea:	2b40      	cmp	r3, #64	@ 0x40
 80063ec:	d141      	bne.n	8006472 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3314      	adds	r3, #20
 80063f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3314      	adds	r3, #20
 8006416:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800641a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800641e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006426:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1d9      	bne.n	80063ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d013      	beq.n	800646a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006446:	4a8a      	ldr	r2, [pc, #552]	@ (8006670 <HAL_UART_IRQHandler+0x410>)
 8006448:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd fa1c 	bl	800388c <HAL_DMA_Abort_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d016      	beq.n	8006488 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e00e      	b.n	8006488 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fd46 	bl	8007efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e00a      	b.n	8006488 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fd42 	bl	8007efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e006      	b.n	8006488 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fd3e 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006486:	e18d      	b.n	80067a4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	bf00      	nop
    return;
 800648a:	e18b      	b.n	80067a4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 8167 	bne.w	8006764 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8160 	beq.w	8006764 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8159 	beq.w	8006764 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064b2:	2300      	movs	r3, #0
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d2:	2b40      	cmp	r3, #64	@ 0x40
 80064d4:	f040 80ce 	bne.w	8006674 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80a9 	beq.w	8006640 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064f6:	429a      	cmp	r2, r3
 80064f8:	f080 80a2 	bcs.w	8006640 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006502:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650e:	f000 8088 	beq.w	8006622 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006528:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800652c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800653e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800654a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1d9      	bne.n	8006512 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3314      	adds	r3, #20
 8006564:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800656e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006582:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006586:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800658a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e1      	bne.n	800655e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3314      	adds	r3, #20
 80065a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3314      	adds	r3, #20
 80065ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e3      	bne.n	800659a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	330c      	adds	r3, #12
 80065e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	330c      	adds	r3, #12
 8006600:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006604:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006606:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800660a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e3      	bne.n	80065e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	4618      	mov	r0, r3
 800661e:	f7fd f8c5 	bl	80037ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006630:	b29b      	uxth	r3, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	b29b      	uxth	r3, r3
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fc25 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800663e:	e0b3      	b.n	80067a8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006648:	429a      	cmp	r2, r3
 800664a:	f040 80ad 	bne.w	80067a8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006658:	f040 80a6 	bne.w	80067a8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fc0d 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
      return;
 800666e:	e09b      	b.n	80067a8 <HAL_UART_IRQHandler+0x548>
 8006670:	08006d03 	.word	0x08006d03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800667c:	b29b      	uxth	r3, r3
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 808e 	beq.w	80067ac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8089 	beq.w	80067ac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066be:	647a      	str	r2, [r7, #68]	@ 0x44
 80066c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e3      	bne.n	800669a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	623b      	str	r3, [r7, #32]
   return(result);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80066f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e3      	bne.n	80066d2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	60fb      	str	r3, [r7, #12]
   return(result);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	617b      	str	r3, [r7, #20]
   return(result);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e3      	bne.n	8006718 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006756:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fb93 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006762:	e023      	b.n	80067ac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <HAL_UART_IRQHandler+0x524>
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fad1 	bl	8006d24 <UART_Transmit_IT>
    return;
 8006782:	e014      	b.n	80067ae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <HAL_UART_IRQHandler+0x54e>
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fb11 	bl	8006dc4 <UART_EndTransmit_IT>
    return;
 80067a2:	e004      	b.n	80067ae <HAL_UART_IRQHandler+0x54e>
    return;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <HAL_UART_IRQHandler+0x54e>
      return;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <HAL_UART_IRQHandler+0x54e>
      return;
 80067ac:	bf00      	nop
  }
}
 80067ae:	37e8      	adds	r7, #232	@ 0xe8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b09c      	sub	sp, #112	@ 0x70
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d172      	bne.n	80068f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800680c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800680e:	2200      	movs	r2, #0
 8006810:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	330c      	adds	r3, #12
 8006818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006832:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006834:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	667b      	str	r3, [r7, #100]	@ 0x64
 800685e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006866:	647a      	str	r2, [r7, #68]	@ 0x44
 8006868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800686c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3314      	adds	r3, #20
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	623b      	str	r3, [r7, #32]
   return(result);
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006890:	663b      	str	r3, [r7, #96]	@ 0x60
 8006892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3314      	adds	r3, #20
 8006898:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800689a:	633a      	str	r2, [r7, #48]	@ 0x30
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e5      	bne.n	800687a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d119      	bne.n	80068f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f023 0310 	bic.w	r3, r3, #16
 80068d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068de:	61fa      	str	r2, [r7, #28]
 80068e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	69b9      	ldr	r1, [r7, #24]
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	617b      	str	r3, [r7, #20]
   return(result);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e5      	bne.n	80068be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068f4:	2200      	movs	r2, #0
 80068f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d106      	bne.n	800690e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006902:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006904:	4619      	mov	r1, r3
 8006906:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006908:	f001 fabe 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800690c:	e002      	b.n	8006914 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800690e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006910:	f7ff ff5a 	bl	80067c8 <HAL_UART_RxCpltCallback>
}
 8006914:	bf00      	nop
 8006916:	3770      	adds	r7, #112	@ 0x70
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006934:	2b01      	cmp	r3, #1
 8006936:	d108      	bne.n	800694a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	b29b      	uxth	r3, r3
 8006940:	4619      	mov	r1, r3
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f001 faa0 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006948:	e002      	b.n	8006950 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff ff46 	bl	80067dc <HAL_UART_RxHalfCpltCallback>
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006974:	2b80      	cmp	r3, #128	@ 0x80
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b21      	cmp	r3, #33	@ 0x21
 800698a:	d108      	bne.n	800699e <UART_DMAError+0x46>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006998:	68b8      	ldr	r0, [r7, #8]
 800699a:	f000 f927 	bl	8006bec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a8:	2b40      	cmp	r3, #64	@ 0x40
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b22      	cmp	r3, #34	@ 0x22
 80069be:	d108      	bne.n	80069d2 <UART_DMAError+0x7a>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80069cc:	68b8      	ldr	r0, [r7, #8]
 80069ce:	f000 f935 	bl	8006c3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d6:	f043 0210 	orr.w	r2, r3, #16
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069de:	68b8      	ldr	r0, [r7, #8]
 80069e0:	f001 fa8c 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	e03b      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d037      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fc fc0d 	bl	8003224 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e03a      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d023      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b80      	cmp	r3, #128	@ 0x80
 8006a32:	d020      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b40      	cmp	r3, #64	@ 0x40
 8006a38:	d01d      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d116      	bne.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f8ec 	bl	8006c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2208      	movs	r2, #8
 8006a68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e00f      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d0b4      	beq.n	80069fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b098      	sub	sp, #96	@ 0x60
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2222      	movs	r2, #34	@ 0x22
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	4a44      	ldr	r2, [pc, #272]	@ (8006be0 <UART_Start_Receive_DMA+0x140>)
 8006ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	4a43      	ldr	r2, [pc, #268]	@ (8006be4 <UART_Start_Receive_DMA+0x144>)
 8006ad6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006adc:	4a42      	ldr	r2, [pc, #264]	@ (8006be8 <UART_Start_Receive_DMA+0x148>)
 8006ade:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4619      	mov	r1, r3
 8006afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	f7fc fdfc 	bl	80036fc <HAL_DMA_Start_IT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e05d      	b.n	8006bd8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d019      	beq.n	8006b6e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e5      	bne.n	8006b3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3314      	adds	r3, #20
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b8e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6a39      	ldr	r1, [r7, #32]
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3760      	adds	r7, #96	@ 0x60
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	080067f1 	.word	0x080067f1
 8006be4:	0800691d 	.word	0x0800691d
 8006be8:	08006959 	.word	0x08006959

08006bec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b089      	sub	sp, #36	@ 0x24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	61ba      	str	r2, [r7, #24]
 8006c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6979      	ldr	r1, [r7, #20]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	613b      	str	r3, [r7, #16]
   return(result);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e5      	bne.n	8006bf4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006c30:	bf00      	nop
 8006c32:	3724      	adds	r7, #36	@ 0x24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b095      	sub	sp, #84	@ 0x54
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c64:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3314      	adds	r3, #20
 8006c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3314      	adds	r3, #20
 8006c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d119      	bne.n	8006ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cd4:	61ba      	str	r2, [r7, #24]
 8006cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e5      	bne.n	8006cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cf6:	bf00      	nop
 8006cf8:	3754      	adds	r7, #84	@ 0x54
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f001 f8f0 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b21      	cmp	r3, #33	@ 0x21
 8006d36:	d13e      	bne.n	8006db6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d40:	d114      	bne.n	8006d6c <UART_Transmit_IT+0x48>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d110      	bne.n	8006d6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	1c9a      	adds	r2, r3, #2
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	621a      	str	r2, [r3, #32]
 8006d6a:	e008      	b.n	8006d7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6211      	str	r1, [r2, #32]
 8006d76:	781a      	ldrb	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006db6:	2302      	movs	r3, #2
  }
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff fce5 	bl	80067b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08c      	sub	sp, #48	@ 0x30
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b22      	cmp	r3, #34	@ 0x22
 8006e0e:	f040 80aa 	bne.w	8006f66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1a:	d115      	bne.n	8006e48 <UART_Receive_IT+0x54>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d111      	bne.n	8006e48 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e46:	e024      	b.n	8006e92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e56:	d007      	beq.n	8006e68 <UART_Receive_IT+0x74>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <UART_Receive_IT+0x82>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e008      	b.n	8006e88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d15d      	bne.n	8006f62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0220 	bic.w	r2, r2, #32
 8006eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d135      	bne.n	8006f58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	613b      	str	r3, [r7, #16]
   return(result);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f023 0310 	bic.w	r3, r3, #16
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f12:	623a      	str	r2, [r7, #32]
 8006f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	69f9      	ldr	r1, [r7, #28]
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d10a      	bne.n	8006f4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 ff99 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
 8006f56:	e002      	b.n	8006f5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff fc35 	bl	80067c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e002      	b.n	8006f68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f66:	2302      	movs	r3, #2
  }
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3730      	adds	r7, #48	@ 0x30
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f74:	b0c0      	sub	sp, #256	@ 0x100
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	68d9      	ldr	r1, [r3, #12]
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	ea40 0301 	orr.w	r3, r0, r1
 8006f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006fc8:	f021 010c 	bic.w	r1, r1, #12
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fea:	6999      	ldr	r1, [r3, #24]
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	ea40 0301 	orr.w	r3, r0, r1
 8006ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800723c <UART_SetConfig+0x2cc>)
 8007000:	429a      	cmp	r2, r3
 8007002:	d005      	beq.n	8007010 <UART_SetConfig+0xa0>
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b8d      	ldr	r3, [pc, #564]	@ (8007240 <UART_SetConfig+0x2d0>)
 800700c:	429a      	cmp	r2, r3
 800700e:	d104      	bne.n	800701a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fd fe98 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 8007014:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007018:	e003      	b.n	8007022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800701a:	f7fd fe7f 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 800701e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702c:	f040 810c 	bne.w	8007248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800703a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800703e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007042:	4622      	mov	r2, r4
 8007044:	462b      	mov	r3, r5
 8007046:	1891      	adds	r1, r2, r2
 8007048:	65b9      	str	r1, [r7, #88]	@ 0x58
 800704a:	415b      	adcs	r3, r3
 800704c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800704e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007052:	4621      	mov	r1, r4
 8007054:	eb12 0801 	adds.w	r8, r2, r1
 8007058:	4629      	mov	r1, r5
 800705a:	eb43 0901 	adc.w	r9, r3, r1
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800706a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800706e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007072:	4690      	mov	r8, r2
 8007074:	4699      	mov	r9, r3
 8007076:	4623      	mov	r3, r4
 8007078:	eb18 0303 	adds.w	r3, r8, r3
 800707c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007080:	462b      	mov	r3, r5
 8007082:	eb49 0303 	adc.w	r3, r9, r3
 8007086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007096:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800709a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800709e:	460b      	mov	r3, r1
 80070a0:	18db      	adds	r3, r3, r3
 80070a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80070a4:	4613      	mov	r3, r2
 80070a6:	eb42 0303 	adc.w	r3, r2, r3
 80070aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070b4:	f7f9 fe08 	bl	8000cc8 <__aeabi_uldivmod>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4b61      	ldr	r3, [pc, #388]	@ (8007244 <UART_SetConfig+0x2d4>)
 80070be:	fba3 2302 	umull	r2, r3, r3, r2
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	011c      	lsls	r4, r3, #4
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070e0:	415b      	adcs	r3, r3
 80070e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070e8:	4641      	mov	r1, r8
 80070ea:	eb12 0a01 	adds.w	sl, r2, r1
 80070ee:	4649      	mov	r1, r9
 80070f0:	eb43 0b01 	adc.w	fp, r3, r1
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007108:	4692      	mov	sl, r2
 800710a:	469b      	mov	fp, r3
 800710c:	4643      	mov	r3, r8
 800710e:	eb1a 0303 	adds.w	r3, sl, r3
 8007112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007116:	464b      	mov	r3, r9
 8007118:	eb4b 0303 	adc.w	r3, fp, r3
 800711c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800712c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007134:	460b      	mov	r3, r1
 8007136:	18db      	adds	r3, r3, r3
 8007138:	643b      	str	r3, [r7, #64]	@ 0x40
 800713a:	4613      	mov	r3, r2
 800713c:	eb42 0303 	adc.w	r3, r2, r3
 8007140:	647b      	str	r3, [r7, #68]	@ 0x44
 8007142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800714a:	f7f9 fdbd 	bl	8000cc8 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4611      	mov	r1, r2
 8007154:	4b3b      	ldr	r3, [pc, #236]	@ (8007244 <UART_SetConfig+0x2d4>)
 8007156:	fba3 2301 	umull	r2, r3, r3, r1
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	2264      	movs	r2, #100	@ 0x64
 800715e:	fb02 f303 	mul.w	r3, r2, r3
 8007162:	1acb      	subs	r3, r1, r3
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800716a:	4b36      	ldr	r3, [pc, #216]	@ (8007244 <UART_SetConfig+0x2d4>)
 800716c:	fba3 2302 	umull	r2, r3, r3, r2
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007178:	441c      	add	r4, r3
 800717a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800717e:	2200      	movs	r2, #0
 8007180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007184:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800718c:	4642      	mov	r2, r8
 800718e:	464b      	mov	r3, r9
 8007190:	1891      	adds	r1, r2, r2
 8007192:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007194:	415b      	adcs	r3, r3
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800719c:	4641      	mov	r1, r8
 800719e:	1851      	adds	r1, r2, r1
 80071a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80071a2:	4649      	mov	r1, r9
 80071a4:	414b      	adcs	r3, r1
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071b4:	4659      	mov	r1, fp
 80071b6:	00cb      	lsls	r3, r1, #3
 80071b8:	4651      	mov	r1, sl
 80071ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071be:	4651      	mov	r1, sl
 80071c0:	00ca      	lsls	r2, r1, #3
 80071c2:	4610      	mov	r0, r2
 80071c4:	4619      	mov	r1, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	4642      	mov	r2, r8
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071d0:	464b      	mov	r3, r9
 80071d2:	460a      	mov	r2, r1
 80071d4:	eb42 0303 	adc.w	r3, r2, r3
 80071d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071f0:	460b      	mov	r3, r1
 80071f2:	18db      	adds	r3, r3, r3
 80071f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071f6:	4613      	mov	r3, r2
 80071f8:	eb42 0303 	adc.w	r3, r2, r3
 80071fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007206:	f7f9 fd5f 	bl	8000cc8 <__aeabi_uldivmod>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4b0d      	ldr	r3, [pc, #52]	@ (8007244 <UART_SetConfig+0x2d4>)
 8007210:	fba3 1302 	umull	r1, r3, r3, r2
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	2164      	movs	r1, #100	@ 0x64
 8007218:	fb01 f303 	mul.w	r3, r1, r3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	3332      	adds	r3, #50	@ 0x32
 8007222:	4a08      	ldr	r2, [pc, #32]	@ (8007244 <UART_SetConfig+0x2d4>)
 8007224:	fba2 2303 	umull	r2, r3, r2, r3
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	f003 0207 	and.w	r2, r3, #7
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4422      	add	r2, r4
 8007236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007238:	e106      	b.n	8007448 <UART_SetConfig+0x4d8>
 800723a:	bf00      	nop
 800723c:	40011000 	.word	0x40011000
 8007240:	40011400 	.word	0x40011400
 8007244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724c:	2200      	movs	r2, #0
 800724e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007252:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800725a:	4642      	mov	r2, r8
 800725c:	464b      	mov	r3, r9
 800725e:	1891      	adds	r1, r2, r2
 8007260:	6239      	str	r1, [r7, #32]
 8007262:	415b      	adcs	r3, r3
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
 8007266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800726a:	4641      	mov	r1, r8
 800726c:	1854      	adds	r4, r2, r1
 800726e:	4649      	mov	r1, r9
 8007270:	eb43 0501 	adc.w	r5, r3, r1
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	00eb      	lsls	r3, r5, #3
 800727e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007282:	00e2      	lsls	r2, r4, #3
 8007284:	4614      	mov	r4, r2
 8007286:	461d      	mov	r5, r3
 8007288:	4643      	mov	r3, r8
 800728a:	18e3      	adds	r3, r4, r3
 800728c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007290:	464b      	mov	r3, r9
 8007292:	eb45 0303 	adc.w	r3, r5, r3
 8007296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072b6:	4629      	mov	r1, r5
 80072b8:	008b      	lsls	r3, r1, #2
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072c0:	4621      	mov	r1, r4
 80072c2:	008a      	lsls	r2, r1, #2
 80072c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80072c8:	f7f9 fcfe 	bl	8000cc8 <__aeabi_uldivmod>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4b60      	ldr	r3, [pc, #384]	@ (8007454 <UART_SetConfig+0x4e4>)
 80072d2:	fba3 2302 	umull	r2, r3, r3, r2
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	011c      	lsls	r4, r3, #4
 80072da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072ec:	4642      	mov	r2, r8
 80072ee:	464b      	mov	r3, r9
 80072f0:	1891      	adds	r1, r2, r2
 80072f2:	61b9      	str	r1, [r7, #24]
 80072f4:	415b      	adcs	r3, r3
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072fc:	4641      	mov	r1, r8
 80072fe:	1851      	adds	r1, r2, r1
 8007300:	6139      	str	r1, [r7, #16]
 8007302:	4649      	mov	r1, r9
 8007304:	414b      	adcs	r3, r1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007314:	4659      	mov	r1, fp
 8007316:	00cb      	lsls	r3, r1, #3
 8007318:	4651      	mov	r1, sl
 800731a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731e:	4651      	mov	r1, sl
 8007320:	00ca      	lsls	r2, r1, #3
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	4603      	mov	r3, r0
 8007328:	4642      	mov	r2, r8
 800732a:	189b      	adds	r3, r3, r2
 800732c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007330:	464b      	mov	r3, r9
 8007332:	460a      	mov	r2, r1
 8007334:	eb42 0303 	adc.w	r3, r2, r3
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007346:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007354:	4649      	mov	r1, r9
 8007356:	008b      	lsls	r3, r1, #2
 8007358:	4641      	mov	r1, r8
 800735a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735e:	4641      	mov	r1, r8
 8007360:	008a      	lsls	r2, r1, #2
 8007362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007366:	f7f9 fcaf 	bl	8000cc8 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4611      	mov	r1, r2
 8007370:	4b38      	ldr	r3, [pc, #224]	@ (8007454 <UART_SetConfig+0x4e4>)
 8007372:	fba3 2301 	umull	r2, r3, r3, r1
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	2264      	movs	r2, #100	@ 0x64
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	1acb      	subs	r3, r1, r3
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	3332      	adds	r3, #50	@ 0x32
 8007384:	4a33      	ldr	r2, [pc, #204]	@ (8007454 <UART_SetConfig+0x4e4>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007390:	441c      	add	r4, r3
 8007392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007396:	2200      	movs	r2, #0
 8007398:	673b      	str	r3, [r7, #112]	@ 0x70
 800739a:	677a      	str	r2, [r7, #116]	@ 0x74
 800739c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	1891      	adds	r1, r2, r2
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	415b      	adcs	r3, r3
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b0:	4641      	mov	r1, r8
 80073b2:	1851      	adds	r1, r2, r1
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	4649      	mov	r1, r9
 80073b8:	414b      	adcs	r3, r1
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073c8:	4659      	mov	r1, fp
 80073ca:	00cb      	lsls	r3, r1, #3
 80073cc:	4651      	mov	r1, sl
 80073ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d2:	4651      	mov	r1, sl
 80073d4:	00ca      	lsls	r2, r1, #3
 80073d6:	4610      	mov	r0, r2
 80073d8:	4619      	mov	r1, r3
 80073da:	4603      	mov	r3, r0
 80073dc:	4642      	mov	r2, r8
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073e2:	464b      	mov	r3, r9
 80073e4:	460a      	mov	r2, r1
 80073e6:	eb42 0303 	adc.w	r3, r2, r3
 80073ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80073f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	f04f 0300 	mov.w	r3, #0
 8007400:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007404:	4649      	mov	r1, r9
 8007406:	008b      	lsls	r3, r1, #2
 8007408:	4641      	mov	r1, r8
 800740a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800740e:	4641      	mov	r1, r8
 8007410:	008a      	lsls	r2, r1, #2
 8007412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007416:	f7f9 fc57 	bl	8000cc8 <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <UART_SetConfig+0x4e4>)
 8007420:	fba3 1302 	umull	r1, r3, r3, r2
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	2164      	movs	r1, #100	@ 0x64
 8007428:	fb01 f303 	mul.w	r3, r1, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	3332      	adds	r3, #50	@ 0x32
 8007432:	4a08      	ldr	r2, [pc, #32]	@ (8007454 <UART_SetConfig+0x4e4>)
 8007434:	fba2 2303 	umull	r2, r3, r2, r3
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f003 020f 	and.w	r2, r3, #15
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4422      	add	r2, r4
 8007446:	609a      	str	r2, [r3, #8]
}
 8007448:	bf00      	nop
 800744a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800744e:	46bd      	mov	sp, r7
 8007450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007454:	51eb851f 	.word	0x51eb851f

08007458 <esp32_init>:
 *          Otherwise, an error is returned.
 *
 * @param   None
 * @retval  ESP32_OK on success, ESP32_ERROR on failure.
 */
esp32_status_t esp32_init(void) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
  esp32_status_t ret = ESP32_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	71fb      	strb	r3, [r7, #7]

  /* Configuration the IO low layer */
  if ( esp32_io_init() < 0 ) {
 8007462:	f000 fc2b 	bl	8007cbc <esp32_io_init>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	da01      	bge.n	8007470 <esp32_init+0x18>
    return ESP32_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e033      	b.n	80074d8 <esp32_init+0x80>
  }

#ifndef OTA_APP
  /* Switch off the echo mode */
  /* Construct the command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 8007470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007474:	2100      	movs	r1, #0
 8007476:	481a      	ldr	r0, [pc, #104]	@ (80074e0 <esp32_init+0x88>)
 8007478:	f009 fe1a 	bl	80110b0 <memset>
  sprintf((char *)at_cmd, "ATE%d%s", ESP32_ECHO_OFF, AT_CMD_TERMINATOR );
 800747c:	4b19      	ldr	r3, [pc, #100]	@ (80074e4 <esp32_init+0x8c>)
 800747e:	2200      	movs	r2, #0
 8007480:	4919      	ldr	r1, [pc, #100]	@ (80074e8 <esp32_init+0x90>)
 8007482:	4817      	ldr	r0, [pc, #92]	@ (80074e0 <esp32_init+0x88>)
 8007484:	f009 fcc2 	bl	8010e0c <siprintf>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 8007488:	4815      	ldr	r0, [pc, #84]	@ (80074e0 <esp32_init+0x88>)
 800748a:	f7f8 ff11 	bl	80002b0 <strlen>
 800748e:	4603      	mov	r3, r0
 8007490:	4a16      	ldr	r2, [pc, #88]	@ (80074ec <esp32_init+0x94>)
 8007492:	4619      	mov	r1, r3
 8007494:	4812      	ldr	r0, [pc, #72]	@ (80074e0 <esp32_init+0x88>)
 8007496:	f000 fbc9 	bl	8007c2c <run_at_cmd>
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
                    (uint8_t *)AT_OK_STRING);

  /* Exit in case of error */
  if ( ret != ESP32_OK ) {
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <esp32_init+0x50>
    return ESP32_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e017      	b.n	80074d8 <esp32_init+0x80>
  }

  /* Setup the module in station mode*/
  /* Construct the command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 80074a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074ac:	2100      	movs	r1, #0
 80074ae:	480c      	ldr	r0, [pc, #48]	@ (80074e0 <esp32_init+0x88>)
 80074b0:	f009 fdfe 	bl	80110b0 <memset>
  sprintf((char *)at_cmd, "AT+CWMODE=%d%s", ESP32_STATION_MODE , AT_CMD_TERMINATOR );
 80074b4:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <esp32_init+0x8c>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	490d      	ldr	r1, [pc, #52]	@ (80074f0 <esp32_init+0x98>)
 80074ba:	4809      	ldr	r0, [pc, #36]	@ (80074e0 <esp32_init+0x88>)
 80074bc:	f009 fca6 	bl	8010e0c <siprintf>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 80074c0:	4807      	ldr	r0, [pc, #28]	@ (80074e0 <esp32_init+0x88>)
 80074c2:	f7f8 fef5 	bl	80002b0 <strlen>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <esp32_init+0x94>)
 80074ca:	4619      	mov	r1, r3
 80074cc:	4804      	ldr	r0, [pc, #16]	@ (80074e0 <esp32_init+0x88>)
 80074ce:	f000 fbad 	bl	8007c2c <run_at_cmd>
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
                    (uint8_t *)AT_OK_STRING);
#endif
  return ret;
 80074d6:	79fb      	ldrb	r3, [r7, #7]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001360 	.word	0x20001360
 80074e4:	08015278 	.word	0x08015278
 80074e8:	0801527c 	.word	0x0801527c
 80074ec:	08015284 	.word	0x08015284
 80074f0:	0801528c 	.word	0x0801528c

080074f4 <esp32_join_ap>:
 * @param  ssid: the access point id.
 * @param  password the Access point password.
 * @retval returns esp_AT_COMMAND_OK on success and esp_AT_COMMAND_ERROR
 * otherwise.
 */
esp32_status_t esp32_join_ap(uint8_t *ssid, uint8_t *password) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  esp32_status_t ret;

  /* List all the available Access points first
   then check whether the specified 'ssid' exists among them or not.*/
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 80074fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007502:	2100      	movs	r1, #0
 8007504:	480d      	ldr	r0, [pc, #52]	@ (800753c <esp32_join_ap+0x48>)
 8007506:	f009 fdd3 	bl	80110b0 <memset>
  sprintf((char *)at_cmd, "AT+CWJAP=\"%s\",\"%s\"%s", ssid, password, AT_CMD_TERMINATOR);
 800750a:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <esp32_join_ap+0x4c>)
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	490c      	ldr	r1, [pc, #48]	@ (8007544 <esp32_join_ap+0x50>)
 8007514:	4809      	ldr	r0, [pc, #36]	@ (800753c <esp32_join_ap+0x48>)
 8007516:	f009 fc79 	bl	8010e0c <siprintf>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 800751a:	4808      	ldr	r0, [pc, #32]	@ (800753c <esp32_join_ap+0x48>)
 800751c:	f7f8 fec8 	bl	80002b0 <strlen>
 8007520:	4603      	mov	r3, r0
 8007522:	4a09      	ldr	r2, [pc, #36]	@ (8007548 <esp32_join_ap+0x54>)
 8007524:	4619      	mov	r1, r3
 8007526:	4805      	ldr	r0, [pc, #20]	@ (800753c <esp32_join_ap+0x48>)
 8007528:	f000 fb80 	bl	8007c2c <run_at_cmd>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
                    (uint8_t *)AT_OK_STRING);

  return ret;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20001360 	.word	0x20001360
 8007540:	08015278 	.word	0x08015278
 8007544:	080152a8 	.word	0x080152a8
 8007548:	08015284 	.word	0x08015284

0800754c <esp32_config_sntp>:
/**
 * @brief  Configure the SNTP client with predefined NTP servers.
 * @param  utc_offset: Time offset from UTC in hours.
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
esp32_status_t esp32_config_sntp(int utc_offset) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af02      	add	r7, sp, #8
 8007552:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  const char *ntp_server1 = "pool.ntp.org";
 8007554:	4b11      	ldr	r3, [pc, #68]	@ (800759c <esp32_config_sntp+0x50>)
 8007556:	617b      	str	r3, [r7, #20]
  const char *ntp_server2 = "time.google.com";
 8007558:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <esp32_config_sntp+0x54>)
 800755a:	613b      	str	r3, [r7, #16]

  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 800755c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007560:	2100      	movs	r1, #0
 8007562:	4810      	ldr	r0, [pc, #64]	@ (80075a4 <esp32_config_sntp+0x58>)
 8007564:	f009 fda4 	bl	80110b0 <memset>

  // Construct AT command with all servers (ESP32 AT FW supports up to 3 servers)
  sprintf((char *)at_cmd,
 8007568:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <esp32_config_sntp+0x5c>)
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	490d      	ldr	r1, [pc, #52]	@ (80075ac <esp32_config_sntp+0x60>)
 8007576:	480b      	ldr	r0, [pc, #44]	@ (80075a4 <esp32_config_sntp+0x58>)
 8007578:	f009 fc48 	bl	8010e0c <siprintf>
          ntp_server1,
          ntp_server2,
          AT_CMD_TERMINATOR);

  // Send the command
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING);
 800757c:	4809      	ldr	r0, [pc, #36]	@ (80075a4 <esp32_config_sntp+0x58>)
 800757e:	f7f8 fe97 	bl	80002b0 <strlen>
 8007582:	4603      	mov	r3, r0
 8007584:	4a0a      	ldr	r2, [pc, #40]	@ (80075b0 <esp32_config_sntp+0x64>)
 8007586:	4619      	mov	r1, r3
 8007588:	4806      	ldr	r0, [pc, #24]	@ (80075a4 <esp32_config_sntp+0x58>)
 800758a:	f000 fb4f 	bl	8007c2c <run_at_cmd>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]

  return ret;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	08015324 	.word	0x08015324
 80075a0:	08015334 	.word	0x08015334
 80075a4:	20001360 	.word	0x20001360
 80075a8:	08015278 	.word	0x08015278
 80075ac:	08015344 	.word	0x08015344
 80075b0:	08015284 	.word	0x08015284

080075b4 <esp32_get_sntp_time>:

/**
 * @brief  Query the SNTP time from the module.
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
esp32_status_t esp32_get_sntp_time(sntp_time_t *time_data) {
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b6:	b08f      	sub	sp, #60	@ 0x3c
 80075b8:	af06      	add	r7, sp, #24
 80075ba:	6078      	str	r0, [r7, #4]
  const int max_retries = 10, retry_delay_ms = 1000;
 80075bc:	230a      	movs	r3, #10
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80075c4:	617b      	str	r3, [r7, #20]
  esp32_status_t ret = ESP32_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	74fb      	strb	r3, [r7, #19]

  memset(at_cmd, 0, MAX_AT_CMD_SIZE);
 80075ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075ce:	2100      	movs	r1, #0
 80075d0:	482b      	ldr	r0, [pc, #172]	@ (8007680 <esp32_get_sntp_time+0xcc>)
 80075d2:	f009 fd6d 	bl	80110b0 <memset>
  snprintf((char *)at_cmd, sizeof(at_cmd), "AT+CIPSNTPTIME?%s", AT_CMD_TERMINATOR);
 80075d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007684 <esp32_get_sntp_time+0xd0>)
 80075d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007688 <esp32_get_sntp_time+0xd4>)
 80075da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80075de:	4828      	ldr	r0, [pc, #160]	@ (8007680 <esp32_get_sntp_time+0xcc>)
 80075e0:	f009 fbde 	bl	8010da0 <sniprintf>

  for (int retries = 0; retries < max_retries; retries++) {
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e040      	b.n	800766c <esp32_get_sntp_time+0xb8>
    HAL_Delay(retry_delay_ms);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fb fe25 	bl	800323c <HAL_Delay>
    if (run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING) != ESP32_OK) {
 80075f2:	4823      	ldr	r0, [pc, #140]	@ (8007680 <esp32_get_sntp_time+0xcc>)
 80075f4:	f7f8 fe5c 	bl	80002b0 <strlen>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4a24      	ldr	r2, [pc, #144]	@ (800768c <esp32_get_sntp_time+0xd8>)
 80075fc:	4619      	mov	r1, r3
 80075fe:	4820      	ldr	r0, [pc, #128]	@ (8007680 <esp32_get_sntp_time+0xcc>)
 8007600:	f000 fb14 	bl	8007c2c <run_at_cmd>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12a      	bne.n	8007660 <esp32_get_sntp_time+0xac>
      continue;
    }

    char *p_sntp_time = strstr(rx_buffer, "+CIPSNTPTIME:");
 800760a:	4921      	ldr	r1, [pc, #132]	@ (8007690 <esp32_get_sntp_time+0xdc>)
 800760c:	4821      	ldr	r0, [pc, #132]	@ (8007694 <esp32_get_sntp_time+0xe0>)
 800760e:	f009 fd9b 	bl	8011148 <strstr>
 8007612:	60f8      	str	r0, [r7, #12]

    // Extract SNTP time from the response
    if (!p_sntp_time || sscanf(p_sntp_time, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d024      	beq.n	8007664 <esp32_get_sntp_time+0xb0>
        time_data->day, time_data->month, &time_data->date,
 800761a:	687d      	ldr	r5, [r7, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1d1e      	adds	r6, r3, #4
    if (!p_sntp_time || sscanf(p_sntp_time, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3308      	adds	r3, #8
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	3210      	adds	r2, #16
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	3114      	adds	r1, #20
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	3018      	adds	r0, #24
 8007630:	687c      	ldr	r4, [r7, #4]
 8007632:	340c      	adds	r4, #12
 8007634:	9404      	str	r4, [sp, #16]
 8007636:	9003      	str	r0, [sp, #12]
 8007638:	9102      	str	r1, [sp, #8]
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4633      	mov	r3, r6
 8007640:	462a      	mov	r2, r5
 8007642:	4915      	ldr	r1, [pc, #84]	@ (8007698 <esp32_get_sntp_time+0xe4>)
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f009 fc03 	bl	8010e50 <siscanf>
 800764a:	4603      	mov	r3, r0
 800764c:	2b07      	cmp	r3, #7
 800764e:	d109      	bne.n	8007664 <esp32_get_sntp_time+0xb0>
        &time_data->year) != 7){
        continue;
    }

    // Check if time is valid
    if (time_data->year != 1970) {
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f240 72b2 	movw	r2, #1970	@ 0x7b2
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <esp32_get_sntp_time+0xb2>
      return ESP32_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e00a      	b.n	8007676 <esp32_get_sntp_time+0xc2>
      continue;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <esp32_get_sntp_time+0xb2>
        continue;
 8007664:	bf00      	nop
  for (int retries = 0; retries < max_retries; retries++) {
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	429a      	cmp	r2, r3
 8007672:	dbba      	blt.n	80075ea <esp32_get_sntp_time+0x36>
    }
  }

  return ret;
 8007674:	7cfb      	ldrb	r3, [r7, #19]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3724      	adds	r7, #36	@ 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800767e:	bf00      	nop
 8007680:	20001360 	.word	0x20001360
 8007684:	08015278 	.word	0x08015278
 8007688:	08015364 	.word	0x08015364
 800768c:	08015284 	.word	0x08015284
 8007690:	08015378 	.word	0x08015378
 8007694:	20001460 	.word	0x20001460
 8007698:	08015388 	.word	0x08015388

0800769c <esp32_mqtt_configure>:
/**
 * @brief  Configure MQTT client user settings.
 * @param  p_conn_info: Pointer to MQTT connection info structure.
 * @retval ESP32_OK on success, appropriate error code otherwise.
 */
esp32_status_t esp32_mqtt_configure(const mqtt_connection_info_t *p_conn_info) {
 800769c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769e:	b08d      	sub	sp, #52	@ 0x34
 80076a0:	af08      	add	r7, sp, #32
 80076a2:	6078      	str	r0, [r7, #4]
    esp32_status_t ret;

    /* Validate input parameters */
    if (p_conn_info == NULL || p_conn_info->p_host == NULL || p_conn_info->p_port == 0) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <esp32_mqtt_configure+0x1e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <esp32_mqtt_configure+0x1e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <esp32_mqtt_configure+0x22>
        return ESP32_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e08b      	b.n	80077d6 <esp32_mqtt_configure+0x13a>
    }

    /* Configure MQTT User Info (Client ID, Auth, Certs) */
    memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 80076be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076c2:	2100      	movs	r1, #0
 80076c4:	4846      	ldr	r0, [pc, #280]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 80076c6:	f009 fcf3 	bl	80110b0 <memset>
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
             "AT+MQTTUSERCFG=0,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"%s",
             p_conn_info->user_config.scheme,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	781b      	ldrb	r3, [r3, #0]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 80076ce:	469c      	mov	ip, r3
             p_conn_info->user_config.p_client_id ? p_conn_info->user_config.p_client_id : "",
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <esp32_mqtt_configure+0x42>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	e000      	b.n	80076e0 <esp32_mqtt_configure+0x44>
 80076de:	4b41      	ldr	r3, [pc, #260]	@ (80077e4 <esp32_mqtt_configure+0x148>)
             p_conn_info->user_config.p_username ? p_conn_info->user_config.p_username : "",
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6892      	ldr	r2, [r2, #8]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	d002      	beq.n	80076ee <esp32_mqtt_configure+0x52>
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	6892      	ldr	r2, [r2, #8]
 80076ec:	e000      	b.n	80076f0 <esp32_mqtt_configure+0x54>
 80076ee:	4a3d      	ldr	r2, [pc, #244]	@ (80077e4 <esp32_mqtt_configure+0x148>)
             p_conn_info->user_config.p_password ? p_conn_info->user_config.p_password : "",
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	68c9      	ldr	r1, [r1, #12]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d002      	beq.n	80076fe <esp32_mqtt_configure+0x62>
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	68c9      	ldr	r1, [r1, #12]
 80076fc:	e000      	b.n	8007700 <esp32_mqtt_configure+0x64>
 80076fe:	4939      	ldr	r1, [pc, #228]	@ (80077e4 <esp32_mqtt_configure+0x148>)
             p_conn_info->user_config.cert_key_id,
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	7c00      	ldrb	r0, [r0, #16]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007704:	4605      	mov	r5, r0
             p_conn_info->user_config.ca_id,
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	7c40      	ldrb	r0, [r0, #17]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 800770a:	4606      	mov	r6, r0
             p_conn_info->user_config.path ? p_conn_info->user_config.path : "",
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	6940      	ldr	r0, [r0, #20]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007710:	2800      	cmp	r0, #0
 8007712:	d002      	beq.n	800771a <esp32_mqtt_configure+0x7e>
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	6940      	ldr	r0, [r0, #20]
 8007718:	e000      	b.n	800771c <esp32_mqtt_configure+0x80>
 800771a:	4832      	ldr	r0, [pc, #200]	@ (80077e4 <esp32_mqtt_configure+0x148>)
 800771c:	4c32      	ldr	r4, [pc, #200]	@ (80077e8 <esp32_mqtt_configure+0x14c>)
 800771e:	9406      	str	r4, [sp, #24]
 8007720:	9005      	str	r0, [sp, #20]
 8007722:	9604      	str	r6, [sp, #16]
 8007724:	9503      	str	r5, [sp, #12]
 8007726:	9102      	str	r1, [sp, #8]
 8007728:	9201      	str	r2, [sp, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	4663      	mov	r3, ip
 800772e:	4a2f      	ldr	r2, [pc, #188]	@ (80077ec <esp32_mqtt_configure+0x150>)
 8007730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007734:	482a      	ldr	r0, [pc, #168]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 8007736:	f009 fb33 	bl	8010da0 <sniprintf>
             AT_CMD_TERMINATOR);

    ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING);
 800773a:	4829      	ldr	r0, [pc, #164]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 800773c:	f7f8 fdb8 	bl	80002b0 <strlen>
 8007740:	4603      	mov	r3, r0
 8007742:	4a2b      	ldr	r2, [pc, #172]	@ (80077f0 <esp32_mqtt_configure+0x154>)
 8007744:	4619      	mov	r1, r3
 8007746:	4826      	ldr	r0, [pc, #152]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 8007748:	f000 fa70 	bl	8007c2c <run_at_cmd>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]

    if (ret != ESP32_OK) {
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <esp32_mqtt_configure+0xbe>
      return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	e03d      	b.n	80077d6 <esp32_mqtt_configure+0x13a>
    }

    /* Configure MQTT Connection Info (e.g., KeepAlive, CleanSession, LWT) */
    memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 800775a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800775e:	2100      	movs	r1, #0
 8007760:	481f      	ldr	r0, [pc, #124]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 8007762:	f009 fca5 	bl	80110b0 <memset>
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
             "AT+MQTTCONNCFG=0,%d,%d,\"%s\",\"%s\",%d,%d%s",
             p_conn_info->conn_config.keep_alive,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8b1b      	ldrh	r3, [r3, #24]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 800776a:	461e      	mov	r6, r3
             p_conn_info->conn_config.disable_clean_session,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7e9b      	ldrb	r3, [r3, #26]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007770:	4618      	mov	r0, r3
             p_conn_info->conn_config.lwt_info.p_topic ? p_conn_info->conn_config.lwt_info.p_topic : "",
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <esp32_mqtt_configure+0xe4>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	e000      	b.n	8007782 <esp32_mqtt_configure+0xe6>
 8007780:	4b18      	ldr	r3, [pc, #96]	@ (80077e4 <esp32_mqtt_configure+0x148>)
             (const char *)p_conn_info->conn_config.lwt_info.p_payload ? (const char *)p_conn_info->conn_config.lwt_info.p_payload : "",
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007786:	2a00      	cmp	r2, #0
 8007788:	d002      	beq.n	8007790 <esp32_mqtt_configure+0xf4>
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800778e:	e000      	b.n	8007792 <esp32_mqtt_configure+0xf6>
 8007790:	4a14      	ldr	r2, [pc, #80]	@ (80077e4 <esp32_mqtt_configure+0x148>)
             p_conn_info->conn_config.lwt_info.qos,
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	f891 102c 	ldrb.w	r1, [r1, #44]	@ 0x2c
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007798:	460c      	mov	r4, r1
             p_conn_info->conn_config.lwt_info.retain,
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	f891 102d 	ldrb.w	r1, [r1, #45]	@ 0x2d
    snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 80077a0:	460d      	mov	r5, r1
 80077a2:	4911      	ldr	r1, [pc, #68]	@ (80077e8 <esp32_mqtt_configure+0x14c>)
 80077a4:	9105      	str	r1, [sp, #20]
 80077a6:	9504      	str	r5, [sp, #16]
 80077a8:	9403      	str	r4, [sp, #12]
 80077aa:	9202      	str	r2, [sp, #8]
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	9000      	str	r0, [sp, #0]
 80077b0:	4633      	mov	r3, r6
 80077b2:	4a10      	ldr	r2, [pc, #64]	@ (80077f4 <esp32_mqtt_configure+0x158>)
 80077b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80077b8:	4809      	ldr	r0, [pc, #36]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 80077ba:	f009 faf1 	bl	8010da0 <sniprintf>
             AT_CMD_TERMINATOR);

    ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING);
 80077be:	4808      	ldr	r0, [pc, #32]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 80077c0:	f7f8 fd76 	bl	80002b0 <strlen>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <esp32_mqtt_configure+0x154>)
 80077c8:	4619      	mov	r1, r3
 80077ca:	4805      	ldr	r0, [pc, #20]	@ (80077e0 <esp32_mqtt_configure+0x144>)
 80077cc:	f000 fa2e 	bl	8007c2c <run_at_cmd>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

    return ret;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077de:	bf00      	nop
 80077e0:	20001360 	.word	0x20001360
 80077e4:	080153ac 	.word	0x080153ac
 80077e8:	08015278 	.word	0x08015278
 80077ec:	080153b0 	.word	0x080153b0
 80077f0:	08015284 	.word	0x08015284
 80077f4:	080153e0 	.word	0x080153e0

080077f8 <esp32_mqtt_connect_to_broker>:
 * @brief  Connect to MQTT broker.
 * @param  p_handler: Pointer to MQTT handler structure.
 * @param  p_conn_info: Pointer to MQTT connection info structure.
 * @retval ESP32_OK on success, appropriate error code otherwise.
 */
esp32_status_t esp32_mqtt_connect_to_broker(const mqtt_connection_info_t *p_conn_info) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  /* Validate input parameters */
  if ( p_conn_info == NULL) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <esp32_mqtt_connect_to_broker+0x12>
    return ESP32_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e025      	b.n	8007856 <esp32_mqtt_connect_to_broker+0x5e>
  }

  /* Connect to MQTT broker */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 800780a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800780e:	2100      	movs	r1, #0
 8007810:	4813      	ldr	r0, [pc, #76]	@ (8007860 <esp32_mqtt_connect_to_broker+0x68>)
 8007812:	f009 fc4d 	bl	80110b0 <memset>
  snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
           "AT+MQTTCONN=0,\"%s\",%u,%u%s",
           p_conn_info->p_host,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
           p_conn_info->p_port,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
  snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 800781e:	4619      	mov	r1, r3
           p_conn_info->reconnect,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
  snprintf((char *)at_cmd, MAX_AT_CMD_SIZE,
 8007826:	4618      	mov	r0, r3
 8007828:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <esp32_mqtt_connect_to_broker+0x6c>)
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	9001      	str	r0, [sp, #4]
 800782e:	9100      	str	r1, [sp, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	4a0d      	ldr	r2, [pc, #52]	@ (8007868 <esp32_mqtt_connect_to_broker+0x70>)
 8007834:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007838:	4809      	ldr	r0, [pc, #36]	@ (8007860 <esp32_mqtt_connect_to_broker+0x68>)
 800783a:	f009 fab1 	bl	8010da0 <sniprintf>
           AT_CMD_TERMINATOR);

  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING);
 800783e:	4808      	ldr	r0, [pc, #32]	@ (8007860 <esp32_mqtt_connect_to_broker+0x68>)
 8007840:	f7f8 fd36 	bl	80002b0 <strlen>
 8007844:	4603      	mov	r3, r0
 8007846:	4a09      	ldr	r2, [pc, #36]	@ (800786c <esp32_mqtt_connect_to_broker+0x74>)
 8007848:	4619      	mov	r1, r3
 800784a:	4805      	ldr	r0, [pc, #20]	@ (8007860 <esp32_mqtt_connect_to_broker+0x68>)
 800784c:	f000 f9ee 	bl	8007c2c <run_at_cmd>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20001360 	.word	0x20001360
 8007864:	08015278 	.word	0x08015278
 8007868:	0801540c 	.word	0x0801540c
 800786c:	08015284 	.word	0x08015284

08007870 <esp32_mqtt_subscribe>:
 * @brief  Subscribe to an MQTT topic.
 * @param  topic: MQTT topic to subscribe to (e.g., "topic/esp32at").
 * @param  qos: Quality of Service level (typically 1).
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
esp32_status_t esp32_mqtt_subscribe(const mqtt_subscribe_t *sub_args) {
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af02      	add	r7, sp, #8
 8007876:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  /* Construct the MQTTSUB command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 8007878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800787c:	2100      	movs	r1, #0
 800787e:	480f      	ldr	r0, [pc, #60]	@ (80078bc <esp32_mqtt_subscribe+0x4c>)
 8007880:	f009 fc16 	bl	80110b0 <memset>
  sprintf((char *)at_cmd, "AT+MQTTSUB=0,\"%s\",%u%s",
          sub_args->p_topic_filter, sub_args->qos, AT_CMD_TERMINATOR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7a1b      	ldrb	r3, [r3, #8]
  sprintf((char *)at_cmd, "AT+MQTTSUB=0,\"%s\",%u%s",
 800788c:	4619      	mov	r1, r3
 800788e:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <esp32_mqtt_subscribe+0x50>)
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	460b      	mov	r3, r1
 8007894:	490b      	ldr	r1, [pc, #44]	@ (80078c4 <esp32_mqtt_subscribe+0x54>)
 8007896:	4809      	ldr	r0, [pc, #36]	@ (80078bc <esp32_mqtt_subscribe+0x4c>)
 8007898:	f009 fab8 	bl	8010e0c <siprintf>

  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 800789c:	4807      	ldr	r0, [pc, #28]	@ (80078bc <esp32_mqtt_subscribe+0x4c>)
 800789e:	f7f8 fd07 	bl	80002b0 <strlen>
 80078a2:	4603      	mov	r3, r0
 80078a4:	4a08      	ldr	r2, [pc, #32]	@ (80078c8 <esp32_mqtt_subscribe+0x58>)
 80078a6:	4619      	mov	r1, r3
 80078a8:	4804      	ldr	r0, [pc, #16]	@ (80078bc <esp32_mqtt_subscribe+0x4c>)
 80078aa:	f000 f9bf 	bl	8007c2c <run_at_cmd>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
                   (uint8_t *)AT_OK_STRING);

  return ret;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20001360 	.word	0x20001360
 80078c0:	08015278 	.word	0x08015278
 80078c4:	08015428 	.word	0x08015428
 80078c8:	08015284 	.word	0x08015284

080078cc <esp32_mqtt_publish>:
 * sending the actual payload. If a response is expected, it processes it.
 *
 * @param  pub_args  Pointer to mqtt_receive_t containing topic, payload, QoS, etc.
 * @retval ESP32_OK on success, ESP32_ERROR on failure.
 */
esp32_status_t esp32_mqtt_publish(const mqtt_publish_t *pub_args) {
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b089      	sub	sp, #36	@ 0x24
 80078d0:	af04      	add	r7, sp, #16
 80078d2:	6078      	str	r0, [r7, #4]
  assert(pub_args && pub_args->p_topic && pub_args->p_payload);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <esp32_mqtt_publish+0x1e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <esp32_mqtt_publish+0x1e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <esp32_mqtt_publish+0x2c>
 80078ea:	4b20      	ldr	r3, [pc, #128]	@ (800796c <esp32_mqtt_publish+0xa0>)
 80078ec:	4a20      	ldr	r2, [pc, #128]	@ (8007970 <esp32_mqtt_publish+0xa4>)
 80078ee:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 80078f2:	4820      	ldr	r0, [pc, #128]	@ (8007974 <esp32_mqtt_publish+0xa8>)
 80078f4:	f007 ff60 	bl	800f7b8 <__assert_func>

  esp32_status_t ret = ESP32_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]

  /* Construct the MQTT PUBLISH command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 80078fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007900:	2100      	movs	r1, #0
 8007902:	481d      	ldr	r0, [pc, #116]	@ (8007978 <esp32_mqtt_publish+0xac>)
 8007904:	f009 fbd4 	bl	80110b0 <memset>
  sprintf((char *)at_cmd, "AT+MQTTPUBRAW=0,\"%s\",%u,%u,%u%s",
      pub_args->p_topic, pub_args->payload_length, pub_args->qos, pub_args->retain, AT_CMD_TERMINATOR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68d9      	ldr	r1, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	7c1b      	ldrb	r3, [r3, #16]
  sprintf((char *)at_cmd, "AT+MQTTPUBRAW=0,\"%s\",%u,%u,%u%s",
 8007914:	4618      	mov	r0, r3
      pub_args->p_topic, pub_args->payload_length, pub_args->qos, pub_args->retain, AT_CMD_TERMINATOR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7c5b      	ldrb	r3, [r3, #17]
  sprintf((char *)at_cmd, "AT+MQTTPUBRAW=0,\"%s\",%u,%u,%u%s",
 800791a:	461c      	mov	r4, r3
 800791c:	4b17      	ldr	r3, [pc, #92]	@ (800797c <esp32_mqtt_publish+0xb0>)
 800791e:	9302      	str	r3, [sp, #8]
 8007920:	9401      	str	r4, [sp, #4]
 8007922:	9000      	str	r0, [sp, #0]
 8007924:	460b      	mov	r3, r1
 8007926:	4916      	ldr	r1, [pc, #88]	@ (8007980 <esp32_mqtt_publish+0xb4>)
 8007928:	4813      	ldr	r0, [pc, #76]	@ (8007978 <esp32_mqtt_publish+0xac>)
 800792a:	f009 fa6f 	bl	8010e0c <siprintf>

  /* The MQTT RAW publish command doesn't have a return command
         until the data is actually sent. Thus we check here whether
         we got the '>' prompt or not. */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_SEND_PROMPT_STRING);
 800792e:	4812      	ldr	r0, [pc, #72]	@ (8007978 <esp32_mqtt_publish+0xac>)
 8007930:	f7f8 fcbe 	bl	80002b0 <strlen>
 8007934:	4603      	mov	r3, r0
 8007936:	4a13      	ldr	r2, [pc, #76]	@ (8007984 <esp32_mqtt_publish+0xb8>)
 8007938:	4619      	mov	r1, r3
 800793a:	480f      	ldr	r0, [pc, #60]	@ (8007978 <esp32_mqtt_publish+0xac>)
 800793c:	f000 f976 	bl	8007c2c <run_at_cmd>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

  if (ret != ESP32_OK) {
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <esp32_mqtt_publish+0x82>
    return ret;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	e00a      	b.n	8007964 <esp32_mqtt_publish+0x98>
  }

  /* Send actual payload and check response */
  ret = run_at_cmd((uint8_t *)pub_args->p_payload, pub_args->payload_length, (uint8_t *)AT_OK_STRING);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6898      	ldr	r0, [r3, #8]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4a0c      	ldr	r2, [pc, #48]	@ (8007988 <esp32_mqtt_publish+0xbc>)
 8007958:	4619      	mov	r1, r3
 800795a:	f000 f967 	bl	8007c2c <run_at_cmd>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]

  return ret;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	bd90      	pop	{r4, r7, pc}
 800796c:	08015458 	.word	0x08015458
 8007970:	0801631c 	.word	0x0801631c
 8007974:	08015490 	.word	0x08015490
 8007978:	20001360 	.word	0x20001360
 800797c:	08015278 	.word	0x08015278
 8007980:	080154ac 	.word	0x080154ac
 8007984:	080154cc 	.word	0x080154cc
 8007988:	08015284 	.word	0x08015284

0800798c <esp32_recv_mqtt_data>:
 * @param  p_data the buffer to fill will the received data.
 * @param  length the maximum data size to receive.
 * @param ret_length the actual data received.
 * @retval returns ESP32_OK on success and ESP32_ERROR otherwise.
 */
esp32_status_t esp32_recv_mqtt_data(mqtt_receive_t *p_receive_info) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  /* Validate input parameter */
  assert(p_receive_info != NULL);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <esp32_recv_mqtt_data+0x1c>
 800799a:	4b13      	ldr	r3, [pc, #76]	@ (80079e8 <esp32_recv_mqtt_data+0x5c>)
 800799c:	4a13      	ldr	r2, [pc, #76]	@ (80079ec <esp32_recv_mqtt_data+0x60>)
 800799e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80079a2:	4813      	ldr	r0, [pc, #76]	@ (80079f0 <esp32_recv_mqtt_data+0x64>)
 80079a4:	f007 ff08 	bl	800f7b8 <__assert_func>
  assert(p_receive_info->p_topic != NULL);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <esp32_recv_mqtt_data+0x32>
 80079b0:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <esp32_recv_mqtt_data+0x68>)
 80079b2:	4a0e      	ldr	r2, [pc, #56]	@ (80079ec <esp32_recv_mqtt_data+0x60>)
 80079b4:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80079b8:	480d      	ldr	r0, [pc, #52]	@ (80079f0 <esp32_recv_mqtt_data+0x64>)
 80079ba:	f007 fefd 	bl	800f7b8 <__assert_func>
  assert(p_receive_info->p_payload != NULL);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <esp32_recv_mqtt_data+0x48>
 80079c6:	4b0c      	ldr	r3, [pc, #48]	@ (80079f8 <esp32_recv_mqtt_data+0x6c>)
 80079c8:	4a08      	ldr	r2, [pc, #32]	@ (80079ec <esp32_recv_mqtt_data+0x60>)
 80079ca:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80079ce:	4808      	ldr	r0, [pc, #32]	@ (80079f0 <esp32_recv_mqtt_data+0x64>)
 80079d0:	f007 fef2 	bl	800f7b8 <__assert_func>

  /* Receive the data from the host */
  ret = recv_mqtt_data(p_receive_info);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f811 	bl	80079fc <recv_mqtt_data>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

  return ret;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	080154d4 	.word	0x080154d4
 80079ec:	08016330 	.word	0x08016330
 80079f0:	08015490 	.word	0x08015490
 80079f4:	080154ec 	.word	0x080154ec
 80079f8:	0801550c 	.word	0x0801550c

080079fc <recv_mqtt_data>:
/**
 * @brief Receives MQTT publish message from the WiFi module.
 * @param p_receive_info Pointer to the MQTT receive info structure.
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
static esp32_status_t recv_mqtt_data(mqtt_receive_t *p_receive_info) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint8_t rx_char;
  uint32_t idx = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
  char length_string[10] = {0};
 8007a08:	f107 0308 	add.w	r3, r7, #8
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	811a      	strh	r2, [r3, #8]
  uint32_t length_value = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
  uint8_t i = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	75fb      	strb	r3, [r7, #23]
  esp32_boolean new_chunk = ESP32_FALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75bb      	strb	r3, [r7, #22]

  /* Validate input parameter */
  assert(p_receive_info != NULL);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <recv_mqtt_data+0x38>
 8007a26:	4b79      	ldr	r3, [pc, #484]	@ (8007c0c <recv_mqtt_data+0x210>)
 8007a28:	4a79      	ldr	r2, [pc, #484]	@ (8007c10 <recv_mqtt_data+0x214>)
 8007a2a:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8007a2e:	4879      	ldr	r0, [pc, #484]	@ (8007c14 <recv_mqtt_data+0x218>)
 8007a30:	f007 fec2 	bl	800f7b8 <__assert_func>
  assert(p_receive_info->p_topic != NULL);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <recv_mqtt_data+0x4e>
 8007a3c:	4b76      	ldr	r3, [pc, #472]	@ (8007c18 <recv_mqtt_data+0x21c>)
 8007a3e:	4a74      	ldr	r2, [pc, #464]	@ (8007c10 <recv_mqtt_data+0x214>)
 8007a40:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8007a44:	4873      	ldr	r0, [pc, #460]	@ (8007c14 <recv_mqtt_data+0x218>)
 8007a46:	f007 feb7 	bl	800f7b8 <__assert_func>
  assert(p_receive_info->p_payload != NULL);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <recv_mqtt_data+0x64>
 8007a52:	4b72      	ldr	r3, [pc, #456]	@ (8007c1c <recv_mqtt_data+0x220>)
 8007a54:	4a6e      	ldr	r2, [pc, #440]	@ (8007c10 <recv_mqtt_data+0x214>)
 8007a56:	f240 11f1 	movw	r1, #497	@ 0x1f1
 8007a5a:	486e      	ldr	r0, [pc, #440]	@ (8007c14 <recv_mqtt_data+0x218>)
 8007a5c:	f007 feac 	bl	800f7b8 <__assert_func>

  /* Reset temporary buffer and output structure fields */
  memset(rx_buffer, 0, MAX_BUFFER_SIZE);
 8007a60:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8007a64:	2100      	movs	r1, #0
 8007a66:	486e      	ldr	r0, [pc, #440]	@ (8007c20 <recv_mqtt_data+0x224>)
 8007a68:	f009 fb22 	bl	80110b0 <memset>
  memset(p_receive_info->p_topic, 0, p_receive_info->topic_length);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	461a      	mov	r2, r3
 8007a76:	2100      	movs	r1, #0
 8007a78:	f009 fb1a 	bl	80110b0 <memset>
  memset(p_receive_info->p_payload, 0, p_receive_info->payload_length);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6898      	ldr	r0, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	461a      	mov	r2, r3
 8007a86:	2100      	movs	r1, #0
 8007a88:	f009 fb12 	bl	80110b0 <memset>
  p_receive_info->topic_length = 0;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	605a      	str	r2, [r3, #4]
  p_receive_info->payload_length = 0;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	60da      	str	r2, [r3, #12]

  while (true) {
    if (esp32_io_recv_nb(&rx_char, 1) != 0) {
 8007a98:	f107 0315 	add.w	r3, r7, #21
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f9a0 	bl	8007de4 <esp32_io_recv_nb>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d031      	beq.n	8007b0e <recv_mqtt_data+0x112>
      // If a new MQTT chunk is expected, fill the payload
      if (new_chunk == ESP32_TRUE) {
 8007aaa:	7dbb      	ldrb	r3, [r7, #22]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d11a      	bne.n	8007ae6 <recv_mqtt_data+0xea>
        if (length_value > 0) {
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00d      	beq.n	8007ad2 <recv_mqtt_data+0xd6>
          p_receive_info->p_payload[p_receive_info->payload_length++] = rx_char;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	1c58      	adds	r0, r3, #1
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	60c8      	str	r0, [r1, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	7d7a      	ldrb	r2, [r7, #21]
 8007ac8:	701a      	strb	r2, [r3, #0]
          length_value--;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	e009      	b.n	8007ae6 <recv_mqtt_data+0xea>
        } else {
          // Payload complete, reset for next message
          new_chunk = ESP32_FALSE;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75bb      	strb	r3, [r7, #22]
          memset(rx_buffer, 0, MAX_BUFFER_SIZE);
 8007ad6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8007ada:	2100      	movs	r1, #0
 8007adc:	4850      	ldr	r0, [pc, #320]	@ (8007c20 <recv_mqtt_data+0x224>)
 8007ade:	f009 fae7 	bl	80110b0 <memset>
          idx = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61fb      	str	r3, [r7, #28]
        }
      }

      // Store character in receive buffer for pattern matching
      if (idx < MAX_BUFFER_SIZE) {
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aec:	d20d      	bcs.n	8007b0a <recv_mqtt_data+0x10e>
        rx_buffer[idx++] = rx_char;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	61fa      	str	r2, [r7, #28]
 8007af4:	7d79      	ldrb	r1, [r7, #21]
 8007af6:	4a4a      	ldr	r2, [pc, #296]	@ (8007c20 <recv_mqtt_data+0x224>)
 8007af8:	54d1      	strb	r1, [r2, r3]
      }
      break;
    }

    // Check for start of MQTT received message
    if ((strstr((char *)rx_buffer, "+MQTTSUBRECV:0,") != NULL) && (new_chunk == ESP32_FALSE)) {
 8007afa:	494a      	ldr	r1, [pc, #296]	@ (8007c24 <recv_mqtt_data+0x228>)
 8007afc:	4848      	ldr	r0, [pc, #288]	@ (8007c20 <recv_mqtt_data+0x224>)
 8007afe:	f009 fb23 	bl	8011148 <strstr>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d070      	beq.n	8007bea <recv_mqtt_data+0x1ee>
 8007b08:	e009      	b.n	8007b1e <recv_mqtt_data+0x122>
        return ESP32_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e079      	b.n	8007c02 <recv_mqtt_data+0x206>
      if (new_chunk == ESP32_TRUE && length_value != 0) {
 8007b0e:	7dbb      	ldrb	r3, [r7, #22]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d174      	bne.n	8007bfe <recv_mqtt_data+0x202>
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d071      	beq.n	8007bfe <recv_mqtt_data+0x202>
        return ESP32_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e071      	b.n	8007c02 <recv_mqtt_data+0x206>
    if ((strstr((char *)rx_buffer, "+MQTTSUBRECV:0,") != NULL) && (new_chunk == ESP32_FALSE)) {
 8007b1e:	7dbb      	ldrb	r3, [r7, #22]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d162      	bne.n	8007bea <recv_mqtt_data+0x1ee>
      // Read separator character (should be `"` for topic start)
      esp32_io_recv(&rx_char, 1);
 8007b24:	f107 0315 	add.w	r3, r7, #21
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f906 	bl	8007d3c <esp32_io_recv>

      // Read topic name until next quote (`"`)
      p_receive_info->topic_length = 0;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	605a      	str	r2, [r3, #4]
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != '"') {
 8007b36:	e009      	b.n	8007b4c <recv_mqtt_data+0x150>

        p_receive_info->p_topic[p_receive_info->topic_length++] = rx_char;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	1c58      	adds	r0, r3, #1
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	6048      	str	r0, [r1, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	7d7a      	ldrb	r2, [r7, #21]
 8007b4a:	701a      	strb	r2, [r3, #0]
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != '"') {
 8007b4c:	f107 0315 	add.w	r3, r7, #21
 8007b50:	2101      	movs	r1, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f946 	bl	8007de4 <esp32_io_recv_nb>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <recv_mqtt_data+0x168>
 8007b5e:	7d7b      	ldrb	r3, [r7, #21]
 8007b60:	2b22      	cmp	r3, #34	@ 0x22
 8007b62:	d1e9      	bne.n	8007b38 <recv_mqtt_data+0x13c>
      }
      p_receive_info->p_topic[p_receive_info->topic_length] = '\0';
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]

      // Read separator character before length
      esp32_io_recv(&rx_char, 1);
 8007b72:	f107 0315 	add.w	r3, r7, #21
 8007b76:	2101      	movs	r1, #1
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f8df 	bl	8007d3c <esp32_io_recv>

      // Read payload length as string
      i = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]
      memset(length_string, 0, sizeof(length_string));
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	220a      	movs	r2, #10
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f009 fa90 	bl	80110b0 <memset>
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != ',' &&
 8007b90:	e007      	b.n	8007ba2 <recv_mqtt_data+0x1a6>
             i < sizeof(length_string) - 1) {

        length_string[i++] = rx_char;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	75fa      	strb	r2, [r7, #23]
 8007b98:	7d7a      	ldrb	r2, [r7, #21]
 8007b9a:	3320      	adds	r3, #32
 8007b9c:	443b      	add	r3, r7
 8007b9e:	f803 2c18 	strb.w	r2, [r3, #-24]
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != ',' &&
 8007ba2:	f107 0315 	add.w	r3, r7, #21
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f91b 	bl	8007de4 <esp32_io_recv_nb>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <recv_mqtt_data+0x1c4>
 8007bb4:	7d7b      	ldrb	r3, [r7, #21]
 8007bb6:	2b2c      	cmp	r3, #44	@ 0x2c
 8007bb8:	d002      	beq.n	8007bc0 <recv_mqtt_data+0x1c4>
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d9e8      	bls.n	8007b92 <recv_mqtt_data+0x196>
      }
      length_string[i] = '\0';
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	3320      	adds	r3, #32
 8007bc4:	443b      	add	r3, r7
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f803 2c18 	strb.w	r2, [r3, #-24]

      // Convert length string to integer
      length_value = atoi(length_string);
 8007bcc:	f107 0308 	add.w	r3, r7, #8
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f007 fe0f 	bl	800f7f4 <atoi>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	61bb      	str	r3, [r7, #24]
      if (length_value > MAX_BUFFER_SIZE) {
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007be0:	d901      	bls.n	8007be6 <recv_mqtt_data+0x1ea>
        return ESP32_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e00d      	b.n	8007c02 <recv_mqtt_data+0x206>
      }

      // Now ready to read payload
      new_chunk = ESP32_TRUE;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75bb      	strb	r3, [r7, #22]
    }

    // Check for any error response in the stream
    if (strstr((char *)rx_buffer, "ERROR") != NULL) {
 8007bea:	490f      	ldr	r1, [pc, #60]	@ (8007c28 <recv_mqtt_data+0x22c>)
 8007bec:	480c      	ldr	r0, [pc, #48]	@ (8007c20 <recv_mqtt_data+0x224>)
 8007bee:	f009 faab 	bl	8011148 <strstr>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f43f af4f 	beq.w	8007a98 <recv_mqtt_data+0x9c>
      return ESP32_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e001      	b.n	8007c02 <recv_mqtt_data+0x206>
      break;
 8007bfe:	bf00      	nop
    }
  }

  return ESP32_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	080154d4 	.word	0x080154d4
 8007c10:	08016348 	.word	0x08016348
 8007c14:	08015490 	.word	0x08015490
 8007c18:	080154ec 	.word	0x080154ec
 8007c1c:	0801550c 	.word	0x0801550c
 8007c20:	20001460 	.word	0x20001460
 8007c24:	08015530 	.word	0x08015530
 8007c28:	08015540 	.word	0x08015540

08007c2c <run_at_cmd>:
 * @param  cmd the buffer to fill will the received data.
 * @param  length the maximum data size to receive.
 * @param  token the expected output if command runs successfully
 * @retval returns ESP32_OK on success and ESP32_ERROR otherwise.
 */
static esp32_status_t run_at_cmd(uint8_t *cmd, uint32_t length, const uint8_t *token) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t idx = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
  uint8_t rx_char;

  /* Reset the Rx buffer to make sure no previous data exist */
  memset(rx_buffer, '\0', MAX_BUFFER_SIZE);
 8007c3c:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8007c40:	2100      	movs	r1, #0
 8007c42:	481c      	ldr	r0, [pc, #112]	@ (8007cb4 <run_at_cmd+0x88>)
 8007c44:	f009 fa34 	bl	80110b0 <memset>

  if ( esp32_io_send(cmd, length) < 0 )
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f85c 	bl	8007d08 <esp32_io_send>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	da01      	bge.n	8007c5a <run_at_cmd+0x2e>
  /* Send the command */
  {
    return ESP32_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e028      	b.n	8007cac <run_at_cmd+0x80>
  }

  /* Wait for reception */
  while ( true ) {
    /* Wait to receive data */
    if ( esp32_io_recv(&rx_char, 1) != 0 ) {
 8007c5a:	f107 0313 	add.w	r3, r7, #19
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 f86b 	bl	8007d3c <esp32_io_recv>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01b      	beq.n	8007ca4 <run_at_cmd+0x78>
      rx_buffer [ idx++ ] = rx_char;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	617a      	str	r2, [r7, #20]
 8007c72:	7cf9      	ldrb	r1, [r7, #19]
 8007c74:	4a0f      	ldr	r2, [pc, #60]	@ (8007cb4 <run_at_cmd+0x88>)
 8007c76:	54d1      	strb	r1, [r2, r3]
    } else {
      break;
    }

    /* Check that max buffer size has not been reached */
    if ( idx == MAX_BUFFER_SIZE ) {
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c7e:	d013      	beq.n	8007ca8 <run_at_cmd+0x7c>
      break;
    }

    /* Extract the token */
    if ( strstr((char *)rx_buffer, (char *)token) != NULL ) {
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	480c      	ldr	r0, [pc, #48]	@ (8007cb4 <run_at_cmd+0x88>)
 8007c84:	f009 fa60 	bl	8011148 <strstr>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <run_at_cmd+0x66>
      return ESP32_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e00c      	b.n	8007cac <run_at_cmd+0x80>
    }

    /* Check if the message contains error code */
    if ( strstr((char *)rx_buffer, AT_ERROR_STRING) != NULL ) {
 8007c92:	4909      	ldr	r1, [pc, #36]	@ (8007cb8 <run_at_cmd+0x8c>)
 8007c94:	4807      	ldr	r0, [pc, #28]	@ (8007cb4 <run_at_cmd+0x88>)
 8007c96:	f009 fa57 	bl	8011148 <strstr>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0dc      	beq.n	8007c5a <run_at_cmd+0x2e>
      return ESP32_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e003      	b.n	8007cac <run_at_cmd+0x80>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <run_at_cmd+0x7e>
      break;
 8007ca8:	bf00      	nop
    }
  }

  return ESP32_ERROR;
 8007caa:	2301      	movs	r3, #1
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20001460 	.word	0x20001460
 8007cb8:	08015568 	.word	0x08015568

08007cbc <esp32_io_init>:

/**
 * @brief  Initialize the ESP8266 UART interface with DMA and Idle Detection.
 * @retval 0 on success, -1 otherwise.
 */
int8_t esp32_io_init(void) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  HAL_Delay(2000);
 8007cc0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007cc4:	f7fb faba 	bl	800323c <HAL_Delay>

  wifi_rx_buffer.head = 0;
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <esp32_io_init+0x44>)
 8007cca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
  wifi_rx_buffer.tail = 0;
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <esp32_io_init+0x44>)
 8007cd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

  // Start UART in DMA mode with Idle line detection
  if ( HAL_UARTEx_ReceiveToIdle_DMA(ESP32_UART_HANDLE, (uint8_t *)wifi_rx_buffer.data,
 8007ce0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007ce4:	4906      	ldr	r1, [pc, #24]	@ (8007d00 <esp32_io_init+0x44>)
 8007ce6:	4807      	ldr	r0, [pc, #28]	@ (8007d04 <esp32_io_init+0x48>)
 8007ce8:	f7fe fa60 	bl	80061ac <HAL_UARTEx_ReceiveToIdle_DMA>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <esp32_io_init+0x3c>
                                    RING_BUFFER_SIZE) != HAL_OK ) {
    return -1;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	e000      	b.n	8007cfa <esp32_io_init+0x3e>
  }
  return 0;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20002060 	.word	0x20002060
 8007d04:	2000024c 	.word	0x2000024c

08007d08 <esp32_io_send>:
 * @brief  Send data to the ESP8266 module over UART.
 * @param  p_data: Pointer to the data buffer to send.
 * @param  length: Length of the data buffer.
 * @retval 0 on success, -1 otherwise.
 */
int8_t esp32_io_send(uint8_t *p_data, uint32_t length) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  if ( HAL_UART_Transmit(ESP32_UART_HANDLE, p_data, length, DEFAULT_TIME_OUT) !=
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	4806      	ldr	r0, [pc, #24]	@ (8007d38 <esp32_io_send+0x30>)
 8007d1e:	f7fe f93b 	bl	8005f98 <HAL_UART_Transmit>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <esp32_io_send+0x26>
       HAL_OK ) {
    return -1;
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2c:	e000      	b.n	8007d30 <esp32_io_send+0x28>
  }
  return 0;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	2000024c 	.word	0x2000024c

08007d3c <esp32_io_recv>:
 * @brief  Receive data from the ESP8266 module over UART.
 * @param  buffer: Pointer to the buffer to store received data.
 * @param  length: Maximum length of the buffer.
 * @retval Number of bytes received.
 */
int32_t esp32_io_recv(uint8_t *buffer, uint32_t length) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t read_data = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]

  while ( length-- ) {
 8007d4a:	e03e      	b.n	8007dca <esp32_io_recv+0x8e>
    uint32_t tick_start = HAL_GetTick();
 8007d4c:	f7fb fa6a 	bl	8003224 <HAL_GetTick>
 8007d50:	60b8      	str	r0, [r7, #8]
    do {
      if ( wifi_rx_buffer.head != wifi_rx_buffer.tail ) {
 8007d52:	4b23      	ldr	r3, [pc, #140]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007d54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007d58:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 8007d5c:	4b20      	ldr	r3, [pc, #128]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007d5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007d62:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d024      	beq.n	8007db4 <esp32_io_recv+0x78>
        *buffer++ = wifi_rx_buffer.data [ wifi_rx_buffer.head++ ];
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007d6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007d70:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	b291      	uxth	r1, r2
 8007d78:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007d7a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007d7e:	f8a2 1802 	strh.w	r1, [r2, #2050]	@ 0x802
 8007d82:	4619      	mov	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007d8c:	5c52      	ldrb	r2, [r2, r1]
 8007d8e:	701a      	strb	r2, [r3, #0]
        read_data++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]

        if ( wifi_rx_buffer.head >= RING_BUFFER_SIZE ) {
 8007d96:	4b12      	ldr	r3, [pc, #72]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007d98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007d9c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8007da0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007da4:	d310      	bcc.n	8007dc8 <esp32_io_recv+0x8c>
          wifi_rx_buffer.head = 0;
 8007da6:	4b0e      	ldr	r3, [pc, #56]	@ (8007de0 <esp32_io_recv+0xa4>)
 8007da8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
        }
        break;
 8007db2:	e009      	b.n	8007dc8 <esp32_io_recv+0x8c>
      }
    } while ( (HAL_GetTick() - tick_start) < DEFAULT_TIME_OUT);
 8007db4:	f7fb fa36 	bl	8003224 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d9c5      	bls.n	8007d52 <esp32_io_recv+0x16>
 8007dc6:	e000      	b.n	8007dca <esp32_io_recv+0x8e>
        break;
 8007dc8:	bf00      	nop
  while ( length-- ) {
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	603a      	str	r2, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1bb      	bne.n	8007d4c <esp32_io_recv+0x10>
  }
  return read_data;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20002060 	.word	0x20002060

08007de4 <esp32_io_recv_nb>:
 * @brief  Non-blocking receive data from the ESP8266 module over UART.
 * @param  buffer: Pointer to the buffer to store received data.
 * @param  length: Maximum length of the buffer.
 * @retval Number of bytes received.
 */
int32_t esp32_io_recv_nb(uint8_t *buffer, uint32_t length) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t read_data = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]

  while ( length-- ) {
 8007df2:	e03c      	b.n	8007e6e <esp32_io_recv_nb+0x8a>
      uint32_t tick_start = HAL_GetTick();
 8007df4:	f7fb fa16 	bl	8003224 <HAL_GetTick>
 8007df8:	60b8      	str	r0, [r7, #8]
      do {
        if ( wifi_rx_buffer.head != wifi_rx_buffer.tail ) {
 8007dfa:	4b22      	ldr	r3, [pc, #136]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007dfc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007e00:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 8007e04:	4b1f      	ldr	r3, [pc, #124]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007e06:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007e0a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d024      	beq.n	8007e5c <esp32_io_recv_nb+0x78>
          *buffer++ = wifi_rx_buffer.data [ wifi_rx_buffer.head++ ];
 8007e12:	4b1c      	ldr	r3, [pc, #112]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007e14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007e18:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	b291      	uxth	r1, r2
 8007e20:	4a18      	ldr	r2, [pc, #96]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007e22:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007e26:	f8a2 1802 	strh.w	r1, [r2, #2050]	@ 0x802
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	4a14      	ldr	r2, [pc, #80]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007e34:	5c52      	ldrb	r2, [r2, r1]
 8007e36:	701a      	strb	r2, [r3, #0]
          read_data++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]

          if ( wifi_rx_buffer.head >= RING_BUFFER_SIZE ) {
 8007e3e:	4b11      	ldr	r3, [pc, #68]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007e40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007e44:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8007e48:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007e4c:	d30e      	bcc.n	8007e6c <esp32_io_recv_nb+0x88>
            wifi_rx_buffer.head = 0;
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <esp32_io_recv_nb+0xa0>)
 8007e50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
          }
          break;
 8007e5a:	e007      	b.n	8007e6c <esp32_io_recv_nb+0x88>
        }
      } while ( (HAL_GetTick() - tick_start) < 200);
 8007e5c:	f7fb f9e2 	bl	8003224 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e68:	d9c7      	bls.n	8007dfa <esp32_io_recv_nb+0x16>
 8007e6a:	e000      	b.n	8007e6e <esp32_io_recv_nb+0x8a>
          break;
 8007e6c:	bf00      	nop
  while ( length-- ) {
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	1e5a      	subs	r2, r3, #1
 8007e72:	603a      	str	r2, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1bd      	bne.n	8007df4 <esp32_io_recv_nb+0x10>
    }
  return read_data;
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20002060 	.word	0x20002060

08007e88 <HAL_UARTEx_RxEventCallback>:
  * @param  huart UART handle
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	807b      	strh	r3, [r7, #2]
  if ( huart == ESP32_UART_HANDLE ) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a15      	ldr	r2, [pc, #84]	@ (8007eec <HAL_UARTEx_RxEventCallback+0x64>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d121      	bne.n	8007ee0 <HAL_UARTEx_RxEventCallback+0x58>
    static uint16_t tail_pos = 0;

    if ( size > tail_pos ) {
 8007e9c:	4b14      	ldr	r3, [pc, #80]	@ (8007ef0 <HAL_UARTEx_RxEventCallback+0x68>)
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	887a      	ldrh	r2, [r7, #2]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d91c      	bls.n	8007ee0 <HAL_UARTEx_RxEventCallback+0x58>
      tail_pos = size % RING_BUFFER_SIZE;
 8007ea6:	887a      	ldrh	r2, [r7, #2]
 8007ea8:	4b12      	ldr	r3, [pc, #72]	@ (8007ef4 <HAL_UARTEx_RxEventCallback+0x6c>)
 8007eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8007eae:	0b59      	lsrs	r1, r3, #13
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	02db      	lsls	r3, r3, #11
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <HAL_UARTEx_RxEventCallback+0x68>)
 8007ebe:	801a      	strh	r2, [r3, #0]
      if ( tail_pos != wifi_rx_buffer.head ) {
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <HAL_UARTEx_RxEventCallback+0x70>)
 8007ec2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007ec6:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 8007eca:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <HAL_UARTEx_RxEventCallback+0x68>)
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d006      	beq.n	8007ee0 <HAL_UARTEx_RxEventCallback+0x58>
        wifi_rx_buffer.tail = tail_pos;
 8007ed2:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <HAL_UARTEx_RxEventCallback+0x68>)
 8007ed4:	881a      	ldrh	r2, [r3, #0]
 8007ed6:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <HAL_UARTEx_RxEventCallback+0x70>)
 8007ed8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007edc:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
      }
    }
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	2000024c 	.word	0x2000024c
 8007ef0:	20004864 	.word	0x20004864
 8007ef4:	cccccccd 	.word	0xcccccccd
 8007ef8:	20002060 	.word	0x20002060

08007efc <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart: Pointer to the UART handle.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  (void)*huart;
  esp32_io_error_handler();
 8007f04:	f000 f804 	bl	8007f10 <esp32_io_error_handler>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <esp32_io_error_handler>:

/**
 * @brief  Handle UART errors by deinitializing the interface.
 * @retval None.
 */
static void esp32_io_error_handler(void) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  HAL_UART_DMAStop(ESP32_UART_HANDLE);
 8007f14:	4803      	ldr	r0, [pc, #12]	@ (8007f24 <esp32_io_error_handler+0x14>)
 8007f16:	f7fe f8ca 	bl	80060ae <HAL_UART_DMAStop>
  HAL_UART_DeInit(ESP32_UART_HANDLE);
 8007f1a:	4802      	ldr	r0, [pc, #8]	@ (8007f24 <esp32_io_error_handler+0x14>)
 8007f1c:	f7fe f80a 	bl	8005f34 <HAL_UART_DeInit>
  while ( 1 ) {
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <esp32_io_error_handler+0x10>
 8007f24:	2000024c 	.word	0x2000024c

08007f28 <flash_erase>:
  * @param  start_sector: start of user flash area
  * @retval FLASH_OK: User flash area successfully erased
  *         FLASH_ERROR: Error occurred
  */
flash_status_t flash_erase(uint32_t start_sector)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08a      	sub	sp, #40	@ 0x28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
    flash_status_t status = FLASH_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t flash_address = start_sector;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	623b      	str	r3, [r7, #32]

    HAL_FLASH_Unlock();
 8007f3a:	f7fb ff85 	bl	8003e48 <HAL_FLASH_Unlock>

    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (flash_address <= (uint32_t) USER_FLASH_LAST_SECTOR_ADDRESS)
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	4a13      	ldr	r2, [pc, #76]	@ (8007f90 <flash_erase+0x68>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d818      	bhi.n	8007f78 <flash_erase+0x50>
    {
        FLASH_EraseInitTypeDef flash_erase_init;
        uint32_t sector_nb = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]

        flash_erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
        flash_erase_init.Sector = FLASH_SECTOR_5;
 8007f4e:	2305      	movs	r3, #5
 8007f50:	617b      	str	r3, [r7, #20]
        //flash_erase_init.NbSectors = FLASH_SECTOR_7 - FLASH_SECTOR_3 + 1;
        flash_erase_init.NbSectors = 1;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
        flash_erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8007f56:	2302      	movs	r3, #2
 8007f58:	61fb      	str	r3, [r7, #28]

        if (HAL_FLASHEx_Erase(&flash_erase_init, &sector_nb) != HAL_OK)
 8007f5a:	f107 0208 	add.w	r2, r7, #8
 8007f5e:	f107 030c 	add.w	r3, r7, #12
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fc f8e1 	bl	800412c <HAL_FLASHEx_Erase>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d006      	beq.n	8007f7e <flash_erase+0x56>
        {
            status = FLASH_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f76:	e002      	b.n	8007f7e <flash_erase+0x56>
        }
    }
    else
    {
        status = FLASH_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    HAL_FLASH_Lock();
 8007f7e:	f7fb ff85 	bl	8003e8c <HAL_FLASH_Lock>

    return status;
 8007f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3728      	adds	r7, #40	@ 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	081c0000 	.word	0x081c0000

08007f94 <flash_write>:
  * @param  data_length: length of data buffer (unit is 32-bit word)
  * @retval FLASH_OK: Data successfully written to Flash memory
  *         FLASH_ERROR: Error occurred while writing data in Flash memory
  */
flash_status_t flash_write(__IO uint32_t* flash_address, uint32_t* data, uint16_t data_length)
{
 8007f94:	b5b0      	push	{r4, r5, r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80fb      	strh	r3, [r7, #6]
    flash_status_t status = FLASH_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
    uint32_t i = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	613b      	str	r3, [r7, #16]

    HAL_FLASH_Unlock();
 8007faa:	f7fb ff4d 	bl	8003e48 <HAL_FLASH_Unlock>

    for (i = 0; (i < data_length) && (*flash_address <= (USER_FLASH_END_ADDRESS - 4)); i++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	e01d      	b.n	8007ff0 <flash_write+0x5c>
    {
        /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
           be done by word */
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *flash_address, *(uint32_t*)(data + i)) == HAL_OK)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	461c      	mov	r4, r3
 8007fc6:	4615      	mov	r5, r2
 8007fc8:	4622      	mov	r2, r4
 8007fca:	462b      	mov	r3, r5
 8007fcc:	2002      	movs	r0, #2
 8007fce:	f7fb fee9 	bl	8003da4 <HAL_FLASH_Program>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <flash_write+0x50>
        {
            /* Increment FLASH destination address */
            *flash_address += 4;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1d1a      	adds	r2, r3, #4
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <flash_write+0x56>
        }
        else
        {
            /* Error occurred while writing data in Flash memory */
            status = FLASH_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
            break;
 8007fe8:	e00b      	b.n	8008002 <flash_write+0x6e>
    for (i = 0; (i < data_length) && (*flash_address <= (USER_FLASH_END_ADDRESS - 4)); i++)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3301      	adds	r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d204      	bcs.n	8008002 <flash_write+0x6e>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a04      	ldr	r2, [pc, #16]	@ (8008010 <flash_write+0x7c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d9d8      	bls.n	8007fb4 <flash_write+0x20>
        }
    }

    HAL_FLASH_Lock();
 8008002:	f7fb ff43 	bl	8003e8c <HAL_FLASH_Lock>
    return status;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bdb0      	pop	{r4, r5, r7, pc}
 8008010:	081ffffb 	.word	0x081ffffb

08008014 <vApplicationGetTimerTaskMemory>:

void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                     StackType_t ** ppxTimerTaskStackBuffer,
                                     uint32_t * pulTimerTaskStackSize )

{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
    static StaticTask_t timerTaskTCB;
    static StackType_t timerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &timerTaskTCB;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a07      	ldr	r2, [pc, #28]	@ (8008040 <vApplicationGetTimerTaskMemory+0x2c>)
 8008024:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = timerTaskStack;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4a06      	ldr	r2, [pc, #24]	@ (8008044 <vApplicationGetTimerTaskMemory+0x30>)
 800802a:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20004868 	.word	0x20004868
 8008044:	200048b8 	.word	0x200048b8

08008048 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                    StackType_t ** ppxIdleTaskStackBuffer,
                                    uint32_t * pulIdleTaskStackSize )

{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
    static StaticTask_t idleTaskTCB;
    static StackType_t idleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &idleTaskTCB;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4a07      	ldr	r2, [pc, #28]	@ (8008074 <vApplicationGetIdleTaskMemory+0x2c>)
 8008058:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = idleTaskStack;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	4a06      	ldr	r2, [pc, #24]	@ (8008078 <vApplicationGetIdleTaskMemory+0x30>)
 800805e:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2280      	movs	r2, #128	@ 0x80
 8008064:	601a      	str	r2, [r3, #0]
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20004cb8 	.word	0x20004cb8
 8008078:	20004d08 	.word	0x20004d08

0800807c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f103 0208 	add.w	r2, r3, #8
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f04f 32ff 	mov.w	r2, #4294967295
 8008094:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f103 0208 	add.w	r2, r3, #8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f103 0208 	add.w	r2, r3, #8
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d103      	bne.n	800813e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	e00c      	b.n	8008158 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3308      	adds	r3, #8
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	e002      	b.n	800814c <vListInsert+0x2e>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	d2f6      	bcs.n	8008146 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6892      	ldr	r2, [r2, #8]
 80081a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6852      	ldr	r2, [r2, #4]
 80081b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d103      	bne.n	80081c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	1e5a      	subs	r2, r3, #1
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80081ee:	2301      	movs	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xQueueGenericReset+0x30>
    __asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60fb      	str	r3, [r7, #12]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d05d      	beq.n	80082d6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800821e:	2b00      	cmp	r3, #0
 8008220:	d059      	beq.n	80082d6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822a:	2100      	movs	r1, #0
 800822c:	fba3 2302 	umull	r2, r3, r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d000      	beq.n	8008236 <xQueueGenericReset+0x52>
 8008234:	2101      	movs	r1, #1
 8008236:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008238:	2b00      	cmp	r3, #0
 800823a:	d14c      	bne.n	80082d6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800823c:	f002 faca 	bl	800a7d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008248:	6939      	ldr	r1, [r7, #16]
 800824a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	441a      	add	r2, r3
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2200      	movs	r2, #0
 800825a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800826c:	3b01      	subs	r3, #1
 800826e:	6939      	ldr	r1, [r7, #16]
 8008270:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	441a      	add	r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	22ff      	movs	r2, #255	@ 0xff
 8008280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	22ff      	movs	r2, #255	@ 0xff
 8008288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d114      	bne.n	80082bc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01a      	beq.n	80082d0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3310      	adds	r3, #16
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fac8 	bl	8009834 <xTaskRemoveFromEventList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d012      	beq.n	80082d0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80082aa:	4b16      	ldr	r3, [pc, #88]	@ (8008304 <xQueueGenericReset+0x120>)
 80082ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	e009      	b.n	80082d0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	3310      	adds	r3, #16
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff fedb 	bl	800807c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	3324      	adds	r3, #36	@ 0x24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fed6 	bl	800807c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80082d0:	f002 fab2 	bl	800a838 <vPortExitCritical>
 80082d4:	e001      	b.n	80082da <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10b      	bne.n	80082f8 <xQueueGenericReset+0x114>
    __asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60bb      	str	r3, [r7, #8]
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	e7fd      	b.n	80082f4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80082f8:	697b      	ldr	r3, [r7, #20]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8008308:	b580      	push	{r7, lr}
 800830a:	b08c      	sub	sp, #48	@ 0x30
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	623b      	str	r3, [r7, #32]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d031      	beq.n	80083a2 <xQueueGenericCreateStatic+0x9a>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d02e      	beq.n	80083a2 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d028      	beq.n	80083a2 <xQueueGenericCreateStatic+0x9a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d122      	bne.n	80083a2 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800835c:	2348      	movs	r3, #72	@ 0x48
 800835e:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b48      	cmp	r3, #72	@ 0x48
 8008364:	d00b      	beq.n	800837e <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	61fb      	str	r3, [r7, #28]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800837e:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800838c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f868 	bl	8008470 <prvInitialiseNewQueue>
 80083a0:	e00e      	b.n	80083c0 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10b      	bne.n	80083c0 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	61bb      	str	r3, [r7, #24]
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	e7fd      	b.n	80083bc <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80083c2:	4618      	mov	r0, r3
 80083c4:	3728      	adds	r7, #40	@ 0x28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b08a      	sub	sp, #40	@ 0x28
 80083ce:	af02      	add	r7, sp, #8
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4613      	mov	r3, r2
 80083d6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d032      	beq.n	8008448 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80083e2:	2100      	movs	r1, #0
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	fba3 2302 	umull	r2, r3, r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d000      	beq.n	80083f2 <xQueueGenericCreate+0x28>
 80083f0:	2101      	movs	r1, #1
 80083f2:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d127      	bne.n	8008448 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008400:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8008404:	d820      	bhi.n	8008448 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	3348      	adds	r3, #72	@ 0x48
 8008414:	4618      	mov	r0, r3
 8008416:	f002 fac1 	bl	800a99c <pvPortMalloc>
 800841a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d021      	beq.n	8008466 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	3348      	adds	r3, #72	@ 0x48
 800842a:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008434:	79fa      	ldrb	r2, [r7, #7]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f815 	bl	8008470 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008446:	e00e      	b.n	8008466 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <xQueueGenericCreate+0x9c>
    __asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	613b      	str	r3, [r7, #16]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8008466:	69fb      	ldr	r3, [r7, #28]
    }
 8008468:	4618      	mov	r0, r3
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d103      	bne.n	800848c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e002      	b.n	8008492 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800849e:	2101      	movs	r1, #1
 80084a0:	69b8      	ldr	r0, [r7, #24]
 80084a2:	f7ff fe9f 	bl	80081e4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08e      	sub	sp, #56	@ 0x38
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084be:	2300      	movs	r3, #0
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10b      	bne.n	80084e4 <xQueueGenericSend+0x34>
    __asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <xQueueGenericSend+0x42>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <xQueueGenericSend+0x46>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <xQueueGenericSend+0x48>
 80084f6:	2300      	movs	r3, #0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <xQueueGenericSend+0x64>
    __asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d103      	bne.n	8008522 <xQueueGenericSend+0x72>
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <xQueueGenericSend+0x76>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xQueueGenericSend+0x78>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <xQueueGenericSend+0x94>
    __asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	623b      	str	r3, [r7, #32]
}
 800853e:	bf00      	nop
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008544:	f001 fbbc 	bl	8009cc0 <xTaskGetSchedulerState>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d102      	bne.n	8008554 <xQueueGenericSend+0xa4>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <xQueueGenericSend+0xa8>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <xQueueGenericSend+0xaa>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10b      	bne.n	8008576 <xQueueGenericSend+0xc6>
    __asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61fb      	str	r3, [r7, #28]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008576:	f002 f92d 	bl	800a7d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008582:	429a      	cmp	r2, r3
 8008584:	d302      	bcc.n	800858c <xQueueGenericSend+0xdc>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d129      	bne.n	80085e0 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008592:	f000 f971 	bl	8008878 <prvCopyDataToQueue>
 8008596:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d010      	beq.n	80085c2 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	3324      	adds	r3, #36	@ 0x24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 f945 	bl	8009834 <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d013      	beq.n	80085d8 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80085b0:	4b3f      	ldr	r3, [pc, #252]	@ (80086b0 <xQueueGenericSend+0x200>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	e00a      	b.n	80085d8 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80085c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80085c8:	4b39      	ldr	r3, [pc, #228]	@ (80086b0 <xQueueGenericSend+0x200>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80085d8:	f002 f92e 	bl	800a838 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80085dc:	2301      	movs	r3, #1
 80085de:	e063      	b.n	80086a8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80085e6:	f002 f927 	bl	800a838 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	e05c      	b.n	80086a8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80085ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80085f4:	f107 0314 	add.w	r3, r7, #20
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 f9f5 	bl	80099e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008602:	f002 f919 	bl	800a838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008606:	f000 fe0b 	bl	8009220 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800860a:	f002 f8e3 	bl	800a7d4 <vPortEnterCritical>
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008614:	b25b      	sxtb	r3, r3
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d103      	bne.n	8008624 <xQueueGenericSend+0x174>
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d103      	bne.n	800863a <xQueueGenericSend+0x18a>
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800863a:	f002 f8fd 	bl	800a838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800863e:	1d3a      	adds	r2, r7, #4
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f001 f9e4 	bl	8009a14 <xTaskCheckForTimeOut>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d124      	bne.n	800869c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008652:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008654:	f000 fa08 	bl	8008a68 <prvIsQueueFull>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d018      	beq.n	8008690 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	3310      	adds	r3, #16
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f001 f878 	bl	800975c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800866c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800866e:	f000 f993 	bl	8008998 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008672:	f000 fde3 	bl	800923c <xTaskResumeAll>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	f47f af7c 	bne.w	8008576 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 800867e:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <xQueueGenericSend+0x200>)
 8008680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	e772      	b.n	8008576 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008692:	f000 f981 	bl	8008998 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008696:	f000 fdd1 	bl	800923c <xTaskResumeAll>
 800869a:	e76c      	b.n	8008576 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800869c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800869e:	f000 f97b 	bl	8008998 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80086a2:	f000 fdcb 	bl	800923c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80086a6:	2300      	movs	r3, #0
        }
    }
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3738      	adds	r7, #56	@ 0x38
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08c      	sub	sp, #48	@ 0x30
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <xQueueReceive+0x32>
    __asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	623b      	str	r3, [r7, #32]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <xQueueReceive+0x40>
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <xQueueReceive+0x44>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <xQueueReceive+0x46>
 80086f8:	2300      	movs	r3, #0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xQueueReceive+0x62>
    __asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61fb      	str	r3, [r7, #28]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008716:	f001 fad3 	bl	8009cc0 <xTaskGetSchedulerState>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <xQueueReceive+0x72>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <xQueueReceive+0x76>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueReceive+0x78>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xQueueReceive+0x94>
    __asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	61bb      	str	r3, [r7, #24]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008748:	f002 f844 	bl	800a7d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01f      	beq.n	8008798 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875c:	f000 f8f6 	bl	800894c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00f      	beq.n	8008790 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008772:	3310      	adds	r3, #16
 8008774:	4618      	mov	r0, r3
 8008776:	f001 f85d 	bl	8009834 <xTaskRemoveFromEventList>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008780:	4b3c      	ldr	r3, [pc, #240]	@ (8008874 <xQueueReceive+0x1c0>)
 8008782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008790:	f002 f852 	bl	800a838 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	e069      	b.n	800886c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d103      	bne.n	80087a6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800879e:	f002 f84b 	bl	800a838 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e062      	b.n	800886c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80087ac:	f107 0310 	add.w	r3, r7, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 f919 	bl	80099e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80087b6:	2301      	movs	r3, #1
 80087b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80087ba:	f002 f83d 	bl	800a838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80087be:	f000 fd2f 	bl	8009220 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80087c2:	f002 f807 	bl	800a7d4 <vPortEnterCritical>
 80087c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087cc:	b25b      	sxtb	r3, r3
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d103      	bne.n	80087dc <xQueueReceive+0x128>
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087e2:	b25b      	sxtb	r3, r3
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d103      	bne.n	80087f2 <xQueueReceive+0x13e>
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087f2:	f002 f821 	bl	800a838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087f6:	1d3a      	adds	r2, r7, #4
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 f908 	bl	8009a14 <xTaskCheckForTimeOut>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d123      	bne.n	8008852 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800880a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800880c:	f000 f916 	bl	8008a3c <prvIsQueueEmpty>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	3324      	adds	r3, #36	@ 0x24
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f000 ff9c 	bl	800975c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008826:	f000 f8b7 	bl	8008998 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800882a:	f000 fd07 	bl	800923c <xTaskResumeAll>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d189      	bne.n	8008748 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8008834:	4b0f      	ldr	r3, [pc, #60]	@ (8008874 <xQueueReceive+0x1c0>)
 8008836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	e780      	b.n	8008748 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008848:	f000 f8a6 	bl	8008998 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800884c:	f000 fcf6 	bl	800923c <xTaskResumeAll>
 8008850:	e77a      	b.n	8008748 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008854:	f000 f8a0 	bl	8008998 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008858:	f000 fcf0 	bl	800923c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800885c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800885e:	f000 f8ed 	bl	8008a3c <prvIsQueueEmpty>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	f43f af6f 	beq.w	8008748 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800886a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800886c:	4618      	mov	r0, r3
 800886e:	3730      	adds	r7, #48	@ 0x30
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	e000ed04 	.word	0xe000ed04

08008878 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10d      	bne.n	80088b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d14d      	bne.n	800893a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fa2a 	bl	8009cfc <xTaskPriorityDisinherit>
 80088a8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	e043      	b.n	800893a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d119      	bne.n	80088ec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6858      	ldr	r0, [r3, #4]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c0:	461a      	mov	r2, r3
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	f008 fcdd 	bl	8011282 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d32b      	bcc.n	800893a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	605a      	str	r2, [r3, #4]
 80088ea:	e026      	b.n	800893a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68d8      	ldr	r0, [r3, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f4:	461a      	mov	r2, r3
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	f008 fcc3 	bl	8011282 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008904:	425b      	negs	r3, r3
 8008906:	441a      	add	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d207      	bcs.n	8008928 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	425b      	negs	r3, r3
 8008922:	441a      	add	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d105      	bne.n	800893a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3b01      	subs	r3, #1
 8008938:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8008942:	697b      	ldr	r3, [r7, #20]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d018      	beq.n	8008990 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	441a      	add	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	429a      	cmp	r2, r3
 8008976:	d303      	bcc.n	8008980 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68d9      	ldr	r1, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008988:	461a      	mov	r2, r3
 800898a:	6838      	ldr	r0, [r7, #0]
 800898c:	f008 fc79 	bl	8011282 <memcpy>
    }
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80089a0:	f001 ff18 	bl	800a7d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ac:	e011      	b.n	80089d2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d012      	beq.n	80089dc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3324      	adds	r3, #36	@ 0x24
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 ff3a 	bl	8009834 <xTaskRemoveFromEventList>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80089c6:	f001 f89d 	bl	8009b04 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80089d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dce9      	bgt.n	80089ae <prvUnlockQueue+0x16>
 80089da:	e000      	b.n	80089de <prvUnlockQueue+0x46>
                    break;
 80089dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	22ff      	movs	r2, #255	@ 0xff
 80089e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80089e6:	f001 ff27 	bl	800a838 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80089ea:	f001 fef3 	bl	800a7d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80089f6:	e011      	b.n	8008a1c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3310      	adds	r3, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 ff15 	bl	8009834 <xTaskRemoveFromEventList>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008a10:	f001 f878 	bl	8009b04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dce9      	bgt.n	80089f8 <prvUnlockQueue+0x60>
 8008a24:	e000      	b.n	8008a28 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008a26:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	22ff      	movs	r2, #255	@ 0xff
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8008a30:	f001 ff02 	bl	800a838 <vPortExitCritical>
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008a44:	f001 fec6 	bl	800a7d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e001      	b.n	8008a5a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008a5a:	f001 feed 	bl	800a838 <vPortExitCritical>

    return xReturn;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008a70:	f001 feb0 	bl	800a7d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d102      	bne.n	8008a86 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e001      	b.n	8008a8a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008a8a:	f001 fed5 	bl	800a838 <vPortExitCritical>

    return xReturn;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008aa8:	f001 fe94 	bl	800a7d4 <vPortEnterCritical>
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ab2:	b25b      	sxtb	r3, r3
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab8:	d103      	bne.n	8008ac2 <vQueueWaitForMessageRestricted+0x2a>
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ac8:	b25b      	sxtb	r3, r3
 8008aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ace:	d103      	bne.n	8008ad8 <vQueueWaitForMessageRestricted+0x40>
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ad8:	f001 feae 	bl	800a838 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3324      	adds	r3, #36	@ 0x24
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	68b9      	ldr	r1, [r7, #8]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fe5b 	bl	80097a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008af2:	6978      	ldr	r0, [r7, #20]
 8008af4:	f7ff ff50 	bl	8008998 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8008af8:	bf00      	nop
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08e      	sub	sp, #56	@ 0x38
 8008b04:	af04      	add	r7, sp, #16
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <prvCreateStaticTask+0x2c>
    __asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	623b      	str	r3, [r7, #32]
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <prvCreateStaticTask+0x4a>
    __asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	61fb      	str	r3, [r7, #28]
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	e7fd      	b.n	8008b46 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8008b4a:	2350      	movs	r3, #80	@ 0x50
 8008b4c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b50      	cmp	r3, #80	@ 0x50
 8008b52:	d00b      	beq.n	8008b6c <prvCreateStaticTask+0x6c>
    __asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	61bb      	str	r3, [r7, #24]
}
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	e7fd      	b.n	8008b68 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8008b6c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01f      	beq.n	8008bb4 <prvCreateStaticTask+0xb4>
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01c      	beq.n	8008bb4 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008b7e:	2250      	movs	r2, #80	@ 0x50
 8008b80:	2100      	movs	r1, #0
 8008b82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b84:	f008 fa94 	bl	80110b0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b96:	2300      	movs	r3, #0
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	9302      	str	r3, [sp, #8]
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f88f 	bl	8008cd0 <prvInitialiseNewTask>
 8008bb2:	e001      	b.n	8008bb8 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3728      	adds	r7, #40	@ 0x28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b08a      	sub	sp, #40	@ 0x28
 8008bc6:	af04      	add	r7, sp, #16
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
 8008bce:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bdc:	9302      	str	r3, [sp, #8]
 8008bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff ff87 	bl	8008b00 <prvCreateStaticTask>
 8008bf2:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8008bfa:	6978      	ldr	r0, [r7, #20]
 8008bfc:	f000 f8f8 	bl	8008df0 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 8008c00:	693b      	ldr	r3, [r7, #16]
    }
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b08a      	sub	sp, #40	@ 0x28
 8008c0e:	af04      	add	r7, sp, #16
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
 8008c16:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 febd 	bl	800a99c <pvPortMalloc>
 8008c22:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d013      	beq.n	8008c52 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008c2a:	2050      	movs	r0, #80	@ 0x50
 8008c2c:	f001 feb6 	bl	800a99c <pvPortMalloc>
 8008c30:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d008      	beq.n	8008c4a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008c38:	2250      	movs	r2, #80	@ 0x50
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6978      	ldr	r0, [r7, #20]
 8008c3e:	f008 fa37 	bl	80110b0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c48:	e005      	b.n	8008c56 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f001 ffd8 	bl	800ac00 <vPortFree>
 8008c50:	e001      	b.n	8008c56 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d011      	beq.n	8008c80 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c64:	2300      	movs	r3, #0
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	9302      	str	r3, [sp, #8]
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f828 	bl	8008cd0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8008c80:	697b      	ldr	r3, [r7, #20]
    }
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b088      	sub	sp, #32
 8008c8e:	af02      	add	r7, sp, #8
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff ffaf 	bl	8008c0a <prvCreateTask>
 8008cac:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8008cb4:	6938      	ldr	r0, [r7, #16]
 8008cb6:	f000 f89b 	bl	8008df0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	e002      	b.n	8008cc6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8008cc6:	697b      	ldr	r3, [r7, #20]
    }
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	21a5      	movs	r1, #165	@ 0xa5
 8008cea:	f008 f9e1 	bl	80110b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f023 0307 	bic.w	r3, r3, #7
 8008d06:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <prvInitialiseNewTask+0x5a>
    __asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01e      	beq.n	8008d6e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	e012      	b.n	8008d5c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	7819      	ldrb	r1, [r3, #0]
 8008d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	4413      	add	r3, r2
 8008d44:	3334      	adds	r3, #52	@ 0x34
 8008d46:	460a      	mov	r2, r1
 8008d48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	4413      	add	r3, r2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	61fb      	str	r3, [r7, #28]
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	2b0b      	cmp	r3, #11
 8008d60:	d9e9      	bls.n	8008d36 <prvInitialiseNewTask+0x66>
 8008d62:	e000      	b.n	8008d66 <prvInitialiseNewTask+0x96>
            {
                break;
 8008d64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d70:	2b1f      	cmp	r3, #31
 8008d72:	d90b      	bls.n	8008d8c <prvInitialiseNewTask+0xbc>
    __asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	613b      	str	r3, [r7, #16]
}
 8008d86:	bf00      	nop
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	2b1f      	cmp	r3, #31
 8008d90:	d901      	bls.n	8008d96 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d92:	231f      	movs	r3, #31
 8008d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008da0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff f988 	bl	80080bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	3318      	adds	r3, #24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff f983 	bl	80080bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f1c3 0220 	rsb	r2, r3, #32
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dca:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	69b8      	ldr	r0, [r7, #24]
 8008dd2:	f001 fb83 	bl	800a4dc <pxPortInitialiseStack>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8008ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008de8:	bf00      	nop
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8008df8:	f001 fcec 	bl	800a7d4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8008dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8008efc <prvAddNewTaskToReadyList+0x10c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a3e      	ldr	r2, [pc, #248]	@ (8008efc <prvAddNewTaskToReadyList+0x10c>)
 8008e04:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8008e06:	4b3e      	ldr	r3, [pc, #248]	@ (8008f00 <prvAddNewTaskToReadyList+0x110>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8008e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8008f00 <prvAddNewTaskToReadyList+0x110>)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e14:	4b39      	ldr	r3, [pc, #228]	@ (8008efc <prvAddNewTaskToReadyList+0x10c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d110      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8008e1c:	f000 fe96 	bl	8009b4c <prvInitialiseTaskLists>
 8008e20:	e00d      	b.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8008e22:	4b38      	ldr	r3, [pc, #224]	@ (8008f04 <prvAddNewTaskToReadyList+0x114>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e2a:	4b35      	ldr	r3, [pc, #212]	@ (8008f00 <prvAddNewTaskToReadyList+0x110>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d802      	bhi.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8008e38:	4a31      	ldr	r2, [pc, #196]	@ (8008f00 <prvAddNewTaskToReadyList+0x110>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8008e3e:	4b32      	ldr	r3, [pc, #200]	@ (8008f08 <prvAddNewTaskToReadyList+0x118>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a30      	ldr	r2, [pc, #192]	@ (8008f08 <prvAddNewTaskToReadyList+0x118>)
 8008e46:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	409a      	lsls	r2, r3
 8008e50:	4b2e      	ldr	r3, [pc, #184]	@ (8008f0c <prvAddNewTaskToReadyList+0x11c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	4a2d      	ldr	r2, [pc, #180]	@ (8008f0c <prvAddNewTaskToReadyList+0x11c>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5e:	492c      	ldr	r1, [pc, #176]	@ (8008f10 <prvAddNewTaskToReadyList+0x120>)
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	609a      	str	r2, [r3, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60da      	str	r2, [r3, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	3204      	adds	r2, #4
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	1d1a      	adds	r2, r3, #4
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	609a      	str	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f10 <prvAddNewTaskToReadyList+0x120>)
 8008e9e:	441a      	add	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	615a      	str	r2, [r3, #20]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea8:	4919      	ldr	r1, [pc, #100]	@ (8008f10 <prvAddNewTaskToReadyList+0x120>)
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008eba:	1c59      	adds	r1, r3, #1
 8008ebc:	4814      	ldr	r0, [pc, #80]	@ (8008f10 <prvAddNewTaskToReadyList+0x120>)
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4403      	add	r3, r0
 8008ec8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8008eca:	f001 fcb5 	bl	800a838 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8008ece:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <prvAddNewTaskToReadyList+0x114>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00e      	beq.n	8008ef4 <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f00 <prvAddNewTaskToReadyList+0x110>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d207      	bcs.n	8008ef4 <prvAddNewTaskToReadyList+0x104>
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f14 <prvAddNewTaskToReadyList+0x124>)
 8008ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	200051fc 	.word	0x200051fc
 8008f00:	20004f08 	.word	0x20004f08
 8008f04:	20005208 	.word	0x20005208
 8008f08:	20005218 	.word	0x20005218
 8008f0c:	20005204 	.word	0x20005204
 8008f10:	20004f0c 	.word	0x20004f0c
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8008f24:	f001 fc56 	bl	800a7d4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <vTaskDelete+0x1c>
 8008f2e:	4b41      	ldr	r3, [pc, #260]	@ (8009034 <vTaskDelete+0x11c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	e000      	b.n	8008f36 <vTaskDelete+0x1e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff f927 	bl	8008190 <uxListRemove>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d115      	bne.n	8008f74 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4c:	493a      	ldr	r1, [pc, #232]	@ (8009038 <vTaskDelete+0x120>)
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <vTaskDelete+0x5c>
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	2201      	movs	r2, #1
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	43da      	mvns	r2, r3
 8008f6a:	4b34      	ldr	r3, [pc, #208]	@ (800903c <vTaskDelete+0x124>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	4a32      	ldr	r2, [pc, #200]	@ (800903c <vTaskDelete+0x124>)
 8008f72:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3318      	adds	r3, #24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7ff f905 	bl	8008190 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8008f86:	4b2e      	ldr	r3, [pc, #184]	@ (8009040 <vTaskDelete+0x128>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8009040 <vTaskDelete+0x128>)
 8008f8e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008f90:	4b28      	ldr	r3, [pc, #160]	@ (8009034 <vTaskDelete+0x11c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d101      	bne.n	8008f9e <vTaskDelete+0x86>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <vTaskDelete+0x88>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008fa2:	4b28      	ldr	r3, [pc, #160]	@ (8009044 <vTaskDelete+0x12c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d010      	beq.n	8008fcc <vTaskDelete+0xb4>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00d      	beq.n	8008fcc <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4824      	ldr	r0, [pc, #144]	@ (8009048 <vTaskDelete+0x130>)
 8008fb8:	f7ff f88d 	bl	80080d6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8008fbc:	4b23      	ldr	r3, [pc, #140]	@ (800904c <vTaskDelete+0x134>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a22      	ldr	r2, [pc, #136]	@ (800904c <vTaskDelete+0x134>)
 8008fc4:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	e006      	b.n	8008fda <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8008fcc:	4b20      	ldr	r3, [pc, #128]	@ (8009050 <vTaskDelete+0x138>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8009050 <vTaskDelete+0x138>)
 8008fd4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8008fd6:	f000 fe57 	bl	8009c88 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8008fda:	f001 fc2d 	bl	800a838 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d002      	beq.n	8008fea <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8008fe4:	6938      	ldr	r0, [r7, #16]
 8008fe6:	f000 fe1f 	bl	8009c28 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8008fea:	4b16      	ldr	r3, [pc, #88]	@ (8009044 <vTaskDelete+0x12c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01c      	beq.n	800902c <vTaskDelete+0x114>
            {
                if( pxTCB == pxCurrentTCB )
 8008ff2:	4b10      	ldr	r3, [pc, #64]	@ (8009034 <vTaskDelete+0x11c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d117      	bne.n	800902c <vTaskDelete+0x114>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8008ffc:	4b15      	ldr	r3, [pc, #84]	@ (8009054 <vTaskDelete+0x13c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <vTaskDelete+0x104>
    __asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60bb      	str	r3, [r7, #8]
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 800901c:	4b0e      	ldr	r3, [pc, #56]	@ (8009058 <vTaskDelete+0x140>)
 800901e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800902c:	bf00      	nop
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20004f08 	.word	0x20004f08
 8009038:	20004f0c 	.word	0x20004f0c
 800903c:	20005204 	.word	0x20005204
 8009040:	20005218 	.word	0x20005218
 8009044:	20005208 	.word	0x20005208
 8009048:	200051d0 	.word	0x200051d0
 800904c:	200051e4 	.word	0x200051e4
 8009050:	200051fc 	.word	0x200051fc
 8009054:	20005224 	.word	0x20005224
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d018      	beq.n	80090a0 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800906e:	f000 f8d7 	bl	8009220 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8009072:	4b13      	ldr	r3, [pc, #76]	@ (80090c0 <vTaskDelay+0x64>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d00b      	beq.n	8009092 <vTaskDelay+0x36>
    __asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	60bb      	str	r3, [r7, #8]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009092:	2100      	movs	r1, #0
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fed9 	bl	8009e4c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800909a:	f000 f8cf 	bl	800923c <xTaskResumeAll>
 800909e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d107      	bne.n	80090b6 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80090a6:	4b07      	ldr	r3, [pc, #28]	@ (80090c4 <vTaskDelay+0x68>)
 80090a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20005224 	.word	0x20005224
 80090c4:	e000ed04 	.word	0xe000ed04

080090c8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08e      	sub	sp, #56	@ 0x38
 80090cc:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80090ce:	2301      	movs	r3, #1
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	e013      	b.n	8009104 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80090dc:	4a2b      	ldr	r2, [pc, #172]	@ (800918c <prvCreateIdleTasks+0xc4>)
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	7819      	ldrb	r1, [r3, #0]
 80090e4:	f107 020c 	add.w	r2, r7, #12
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	460a      	mov	r2, r1
 80090ee:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80090f0:	f107 020c 	add.w	r2, r7, #12
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d006      	beq.n	800910c <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3301      	adds	r3, #1
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	2b0b      	cmp	r3, #11
 8009108:	dde8      	ble.n	80090dc <prvCreateIdleTasks+0x14>
 800910a:	e000      	b.n	800910e <prvCreateIdleTasks+0x46>
        {
            break;
 800910c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800910e:	2300      	movs	r3, #0
 8009110:	623b      	str	r3, [r7, #32]
 8009112:	e030      	b.n	8009176 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8009114:	4b1e      	ldr	r3, [pc, #120]	@ (8009190 <prvCreateIdleTasks+0xc8>)
 8009116:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800911c:	2300      	movs	r3, #0
 800911e:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8009120:	463a      	mov	r2, r7
 8009122:	1d39      	adds	r1, r7, #4
 8009124:	f107 0308 	add.w	r3, r7, #8
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe ff8d 	bl	8008048 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800912e:	6838      	ldr	r0, [r7, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	f107 010c 	add.w	r1, r7, #12
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	2300      	movs	r3, #0
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2300      	movs	r3, #0
 8009142:	4602      	mov	r2, r0
 8009144:	69b8      	ldr	r0, [r7, #24]
 8009146:	f7ff fd3c 	bl	8008bc2 <xTaskCreateStatic>
 800914a:	4602      	mov	r2, r0
 800914c:	4911      	ldr	r1, [pc, #68]	@ (8009194 <prvCreateIdleTasks+0xcc>)
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8009154:	4a0f      	ldr	r2, [pc, #60]	@ (8009194 <prvCreateIdleTasks+0xcc>)
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 8009160:	2301      	movs	r3, #1
 8009162:	627b      	str	r3, [r7, #36]	@ 0x24
 8009164:	e001      	b.n	800916a <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8009166:	2300      	movs	r3, #0
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	3301      	adds	r3, #1
 8009174:	623b      	str	r3, [r7, #32]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	2b00      	cmp	r3, #0
 800917a:	ddcb      	ble.n	8009114 <prvCreateIdleTasks+0x4c>
 800917c:	e000      	b.n	8009180 <prvCreateIdleTasks+0xb8>
        {
            break;
 800917e:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009182:	4618      	mov	r0, r3
 8009184:	3728      	adds	r7, #40	@ 0x28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	08015580 	.word	0x08015580
 8009190:	08009b1d 	.word	0x08009b1d
 8009194:	20005220 	.word	0x20005220

08009198 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800919e:	f7ff ff93 	bl	80090c8 <prvCreateIdleTasks>
 80091a2:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d102      	bne.n	80091b0 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80091aa:	f000 fed5 	bl	8009f58 <xTimerCreateTimerTask>
 80091ae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d116      	bne.n	80091e4 <vTaskStartScheduler+0x4c>
    __asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	60bb      	str	r3, [r7, #8]
}
 80091c8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80091ca:	4b11      	ldr	r3, [pc, #68]	@ (8009210 <vTaskStartScheduler+0x78>)
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80091d2:	4b10      	ldr	r3, [pc, #64]	@ (8009214 <vTaskStartScheduler+0x7c>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <vTaskStartScheduler+0x80>)
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80091de:	f001 fa09 	bl	800a5f4 <xPortStartScheduler>
 80091e2:	e00f      	b.n	8009204 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d10b      	bne.n	8009204 <vTaskStartScheduler+0x6c>
    __asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	607b      	str	r3, [r7, #4]
}
 80091fe:	bf00      	nop
 8009200:	bf00      	nop
 8009202:	e7fd      	b.n	8009200 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009204:	4b05      	ldr	r3, [pc, #20]	@ (800921c <vTaskStartScheduler+0x84>)
 8009206:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	2000521c 	.word	0x2000521c
 8009214:	20005208 	.word	0x20005208
 8009218:	20005200 	.word	0x20005200
 800921c:	08016358 	.word	0x08016358

08009220 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8009224:	4b04      	ldr	r3, [pc, #16]	@ (8009238 <vTaskSuspendAll+0x18>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3301      	adds	r3, #1
 800922a:	4a03      	ldr	r2, [pc, #12]	@ (8009238 <vTaskSuspendAll+0x18>)
 800922c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800922e:	bf00      	nop
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20005224 	.word	0x20005224

0800923c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800924a:	f001 fac3 	bl	800a7d4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800924e:	2300      	movs	r3, #0
 8009250:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8009252:	4b75      	ldr	r3, [pc, #468]	@ (8009428 <xTaskResumeAll+0x1ec>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <xTaskResumeAll+0x36>
    __asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	603b      	str	r3, [r7, #0]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8009272:	4b6d      	ldr	r3, [pc, #436]	@ (8009428 <xTaskResumeAll+0x1ec>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3b01      	subs	r3, #1
 8009278:	4a6b      	ldr	r2, [pc, #428]	@ (8009428 <xTaskResumeAll+0x1ec>)
 800927a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800927c:	4b6a      	ldr	r3, [pc, #424]	@ (8009428 <xTaskResumeAll+0x1ec>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 80ca 	bne.w	800941a <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009286:	4b69      	ldr	r3, [pc, #420]	@ (800942c <xTaskResumeAll+0x1f0>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80c5 	beq.w	800941a <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009290:	e08e      	b.n	80093b0 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009292:	4b67      	ldr	r3, [pc, #412]	@ (8009430 <xTaskResumeAll+0x1f4>)
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	6a12      	ldr	r2, [r2, #32]
 80092a8:	609a      	str	r2, [r3, #8]
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	69d2      	ldr	r2, [r2, #28]
 80092b2:	605a      	str	r2, [r3, #4]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	3318      	adds	r3, #24
 80092bc:	429a      	cmp	r2, r3
 80092be:	d103      	bne.n	80092c8 <xTaskResumeAll+0x8c>
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	605a      	str	r2, [r3, #4]
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2200      	movs	r2, #0
 80092cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	1e5a      	subs	r2, r3, #1
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	60bb      	str	r3, [r7, #8]
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	68d2      	ldr	r2, [r2, #12]
 80092e6:	609a      	str	r2, [r3, #8]
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	69fa      	ldr	r2, [r7, #28]
 80092ee:	6892      	ldr	r2, [r2, #8]
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	3304      	adds	r3, #4
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d103      	bne.n	8009306 <xTaskResumeAll+0xca>
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	605a      	str	r2, [r3, #4]
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	2200      	movs	r2, #0
 800930a:	615a      	str	r2, [r3, #20]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	2201      	movs	r2, #1
 800931c:	409a      	lsls	r2, r3
 800931e:	4b45      	ldr	r3, [pc, #276]	@ (8009434 <xTaskResumeAll+0x1f8>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4313      	orrs	r3, r2
 8009324:	4a43      	ldr	r2, [pc, #268]	@ (8009434 <xTaskResumeAll+0x1f8>)
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932c:	4942      	ldr	r1, [pc, #264]	@ (8009438 <xTaskResumeAll+0x1fc>)
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	3304      	adds	r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	609a      	str	r2, [r3, #8]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	60da      	str	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	3204      	adds	r2, #4
 8009354:	605a      	str	r2, [r3, #4]
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	609a      	str	r2, [r3, #8]
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009362:	4613      	mov	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4a33      	ldr	r2, [pc, #204]	@ (8009438 <xTaskResumeAll+0x1fc>)
 800936c:	441a      	add	r2, r3
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	615a      	str	r2, [r3, #20]
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009376:	4930      	ldr	r1, [pc, #192]	@ (8009438 <xTaskResumeAll+0x1fc>)
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009388:	1c59      	adds	r1, r3, #1
 800938a:	482b      	ldr	r0, [pc, #172]	@ (8009438 <xTaskResumeAll+0x1fc>)
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4403      	add	r3, r0
 8009396:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939c:	4b27      	ldr	r3, [pc, #156]	@ (800943c <xTaskResumeAll+0x200>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d904      	bls.n	80093b0 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80093a6:	4a26      	ldr	r2, [pc, #152]	@ (8009440 <xTaskResumeAll+0x204>)
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2101      	movs	r1, #1
 80093ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093b0:	4b1f      	ldr	r3, [pc, #124]	@ (8009430 <xTaskResumeAll+0x1f4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f47f af6c 	bne.w	8009292 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80093c0:	f000 fc62 	bl	8009c88 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093c4:	4b1f      	ldr	r3, [pc, #124]	@ (8009444 <xTaskResumeAll+0x208>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d012      	beq.n	80093f6 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80093d0:	f000 f84c 	bl	800946c <xTaskIncrementTick>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80093da:	4a19      	ldr	r2, [pc, #100]	@ (8009440 <xTaskResumeAll+0x204>)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2101      	movs	r1, #1
 80093e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1ef      	bne.n	80093d0 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 80093f0:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <xTaskResumeAll+0x208>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80093f6:	4a12      	ldr	r2, [pc, #72]	@ (8009440 <xTaskResumeAll+0x204>)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00b      	beq.n	800941a <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8009406:	4b0d      	ldr	r3, [pc, #52]	@ (800943c <xTaskResumeAll+0x200>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <xTaskResumeAll+0x20c>)
 800940c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800941a:	f001 fa0d 	bl	800a838 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800941e:	69bb      	ldr	r3, [r7, #24]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20005224 	.word	0x20005224
 800942c:	200051fc 	.word	0x200051fc
 8009430:	200051bc 	.word	0x200051bc
 8009434:	20005204 	.word	0x20005204
 8009438:	20004f0c 	.word	0x20004f0c
 800943c:	20004f08 	.word	0x20004f08
 8009440:	20005210 	.word	0x20005210
 8009444:	2000520c 	.word	0x2000520c
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009452:	4b05      	ldr	r3, [pc, #20]	@ (8009468 <xTaskGetTickCount+0x1c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8009458:	687b      	ldr	r3, [r7, #4]
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20005200 	.word	0x20005200

0800946c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08a      	sub	sp, #40	@ 0x28
 8009470:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009472:	2300      	movs	r3, #0
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009476:	4b7f      	ldr	r3, [pc, #508]	@ (8009674 <xTaskIncrementTick+0x208>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 80ef 	bne.w	800965e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009480:	4b7d      	ldr	r3, [pc, #500]	@ (8009678 <xTaskIncrementTick+0x20c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009488:	4a7b      	ldr	r2, [pc, #492]	@ (8009678 <xTaskIncrementTick+0x20c>)
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d121      	bne.n	80094d8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009494:	4b79      	ldr	r3, [pc, #484]	@ (800967c <xTaskIncrementTick+0x210>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <xTaskIncrementTick+0x4a>
    __asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	607b      	str	r3, [r7, #4]
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <xTaskIncrementTick+0x46>
 80094b6:	4b71      	ldr	r3, [pc, #452]	@ (800967c <xTaskIncrementTick+0x210>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	4b70      	ldr	r3, [pc, #448]	@ (8009680 <xTaskIncrementTick+0x214>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a6e      	ldr	r2, [pc, #440]	@ (800967c <xTaskIncrementTick+0x210>)
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	4a6e      	ldr	r2, [pc, #440]	@ (8009680 <xTaskIncrementTick+0x214>)
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	4b6e      	ldr	r3, [pc, #440]	@ (8009684 <xTaskIncrementTick+0x218>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4a6c      	ldr	r2, [pc, #432]	@ (8009684 <xTaskIncrementTick+0x218>)
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	f000 fbd8 	bl	8009c88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80094d8:	4b6b      	ldr	r3, [pc, #428]	@ (8009688 <xTaskIncrementTick+0x21c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6a3a      	ldr	r2, [r7, #32]
 80094de:	429a      	cmp	r2, r3
 80094e0:	f0c0 80a8 	bcc.w	8009634 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e4:	4b65      	ldr	r3, [pc, #404]	@ (800967c <xTaskIncrementTick+0x210>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d104      	bne.n	80094f8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80094ee:	4b66      	ldr	r3, [pc, #408]	@ (8009688 <xTaskIncrementTick+0x21c>)
 80094f0:	f04f 32ff 	mov.w	r2, #4294967295
 80094f4:	601a      	str	r2, [r3, #0]
                    break;
 80094f6:	e09d      	b.n	8009634 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80094f8:	4b60      	ldr	r3, [pc, #384]	@ (800967c <xTaskIncrementTick+0x210>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009508:	6a3a      	ldr	r2, [r7, #32]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	429a      	cmp	r2, r3
 800950e:	d203      	bcs.n	8009518 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009510:	4a5d      	ldr	r2, [pc, #372]	@ (8009688 <xTaskIncrementTick+0x21c>)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	6013      	str	r3, [r2, #0]
                        break;
 8009516:	e08d      	b.n	8009634 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	613b      	str	r3, [r7, #16]
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	68d2      	ldr	r2, [r2, #12]
 8009526:	609a      	str	r2, [r3, #8]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	6892      	ldr	r2, [r2, #8]
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	3304      	adds	r3, #4
 800953a:	429a      	cmp	r2, r3
 800953c:	d103      	bne.n	8009546 <xTaskIncrementTick+0xda>
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	605a      	str	r2, [r3, #4]
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	2200      	movs	r2, #0
 800954a:	615a      	str	r2, [r3, #20]
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	1e5a      	subs	r2, r3, #1
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	d01e      	beq.n	800959c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	69db      	ldr	r3, [r3, #28]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	6a12      	ldr	r2, [r2, #32]
 800956c:	609a      	str	r2, [r3, #8]
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	69d2      	ldr	r2, [r2, #28]
 8009576:	605a      	str	r2, [r3, #4]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	3318      	adds	r3, #24
 8009580:	429a      	cmp	r2, r3
 8009582:	d103      	bne.n	800958c <xTaskIncrementTick+0x120>
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	6a1a      	ldr	r2, [r3, #32]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	605a      	str	r2, [r3, #4]
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2200      	movs	r2, #0
 8009590:	629a      	str	r2, [r3, #40]	@ 0x28
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	1e5a      	subs	r2, r3, #1
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	2201      	movs	r2, #1
 80095a2:	409a      	lsls	r2, r3
 80095a4:	4b39      	ldr	r3, [pc, #228]	@ (800968c <xTaskIncrementTick+0x220>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	4a38      	ldr	r2, [pc, #224]	@ (800968c <xTaskIncrementTick+0x220>)
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b2:	4937      	ldr	r1, [pc, #220]	@ (8009690 <xTaskIncrementTick+0x224>)
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	3304      	adds	r3, #4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60bb      	str	r3, [r7, #8]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	609a      	str	r2, [r3, #8]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	60da      	str	r2, [r3, #12]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	3204      	adds	r2, #4
 80095da:	605a      	str	r2, [r3, #4]
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4a27      	ldr	r2, [pc, #156]	@ (8009690 <xTaskIncrementTick+0x224>)
 80095f2:	441a      	add	r2, r3
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	615a      	str	r2, [r3, #20]
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095fc:	4924      	ldr	r1, [pc, #144]	@ (8009690 <xTaskIncrementTick+0x224>)
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800960e:	1c59      	adds	r1, r3, #1
 8009610:	481f      	ldr	r0, [pc, #124]	@ (8009690 <xTaskIncrementTick+0x224>)
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4403      	add	r3, r0
 800961c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009622:	4b1c      	ldr	r3, [pc, #112]	@ (8009694 <xTaskIncrementTick+0x228>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009628:	429a      	cmp	r2, r3
 800962a:	f67f af5b 	bls.w	80094e4 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800962e:	2301      	movs	r3, #1
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009632:	e757      	b.n	80094e4 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8009634:	4b17      	ldr	r3, [pc, #92]	@ (8009694 <xTaskIncrementTick+0x228>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963a:	4915      	ldr	r1, [pc, #84]	@ (8009690 <xTaskIncrementTick+0x224>)
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d901      	bls.n	8009650 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 800964c:	2301      	movs	r3, #1
 800964e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8009650:	4b11      	ldr	r3, [pc, #68]	@ (8009698 <xTaskIncrementTick+0x22c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8009658:	2301      	movs	r3, #1
 800965a:	627b      	str	r3, [r7, #36]	@ 0x24
 800965c:	e004      	b.n	8009668 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800965e:	4b0f      	ldr	r3, [pc, #60]	@ (800969c <xTaskIncrementTick+0x230>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	4a0d      	ldr	r2, [pc, #52]	@ (800969c <xTaskIncrementTick+0x230>)
 8009666:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	@ 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20005224 	.word	0x20005224
 8009678:	20005200 	.word	0x20005200
 800967c:	200051b4 	.word	0x200051b4
 8009680:	200051b8 	.word	0x200051b8
 8009684:	20005214 	.word	0x20005214
 8009688:	2000521c 	.word	0x2000521c
 800968c:	20005204 	.word	0x20005204
 8009690:	20004f0c 	.word	0x20004f0c
 8009694:	20004f08 	.word	0x20004f08
 8009698:	20005210 	.word	0x20005210
 800969c:	2000520c 	.word	0x2000520c

080096a0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80096a6:	4b28      	ldr	r3, [pc, #160]	@ (8009748 <vTaskSwitchContext+0xa8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80096ae:	4b27      	ldr	r3, [pc, #156]	@ (800974c <vTaskSwitchContext+0xac>)
 80096b0:	2201      	movs	r2, #1
 80096b2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80096b4:	e041      	b.n	800973a <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80096b6:	4b25      	ldr	r3, [pc, #148]	@ (800974c <vTaskSwitchContext+0xac>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80096bc:	4b24      	ldr	r3, [pc, #144]	@ (8009750 <vTaskSwitchContext+0xb0>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	fab3 f383 	clz	r3, r3
 80096c8:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80096ca:	7afb      	ldrb	r3, [r7, #11]
 80096cc:	f1c3 031f 	rsb	r3, r3, #31
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	4920      	ldr	r1, [pc, #128]	@ (8009754 <vTaskSwitchContext+0xb4>)
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10b      	bne.n	80096fe <vTaskSwitchContext+0x5e>
    __asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	607b      	str	r3, [r7, #4]
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	e7fd      	b.n	80096fa <vTaskSwitchContext+0x5a>
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4a12      	ldr	r2, [pc, #72]	@ (8009754 <vTaskSwitchContext+0xb4>)
 800970a:	4413      	add	r3, r2
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	605a      	str	r2, [r3, #4]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	3308      	adds	r3, #8
 8009720:	429a      	cmp	r2, r3
 8009722:	d103      	bne.n	800972c <vTaskSwitchContext+0x8c>
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	605a      	str	r2, [r3, #4]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	4a09      	ldr	r2, [pc, #36]	@ (8009758 <vTaskSwitchContext+0xb8>)
 8009734:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8009736:	4b08      	ldr	r3, [pc, #32]	@ (8009758 <vTaskSwitchContext+0xb8>)
 8009738:	681b      	ldr	r3, [r3, #0]
    }
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20005224 	.word	0x20005224
 800974c:	20005210 	.word	0x20005210
 8009750:	20005204 	.word	0x20005204
 8009754:	20004f0c 	.word	0x20004f0c
 8009758:	20004f08 	.word	0x20004f08

0800975c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10b      	bne.n	8009784 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	60fb      	str	r3, [r7, #12]
}
 800977e:	bf00      	nop
 8009780:	bf00      	nop
 8009782:	e7fd      	b.n	8009780 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009784:	4b07      	ldr	r3, [pc, #28]	@ (80097a4 <vTaskPlaceOnEventList+0x48>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3318      	adds	r3, #24
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7fe fcc6 	bl	800811e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009792:	2101      	movs	r1, #1
 8009794:	6838      	ldr	r0, [r7, #0]
 8009796:	f000 fb59 	bl	8009e4c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20004f08 	.word	0x20004f08

080097a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	613b      	str	r3, [r7, #16]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	4b15      	ldr	r3, [pc, #84]	@ (8009830 <vTaskPlaceOnEventListRestricted+0x88>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	61da      	str	r2, [r3, #28]
 80097e0:	4b13      	ldr	r3, [pc, #76]	@ (8009830 <vTaskPlaceOnEventListRestricted+0x88>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	6892      	ldr	r2, [r2, #8]
 80097e8:	621a      	str	r2, [r3, #32]
 80097ea:	4b11      	ldr	r3, [pc, #68]	@ (8009830 <vTaskPlaceOnEventListRestricted+0x88>)
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	3218      	adds	r2, #24
 80097f4:	605a      	str	r2, [r3, #4]
 80097f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009830 <vTaskPlaceOnEventListRestricted+0x88>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f103 0218 	add.w	r2, r3, #24
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	609a      	str	r2, [r3, #8]
 8009802:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <vTaskPlaceOnEventListRestricted+0x88>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	629a      	str	r2, [r3, #40]	@ 0x28
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	68b8      	ldr	r0, [r7, #8]
 8009824:	f000 fb12 	bl	8009e4c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8009828:	bf00      	nop
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20004f08 	.word	0x20004f08

08009834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009834:	b480      	push	{r7}
 8009836:	b08b      	sub	sp, #44	@ 0x2c
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60fb      	str	r3, [r7, #12]
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	e7fd      	b.n	800985e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	6a3a      	ldr	r2, [r7, #32]
 800986e:	6a12      	ldr	r2, [r2, #32]
 8009870:	609a      	str	r2, [r3, #8]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	6a3a      	ldr	r2, [r7, #32]
 8009878:	69d2      	ldr	r2, [r2, #28]
 800987a:	605a      	str	r2, [r3, #4]
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	3318      	adds	r3, #24
 8009884:	429a      	cmp	r2, r3
 8009886:	d103      	bne.n	8009890 <xTaskRemoveFromEventList+0x5c>
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	6a1a      	ldr	r2, [r3, #32]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	605a      	str	r2, [r3, #4]
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2200      	movs	r2, #0
 8009894:	629a      	str	r2, [r3, #40]	@ 0x28
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80098a0:	4b4b      	ldr	r3, [pc, #300]	@ (80099d0 <xTaskRemoveFromEventList+0x19c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d160      	bne.n	800996a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	6a3a      	ldr	r2, [r7, #32]
 80098b4:	68d2      	ldr	r2, [r2, #12]
 80098b6:	609a      	str	r2, [r3, #8]
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	6a3a      	ldr	r2, [r7, #32]
 80098be:	6892      	ldr	r2, [r2, #8]
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	3304      	adds	r3, #4
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d103      	bne.n	80098d6 <xTaskRemoveFromEventList+0xa2>
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	605a      	str	r2, [r3, #4]
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	2200      	movs	r2, #0
 80098da:	615a      	str	r2, [r3, #20]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	1e5a      	subs	r2, r3, #1
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	2201      	movs	r2, #1
 80098ec:	409a      	lsls	r2, r3
 80098ee:	4b39      	ldr	r3, [pc, #228]	@ (80099d4 <xTaskRemoveFromEventList+0x1a0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	4a37      	ldr	r2, [pc, #220]	@ (80099d4 <xTaskRemoveFromEventList+0x1a0>)
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098fc:	4936      	ldr	r1, [pc, #216]	@ (80099d8 <xTaskRemoveFromEventList+0x1a4>)
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	3304      	adds	r3, #4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	613b      	str	r3, [r7, #16]
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	609a      	str	r2, [r3, #8]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	60da      	str	r2, [r3, #12]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	3204      	adds	r2, #4
 8009924:	605a      	str	r2, [r3, #4]
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	609a      	str	r2, [r3, #8]
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4a27      	ldr	r2, [pc, #156]	@ (80099d8 <xTaskRemoveFromEventList+0x1a4>)
 800993c:	441a      	add	r2, r3
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	615a      	str	r2, [r3, #20]
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009946:	4924      	ldr	r1, [pc, #144]	@ (80099d8 <xTaskRemoveFromEventList+0x1a4>)
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	440b      	add	r3, r1
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6a3a      	ldr	r2, [r7, #32]
 8009956:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009958:	1c59      	adds	r1, r3, #1
 800995a:	481f      	ldr	r0, [pc, #124]	@ (80099d8 <xTaskRemoveFromEventList+0x1a4>)
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4403      	add	r3, r0
 8009966:	6019      	str	r1, [r3, #0]
 8009968:	e01b      	b.n	80099a2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800996a:	4b1c      	ldr	r3, [pc, #112]	@ (80099dc <xTaskRemoveFromEventList+0x1a8>)
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	61bb      	str	r3, [r7, #24]
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	61da      	str	r2, [r3, #28]
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	621a      	str	r2, [r3, #32]
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	6a3a      	ldr	r2, [r7, #32]
 8009984:	3218      	adds	r2, #24
 8009986:	605a      	str	r2, [r3, #4]
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	f103 0218 	add.w	r2, r3, #24
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	609a      	str	r2, [r3, #8]
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	4a11      	ldr	r2, [pc, #68]	@ (80099dc <xTaskRemoveFromEventList+0x1a8>)
 8009996:	629a      	str	r2, [r3, #40]	@ 0x28
 8009998:	4b10      	ldr	r3, [pc, #64]	@ (80099dc <xTaskRemoveFromEventList+0x1a8>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a0f      	ldr	r2, [pc, #60]	@ (80099dc <xTaskRemoveFromEventList+0x1a8>)
 80099a0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a6:	4b0e      	ldr	r3, [pc, #56]	@ (80099e0 <xTaskRemoveFromEventList+0x1ac>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d905      	bls.n	80099bc <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80099b0:	2301      	movs	r3, #1
 80099b2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80099b4:	4b0b      	ldr	r3, [pc, #44]	@ (80099e4 <xTaskRemoveFromEventList+0x1b0>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	e001      	b.n	80099c0 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 80099bc:	2300      	movs	r3, #0
 80099be:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	372c      	adds	r7, #44	@ 0x2c
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20005224 	.word	0x20005224
 80099d4:	20005204 	.word	0x20005204
 80099d8:	20004f0c 	.word	0x20004f0c
 80099dc:	200051bc 	.word	0x200051bc
 80099e0:	20004f08 	.word	0x20004f08
 80099e4:	20005210 	.word	0x20005210

080099e8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099f0:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <vTaskInternalSetTimeOutState+0x24>)
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80099f8:	4b05      	ldr	r3, [pc, #20]	@ (8009a10 <vTaskInternalSetTimeOutState+0x28>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	20005214 	.word	0x20005214
 8009a10:	20005200 	.word	0x20005200

08009a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10b      	bne.n	8009a3c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	613b      	str	r3, [r7, #16]
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	e7fd      	b.n	8009a38 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	60fb      	str	r3, [r7, #12]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009a5a:	f000 febb 	bl	800a7d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009a5e:	4b26      	ldr	r3, [pc, #152]	@ (8009af8 <xTaskCheckForTimeOut+0xe4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8009a6e:	4b23      	ldr	r3, [pc, #140]	@ (8009afc <xTaskCheckForTimeOut+0xe8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <xTaskCheckForTimeOut+0x76>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8009a7a:	4b20      	ldr	r3, [pc, #128]	@ (8009afc <xTaskCheckForTimeOut+0xe8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
                xReturn = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	e02e      	b.n	8009ae8 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d102      	bne.n	8009a9a <xTaskCheckForTimeOut+0x86>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	e026      	b.n	8009ae8 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4b18      	ldr	r3, [pc, #96]	@ (8009b00 <xTaskCheckForTimeOut+0xec>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d00a      	beq.n	8009abc <xTaskCheckForTimeOut+0xa8>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d305      	bcc.n	8009abc <xTaskCheckForTimeOut+0xa8>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	e015      	b.n	8009ae8 <xTaskCheckForTimeOut+0xd4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d20b      	bcs.n	8009ade <xTaskCheckForTimeOut+0xca>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	1ad2      	subs	r2, r2, r3
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff ff88 	bl	80099e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61fb      	str	r3, [r7, #28]
 8009adc:	e004      	b.n	8009ae8 <xTaskCheckForTimeOut+0xd4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009ae8:	f000 fea6 	bl	800a838 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8009aec:	69fb      	ldr	r3, [r7, #28]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20005200 	.word	0x20005200
 8009afc:	20004f08 	.word	0x20004f08
 8009b00:	20005214 	.word	0x20005214

08009b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8009b08:	4b03      	ldr	r3, [pc, #12]	@ (8009b18 <vTaskMissedYield+0x14>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8009b0e:	bf00      	nop
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	20005210 	.word	0x20005210

08009b1c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009b24:	f000 f852 	bl	8009bcc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8009b28:	4b06      	ldr	r3, [pc, #24]	@ (8009b44 <prvIdleTask+0x28>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d9f9      	bls.n	8009b24 <prvIdleTask+0x8>
            {
                taskYIELD();
 8009b30:	4b05      	ldr	r3, [pc, #20]	@ (8009b48 <prvIdleTask+0x2c>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009b40:	e7f0      	b.n	8009b24 <prvIdleTask+0x8>
 8009b42:	bf00      	nop
 8009b44:	20004f0c 	.word	0x20004f0c
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b52:	2300      	movs	r3, #0
 8009b54:	607b      	str	r3, [r7, #4]
 8009b56:	e00c      	b.n	8009b72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4a12      	ldr	r2, [pc, #72]	@ (8009bac <prvInitialiseTaskLists+0x60>)
 8009b64:	4413      	add	r3, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fa88 	bl	800807c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	607b      	str	r3, [r7, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b1f      	cmp	r3, #31
 8009b76:	d9ef      	bls.n	8009b58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009b78:	480d      	ldr	r0, [pc, #52]	@ (8009bb0 <prvInitialiseTaskLists+0x64>)
 8009b7a:	f7fe fa7f 	bl	800807c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009b7e:	480d      	ldr	r0, [pc, #52]	@ (8009bb4 <prvInitialiseTaskLists+0x68>)
 8009b80:	f7fe fa7c 	bl	800807c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009b84:	480c      	ldr	r0, [pc, #48]	@ (8009bb8 <prvInitialiseTaskLists+0x6c>)
 8009b86:	f7fe fa79 	bl	800807c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009b8a:	480c      	ldr	r0, [pc, #48]	@ (8009bbc <prvInitialiseTaskLists+0x70>)
 8009b8c:	f7fe fa76 	bl	800807c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009b90:	480b      	ldr	r0, [pc, #44]	@ (8009bc0 <prvInitialiseTaskLists+0x74>)
 8009b92:	f7fe fa73 	bl	800807c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009b96:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc4 <prvInitialiseTaskLists+0x78>)
 8009b98:	4a05      	ldr	r2, [pc, #20]	@ (8009bb0 <prvInitialiseTaskLists+0x64>)
 8009b9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc8 <prvInitialiseTaskLists+0x7c>)
 8009b9e:	4a05      	ldr	r2, [pc, #20]	@ (8009bb4 <prvInitialiseTaskLists+0x68>)
 8009ba0:	601a      	str	r2, [r3, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20004f0c 	.word	0x20004f0c
 8009bb0:	2000518c 	.word	0x2000518c
 8009bb4:	200051a0 	.word	0x200051a0
 8009bb8:	200051bc 	.word	0x200051bc
 8009bbc:	200051d0 	.word	0x200051d0
 8009bc0:	200051e8 	.word	0x200051e8
 8009bc4:	200051b4 	.word	0x200051b4
 8009bc8:	200051b8 	.word	0x200051b8

08009bcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bd2:	e019      	b.n	8009c08 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8009bd4:	f000 fdfe 	bl	800a7d4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009bd8:	4b10      	ldr	r3, [pc, #64]	@ (8009c1c <prvCheckTasksWaitingTermination+0x50>)
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fad3 	bl	8008190 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <prvCheckTasksWaitingTermination+0x54>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8009c20 <prvCheckTasksWaitingTermination+0x54>)
 8009bf2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8009bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8009c24 <prvCheckTasksWaitingTermination+0x58>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8009c24 <prvCheckTasksWaitingTermination+0x58>)
 8009bfc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8009bfe:	f000 fe1b 	bl	800a838 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f810 	bl	8009c28 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c08:	4b06      	ldr	r3, [pc, #24]	@ (8009c24 <prvCheckTasksWaitingTermination+0x58>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e1      	bne.n	8009bd4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200051d0 	.word	0x200051d0
 8009c20:	200051fc 	.word	0x200051fc
 8009c24:	200051e4 	.word	0x200051e4

08009c28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d108      	bne.n	8009c4c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 ffde 	bl	800ac00 <vPortFree>
                vPortFree( pxTCB );
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 ffdb 	bl	800ac00 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009c4a:	e019      	b.n	8009c80 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d103      	bne.n	8009c5e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 ffd2 	bl	800ac00 <vPortFree>
    }
 8009c5c:	e010      	b.n	8009c80 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d00b      	beq.n	8009c80 <prvDeleteTCB+0x58>
    __asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	60fb      	str	r3, [r7, #12]
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <prvDeleteTCB+0x54>
    }
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <prvResetNextTaskUnblockTime+0x30>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d104      	bne.n	8009ca0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009c96:	4b09      	ldr	r3, [pc, #36]	@ (8009cbc <prvResetNextTaskUnblockTime+0x34>)
 8009c98:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009c9e:	e005      	b.n	8009cac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ca0:	4b05      	ldr	r3, [pc, #20]	@ (8009cb8 <prvResetNextTaskUnblockTime+0x30>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a04      	ldr	r2, [pc, #16]	@ (8009cbc <prvResetNextTaskUnblockTime+0x34>)
 8009caa:	6013      	str	r3, [r2, #0]
}
 8009cac:	bf00      	nop
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	200051b4 	.word	0x200051b4
 8009cbc:	2000521c 	.word	0x2000521c

08009cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <xTaskGetSchedulerState+0x34>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	607b      	str	r3, [r7, #4]
 8009cd2:	e008      	b.n	8009ce6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009cd4:	4b08      	ldr	r3, [pc, #32]	@ (8009cf8 <xTaskGetSchedulerState+0x38>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d102      	bne.n	8009ce2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	607b      	str	r3, [r7, #4]
 8009ce0:	e001      	b.n	8009ce6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8009ce6:	687b      	ldr	r3, [r7, #4]
    }
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	20005208 	.word	0x20005208
 8009cf8:	20005224 	.word	0x20005224

08009cfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 8090 	beq.w	8009e34 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009d14:	4b4a      	ldr	r3, [pc, #296]	@ (8009e40 <xTaskPriorityDisinherit+0x144>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d00b      	beq.n	8009d36 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	613b      	str	r3, [r7, #16]
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	e7fd      	b.n	8009d32 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10b      	bne.n	8009d56 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	60fb      	str	r3, [r7, #12]
}
 8009d50:	bf00      	nop
 8009d52:	bf00      	nop
 8009d54:	e7fd      	b.n	8009d52 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5a:	1e5a      	subs	r2, r3, #1
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d063      	beq.n	8009e34 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d15f      	bne.n	8009e34 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fa09 	bl	8008190 <uxListRemove>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	2201      	movs	r2, #1
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	4b2c      	ldr	r3, [pc, #176]	@ (8009e44 <xTaskPriorityDisinherit+0x148>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4013      	ands	r3, r2
 8009d96:	4a2b      	ldr	r2, [pc, #172]	@ (8009e44 <xTaskPriorityDisinherit+0x148>)
 8009d98:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da6:	f1c3 0220 	rsb	r2, r3, #32
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db2:	2201      	movs	r2, #1
 8009db4:	409a      	lsls	r2, r3
 8009db6:	4b23      	ldr	r3, [pc, #140]	@ (8009e44 <xTaskPriorityDisinherit+0x148>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	4a21      	ldr	r2, [pc, #132]	@ (8009e44 <xTaskPriorityDisinherit+0x148>)
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc4:	4920      	ldr	r1, [pc, #128]	@ (8009e48 <xTaskPriorityDisinherit+0x14c>)
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	440b      	add	r3, r1
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	609a      	str	r2, [r3, #8]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	60da      	str	r2, [r3, #12]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	69ba      	ldr	r2, [r7, #24]
 8009dea:	3204      	adds	r2, #4
 8009dec:	605a      	str	r2, [r3, #4]
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	609a      	str	r2, [r3, #8]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4a11      	ldr	r2, [pc, #68]	@ (8009e48 <xTaskPriorityDisinherit+0x14c>)
 8009e04:	441a      	add	r2, r3
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	615a      	str	r2, [r3, #20]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e0e:	490e      	ldr	r1, [pc, #56]	@ (8009e48 <xTaskPriorityDisinherit+0x14c>)
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009e20:	1c59      	adds	r1, r3, #1
 8009e22:	4809      	ldr	r0, [pc, #36]	@ (8009e48 <xTaskPriorityDisinherit+0x14c>)
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4403      	add	r3, r0
 8009e2e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009e30:	2301      	movs	r3, #1
 8009e32:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8009e34:	69fb      	ldr	r3, [r7, #28]
    }
 8009e36:	4618      	mov	r0, r3
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20004f08 	.word	0x20004f08
 8009e44:	20005204 	.word	0x20005204
 8009e48:	20004f0c 	.word	0x20004f0c

08009e4c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009e56:	4b39      	ldr	r3, [pc, #228]	@ (8009f3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8009e5c:	4b38      	ldr	r3, [pc, #224]	@ (8009f40 <prvAddCurrentTaskToDelayedList+0xf4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8009e62:	4b38      	ldr	r3, [pc, #224]	@ (8009f44 <prvAddCurrentTaskToDelayedList+0xf8>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8009e68:	4b37      	ldr	r3, [pc, #220]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e72:	4b35      	ldr	r3, [pc, #212]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe f989 	bl	8008190 <uxListRemove>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10b      	bne.n	8009e9c <prvAddCurrentTaskToDelayedList+0x50>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009e84:	4b30      	ldr	r3, [pc, #192]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e90:	43da      	mvns	r2, r3
 8009e92:	4b2e      	ldr	r3, [pc, #184]	@ (8009f4c <prvAddCurrentTaskToDelayedList+0x100>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4013      	ands	r3, r2
 8009e98:	4a2c      	ldr	r2, [pc, #176]	@ (8009f4c <prvAddCurrentTaskToDelayedList+0x100>)
 8009e9a:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d124      	bne.n	8009eee <prvAddCurrentTaskToDelayedList+0xa2>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d021      	beq.n	8009eee <prvAddCurrentTaskToDelayedList+0xa2>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eaa:	4b29      	ldr	r3, [pc, #164]	@ (8009f50 <prvAddCurrentTaskToDelayedList+0x104>)
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	4b25      	ldr	r3, [pc, #148]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	4b23      	ldr	r3, [pc, #140]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	6892      	ldr	r2, [r2, #8]
 8009ec0:	60da      	str	r2, [r3, #12]
 8009ec2:	4b21      	ldr	r3, [pc, #132]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	3204      	adds	r2, #4
 8009ecc:	605a      	str	r2, [r3, #4]
 8009ece:	4b1e      	ldr	r3, [pc, #120]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	609a      	str	r2, [r3, #8]
 8009ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a1c      	ldr	r2, [pc, #112]	@ (8009f50 <prvAddCurrentTaskToDelayedList+0x104>)
 8009ede:	615a      	str	r2, [r3, #20]
 8009ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8009f50 <prvAddCurrentTaskToDelayedList+0x104>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f50 <prvAddCurrentTaskToDelayedList+0x104>)
 8009ee8:	6013      	str	r3, [r2, #0]
 8009eea:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009eec:	e022      	b.n	8009f34 <prvAddCurrentTaskToDelayedList+0xe8>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009eee:	69fa      	ldr	r2, [r7, #28]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ef6:	4b14      	ldr	r3, [pc, #80]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d207      	bcs.n	8009f16 <prvAddCurrentTaskToDelayedList+0xca>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8009f06:	4b10      	ldr	r3, [pc, #64]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6978      	ldr	r0, [r7, #20]
 8009f10:	f7fe f905 	bl	800811e <vListInsert>
}
 8009f14:	e00e      	b.n	8009f34 <prvAddCurrentTaskToDelayedList+0xe8>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8009f16:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	69b8      	ldr	r0, [r7, #24]
 8009f20:	f7fe f8fd 	bl	800811e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8009f24:	4b0b      	ldr	r3, [pc, #44]	@ (8009f54 <prvAddCurrentTaskToDelayedList+0x108>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d202      	bcs.n	8009f34 <prvAddCurrentTaskToDelayedList+0xe8>
                    xNextTaskUnblockTime = xTimeToWake;
 8009f2e:	4a09      	ldr	r2, [pc, #36]	@ (8009f54 <prvAddCurrentTaskToDelayedList+0x108>)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6013      	str	r3, [r2, #0]
}
 8009f34:	bf00      	nop
 8009f36:	3720      	adds	r7, #32
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20005200 	.word	0x20005200
 8009f40:	200051b4 	.word	0x200051b4
 8009f44:	200051b8 	.word	0x200051b8
 8009f48:	20004f08 	.word	0x20004f08
 8009f4c:	20005204 	.word	0x20005204
 8009f50:	200051e8 	.word	0x200051e8
 8009f54:	2000521c 	.word	0x2000521c

08009f58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	@ 0x28
 8009f5c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009f62:	f000 fa87 	bl	800a474 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009f66:	4b1d      	ldr	r3, [pc, #116]	@ (8009fdc <xTimerCreateTimerTask+0x84>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d021      	beq.n	8009fb2 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8009f76:	1d3a      	adds	r2, r7, #4
 8009f78:	f107 0108 	add.w	r1, r7, #8
 8009f7c:	f107 030c 	add.w	r3, r7, #12
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe f847 	bl	8008014 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	9202      	str	r2, [sp, #8]
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	231f      	movs	r3, #31
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	460a      	mov	r2, r1
 8009f98:	4911      	ldr	r1, [pc, #68]	@ (8009fe0 <xTimerCreateTimerTask+0x88>)
 8009f9a:	4812      	ldr	r0, [pc, #72]	@ (8009fe4 <xTimerCreateTimerTask+0x8c>)
 8009f9c:	f7fe fe11 	bl	8008bc2 <xTaskCreateStatic>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	4a11      	ldr	r2, [pc, #68]	@ (8009fe8 <xTimerCreateTimerTask+0x90>)
 8009fa4:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8009fa6:	4b10      	ldr	r3, [pc, #64]	@ (8009fe8 <xTimerCreateTimerTask+0x90>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	613b      	str	r3, [r7, #16]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
    }
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20005258 	.word	0x20005258
 8009fe0:	08015588 	.word	0x08015588
 8009fe4:	0800a091 	.word	0x0800a091
 8009fe8:	2000525c 	.word	0x2000525c

08009fec <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009ff8:	e008      	b.n	800a00c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	4413      	add	r3, r2
 800a002:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	699a      	ldr	r2, [r3, #24]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	18d1      	adds	r1, r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 f8df 	bl	800a1dc <prvInsertTimerInActiveList>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1ea      	bne.n	8009ffa <prvReloadTimer+0xe>
        }
    }
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a03a:	4b14      	ldr	r3, [pc, #80]	@ (800a08c <prvProcessExpiredTimer+0x5c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3304      	adds	r3, #4
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe f8a1 	bl	8008190 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d005      	beq.n	800a068 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff ffc3 	bl	8009fec <prvReloadTimer>
 800a066:	e008      	b.n	800a07a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a06e:	f023 0301 	bic.w	r3, r3, #1
 800a072:	b2da      	uxtb	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	4798      	blx	r3
    }
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20005250 	.word	0x20005250

0800a090 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 f859 	bl	800a154 <prvGetNextExpireTime>
 800a0a2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 f805 	bl	800a0b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a0ae:	f000 f8d7 	bl	800a260 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0b2:	bf00      	nop
 800a0b4:	e7f0      	b.n	800a098 <prvTimerTask+0x8>
	...

0800a0b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a0c2:	f7ff f8ad 	bl	8009220 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f866 	bl	800a19c <prvSampleTimeNow>
 800a0d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d130      	bne.n	800a13a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <prvProcessTimerOrBlockTask+0x3c>
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d806      	bhi.n	800a0f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a0e6:	f7ff f8a9 	bl	800923c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff ff9f 	bl	800a030 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a0f2:	e024      	b.n	800a13e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d008      	beq.n	800a10c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0fa:	4b13      	ldr	r3, [pc, #76]	@ (800a148 <prvProcessTimerOrBlockTask+0x90>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <prvProcessTimerOrBlockTask+0x50>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <prvProcessTimerOrBlockTask+0x52>
 800a108:	2300      	movs	r3, #0
 800a10a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a10c:	4b0f      	ldr	r3, [pc, #60]	@ (800a14c <prvProcessTimerOrBlockTask+0x94>)
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4619      	mov	r1, r3
 800a11a:	f7fe fcbd 	bl	8008a98 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a11e:	f7ff f88d 	bl	800923c <xTaskResumeAll>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10a      	bne.n	800a13e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800a128:	4b09      	ldr	r3, [pc, #36]	@ (800a150 <prvProcessTimerOrBlockTask+0x98>)
 800a12a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	f3bf 8f6f 	isb	sy
    }
 800a138:	e001      	b.n	800a13e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a13a:	f7ff f87f 	bl	800923c <xTaskResumeAll>
    }
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20005254 	.word	0x20005254
 800a14c:	20005258 	.word	0x20005258
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a15c:	4b0e      	ldr	r3, [pc, #56]	@ (800a198 <prvGetNextExpireTime+0x44>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <prvGetNextExpireTime+0x16>
 800a166:	2201      	movs	r2, #1
 800a168:	e000      	b.n	800a16c <prvGetNextExpireTime+0x18>
 800a16a:	2200      	movs	r2, #0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a178:	4b07      	ldr	r3, [pc, #28]	@ (800a198 <prvGetNextExpireTime+0x44>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e001      	b.n	800a188 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a188:	68fb      	ldr	r3, [r7, #12]
    }
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20005250 	.word	0x20005250

0800a19c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800a1a4:	f7ff f952 	bl	800944c <xTaskGetTickCount>
 800a1a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d8 <prvSampleTimeNow+0x3c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d205      	bcs.n	800a1c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a1b4:	f000 f938 	bl	800a428 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	e002      	b.n	800a1c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a1c6:	4a04      	ldr	r2, [pc, #16]	@ (800a1d8 <prvSampleTimeNow+0x3c>)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
    }
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20005260 	.word	0x20005260

0800a1dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d812      	bhi.n	800a228 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d302      	bcc.n	800a216 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	e01b      	b.n	800a24e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a216:	4b10      	ldr	r3, [pc, #64]	@ (800a258 <prvInsertTimerInActiveList+0x7c>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fd ff7c 	bl	800811e <vListInsert>
 800a226:	e012      	b.n	800a24e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d206      	bcs.n	800a23e <prvInsertTimerInActiveList+0x62>
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d302      	bcc.n	800a23e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a238:	2301      	movs	r3, #1
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	e007      	b.n	800a24e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a23e:	4b07      	ldr	r3, [pc, #28]	@ (800a25c <prvInsertTimerInActiveList+0x80>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3304      	adds	r3, #4
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f7fd ff68 	bl	800811e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a24e:	697b      	ldr	r3, [r7, #20]
    }
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20005254 	.word	0x20005254
 800a25c:	20005250 	.word	0x20005250

0800a260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a260:	b580      	push	{r7, lr}
 800a262:	b08a      	sub	sp, #40	@ 0x28
 800a264:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800a266:	1d3b      	adds	r3, r7, #4
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	609a      	str	r2, [r3, #8]
 800a270:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800a272:	e0c7      	b.n	800a404 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	da19      	bge.n	800a2ae <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a27a:	1d3b      	adds	r3, r7, #4
 800a27c:	3304      	adds	r3, #4
 800a27e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10b      	bne.n	800a29e <prvProcessReceivedCommands+0x3e>
    __asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	61bb      	str	r3, [r7, #24]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a4:	6850      	ldr	r0, [r2, #4]
 800a2a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a8:	6892      	ldr	r2, [r2, #8]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f2c0 80a7 	blt.w	800a404 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd ff62 	bl	8008190 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff ff64 	bl	800a19c <prvSampleTimeNow>
 800a2d4:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	2b08      	cmp	r3, #8
 800a2dc:	f200 808f 	bhi.w	800a3fe <prvProcessReceivedCommands+0x19e>
 800a2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e8 <prvProcessReceivedCommands+0x88>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a30d 	.word	0x0800a30d
 800a2ec:	0800a30d 	.word	0x0800a30d
 800a2f0:	0800a375 	.word	0x0800a375
 800a2f4:	0800a389 	.word	0x0800a389
 800a2f8:	0800a3d5 	.word	0x0800a3d5
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a30d 	.word	0x0800a30d
 800a304:	0800a375 	.word	0x0800a375
 800a308:	0800a389 	.word	0x0800a389
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	b2da      	uxtb	r2, r3
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	18d1      	adds	r1, r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	69fa      	ldr	r2, [r7, #28]
 800a32a:	6a38      	ldr	r0, [r7, #32]
 800a32c:	f7ff ff56 	bl	800a1dc <prvInsertTimerInActiveList>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d065      	beq.n	800a402 <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	4413      	add	r3, r2
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	4619      	mov	r1, r3
 800a350:	6a38      	ldr	r0, [r7, #32]
 800a352:	f7ff fe4b 	bl	8009fec <prvReloadTimer>
 800a356:	e008      	b.n	800a36a <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a35e:	f023 0301 	bic.w	r3, r3, #1
 800a362:	b2da      	uxtb	r2, r3
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	6a38      	ldr	r0, [r7, #32]
 800a370:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800a372:	e046      	b.n	800a402 <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a37a:	f023 0301 	bic.w	r3, r3, #1
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 800a386:	e03d      	b.n	800a404 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	b2da      	uxtb	r2, r3
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10b      	bne.n	800a3c0 <prvProcessReceivedCommands+0x160>
    __asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	617b      	str	r3, [r7, #20]
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	e7fd      	b.n	800a3bc <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	18d1      	adds	r1, r2, r3
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	69fa      	ldr	r2, [r7, #28]
 800a3cc:	6a38      	ldr	r0, [r7, #32]
 800a3ce:	f7ff ff05 	bl	800a1dc <prvInsertTimerInActiveList>
                        break;
 800a3d2:	e017      	b.n	800a404 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d103      	bne.n	800a3ea <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 800a3e2:	6a38      	ldr	r0, [r7, #32]
 800a3e4:	f000 fc0c 	bl	800ac00 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a3e8:	e00c      	b.n	800a404 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 800a3fc:	e002      	b.n	800a404 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a3fe:	bf00      	nop
 800a400:	e000      	b.n	800a404 <prvProcessReceivedCommands+0x1a4>
                        break;
 800a402:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800a404:	4b07      	ldr	r3, [pc, #28]	@ (800a424 <prvProcessReceivedCommands+0x1c4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	1d39      	adds	r1, r7, #4
 800a40a:	2200      	movs	r2, #0
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe f951 	bl	80086b4 <xQueueReceive>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f47f af2d 	bne.w	800a274 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
 800a41e:	3728      	adds	r7, #40	@ 0x28
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	20005258 	.word	0x20005258

0800a428 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a42e:	e009      	b.n	800a444 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a430:	4b0e      	ldr	r3, [pc, #56]	@ (800a46c <prvSwitchTimerLists+0x44>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a43a:	f04f 31ff 	mov.w	r1, #4294967295
 800a43e:	6838      	ldr	r0, [r7, #0]
 800a440:	f7ff fdf6 	bl	800a030 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a444:	4b09      	ldr	r3, [pc, #36]	@ (800a46c <prvSwitchTimerLists+0x44>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f0      	bne.n	800a430 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a44e:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <prvSwitchTimerLists+0x44>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a454:	4b06      	ldr	r3, [pc, #24]	@ (800a470 <prvSwitchTimerLists+0x48>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a04      	ldr	r2, [pc, #16]	@ (800a46c <prvSwitchTimerLists+0x44>)
 800a45a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a45c:	4a04      	ldr	r2, [pc, #16]	@ (800a470 <prvSwitchTimerLists+0x48>)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6013      	str	r3, [r2, #0]
    }
 800a462:	bf00      	nop
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20005250 	.word	0x20005250
 800a470:	20005254 	.word	0x20005254

0800a474 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a47a:	f000 f9ab 	bl	800a7d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a47e:	4b10      	ldr	r3, [pc, #64]	@ (800a4c0 <prvCheckForValidListAndQueue+0x4c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d116      	bne.n	800a4b4 <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 800a486:	480f      	ldr	r0, [pc, #60]	@ (800a4c4 <prvCheckForValidListAndQueue+0x50>)
 800a488:	f7fd fdf8 	bl	800807c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a48c:	480e      	ldr	r0, [pc, #56]	@ (800a4c8 <prvCheckForValidListAndQueue+0x54>)
 800a48e:	f7fd fdf5 	bl	800807c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a492:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <prvCheckForValidListAndQueue+0x58>)
 800a494:	4a0b      	ldr	r2, [pc, #44]	@ (800a4c4 <prvCheckForValidListAndQueue+0x50>)
 800a496:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a498:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d0 <prvCheckForValidListAndQueue+0x5c>)
 800a49a:	4a0b      	ldr	r2, [pc, #44]	@ (800a4c8 <prvCheckForValidListAndQueue+0x54>)
 800a49c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d4 <prvCheckForValidListAndQueue+0x60>)
 800a4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d8 <prvCheckForValidListAndQueue+0x64>)
 800a4a6:	2110      	movs	r1, #16
 800a4a8:	2014      	movs	r0, #20
 800a4aa:	f7fd ff2d 	bl	8008308 <xQueueGenericCreateStatic>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	4a03      	ldr	r2, [pc, #12]	@ (800a4c0 <prvCheckForValidListAndQueue+0x4c>)
 800a4b2:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a4b4:	f000 f9c0 	bl	800a838 <vPortExitCritical>
    }
 800a4b8:	bf00      	nop
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20005258 	.word	0x20005258
 800a4c4:	20005228 	.word	0x20005228
 800a4c8:	2000523c 	.word	0x2000523c
 800a4cc:	20005250 	.word	0x20005250
 800a4d0:	20005254 	.word	0x20005254
 800a4d4:	200053a4 	.word	0x200053a4
 800a4d8:	20005264 	.word	0x20005264

0800a4dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3b04      	subs	r3, #4
 800a4ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3b04      	subs	r3, #4
 800a4fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 0201 	bic.w	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b04      	subs	r3, #4
 800a50a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a50c:	4a0c      	ldr	r2, [pc, #48]	@ (800a540 <pxPortInitialiseStack+0x64>)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3b14      	subs	r3, #20
 800a516:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3b04      	subs	r3, #4
 800a522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f06f 0202 	mvn.w	r2, #2
 800a52a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3b20      	subs	r3, #32
 800a530:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a532:	68fb      	ldr	r3, [r7, #12]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	0800a545 	.word	0x0800a545

0800a544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a54e:	4b13      	ldr	r3, [pc, #76]	@ (800a59c <prvTaskExitError+0x58>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d00b      	beq.n	800a570 <prvTaskExitError+0x2c>
    __asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60fb      	str	r3, [r7, #12]
}
 800a56a:	bf00      	nop
 800a56c:	bf00      	nop
 800a56e:	e7fd      	b.n	800a56c <prvTaskExitError+0x28>
    __asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60bb      	str	r3, [r7, #8]
}
 800a582:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a584:	bf00      	nop
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0fc      	beq.n	800a586 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000010 	.word	0x20000010

0800a5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a5a0:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <pxCurrentTCBConst2>)
 800a5a2:	6819      	ldr	r1, [r3, #0]
 800a5a4:	6808      	ldr	r0, [r1, #0]
 800a5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	f380 8809 	msr	PSP, r0
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f380 8811 	msr	BASEPRI, r0
 800a5ba:	4770      	bx	lr
 800a5bc:	f3af 8000 	nop.w

0800a5c0 <pxCurrentTCBConst2>:
 800a5c0:	20004f08 	.word	0x20004f08
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop

0800a5c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a5c8:	4808      	ldr	r0, [pc, #32]	@ (800a5ec <prvPortStartFirstTask+0x24>)
 800a5ca:	6800      	ldr	r0, [r0, #0]
 800a5cc:	6800      	ldr	r0, [r0, #0]
 800a5ce:	f380 8808 	msr	MSP, r0
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8814 	msr	CONTROL, r0
 800a5da:	b662      	cpsie	i
 800a5dc:	b661      	cpsie	f
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	df00      	svc	0
 800a5e8:	bf00      	nop
 800a5ea:	0000      	.short	0x0000
 800a5ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop

0800a5f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08c      	sub	sp, #48	@ 0x30
 800a5f8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5fa:	4b69      	ldr	r3, [pc, #420]	@ (800a7a0 <xPortStartScheduler+0x1ac>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a69      	ldr	r2, [pc, #420]	@ (800a7a4 <xPortStartScheduler+0x1b0>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d10b      	bne.n	800a61c <xPortStartScheduler+0x28>
    __asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	623b      	str	r3, [r7, #32]
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	e7fd      	b.n	800a618 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a61c:	4b60      	ldr	r3, [pc, #384]	@ (800a7a0 <xPortStartScheduler+0x1ac>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a61      	ldr	r2, [pc, #388]	@ (800a7a8 <xPortStartScheduler+0x1b4>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d10b      	bne.n	800a63e <xPortStartScheduler+0x4a>
    __asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800a63e:	4b5b      	ldr	r3, [pc, #364]	@ (800a7ac <xPortStartScheduler+0x1b8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800a644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a646:	332c      	adds	r3, #44	@ 0x2c
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a59      	ldr	r2, [pc, #356]	@ (800a7b0 <xPortStartScheduler+0x1bc>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d00b      	beq.n	800a668 <xPortStartScheduler+0x74>
    __asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	61fb      	str	r3, [r7, #28]
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800a668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66a:	3338      	adds	r3, #56	@ 0x38
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a51      	ldr	r2, [pc, #324]	@ (800a7b4 <xPortStartScheduler+0x1c0>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d00b      	beq.n	800a68c <xPortStartScheduler+0x98>
    __asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	61bb      	str	r3, [r7, #24]
}
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	e7fd      	b.n	800a688 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a690:	4b49      	ldr	r3, [pc, #292]	@ (800a7b8 <xPortStartScheduler+0x1c4>)
 800a692:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	22ff      	movs	r2, #255	@ 0xff
 800a6a0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6aa:	79fb      	ldrb	r3, [r7, #7]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	4b41      	ldr	r3, [pc, #260]	@ (800a7bc <xPortStartScheduler+0x1c8>)
 800a6b6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800a6b8:	4b40      	ldr	r3, [pc, #256]	@ (800a7bc <xPortStartScheduler+0x1c8>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10b      	bne.n	800a6d8 <xPortStartScheduler+0xe4>
    __asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	617b      	str	r3, [r7, #20]
}
 800a6d2:	bf00      	nop
 800a6d4:	bf00      	nop
 800a6d6:	e7fd      	b.n	800a6d4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800a6d8:	79fb      	ldrb	r3, [r7, #7]
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	43db      	mvns	r3, r3
 800a6de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d013      	beq.n	800a70e <xPortStartScheduler+0x11a>
    __asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	613b      	str	r3, [r7, #16]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	3301      	adds	r3, #1
 800a702:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a716:	2b80      	cmp	r3, #128	@ 0x80
 800a718:	d0f1      	beq.n	800a6fe <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d103      	bne.n	800a728 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800a720:	4b27      	ldr	r3, [pc, #156]	@ (800a7c0 <xPortStartScheduler+0x1cc>)
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	e004      	b.n	800a732 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f1c3 0307 	rsb	r3, r3, #7
 800a72e:	4a24      	ldr	r2, [pc, #144]	@ (800a7c0 <xPortStartScheduler+0x1cc>)
 800a730:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a732:	4b23      	ldr	r3, [pc, #140]	@ (800a7c0 <xPortStartScheduler+0x1cc>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	021b      	lsls	r3, r3, #8
 800a738:	4a21      	ldr	r2, [pc, #132]	@ (800a7c0 <xPortStartScheduler+0x1cc>)
 800a73a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a73c:	4b20      	ldr	r3, [pc, #128]	@ (800a7c0 <xPortStartScheduler+0x1cc>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a744:	4a1e      	ldr	r2, [pc, #120]	@ (800a7c0 <xPortStartScheduler+0x1cc>)
 800a746:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a750:	4b1c      	ldr	r3, [pc, #112]	@ (800a7c4 <xPortStartScheduler+0x1d0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a1b      	ldr	r2, [pc, #108]	@ (800a7c4 <xPortStartScheduler+0x1d0>)
 800a756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a75a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a75c:	4b19      	ldr	r3, [pc, #100]	@ (800a7c4 <xPortStartScheduler+0x1d0>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a18      	ldr	r2, [pc, #96]	@ (800a7c4 <xPortStartScheduler+0x1d0>)
 800a762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a766:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800a768:	4b17      	ldr	r3, [pc, #92]	@ (800a7c8 <xPortStartScheduler+0x1d4>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a76e:	f000 f8e5 	bl	800a93c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a772:	4b16      	ldr	r3, [pc, #88]	@ (800a7cc <xPortStartScheduler+0x1d8>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800a778:	f000 f904 	bl	800a984 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a77c:	4b14      	ldr	r3, [pc, #80]	@ (800a7d0 <xPortStartScheduler+0x1dc>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a13      	ldr	r2, [pc, #76]	@ (800a7d0 <xPortStartScheduler+0x1dc>)
 800a782:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a786:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a788:	f7ff ff1e 	bl	800a5c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a78c:	f7fe ff88 	bl	80096a0 <vTaskSwitchContext>
    prvTaskExitError();
 800a790:	f7ff fed8 	bl	800a544 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3730      	adds	r7, #48	@ 0x30
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	e000ed00 	.word	0xe000ed00
 800a7a4:	410fc271 	.word	0x410fc271
 800a7a8:	410fc270 	.word	0x410fc270
 800a7ac:	e000ed08 	.word	0xe000ed08
 800a7b0:	0800a5a1 	.word	0x0800a5a1
 800a7b4:	0800a891 	.word	0x0800a891
 800a7b8:	e000e400 	.word	0xe000e400
 800a7bc:	200053ec 	.word	0x200053ec
 800a7c0:	200053f0 	.word	0x200053f0
 800a7c4:	e000ed20 	.word	0xe000ed20
 800a7c8:	e000ed1c 	.word	0xe000ed1c
 800a7cc:	20000010 	.word	0x20000010
 800a7d0:	e000ef34 	.word	0xe000ef34

0800a7d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
    __asm volatile
 800a7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	607b      	str	r3, [r7, #4]
}
 800a7ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a7ee:	4b10      	ldr	r3, [pc, #64]	@ (800a830 <vPortEnterCritical+0x5c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a830 <vPortEnterCritical+0x5c>)
 800a7f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a830 <vPortEnterCritical+0x5c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d110      	bne.n	800a822 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a800:	4b0c      	ldr	r3, [pc, #48]	@ (800a834 <vPortEnterCritical+0x60>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00b      	beq.n	800a822 <vPortEnterCritical+0x4e>
    __asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	603b      	str	r3, [r7, #0]
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	e7fd      	b.n	800a81e <vPortEnterCritical+0x4a>
    }
}
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	20000010 	.word	0x20000010
 800a834:	e000ed04 	.word	0xe000ed04

0800a838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a83e:	4b12      	ldr	r3, [pc, #72]	@ (800a888 <vPortExitCritical+0x50>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10b      	bne.n	800a85e <vPortExitCritical+0x26>
    __asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	607b      	str	r3, [r7, #4]
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	e7fd      	b.n	800a85a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a85e:	4b0a      	ldr	r3, [pc, #40]	@ (800a888 <vPortExitCritical+0x50>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3b01      	subs	r3, #1
 800a864:	4a08      	ldr	r2, [pc, #32]	@ (800a888 <vPortExitCritical+0x50>)
 800a866:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a868:	4b07      	ldr	r3, [pc, #28]	@ (800a888 <vPortExitCritical+0x50>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d105      	bne.n	800a87c <vPortExitCritical+0x44>
 800a870:	2300      	movs	r3, #0
 800a872:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800a87a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20000010 	.word	0x20000010
 800a88c:	00000000 	.word	0x00000000

0800a890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a890:	f3ef 8009 	mrs	r0, PSP
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	4b15      	ldr	r3, [pc, #84]	@ (800a8f0 <pxCurrentTCBConst>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	f01e 0f10 	tst.w	lr, #16
 800a8a0:	bf08      	it	eq
 800a8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8aa:	6010      	str	r0, [r2, #0]
 800a8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8b4:	f380 8811 	msr	BASEPRI, r0
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f7fe feee 	bl	80096a0 <vTaskSwitchContext>
 800a8c4:	f04f 0000 	mov.w	r0, #0
 800a8c8:	f380 8811 	msr	BASEPRI, r0
 800a8cc:	bc09      	pop	{r0, r3}
 800a8ce:	6819      	ldr	r1, [r3, #0]
 800a8d0:	6808      	ldr	r0, [r1, #0]
 800a8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d6:	f01e 0f10 	tst.w	lr, #16
 800a8da:	bf08      	it	eq
 800a8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8e0:	f380 8809 	msr	PSP, r0
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	f3af 8000 	nop.w

0800a8f0 <pxCurrentTCBConst>:
 800a8f0:	20004f08 	.word	0x20004f08
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop

0800a8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
    __asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	607b      	str	r3, [r7, #4]
}
 800a910:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a912:	f7fe fdab 	bl	800946c <xTaskIncrementTick>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a91c:	4b06      	ldr	r3, [pc, #24]	@ (800a938 <SysTick_Handler+0x40>)
 800a91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	2300      	movs	r3, #0
 800a926:	603b      	str	r3, [r7, #0]
    __asm volatile
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f383 8811 	msr	BASEPRI, r3
}
 800a92e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800a930:	bf00      	nop
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a940:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <vPortSetupTimerInterrupt+0x34>)
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a946:	4b0b      	ldr	r3, [pc, #44]	@ (800a974 <vPortSetupTimerInterrupt+0x38>)
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a94c:	4b0a      	ldr	r3, [pc, #40]	@ (800a978 <vPortSetupTimerInterrupt+0x3c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a0a      	ldr	r2, [pc, #40]	@ (800a97c <vPortSetupTimerInterrupt+0x40>)
 800a952:	fba2 2303 	umull	r2, r3, r2, r3
 800a956:	099b      	lsrs	r3, r3, #6
 800a958:	4a09      	ldr	r2, [pc, #36]	@ (800a980 <vPortSetupTimerInterrupt+0x44>)
 800a95a:	3b01      	subs	r3, #1
 800a95c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a95e:	4b04      	ldr	r3, [pc, #16]	@ (800a970 <vPortSetupTimerInterrupt+0x34>)
 800a960:	2207      	movs	r2, #7
 800a962:	601a      	str	r2, [r3, #0]
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	e000e010 	.word	0xe000e010
 800a974:	e000e018 	.word	0xe000e018
 800a978:	20000004 	.word	0x20000004
 800a97c:	10624dd3 	.word	0x10624dd3
 800a980:	e000e014 	.word	0xe000e014

0800a984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800a984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a994 <vPortEnableVFP+0x10>
 800a988:	6801      	ldr	r1, [r0, #0]
 800a98a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a98e:	6001      	str	r1, [r0, #0]
 800a990:	4770      	bx	lr
 800a992:	0000      	.short	0x0000
 800a994:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop

0800a99c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08e      	sub	sp, #56	@ 0x38
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d022      	beq.n	800a9f4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800a9ae:	2308      	movs	r3, #8
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d81b      	bhi.n	800a9f0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f003 0307 	and.w	r3, r3, #7
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d014      	beq.n	800a9f4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f003 0307 	and.w	r3, r3, #7
 800a9d0:	f1c3 0308 	rsb	r3, r3, #8
 800a9d4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800a9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d804      	bhi.n	800a9ea <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e4:	4413      	add	r3, r2
 800a9e6:	607b      	str	r3, [r7, #4]
 800a9e8:	e004      	b.n	800a9f4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	607b      	str	r3, [r7, #4]
 800a9ee:	e001      	b.n	800a9f4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800a9f4:	f7fe fc14 	bl	8009220 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800a9f8:	4b7a      	ldr	r3, [pc, #488]	@ (800abe4 <pvPortMalloc+0x248>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 800aa00:	f000 f974 	bl	800acec <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f2c0 80d3 	blt.w	800abb2 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 80cf 	beq.w	800abb2 <pvPortMalloc+0x216>
 800aa14:	4b74      	ldr	r3, [pc, #464]	@ (800abe8 <pvPortMalloc+0x24c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	f200 80c9 	bhi.w	800abb2 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800aa20:	4b72      	ldr	r3, [pc, #456]	@ (800abec <pvPortMalloc+0x250>)
 800aa22:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800aa24:	4b71      	ldr	r3, [pc, #452]	@ (800abec <pvPortMalloc+0x250>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2c:	4a70      	ldr	r2, [pc, #448]	@ (800abf0 <pvPortMalloc+0x254>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d305      	bcc.n	800aa3e <pvPortMalloc+0xa2>
 800aa32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa34:	4a6f      	ldr	r2, [pc, #444]	@ (800abf4 <pvPortMalloc+0x258>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d801      	bhi.n	800aa3e <pvPortMalloc+0xa2>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e000      	b.n	800aa40 <pvPortMalloc+0xa4>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d129      	bne.n	800aa98 <pvPortMalloc+0xfc>
    __asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	623b      	str	r3, [r7, #32]
}
 800aa56:	bf00      	nop
 800aa58:	bf00      	nop
 800aa5a:	e7fd      	b.n	800aa58 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800aa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800aa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa68:	4a61      	ldr	r2, [pc, #388]	@ (800abf0 <pvPortMalloc+0x254>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d305      	bcc.n	800aa7a <pvPortMalloc+0xde>
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa70:	4a60      	ldr	r2, [pc, #384]	@ (800abf4 <pvPortMalloc+0x258>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d801      	bhi.n	800aa7a <pvPortMalloc+0xde>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e000      	b.n	800aa7c <pvPortMalloc+0xe0>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10b      	bne.n	800aa98 <pvPortMalloc+0xfc>
    __asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	61fb      	str	r3, [r7, #28]
}
 800aa92:	bf00      	nop
 800aa94:	bf00      	nop
 800aa96:	e7fd      	b.n	800aa94 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800aa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d903      	bls.n	800aaaa <pvPortMalloc+0x10e>
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1d8      	bne.n	800aa5c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800aaaa:	4b4e      	ldr	r3, [pc, #312]	@ (800abe4 <pvPortMalloc+0x248>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d07e      	beq.n	800abb2 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800aab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2208      	movs	r2, #8
 800aaba:	4413      	add	r3, r2
 800aabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800aabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac0:	4a4b      	ldr	r2, [pc, #300]	@ (800abf0 <pvPortMalloc+0x254>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d305      	bcc.n	800aad2 <pvPortMalloc+0x136>
 800aac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac8:	4a4a      	ldr	r2, [pc, #296]	@ (800abf4 <pvPortMalloc+0x258>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d801      	bhi.n	800aad2 <pvPortMalloc+0x136>
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <pvPortMalloc+0x138>
 800aad2:	2300      	movs	r3, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10b      	bne.n	800aaf0 <pvPortMalloc+0x154>
    __asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	61bb      	str	r3, [r7, #24]
}
 800aaea:	bf00      	nop
 800aaec:	bf00      	nop
 800aaee:	e7fd      	b.n	800aaec <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d90b      	bls.n	800ab1a <pvPortMalloc+0x17e>
    __asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	617b      	str	r3, [r7, #20]
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop
 800ab18:	e7fd      	b.n	800ab16 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	1ad2      	subs	r2, r2, r3
 800ab22:	2308      	movs	r3, #8
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d924      	bls.n	800ab74 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4413      	add	r3, r2
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <pvPortMalloc+0x1b8>
    __asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	613b      	str	r3, [r7, #16]
}
 800ab4e:	bf00      	nop
 800ab50:	bf00      	nop
 800ab52:	e7fd      	b.n	800ab50 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	1ad2      	subs	r2, r2, r3
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ab60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800ab66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab72:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab74:	4b1c      	ldr	r3, [pc, #112]	@ (800abe8 <pvPortMalloc+0x24c>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	4a1a      	ldr	r2, [pc, #104]	@ (800abe8 <pvPortMalloc+0x24c>)
 800ab80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab82:	4b19      	ldr	r3, [pc, #100]	@ (800abe8 <pvPortMalloc+0x24c>)
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	4b1c      	ldr	r3, [pc, #112]	@ (800abf8 <pvPortMalloc+0x25c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d203      	bcs.n	800ab96 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab8e:	4b16      	ldr	r3, [pc, #88]	@ (800abe8 <pvPortMalloc+0x24c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a19      	ldr	r2, [pc, #100]	@ (800abf8 <pvPortMalloc+0x25c>)
 800ab94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800ab96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800aba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800aba8:	4b14      	ldr	r3, [pc, #80]	@ (800abfc <pvPortMalloc+0x260>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	4a13      	ldr	r2, [pc, #76]	@ (800abfc <pvPortMalloc+0x260>)
 800abb0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800abb2:	f7fe fb43 	bl	800923c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00b      	beq.n	800abd8 <pvPortMalloc+0x23c>
    __asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60fb      	str	r3, [r7, #12]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <pvPortMalloc+0x238>
    return pvReturn;
 800abd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3738      	adds	r7, #56	@ 0x38
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	200107fc 	.word	0x200107fc
 800abe8:	20010800 	.word	0x20010800
 800abec:	200107f4 	.word	0x200107f4
 800abf0:	200053f4 	.word	0x200053f4
 800abf4:	200107f3 	.word	0x200107f3
 800abf8:	20010804 	.word	0x20010804
 800abfc:	20010808 	.word	0x20010808

0800ac00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d060      	beq.n	800acd4 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ac12:	2308      	movs	r3, #8
 800ac14:	425b      	negs	r3, r3
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	4413      	add	r3, r2
 800ac1a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	4a2e      	ldr	r2, [pc, #184]	@ (800acdc <vPortFree+0xdc>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d305      	bcc.n	800ac34 <vPortFree+0x34>
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	4a2d      	ldr	r2, [pc, #180]	@ (800ace0 <vPortFree+0xe0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d801      	bhi.n	800ac34 <vPortFree+0x34>
 800ac30:	2301      	movs	r3, #1
 800ac32:	e000      	b.n	800ac36 <vPortFree+0x36>
 800ac34:	2300      	movs	r3, #0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <vPortFree+0x52>
    __asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	617b      	str	r3, [r7, #20]
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	e7fd      	b.n	800ac4e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	db0b      	blt.n	800ac72 <vPortFree+0x72>
    __asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	613b      	str	r3, [r7, #16]
}
 800ac6c:	bf00      	nop
 800ac6e:	bf00      	nop
 800ac70:	e7fd      	b.n	800ac6e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00b      	beq.n	800ac92 <vPortFree+0x92>
    __asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	60fb      	str	r3, [r7, #12]
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	e7fd      	b.n	800ac8e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	da1c      	bge.n	800acd4 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d118      	bne.n	800acd4 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800acae:	f7fe fab7 	bl	8009220 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ace4 <vPortFree+0xe4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4413      	add	r3, r2
 800acbc:	4a09      	ldr	r2, [pc, #36]	@ (800ace4 <vPortFree+0xe4>)
 800acbe:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acc0:	69b8      	ldr	r0, [r7, #24]
 800acc2:	f000 f86d 	bl	800ada0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800acc6:	4b08      	ldr	r3, [pc, #32]	@ (800ace8 <vPortFree+0xe8>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	4a06      	ldr	r2, [pc, #24]	@ (800ace8 <vPortFree+0xe8>)
 800acce:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800acd0:	f7fe fab4 	bl	800923c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800acd4:	bf00      	nop
 800acd6:	3720      	adds	r7, #32
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	200053f4 	.word	0x200053f4
 800ace0:	200107f3 	.word	0x200107f3
 800ace4:	20010800 	.word	0x20010800
 800ace8:	2001080c 	.word	0x2001080c

0800acec <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acf2:	f44f 4334 	mov.w	r3, #46080	@ 0xb400
 800acf6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800acf8:	4b24      	ldr	r3, [pc, #144]	@ (800ad8c <prvHeapInit+0xa0>)
 800acfa:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00c      	beq.n	800ad20 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3307      	adds	r3, #7
 800ad0a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0307 	bic.w	r3, r3, #7
 800ad12:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ad8c <prvHeapInit+0xa0>)
 800ad1c:	4413      	add	r3, r2
 800ad1e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a1b      	ldr	r2, [pc, #108]	@ (800ad90 <prvHeapInit+0xa4>)
 800ad24:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ad26:	4b1a      	ldr	r3, [pc, #104]	@ (800ad90 <prvHeapInit+0xa4>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4413      	add	r3, r2
 800ad32:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800ad34:	2208      	movs	r2, #8
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f023 0307 	bic.w	r3, r3, #7
 800ad42:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a13      	ldr	r2, [pc, #76]	@ (800ad94 <prvHeapInit+0xa8>)
 800ad48:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ad4a:	4b12      	ldr	r3, [pc, #72]	@ (800ad94 <prvHeapInit+0xa8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800ad52:	4b10      	ldr	r3, [pc, #64]	@ (800ad94 <prvHeapInit+0xa8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	1ad2      	subs	r2, r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800ad68:	4b0a      	ldr	r3, [pc, #40]	@ (800ad94 <prvHeapInit+0xa8>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	4a08      	ldr	r2, [pc, #32]	@ (800ad98 <prvHeapInit+0xac>)
 800ad76:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4a07      	ldr	r2, [pc, #28]	@ (800ad9c <prvHeapInit+0xb0>)
 800ad7e:	6013      	str	r3, [r2, #0]
}
 800ad80:	bf00      	nop
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	200053f4 	.word	0x200053f4
 800ad90:	200107f4 	.word	0x200107f4
 800ad94:	200107fc 	.word	0x200107fc
 800ad98:	20010804 	.word	0x20010804
 800ad9c:	20010800 	.word	0x20010800

0800ada0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800ada8:	4b36      	ldr	r3, [pc, #216]	@ (800ae84 <prvInsertBlockIntoFreeList+0xe4>)
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e002      	b.n	800adb4 <prvInsertBlockIntoFreeList+0x14>
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d8f7      	bhi.n	800adae <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	4a30      	ldr	r2, [pc, #192]	@ (800ae84 <prvInsertBlockIntoFreeList+0xe4>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d018      	beq.n	800adf8 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ae88 <prvInsertBlockIntoFreeList+0xe8>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d305      	bcc.n	800adda <prvInsertBlockIntoFreeList+0x3a>
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	4a2e      	ldr	r2, [pc, #184]	@ (800ae8c <prvInsertBlockIntoFreeList+0xec>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d801      	bhi.n	800adda <prvInsertBlockIntoFreeList+0x3a>
 800add6:	2301      	movs	r3, #1
 800add8:	e000      	b.n	800addc <prvInsertBlockIntoFreeList+0x3c>
 800adda:	2300      	movs	r3, #0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10b      	bne.n	800adf8 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	60fb      	str	r3, [r7, #12]
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	e7fd      	b.n	800adf4 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4413      	add	r3, r2
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d108      	bne.n	800ae1c <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	441a      	add	r2, r3
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	441a      	add	r2, r3
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d118      	bne.n	800ae62 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	4b16      	ldr	r3, [pc, #88]	@ (800ae90 <prvInsertBlockIntoFreeList+0xf0>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d00d      	beq.n	800ae58 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	441a      	add	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	e008      	b.n	800ae6a <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800ae58:	4b0d      	ldr	r3, [pc, #52]	@ (800ae90 <prvInsertBlockIntoFreeList+0xf0>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	e003      	b.n	800ae6a <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d002      	beq.n	800ae78 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	200107f4 	.word	0x200107f4
 800ae88:	200053f4 	.word	0x200053f4
 800ae8c:	200107f3 	.word	0x200107f3
 800ae90:	200107fc 	.word	0x200107fc

0800ae94 <cbor_encoder_init>:
 * Initializes a CborEncoder structure \a encoder by pointing it to buffer \a
 * buffer of size \a size. The \a flags field is currently unused and must be
 * zero.
 */
void cbor_encoder_init(CborEncoder *encoder, uint8_t *buffer, size_t size, int flags)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
    encoder->data.ptr = buffer;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	601a      	str	r2, [r3, #0]
    encoder->end = buffer + size;
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	441a      	add	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	605a      	str	r2, [r3, #4]
    encoder->remaining = 2;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	609a      	str	r2, [r3, #8]
    encoder->flags = flags;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	60da      	str	r2, [r3, #12]
}
 800aebe:	bf00      	nop
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <isOomError>:
 * valid error, we KNOW this to be true.  Thus, this function now returns just 'true',
 * but if in the future, any function starts returning a non-OOM error, this will need
 * to be changed to the test.  At the moment, this is done to prevent more branches
 * being created in the tinycbor output */
static inline bool isOomError(CborError err)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
    (void) err;
    return true;
 800aed2:	2301      	movs	r3, #1
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <put64>:
    uint32_t v_be = cbor_htonl(v);
    memcpy(where, &v_be, sizeof(v_be));
}

static inline void put64(void *where, uint64_t v)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t v_be = cbor_htonll(v);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	ba19      	rev	r1, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	ba18      	rev	r0, r3
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    memcpy(where, &v_be, sizeof(v_be));
 800aefc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	600a      	str	r2, [r1, #0]
 800af04:	604b      	str	r3, [r1, #4]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <would_overflow>:

static inline bool would_overflow(CborEncoder *encoder, size_t len)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
    ptrdiff_t remaining = (ptrdiff_t)encoder->end;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	60fb      	str	r3, [r7, #12]
    remaining -= remaining ? (ptrdiff_t)encoder->data.ptr : encoder->data.bytes_needed;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <would_overflow+0x1c>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	e001      	b.n	800af32 <would_overflow+0x20>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	60fb      	str	r3, [r7, #12]
    remaining -= (ptrdiff_t)len;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	60fb      	str	r3, [r7, #12]
    return unlikely(remaining < 0);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	0fdb      	lsrs	r3, r3, #31
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	bf14      	ite	ne
 800af4a:	2301      	movne	r3, #1
 800af4c:	2300      	moveq	r3, #0
 800af4e:	b2db      	uxtb	r3, r3
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <advance_ptr>:

static inline void advance_ptr(CborEncoder *encoder, size_t n)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
    if (encoder->end)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d006      	beq.n	800af7c <advance_ptr+0x20>
        encoder->data.ptr += n;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	441a      	add	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	601a      	str	r2, [r3, #0]
    else
        encoder->data.bytes_needed += n;
}
 800af7a:	e007      	b.n	800af8c <advance_ptr+0x30>
        encoder->data.bytes_needed += n;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	4413      	add	r3, r2
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <append_to_buffer>:

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
    if (would_overflow(encoder, len)) {
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f7ff ffb3 	bl	800af12 <would_overflow>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d019      	beq.n	800afe6 <append_to_buffer+0x4e>
        if (encoder->end != NULL) {
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00e      	beq.n	800afd8 <append_to_buffer+0x40>
            len -= encoder->end - encoder->data.ptr;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	461a      	mov	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	1a9b      	subs	r3, r3, r2
 800afca:	607b      	str	r3, [r7, #4]
            encoder->end = NULL;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	605a      	str	r2, [r3, #4]
            encoder->data.bytes_needed = 0;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]
        }

        advance_ptr(encoder, len);
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff ffbe 	bl	800af5c <advance_ptr>
        return CborErrorOutOfMemory;
 800afe0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afe4:	e00d      	b.n	800b002 <append_to_buffer+0x6a>
    }

    memcpy(encoder->data.ptr, data, len);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	4618      	mov	r0, r3
 800aff0:	f006 f947 	bl	8011282 <memcpy>
    encoder->data.ptr += len;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	441a      	add	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]
    return CborNoError;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <append_byte_to_buffer>:

static inline CborError append_byte_to_buffer(CborEncoder *encoder, uint8_t byte)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
    return append_to_buffer(encoder, &byte, 1);
 800b016:	1cfb      	adds	r3, r7, #3
 800b018:	2201      	movs	r2, #1
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff ffbb 	bl	800af98 <append_to_buffer>
 800b022:	4603      	mov	r3, r0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <encode_number_no_update>:

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08c      	sub	sp, #48	@ 0x30
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	e9c7 2300 	strd	r2, r3, [r7]
     * We could just write at the beginning of buf but append_to_buffer
     * only the necessary bytes.
     * Since it has to be big endian, do it the other way around:
     * write from the end. */
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
 800b038:	f107 0310 	add.w	r3, r7, #16
 800b03c:	3310      	adds	r3, #16
 800b03e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *bufstart = bufend - 1;
 800b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b042:	3b01      	subs	r3, #1
 800b044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */
 800b046:	f107 0110 	add.w	r1, r7, #16
 800b04a:	3108      	adds	r1, #8
 800b04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b050:	4608      	mov	r0, r1
 800b052:	f7ff ff45 	bl	800aee0 <put64>

    if (ui < Value8Bit) {
 800b056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05a:	2a18      	cmp	r2, #24
 800b05c:	f173 0300 	sbcs.w	r3, r3, #0
 800b060:	d208      	bcs.n	800b074 <encode_number_no_update+0x48>
        *bufstart += shiftedMajorType;
 800b062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b06a:	4413      	add	r3, r2
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	e036      	b.n	800b0e2 <encode_number_no_update+0xb6>
    } else {
        uint8_t more = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (ui > 0xffU)
 800b07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b07e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800b082:	f173 0300 	sbcs.w	r3, r3, #0
 800b086:	d304      	bcc.n	800b092 <encode_number_no_update+0x66>
            ++more;
 800b088:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b08c:	3301      	adds	r3, #1
 800b08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (ui > 0xffffU)
 800b092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b096:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b09a:	f173 0300 	sbcs.w	r3, r3, #0
 800b09e:	d304      	bcc.n	800b0aa <encode_number_no_update+0x7e>
            ++more;
 800b0a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (ui > 0xffffffffU)
 800b0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d304      	bcc.n	800b0bc <encode_number_no_update+0x90>
            ++more;
 800b0b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bufstart -= (size_t)1 << more;
 800b0bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c6:	425b      	negs	r3, r3
 800b0c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0ca:	4413      	add	r3, r2
 800b0cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        *bufstart = shiftedMajorType + Value8Bit + more;
 800b0ce:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b0d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0d6:	4413      	add	r3, r2
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	3318      	adds	r3, #24
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e0:	701a      	strb	r2, [r3, #0]
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
 800b0e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff ff53 	bl	800af98 <append_to_buffer>
 800b0f2:	4603      	mov	r3, r0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3730      	adds	r7, #48	@ 0x30
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <saturated_decrement>:

static inline void saturated_decrement(CborEncoder *encoder)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
    if (encoder->remaining)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d004      	beq.n	800b116 <saturated_decrement+0x1a>
        --encoder->remaining;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	1e5a      	subs	r2, r3, #1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	609a      	str	r2, [r3, #8]
}
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af02      	add	r7, sp, #8
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	e9c7 2300 	strd	r2, r3, [r7]
    saturated_decrement(encoder);
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff ffe4 	bl	800b0fc <saturated_decrement>
    return encode_number_no_update(encoder, ui, shiftedMajorType);
 800b134:	7e3b      	ldrb	r3, [r7, #24]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f7ff ff75 	bl	800b02c <encode_number_no_update>
 800b142:	4603      	mov	r3, r0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <cbor_encode_int>:
 * \a encoder.
 *
 * \sa cbor_encode_negative_int, cbor_encode_uint
 */
CborError cbor_encode_int(CborEncoder *encoder, int64_t value)
{
 800b14c:	b5b0      	push	{r4, r5, r7, lr}
 800b14e:	b08a      	sub	sp, #40	@ 0x28
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	e9c7 2300 	strd	r2, r3, [r7]
    /* adapted from code in RFC 7049 appendix C (pseudocode) */
    uint64_t ui = value >> 63;              /* extend sign to whole length */
 800b158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	17ca      	asrs	r2, r1, #31
 800b166:	17cb      	asrs	r3, r1, #31
 800b168:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint8_t majorType = ui & 0x20;          /* extract major type */
 800b16c:	7e3b      	ldrb	r3, [r7, #24]
 800b16e:	f003 0320 	and.w	r3, r3, #32
 800b172:	75fb      	strb	r3, [r7, #23]
    ui ^= value;                            /* complement negatives */
 800b174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b178:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b17c:	ea80 0402 	eor.w	r4, r0, r2
 800b180:	ea81 0503 	eor.w	r5, r1, r3
 800b184:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return encode_number(encoder, ui, majorType);
 800b188:	7dfb      	ldrb	r3, [r7, #23]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff ffc6 	bl	800b122 <encode_number>
 800b196:	4603      	mov	r3, r0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3720      	adds	r7, #32
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bdb0      	pop	{r4, r5, r7, pc}

0800b1a0 <encode_string>:
    /* tags don't count towards the number of elements in an array or map */
    return encode_number_no_update(encoder, tag, TagType << MajorTypeShift);
}

static CborError encode_string(CborEncoder *encoder, size_t length, uint8_t shiftedMajorType, const void *string)
{
 800b1a0:	b5b0      	push	{r4, r5, r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	71fb      	strb	r3, [r7, #7]
    CborError err = encode_number(encoder, length, shiftedMajorType);
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	461c      	mov	r4, r3
 800b1b6:	4615      	mov	r5, r2
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	4622      	mov	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff ffae 	bl	800b122 <encode_number>
 800b1c6:	6178      	str	r0, [r7, #20]
    if (err && !isOomError(err))
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <encode_string+0x44>
 800b1ce:	6978      	ldr	r0, [r7, #20]
 800b1d0:	f7ff fe7b 	bl	800aeca <isOomError>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f083 0301 	eor.w	r3, r3, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <encode_string+0x44>
        return err;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	e005      	b.n	800b1f0 <encode_string+0x50>
    return append_to_buffer(encoder, string, length);
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff fed5 	bl	800af98 <append_to_buffer>
 800b1ee:	4603      	mov	r3, r0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bdb0      	pop	{r4, r5, r7, pc}

0800b1f8 <cbor_encode_byte_string>:
 * provided by \a encoder. CBOR byte strings are arbitrary raw data.
 *
 * \sa cbor_encode_text_stringz, cbor_encode_text_string
 */
CborError cbor_encode_byte_string(CborEncoder *encoder, const uint8_t *string, size_t length)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2240      	movs	r2, #64	@ 0x40
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff ffc8 	bl	800b1a0 <encode_string>
 800b210:	4603      	mov	r3, r0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <cbor_encode_text_string>:
 * TinyCBOR makes no verification of correctness.
 *
 * \sa CborError cbor_encode_text_stringz, cbor_encode_byte_string
 */
CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2260      	movs	r2, #96	@ 0x60
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7ff ffb7 	bl	800b1a0 <encode_string>
 800b232:	4603      	mov	r3, r0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
 800b23c:	b5b0      	push	{r4, r5, r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af02      	add	r7, sp, #8
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	70fb      	strb	r3, [r7, #3]
    CborError err;
    container->data.ptr = encoder->data.ptr;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	601a      	str	r2, [r3, #0]
    container->end = encoder->end;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	605a      	str	r2, [r3, #4]
    saturated_decrement(encoder);
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff ff4e 	bl	800b0fc <saturated_decrement>
    container->remaining = length + 1;      /* overflow ok on CborIndefiniteLength */
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	609a      	str	r2, [r3, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	f003 0220 	and.w	r2, r3, #32
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	60da      	str	r2, [r3, #12]

    if (length == CborIndefiniteLength) {
 800b272:	f04f 32ff 	mov.w	r2, #4294967295
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4293      	cmp	r3, r2
 800b27a:	d10e      	bne.n	800b29a <create_container+0x5e>
        container->flags |= CborIteratorFlag_UnknownLength;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f043 0204 	orr.w	r2, r3, #4
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	60da      	str	r2, [r3, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	331f      	adds	r3, #31
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	4619      	mov	r1, r3
 800b290:	68b8      	ldr	r0, [r7, #8]
 800b292:	f7ff feba 	bl	800b00a <append_byte_to_buffer>
 800b296:	6178      	str	r0, [r7, #20]
 800b298:	e016      	b.n	800b2c8 <create_container+0x8c>
    } else {
        if (shiftedMajorType & CborIteratorFlag_ContainerIsMap)
 800b29a:	78fb      	ldrb	r3, [r7, #3]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d005      	beq.n	800b2b0 <create_container+0x74>
            container->remaining += length;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	441a      	add	r2, r3
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	609a      	str	r2, [r3, #8]
        err = encode_number_no_update(container, length, shiftedMajorType);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	461c      	mov	r4, r3
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4622      	mov	r2, r4
 800b2be:	462b      	mov	r3, r5
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f7ff feb3 	bl	800b02c <encode_number_no_update>
 800b2c6:	6178      	str	r0, [r7, #20]
    }
    return err;
 800b2c8:	697b      	ldr	r3, [r7, #20]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bdb0      	pop	{r4, r5, r7, pc}

0800b2d2 <cbor_encoder_create_map>:
 * CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *parentEncoder, CborEncoder *mapEncoder, size_t length)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	607a      	str	r2, [r7, #4]
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
 800b2de:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d005      	beq.n	800b2f4 <cbor_encoder_create_map+0x22>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	da02      	bge.n	800b2f4 <cbor_encoder_create_map+0x22>
        return CborErrorDataTooLarge;
 800b2ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2f2:	e006      	b.n	800b302 <cbor_encoder_create_map+0x30>
    return create_container(parentEncoder, mapEncoder, length, MapType << MajorTypeShift);
 800b2f4:	23a0      	movs	r3, #160	@ 0xa0
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	68b9      	ldr	r1, [r7, #8]
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7ff ff9e 	bl	800b23c <create_container>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <cbor_encoder_close_container>:
 * cbor_encoder_close_container_checked() instead.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *parentEncoder, const CborEncoder *containerEncoder)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
    // synchronise buffer state with that of the container
    parentEncoder->end = containerEncoder->end;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	605a      	str	r2, [r3, #4]
    parentEncoder->data = containerEncoder->data;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	601a      	str	r2, [r3, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f003 0304 	and.w	r3, r3, #4
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <cbor_encoder_close_container+0x32>
        return append_byte_to_buffer(parentEncoder, BreakByte);
 800b330:	21ff      	movs	r1, #255	@ 0xff
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff fe69 	bl	800b00a <append_byte_to_buffer>
 800b338:	4603      	mov	r3, r0
 800b33a:	e015      	b.n	800b368 <cbor_encoder_close_container+0x5e>

    if (containerEncoder->remaining != 1)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d009      	beq.n	800b358 <cbor_encoder_close_container+0x4e>
        return containerEncoder->remaining == 0 ? CborErrorTooManyItems : CborErrorTooFewItems;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <cbor_encoder_close_container+0x48>
 800b34c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b350:	e00a      	b.n	800b368 <cbor_encoder_close_container+0x5e>
 800b352:	f240 3301 	movw	r3, #769	@ 0x301
 800b356:	e007      	b.n	800b368 <cbor_encoder_close_container+0x5e>

    if (!parentEncoder->end)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <cbor_encoder_close_container+0x5c>
        return CborErrorOutOfMemory;    /* keep the state */
 800b360:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b364:	e000      	b.n	800b368 <cbor_encoder_close_container+0x5e>

    return CborNoError;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <cbor_encoder_close_container_checked>:
 * cbor_encoder_close_container_checked() is no longer needed.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container_checked(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
    return cbor_encoder_close_container(encoder, containerEncoder);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff ffc4 	bl	800b30a <cbor_encoder_close_container>
 800b382:	4603      	mov	r3, r0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <cbor_value_at_end>:
CBOR_API CborError cbor_parser_init(const uint8_t *buffer, size_t size, uint32_t flags, CborParser *parser, CborValue *it);

CBOR_API CborError cbor_value_validate_basic(const CborValue *it);

CBOR_INLINE_API bool cbor_value_at_end(const CborValue *it)
{ return it->remaining == 0; }
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bf0c      	ite	eq
 800b39c:	2301      	moveq	r3, #1
 800b39e:	2300      	movne	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <cbor_value_is_container>:
CBOR_INLINE_API const uint8_t *cbor_value_get_next_byte(const CborValue *it)
{ return it->ptr; }
CBOR_API CborError cbor_value_advance_fixed(CborValue *it);
CBOR_API CborError cbor_value_advance(CborValue *it);
CBOR_INLINE_API bool cbor_value_is_container(const CborValue *it)
{ return it->type == CborArrayType || it->type == CborMapType; }
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7b9b      	ldrb	r3, [r3, #14]
 800b3ba:	2b80      	cmp	r3, #128	@ 0x80
 800b3bc:	d003      	beq.n	800b3c6 <cbor_value_is_container+0x18>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7b9b      	ldrb	r3, [r3, #14]
 800b3c2:	2ba0      	cmp	r3, #160	@ 0xa0
 800b3c4:	d101      	bne.n	800b3ca <cbor_value_is_container+0x1c>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e000      	b.n	800b3cc <cbor_value_is_container+0x1e>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <cbor_value_is_length_known>:

CBOR_API CborError cbor_value_get_int64_checked(const CborValue *value, int64_t *result);
CBOR_API CborError cbor_value_get_int_checked(const CborValue *value, int *result);

CBOR_INLINE_API bool cbor_value_is_length_known(const CborValue *value)
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
 800b3de:	b480      	push	{r7}
 800b3e0:	b083      	sub	sp, #12
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7bdb      	ldrb	r3, [r3, #15]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	bf0c      	ite	eq
 800b3f2:	2301      	moveq	r3, #1
 800b3f4:	2300      	movne	r3, #0
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <cbor_value_is_tag>:

/* Tags */
CBOR_INLINE_API bool cbor_value_is_tag(const CborValue *value)
{ return value->type == CborTagType; }
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7b9b      	ldrb	r3, [r3, #14]
 800b410:	2bc0      	cmp	r3, #192	@ 0xc0
 800b412:	bf0c      	ite	eq
 800b414:	2301      	moveq	r3, #1
 800b416:	2300      	movne	r3, #0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <cbor_value_is_byte_string>:
}
CBOR_API CborError cbor_value_skip_tag(CborValue *it);

/* Strings */
CBOR_INLINE_API bool cbor_value_is_byte_string(const CborValue *value)
{ return value->type == CborByteStringType; }
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7b9b      	ldrb	r3, [r3, #14]
 800b432:	2b40      	cmp	r3, #64	@ 0x40
 800b434:	bf0c      	ite	eq
 800b436:	2301      	moveq	r3, #1
 800b438:	2300      	movne	r3, #0
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <cbor_value_is_text_string>:
CBOR_INLINE_API bool cbor_value_is_text_string(const CborValue *value)
{ return value->type == CborTextStringType; }
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	7b9b      	ldrb	r3, [r3, #14]
 800b454:	2b60      	cmp	r3, #96	@ 0x60
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <cbor_value_is_map>:

/* Maps and arrays */
CBOR_INLINE_API bool cbor_value_is_array(const CborValue *value)
{ return value->type == CborArrayType; }
CBOR_INLINE_API bool cbor_value_is_map(const CborValue *value)
{ return value->type == CborMapType; }
 800b46a:	b480      	push	{r7}
 800b46c:	b083      	sub	sp, #12
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	7b9b      	ldrb	r3, [r3, #14]
 800b476:	2ba0      	cmp	r3, #160	@ 0xa0
 800b478:	bf0c      	ite	eq
 800b47a:	2301      	moveq	r3, #1
 800b47c:	2300      	movne	r3, #0
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <add_check_overflow>:
#  define unlikely(x)   (x)
#  define unreachable() do {} while (0)
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
 800b498:	2100      	movs	r1, #0
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	189b      	adds	r3, r3, r2
 800b4a0:	d300      	bcc.n	800b4a4 <add_check_overflow+0x18>
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	b2db      	uxtb	r3, r3
#else
    /* unsigned additions are well-defined */
    *r = v1 + v2;
    return v1 > v1 + v2;
#endif
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <get16>:
 * \endlist
 * \endif
 */

static inline uint16_t get16(const uint8_t *ptr)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
    uint16_t result;
    memcpy(&result, ptr, sizeof(result));
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	81fb      	strh	r3, [r7, #14]
    return cbor_ntohs(result);
 800b4ce:	89fb      	ldrh	r3, [r7, #14]
 800b4d0:	ba5b      	rev16	r3, r3
 800b4d2:	b29b      	uxth	r3, r3
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <get32>:

static inline uint32_t get32(const uint8_t *ptr)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
    uint32_t result;
    memcpy(&result, ptr, sizeof(result));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]
    return cbor_ntohl(result);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	ba1b      	rev	r3, r3
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <get64>:

static inline uint64_t get64(const uint8_t *ptr)
{
 800b4fe:	b4b0      	push	{r4, r5, r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	680a      	ldr	r2, [r1, #0]
 800b50a:	684b      	ldr	r3, [r1, #4]
 800b50c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return cbor_ntohll(result);
 800b510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b514:	ba11      	rev	r1, r2
 800b516:	ba1b      	rev	r3, r3
 800b518:	461c      	mov	r4, r3
 800b51a:	460d      	mov	r5, r1
 800b51c:	4622      	mov	r2, r4
 800b51e:	462b      	mov	r3, r5
}
 800b520:	4610      	mov	r0, r2
 800b522:	4619      	mov	r1, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	bcb0      	pop	{r4, r5, r7}
 800b52a:	4770      	bx	lr

0800b52c <_cbor_value_extract_number>:

CborError CBOR_INTERNAL_API_CC _cbor_value_extract_number(const uint8_t **ptr, const uint8_t *end, uint64_t *len)
{
 800b52c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b530:	b088      	sub	sp, #32
 800b532:	af00      	add	r7, sp, #0
 800b534:	6178      	str	r0, [r7, #20]
 800b536:	6139      	str	r1, [r7, #16]
 800b538:	60fa      	str	r2, [r7, #12]
    size_t bytesNeeded;
    uint8_t additional_information = **ptr & SmallValueMask;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 031f 	and.w	r3, r3, #31
 800b544:	77fb      	strb	r3, [r7, #31]
    ++*ptr;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	601a      	str	r2, [r3, #0]
    if (additional_information < Value8Bit) {
 800b550:	7ffb      	ldrb	r3, [r7, #31]
 800b552:	2b17      	cmp	r3, #23
 800b554:	d80a      	bhi.n	800b56c <_cbor_value_extract_number+0x40>
        *len = additional_information;
 800b556:	7ffb      	ldrb	r3, [r7, #31]
 800b558:	2200      	movs	r2, #0
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	607a      	str	r2, [r7, #4]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b564:	e9c3 1200 	strd	r1, r2, [r3]
        return CborNoError;
 800b568:	2300      	movs	r3, #0
 800b56a:	e060      	b.n	800b62e <_cbor_value_extract_number+0x102>
    }
    if (unlikely(additional_information > Value64Bit))
 800b56c:	7ffb      	ldrb	r3, [r7, #31]
 800b56e:	2b1b      	cmp	r3, #27
 800b570:	bf8c      	ite	hi
 800b572:	2301      	movhi	r3, #1
 800b574:	2300      	movls	r3, #0
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <_cbor_value_extract_number+0x56>
        return CborErrorIllegalNumber;
 800b57c:	f240 1305 	movw	r3, #261	@ 0x105
 800b580:	e055      	b.n	800b62e <_cbor_value_extract_number+0x102>

    bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
 800b582:	7ffb      	ldrb	r3, [r7, #31]
 800b584:	3b18      	subs	r3, #24
 800b586:	2201      	movs	r2, #1
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	61bb      	str	r3, [r7, #24]
    if (unlikely(bytesNeeded > (size_t)(end - *ptr))) {
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	461a      	mov	r2, r3
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	bf8c      	ite	hi
 800b59e:	2301      	movhi	r3, #1
 800b5a0:	2300      	movls	r3, #0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <_cbor_value_extract_number+0x82>
        return CborErrorUnexpectedEOF;
 800b5a8:	f240 1301 	movw	r3, #257	@ 0x101
 800b5ac:	e03f      	b.n	800b62e <_cbor_value_extract_number+0x102>
    } else if (bytesNeeded == 1) {
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d10a      	bne.n	800b5ca <_cbor_value_extract_number+0x9e>
        *len = (uint8_t)(*ptr)[0];
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2200      	movs	r2, #0
 800b5be:	469a      	mov	sl, r3
 800b5c0:	4693      	mov	fp, r2
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	e9c3 ab00 	strd	sl, fp, [r3]
 800b5c8:	e02a      	b.n	800b620 <_cbor_value_extract_number+0xf4>
    } else if (bytesNeeded == 2) {
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d10d      	bne.n	800b5ec <_cbor_value_extract_number+0xc0>
        *len = get16(*ptr);
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ff72 	bl	800b4be <get16>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	2200      	movs	r2, #0
 800b5e0:	4698      	mov	r8, r3
 800b5e2:	4691      	mov	r9, r2
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	e9c3 8900 	strd	r8, r9, [r3]
 800b5ea:	e019      	b.n	800b620 <_cbor_value_extract_number+0xf4>
    } else if (bytesNeeded == 4) {
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d10c      	bne.n	800b60c <_cbor_value_extract_number+0xe0>
        *len = get32(*ptr);
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff ff72 	bl	800b4e0 <get32>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2200      	movs	r2, #0
 800b600:	461c      	mov	r4, r3
 800b602:	4615      	mov	r5, r2
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	e9c3 4500 	strd	r4, r5, [r3]
 800b60a:	e009      	b.n	800b620 <_cbor_value_extract_number+0xf4>
    } else {
        *len = get64(*ptr);
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff ff74 	bl	800b4fe <get64>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	68f9      	ldr	r1, [r7, #12]
 800b61c:	e9c1 2300 	strd	r2, r3, [r1]
    }
    *ptr += bytesNeeded;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	441a      	add	r2, r3
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	601a      	str	r2, [r3, #0]
    return CborNoError;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b638 <extract_length>:

static CborError extract_length(const CborParser *parser, const uint8_t **ptr, size_t *len)
{
 800b638:	b5b0      	push	{r4, r5, r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
    uint64_t v;
    CborError err = _cbor_value_extract_number(ptr, parser->end, &v);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f107 0210 	add.w	r2, r7, #16
 800b64c:	4619      	mov	r1, r3
 800b64e:	68b8      	ldr	r0, [r7, #8]
 800b650:	f7ff ff6c 	bl	800b52c <_cbor_value_extract_number>
 800b654:	61f8      	str	r0, [r7, #28]
    if (err) {
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d004      	beq.n	800b666 <extract_length+0x2e>
        *len = 0;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
        return err;
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	e012      	b.n	800b68c <extract_length+0x54>
    }

    *len = (size_t)v;
 800b666:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	601a      	str	r2, [r3, #0]
    if (v != *len)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2200      	movs	r2, #0
 800b674:	461c      	mov	r4, r3
 800b676:	4615      	mov	r5, r2
 800b678:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b67c:	429d      	cmp	r5, r3
 800b67e:	bf08      	it	eq
 800b680:	4294      	cmpeq	r4, r2
 800b682:	d002      	beq.n	800b68a <extract_length+0x52>
        return CborErrorDataTooLarge;
 800b684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b688:	e000      	b.n	800b68c <extract_length+0x54>
    return CborNoError;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3720      	adds	r7, #32
 800b690:	46bd      	mov	sp, r7
 800b692:	bdb0      	pop	{r4, r5, r7, pc}

0800b694 <is_fixed_type>:

static bool is_fixed_type(uint8_t type)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	71fb      	strb	r3, [r7, #7]
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	2b60      	cmp	r3, #96	@ 0x60
 800b6a2:	d00a      	beq.n	800b6ba <is_fixed_type+0x26>
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b40      	cmp	r3, #64	@ 0x40
 800b6a8:	d007      	beq.n	800b6ba <is_fixed_type+0x26>
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	2b80      	cmp	r3, #128	@ 0x80
 800b6ae:	d004      	beq.n	800b6ba <is_fixed_type+0x26>
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	2ba0      	cmp	r3, #160	@ 0xa0
 800b6b4:	d001      	beq.n	800b6ba <is_fixed_type+0x26>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <is_fixed_type+0x28>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	b2db      	uxtb	r3, r3
           type != CborMapType;
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <preparse_value>:

static CborError preparse_value(CborValue *it)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
    enum {
        /* flags to keep */
        FlagsToKeep = CborIteratorFlag_ContainerIsMap | CborIteratorFlag_NextIsMapKey
    };
    const CborParser *parser = it->parser;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	617b      	str	r3, [r7, #20]
    it->type = CborInvalidType;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	22ff      	movs	r2, #255	@ 0xff
 800b6e2:	739a      	strb	r2, [r3, #14]

    /* are we at the end? */
    if (it->ptr == parser->end)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d102      	bne.n	800b6f6 <preparse_value+0x26>
        return CborErrorUnexpectedEOF;
 800b6f0:	f240 1301 	movw	r3, #257	@ 0x101
 800b6f4:	e0f0      	b.n	800b8d8 <preparse_value+0x208>

    uint8_t descriptor = *it->ptr;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	74fb      	strb	r3, [r7, #19]
    uint8_t type = descriptor & MajorTypeMask;
 800b6fe:	7cfb      	ldrb	r3, [r7, #19]
 800b700:	f023 031f 	bic.w	r3, r3, #31
 800b704:	74bb      	strb	r3, [r7, #18]
    it->type = type;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7cba      	ldrb	r2, [r7, #18]
 800b70a:	739a      	strb	r2, [r3, #14]
    it->flags &= FlagsToKeep;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	7bdb      	ldrb	r3, [r3, #15]
 800b710:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b714:	b2da      	uxtb	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	73da      	strb	r2, [r3, #15]
    it->extra = (descriptor &= SmallValueMask);
 800b71a:	7cfb      	ldrb	r3, [r7, #19]
 800b71c:	f003 031f 	and.w	r3, r3, #31
 800b720:	74fb      	strb	r3, [r7, #19]
 800b722:	7cfb      	ldrb	r3, [r7, #19]
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	819a      	strh	r2, [r3, #12]

    if (descriptor > Value64Bit) {
 800b72a:	7cfb      	ldrb	r3, [r7, #19]
 800b72c:	2b1b      	cmp	r3, #27
 800b72e:	d92f      	bls.n	800b790 <preparse_value+0xc0>
        if (unlikely(descriptor != IndefiniteLength))
 800b730:	7cfb      	ldrb	r3, [r7, #19]
 800b732:	2b1f      	cmp	r3, #31
 800b734:	bf14      	ite	ne
 800b736:	2301      	movne	r3, #1
 800b738:	2300      	moveq	r3, #0
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d008      	beq.n	800b752 <preparse_value+0x82>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
 800b740:	7cbb      	ldrb	r3, [r7, #18]
 800b742:	2be0      	cmp	r3, #224	@ 0xe0
 800b744:	d102      	bne.n	800b74c <preparse_value+0x7c>
 800b746:	f240 1303 	movw	r3, #259	@ 0x103
 800b74a:	e0c5      	b.n	800b8d8 <preparse_value+0x208>
 800b74c:	f240 1305 	movw	r3, #261	@ 0x105
 800b750:	e0c2      	b.n	800b8d8 <preparse_value+0x208>
        if (likely(!is_fixed_type(type))) {
 800b752:	7cbb      	ldrb	r3, [r7, #18]
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff ff9d 	bl	800b694 <is_fixed_type>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f083 0301 	eor.w	r3, r3, #1
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00b      	beq.n	800b77e <preparse_value+0xae>
            /* special case */
            it->flags |= CborIteratorFlag_UnknownLength;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7bdb      	ldrb	r3, [r3, #15]
 800b76a:	f043 0304 	orr.w	r3, r3, #4
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	73da      	strb	r2, [r3, #15]
            it->type = type;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7cba      	ldrb	r2, [r7, #18]
 800b778:	739a      	strb	r2, [r3, #14]
            return CborNoError;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e0ac      	b.n	800b8d8 <preparse_value+0x208>
        }
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
 800b77e:	7cbb      	ldrb	r3, [r7, #18]
 800b780:	2be0      	cmp	r3, #224	@ 0xe0
 800b782:	d102      	bne.n	800b78a <preparse_value+0xba>
 800b784:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800b788:	e0a6      	b.n	800b8d8 <preparse_value+0x208>
 800b78a:	f240 1305 	movw	r3, #261	@ 0x105
 800b78e:	e0a3      	b.n	800b8d8 <preparse_value+0x208>
    }

    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
 800b790:	7cfb      	ldrb	r3, [r7, #19]
 800b792:	2b17      	cmp	r3, #23
 800b794:	d905      	bls.n	800b7a2 <preparse_value+0xd2>
 800b796:	7cfb      	ldrb	r3, [r7, #19]
 800b798:	3b18      	subs	r3, #24
 800b79a:	2201      	movs	r2, #1
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	e000      	b.n	800b7a4 <preparse_value+0xd4>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
    if (bytesNeeded + 1 > (size_t)(parser->end - it->ptr))
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	6811      	ldr	r1, [r2, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6852      	ldr	r2, [r2, #4]
 800b7b2:	1a8a      	subs	r2, r1, r2
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d902      	bls.n	800b7be <preparse_value+0xee>
        return CborErrorUnexpectedEOF;
 800b7b8:	f240 1301 	movw	r3, #257	@ 0x101
 800b7bc:	e08c      	b.n	800b8d8 <preparse_value+0x208>

    uint8_t majortype = type >> MajorTypeShift;
 800b7be:	7cbb      	ldrb	r3, [r7, #18]
 800b7c0:	095b      	lsrs	r3, r3, #5
 800b7c2:	72fb      	strb	r3, [r7, #11]
    if (majortype == NegativeIntegerType) {
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d10a      	bne.n	800b7e0 <preparse_value+0x110>
        it->flags |= CborIteratorFlag_NegativeInteger;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	7bdb      	ldrb	r3, [r3, #15]
 800b7ce:	f043 0302 	orr.w	r3, r3, #2
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	73da      	strb	r2, [r3, #15]
        it->type = CborIntegerType;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	739a      	strb	r2, [r3, #14]
 800b7de:	e055      	b.n	800b88c <preparse_value+0x1bc>
    } else if (majortype == SimpleTypesType) {
 800b7e0:	7afb      	ldrb	r3, [r7, #11]
 800b7e2:	2b07      	cmp	r3, #7
 800b7e4:	d152      	bne.n	800b88c <preparse_value+0x1bc>
        switch (descriptor) {
 800b7e6:	7cfb      	ldrb	r3, [r7, #19]
 800b7e8:	3b14      	subs	r3, #20
 800b7ea:	2b0b      	cmp	r3, #11
 800b7ec:	d84c      	bhi.n	800b888 <preparse_value+0x1b8>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <preparse_value+0x124>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b825 	.word	0x0800b825
 800b7f8:	0800b841 	.word	0x0800b841
 800b7fc:	0800b841 	.word	0x0800b841
 800b800:	0800b841 	.word	0x0800b841
 800b804:	0800b84d 	.word	0x0800b84d
 800b808:	0800b841 	.word	0x0800b841
 800b80c:	0800b833 	.word	0x0800b833
 800b810:	0800b833 	.word	0x0800b833
 800b814:	0800b879 	.word	0x0800b879
 800b818:	0800b879 	.word	0x0800b879
 800b81c:	0800b879 	.word	0x0800b879
 800b820:	0800b879 	.word	0x0800b879
        case FalseValue:
            it->extra = false;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	819a      	strh	r2, [r3, #12]
            it->type = CborBooleanType;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	22f5      	movs	r2, #245	@ 0xf5
 800b82e:	739a      	strb	r2, [r3, #14]
            break;
 800b830:	e02a      	b.n	800b888 <preparse_value+0x1b8>

        case SinglePrecisionFloat:
        case DoublePrecisionFloat:
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	7bdb      	ldrb	r3, [r3, #15]
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	73da      	strb	r2, [r3, #15]
            /* fall through */
        case TrueValue:
        case NullValue:
        case UndefinedValue:
        case HalfPrecisionFloat:
            it->type = *it->ptr;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	739a      	strb	r2, [r3, #14]
            break;
 800b84a:	e01d      	b.n	800b888 <preparse_value+0x1b8>

        case SimpleTypeInNextByte:
            it->extra = (uint8_t)it->ptr[1];
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	3301      	adds	r3, #1
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	461a      	mov	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	819a      	strh	r2, [r3, #12]
#ifndef CBOR_PARSER_NO_STRICT_CHECKS
            if (unlikely(it->extra < 32)) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	899b      	ldrh	r3, [r3, #12]
 800b85e:	2b1f      	cmp	r3, #31
 800b860:	bf94      	ite	ls
 800b862:	2301      	movls	r3, #1
 800b864:	2300      	movhi	r3, #0
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00c      	beq.n	800b886 <preparse_value+0x1b6>
                it->type = CborInvalidType;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	22ff      	movs	r2, #255	@ 0xff
 800b870:	739a      	strb	r2, [r3, #14]
                return CborErrorIllegalSimpleType;
 800b872:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800b876:	e02f      	b.n	800b8d8 <preparse_value+0x208>

        case 28:
        case 29:
        case 30:
        case Break:
            cbor_assert(false);  /* these conditions can't be reached */
 800b878:	4b19      	ldr	r3, [pc, #100]	@ (800b8e0 <preparse_value+0x210>)
 800b87a:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e4 <preparse_value+0x214>)
 800b87c:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800b880:	4819      	ldr	r0, [pc, #100]	@ (800b8e8 <preparse_value+0x218>)
 800b882:	f003 ff99 	bl	800f7b8 <__assert_func>
            break;
 800b886:	bf00      	nop
            return CborErrorUnexpectedBreak;
        }
        return CborNoError;
 800b888:	2300      	movs	r3, #0
 800b88a:	e025      	b.n	800b8d8 <preparse_value+0x208>
    }

    /* try to decode up to 16 bits */
    if (descriptor < Value8Bit)
 800b88c:	7cfb      	ldrb	r3, [r7, #19]
 800b88e:	2b17      	cmp	r3, #23
 800b890:	d801      	bhi.n	800b896 <preparse_value+0x1c6>
        return CborNoError;
 800b892:	2300      	movs	r3, #0
 800b894:	e020      	b.n	800b8d8 <preparse_value+0x208>

    if (descriptor == Value8Bit)
 800b896:	7cfb      	ldrb	r3, [r7, #19]
 800b898:	2b18      	cmp	r3, #24
 800b89a:	d107      	bne.n	800b8ac <preparse_value+0x1dc>
        it->extra = (uint8_t)it->ptr[1];
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	819a      	strh	r2, [r3, #12]
 800b8aa:	e014      	b.n	800b8d6 <preparse_value+0x206>
    else if (descriptor == Value16Bit)
 800b8ac:	7cfb      	ldrb	r3, [r7, #19]
 800b8ae:	2b19      	cmp	r3, #25
 800b8b0:	d10a      	bne.n	800b8c8 <preparse_value+0x1f8>
        it->extra = get16(it->ptr + 1);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fe00 	bl	800b4be <get16>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	819a      	strh	r2, [r3, #12]
 800b8c6:	e006      	b.n	800b8d6 <preparse_value+0x206>
    else
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	7bdb      	ldrb	r3, [r3, #15]
 800b8cc:	f043 0301 	orr.w	r3, r3, #1
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	73da      	strb	r2, [r3, #15]
    return CborNoError;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08015590 	.word	0x08015590
 800b8e4:	0801635c 	.word	0x0801635c
 800b8e8:	08015594 	.word	0x08015594

0800b8ec <preparse_next_value_nodecrement>:

static CborError preparse_next_value_nodecrement(CborValue *it)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
    if (it->remaining == UINT32_MAX && it->ptr != it->parser->end && *it->ptr == (uint8_t)BreakByte) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fc:	d12b      	bne.n	800b956 <preparse_next_value_nodecrement+0x6a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d024      	beq.n	800b956 <preparse_next_value_nodecrement+0x6a>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	2bff      	cmp	r3, #255	@ 0xff
 800b914:	d11f      	bne.n	800b956 <preparse_next_value_nodecrement+0x6a>
        /* end of map or array */
        if ((it->flags & CborIteratorFlag_ContainerIsMap && it->flags & CborIteratorFlag_NextIsMapKey)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7bdb      	ldrb	r3, [r3, #15]
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d005      	beq.n	800b92e <preparse_next_value_nodecrement+0x42>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	7bdb      	ldrb	r3, [r3, #15]
 800b926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d103      	bne.n	800b936 <preparse_next_value_nodecrement+0x4a>
                || it->type == CborTagType) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7b9b      	ldrb	r3, [r3, #14]
 800b932:	2bc0      	cmp	r3, #192	@ 0xc0
 800b934:	d102      	bne.n	800b93c <preparse_next_value_nodecrement+0x50>
            /* but we weren't expecting it! */
            return CborErrorUnexpectedBreak;
 800b936:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800b93a:	e010      	b.n	800b95e <preparse_next_value_nodecrement+0x72>
        }
        ++it->ptr;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	605a      	str	r2, [r3, #4]
        it->type = CborInvalidType;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	22ff      	movs	r2, #255	@ 0xff
 800b94a:	739a      	strb	r2, [r3, #14]
        it->remaining = 0;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	609a      	str	r2, [r3, #8]
        return CborNoError;
 800b952:	2300      	movs	r3, #0
 800b954:	e003      	b.n	800b95e <preparse_next_value_nodecrement+0x72>
    }

    return preparse_value(it);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff feba 	bl	800b6d0 <preparse_value>
 800b95c:	4603      	mov	r3, r0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <preparse_next_value>:

static CborError preparse_next_value(CborValue *it)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
    /* tags don't count towards item totals or whether we've successfully
     * read a map's key or value */
    bool itemCounts = it->type != CborTagType;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	7b9b      	ldrb	r3, [r3, #14]
 800b972:	2bc0      	cmp	r3, #192	@ 0xc0
 800b974:	bf14      	ite	ne
 800b976:	2301      	movne	r3, #1
 800b978:	2300      	moveq	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]

    if (it->remaining != UINT32_MAX) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b984:	d010      	beq.n	800b9a8 <preparse_next_value+0x42>
        if (itemCounts && --it->remaining == 0) {
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00d      	beq.n	800b9a8 <preparse_next_value+0x42>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	1e5a      	subs	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	609a      	str	r2, [r3, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d104      	bne.n	800b9a8 <preparse_next_value+0x42>
            it->type = CborInvalidType;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	22ff      	movs	r2, #255	@ 0xff
 800b9a2:	739a      	strb	r2, [r3, #14]
            return CborNoError;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e00d      	b.n	800b9c4 <preparse_next_value+0x5e>
        }
    }
    if (itemCounts) {
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <preparse_next_value+0x56>
        /* toggle the flag indicating whether this was a map key */
        it->flags ^= CborIteratorFlag_NextIsMapKey;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7bdb      	ldrb	r3, [r3, #15]
 800b9b2:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	73da      	strb	r2, [r3, #15]
    }
    return preparse_next_value_nodecrement(it);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff ff95 	bl	800b8ec <preparse_next_value_nodecrement>
 800b9c2:	4603      	mov	r3, r0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <advance_internal>:

static CborError advance_internal(CborValue *it)
{
 800b9cc:	b5b0      	push	{r4, r5, r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
    uint64_t length;
    CborError err = _cbor_value_extract_number(&it->ptr, it->parser->end, &length);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	1d18      	adds	r0, r3, #4
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f107 0208 	add.w	r2, r7, #8
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	f7ff fda2 	bl	800b52c <_cbor_value_extract_number>
 800b9e8:	6178      	str	r0, [r7, #20]
    cbor_assert(err == CborNoError);
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d006      	beq.n	800b9fe <advance_internal+0x32>
 800b9f0:	4b1e      	ldr	r3, [pc, #120]	@ (800ba6c <advance_internal+0xa0>)
 800b9f2:	4a1f      	ldr	r2, [pc, #124]	@ (800ba70 <advance_internal+0xa4>)
 800b9f4:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800b9f8:	481e      	ldr	r0, [pc, #120]	@ (800ba74 <advance_internal+0xa8>)
 800b9fa:	f003 fedd 	bl	800f7b8 <__assert_func>

    if (it->type == CborByteStringType || it->type == CborTextStringType) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	7b9b      	ldrb	r3, [r3, #14]
 800ba02:	2b40      	cmp	r3, #64	@ 0x40
 800ba04:	d003      	beq.n	800ba0e <advance_internal+0x42>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7b9b      	ldrb	r3, [r3, #14]
 800ba0a:	2b60      	cmp	r3, #96	@ 0x60
 800ba0c:	d126      	bne.n	800ba5c <advance_internal+0x90>
        cbor_assert(length == (size_t)length);
 800ba0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba12:	2300      	movs	r3, #0
 800ba14:	4614      	mov	r4, r2
 800ba16:	461d      	mov	r5, r3
 800ba18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	bf08      	it	eq
 800ba20:	4294      	cmpeq	r4, r2
 800ba22:	d006      	beq.n	800ba32 <advance_internal+0x66>
 800ba24:	4b14      	ldr	r3, [pc, #80]	@ (800ba78 <advance_internal+0xac>)
 800ba26:	4a12      	ldr	r2, [pc, #72]	@ (800ba70 <advance_internal+0xa4>)
 800ba28:	f240 115d 	movw	r1, #349	@ 0x15d
 800ba2c:	4811      	ldr	r0, [pc, #68]	@ (800ba74 <advance_internal+0xa8>)
 800ba2e:	f003 fec3 	bl	800f7b8 <__assert_func>
        cbor_assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7bdb      	ldrb	r3, [r3, #15]
 800ba36:	f003 0304 	and.w	r3, r3, #4
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d006      	beq.n	800ba4c <advance_internal+0x80>
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba7c <advance_internal+0xb0>)
 800ba40:	4a0b      	ldr	r2, [pc, #44]	@ (800ba70 <advance_internal+0xa4>)
 800ba42:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800ba46:	480b      	ldr	r0, [pc, #44]	@ (800ba74 <advance_internal+0xa8>)
 800ba48:	f003 feb6 	bl	800f7b8 <__assert_func>
        it->ptr += length;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6859      	ldr	r1, [r3, #4]
 800ba50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba54:	4613      	mov	r3, r2
 800ba56:	18ca      	adds	r2, r1, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	605a      	str	r2, [r3, #4]
    }

    return preparse_next_value(it);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff ff82 	bl	800b966 <preparse_next_value>
 800ba62:	4603      	mov	r3, r0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ba6c:	080155ec 	.word	0x080155ec
 800ba70:	0801636c 	.word	0x0801636c
 800ba74:	08015594 	.word	0x08015594
 800ba78:	08015600 	.word	0x08015600
 800ba7c:	0801561c 	.word	0x0801561c

0800ba80 <_cbor_value_decode_int64_internal>:
 * This function is also used to extract single- and double-precision floating
 * point values (SinglePrecisionFloat == Value32Bit and DoublePrecisionFloat ==
 * Value64Bit).
 */
uint64_t _cbor_value_decode_int64_internal(const CborValue *value)
{
 800ba80:	b5b0      	push	{r4, r5, r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
    cbor_assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	7bdb      	ldrb	r3, [r3, #15]
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10e      	bne.n	800bab2 <_cbor_value_decode_int64_internal+0x32>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7b9b      	ldrb	r3, [r3, #14]
 800ba98:	2bfa      	cmp	r3, #250	@ 0xfa
 800ba9a:	d00a      	beq.n	800bab2 <_cbor_value_decode_int64_internal+0x32>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7b9b      	ldrb	r3, [r3, #14]
 800baa0:	2bfb      	cmp	r3, #251	@ 0xfb
 800baa2:	d006      	beq.n	800bab2 <_cbor_value_decode_int64_internal+0x32>
 800baa4:	4b25      	ldr	r3, [pc, #148]	@ (800bb3c <_cbor_value_decode_int64_internal+0xbc>)
 800baa6:	4a26      	ldr	r2, [pc, #152]	@ (800bb40 <_cbor_value_decode_int64_internal+0xc0>)
 800baa8:	f240 1171 	movw	r1, #369	@ 0x171
 800baac:	4825      	ldr	r0, [pc, #148]	@ (800bb44 <_cbor_value_decode_int64_internal+0xc4>)
 800baae:	f003 fe83 	bl	800f7b8 <__assert_func>
                value->type == CborFloatType || value->type == CborDoubleType);

    /* since the additional information can only be Value32Bit or Value64Bit,
     * we just need to test for the one bit those two options differ */
    cbor_assert((*value->ptr & SmallValueMask) == Value32Bit || (*value->ptr & SmallValueMask) == Value64Bit);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	f003 031f 	and.w	r3, r3, #31
 800babc:	2b1a      	cmp	r3, #26
 800babe:	d00d      	beq.n	800badc <_cbor_value_decode_int64_internal+0x5c>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	f003 031f 	and.w	r3, r3, #31
 800baca:	2b1b      	cmp	r3, #27
 800bacc:	d006      	beq.n	800badc <_cbor_value_decode_int64_internal+0x5c>
 800bace:	4b1e      	ldr	r3, [pc, #120]	@ (800bb48 <_cbor_value_decode_int64_internal+0xc8>)
 800bad0:	4a1b      	ldr	r2, [pc, #108]	@ (800bb40 <_cbor_value_decode_int64_internal+0xc0>)
 800bad2:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 800bad6:	481b      	ldr	r0, [pc, #108]	@ (800bb44 <_cbor_value_decode_int64_internal+0xc4>)
 800bad8:	f003 fe6e 	bl	800f7b8 <__assert_func>
    if ((*value->ptr & 1) == (Value32Bit & 1))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <_cbor_value_decode_int64_internal+0x80>
        return get32(value->ptr + 1);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	3301      	adds	r3, #1
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff fcf5 	bl	800b4e0 <get32>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2200      	movs	r2, #0
 800bafa:	461c      	mov	r4, r3
 800bafc:	4615      	mov	r5, r2
 800bafe:	e015      	b.n	800bb2c <_cbor_value_decode_int64_internal+0xac>

    cbor_assert((*value->ptr & SmallValueMask) == Value64Bit);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	f003 031f 	and.w	r3, r3, #31
 800bb0a:	2b1b      	cmp	r3, #27
 800bb0c:	d006      	beq.n	800bb1c <_cbor_value_decode_int64_internal+0x9c>
 800bb0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb4c <_cbor_value_decode_int64_internal+0xcc>)
 800bb10:	4a0b      	ldr	r2, [pc, #44]	@ (800bb40 <_cbor_value_decode_int64_internal+0xc0>)
 800bb12:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 800bb16:	480b      	ldr	r0, [pc, #44]	@ (800bb44 <_cbor_value_decode_int64_internal+0xc4>)
 800bb18:	f003 fe4e 	bl	800f7b8 <__assert_func>
    return get64(value->ptr + 1);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	3301      	adds	r3, #1
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff fceb 	bl	800b4fe <get64>
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
}
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	462b      	mov	r3, r5
 800bb30:	4610      	mov	r0, r2
 800bb32:	4619      	mov	r1, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bdb0      	pop	{r4, r5, r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	08015650 	.word	0x08015650
 800bb40:	08016380 	.word	0x08016380
 800bb44:	08015594 	.word	0x08015594
 800bb48:	080156c8 	.word	0x080156c8
 800bb4c:	08015728 	.word	0x08015728

0800bb50 <cbor_parser_init>:
 * process. It is not thread-safe to share one CborParser among multiple
 * threads iterating at the same time, but the object can be copied so multiple
 * threads can iterate.
 */
CborError cbor_parser_init(const uint8_t *buffer, size_t size, uint32_t flags, CborParser *parser, CborValue *it)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
    memset(parser, 0, sizeof(*parser));
 800bb5e:	2208      	movs	r2, #8
 800bb60:	2100      	movs	r1, #0
 800bb62:	6838      	ldr	r0, [r7, #0]
 800bb64:	f005 faa4 	bl	80110b0 <memset>
    parser->end = buffer + size;
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	441a      	add	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	601a      	str	r2, [r3, #0]
    parser->flags = flags;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	605a      	str	r2, [r3, #4]
    it->parser = parser;
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	601a      	str	r2, [r3, #0]
    it->ptr = buffer;
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	605a      	str	r2, [r3, #4]
    it->remaining = 1;      /* there's one type altogether, usually an array or map */
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	2201      	movs	r2, #1
 800bb88:	609a      	str	r2, [r3, #8]
    it->flags = 0;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	73da      	strb	r2, [r3, #15]
    return preparse_value(it);
 800bb90:	69b8      	ldr	r0, [r7, #24]
 800bb92:	f7ff fd9d 	bl	800b6d0 <preparse_value>
 800bb96:	4603      	mov	r3, r0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <cbor_value_advance_fixed>:
 * can use the cbor_value_advance() function instead.
 *
 * \sa cbor_value_at_end(), cbor_value_advance(), cbor_value_enter_container(), cbor_value_leave_container()
 */
CborError cbor_value_advance_fixed(CborValue *it)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
    cbor_assert(it->type != CborInvalidType);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7b9b      	ldrb	r3, [r3, #14]
 800bbac:	2bff      	cmp	r3, #255	@ 0xff
 800bbae:	d106      	bne.n	800bbbe <cbor_value_advance_fixed+0x1e>
 800bbb0:	4b11      	ldr	r3, [pc, #68]	@ (800bbf8 <cbor_value_advance_fixed+0x58>)
 800bbb2:	4a12      	ldr	r2, [pc, #72]	@ (800bbfc <cbor_value_advance_fixed+0x5c>)
 800bbb4:	f240 11eb 	movw	r1, #491	@ 0x1eb
 800bbb8:	4811      	ldr	r0, [pc, #68]	@ (800bc00 <cbor_value_advance_fixed+0x60>)
 800bbba:	f003 fdfd 	bl	800f7b8 <__assert_func>
    cbor_assert(is_fixed_type(it->type));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	7b9b      	ldrb	r3, [r3, #14]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fd66 	bl	800b694 <is_fixed_type>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d106      	bne.n	800bbdc <cbor_value_advance_fixed+0x3c>
 800bbce:	4b0d      	ldr	r3, [pc, #52]	@ (800bc04 <cbor_value_advance_fixed+0x64>)
 800bbd0:	4a0a      	ldr	r2, [pc, #40]	@ (800bbfc <cbor_value_advance_fixed+0x5c>)
 800bbd2:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 800bbd6:	480a      	ldr	r0, [pc, #40]	@ (800bc00 <cbor_value_advance_fixed+0x60>)
 800bbd8:	f003 fdee 	bl	800f7b8 <__assert_func>
    if (!it->remaining)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <cbor_value_advance_fixed+0x48>
        return CborErrorAdvancePastEOF;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e003      	b.n	800bbf0 <cbor_value_advance_fixed+0x50>
    return advance_internal(it);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff feef 	bl	800b9cc <advance_internal>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	08015758 	.word	0x08015758
 800bbfc:	080163a4 	.word	0x080163a4
 800bc00:	08015594 	.word	0x08015594
 800bc04:	08015774 	.word	0x08015774

0800bc08 <advance_recursive>:

static CborError advance_recursive(CborValue *it, int nestingLevel)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
    CborError err;
    CborValue recursed;

    if (is_fixed_type(it->type))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7b9b      	ldrb	r3, [r3, #14]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff fd3c 	bl	800b694 <is_fixed_type>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <advance_recursive+0x24>
        return advance_internal(it);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff fed2 	bl	800b9cc <advance_internal>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	e046      	b.n	800bcba <advance_recursive+0xb2>

    if (!cbor_value_is_container(it)) {
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff fbbe 	bl	800b3ae <cbor_value_is_container>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f083 0301 	eor.w	r3, r3, #1
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00b      	beq.n	800bc56 <advance_recursive+0x4e>
        size_t len = SIZE_MAX;
 800bc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc42:	60bb      	str	r3, [r7, #8]
        return _cbor_value_copy_string(it, NULL, &len, it);
 800bc44:	f107 0208 	add.w	r2, r7, #8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fa9f 	bl	800c190 <_cbor_value_copy_string>
 800bc52:	4603      	mov	r3, r0
 800bc54:	e031      	b.n	800bcba <advance_recursive+0xb2>
    }

    /* map or array */
    if (nestingLevel == 0)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <advance_recursive+0x5a>
        return CborErrorNestingTooDeep;
 800bc5c:	f240 4301 	movw	r3, #1025	@ 0x401
 800bc60:	e02b      	b.n	800bcba <advance_recursive+0xb2>

    err = cbor_value_enter_container(it, &recursed);
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f86b 	bl	800bd44 <cbor_value_enter_container>
 800bc6e:	61f8      	str	r0, [r7, #28]
    if (err)
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00f      	beq.n	800bc96 <advance_recursive+0x8e>
        return err;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	e01f      	b.n	800bcba <advance_recursive+0xb2>
    while (!cbor_value_at_end(&recursed)) {
        err = advance_recursive(&recursed, nestingLevel - 1);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	1e5a      	subs	r2, r3, #1
 800bc7e:	f107 030c 	add.w	r3, r7, #12
 800bc82:	4611      	mov	r1, r2
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff ffbf 	bl	800bc08 <advance_recursive>
 800bc8a:	61f8      	str	r0, [r7, #28]
        if (err)
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <advance_recursive+0x8e>
            return err;
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	e011      	b.n	800bcba <advance_recursive+0xb2>
    while (!cbor_value_at_end(&recursed)) {
 800bc96:	f107 030c 	add.w	r3, r7, #12
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fb76 	bl	800b38c <cbor_value_at_end>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f083 0301 	eor.w	r3, r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1e6      	bne.n	800bc7a <advance_recursive+0x72>
    }
    return cbor_value_leave_container(it, &recursed);
 800bcac:	f107 030c 	add.w	r3, r7, #12
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f8d2 	bl	800be5c <cbor_value_leave_container>
 800bcb8:	4603      	mov	r3, r0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3720      	adds	r7, #32
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
	...

0800bcc4 <cbor_value_advance>:
 * exhaustion in constrained systems.
 *
 * \sa cbor_value_at_end(), cbor_value_advance_fixed(), cbor_value_enter_container(), cbor_value_leave_container()
 */
CborError cbor_value_advance(CborValue *it)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    cbor_assert(it->type != CborInvalidType);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7b9b      	ldrb	r3, [r3, #14]
 800bcd0:	2bff      	cmp	r3, #255	@ 0xff
 800bcd2:	d106      	bne.n	800bce2 <cbor_value_advance+0x1e>
 800bcd4:	4b0b      	ldr	r3, [pc, #44]	@ (800bd04 <cbor_value_advance+0x40>)
 800bcd6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd08 <cbor_value_advance+0x44>)
 800bcd8:	f240 211f 	movw	r1, #543	@ 0x21f
 800bcdc:	480b      	ldr	r0, [pc, #44]	@ (800bd0c <cbor_value_advance+0x48>)
 800bcde:	f003 fd6b 	bl	800f7b8 <__assert_func>
    if (!it->remaining)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d101      	bne.n	800bcee <cbor_value_advance+0x2a>
        return CborErrorAdvancePastEOF;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e005      	b.n	800bcfa <cbor_value_advance+0x36>
    return advance_recursive(it, CBOR_PARSER_MAX_RECURSIONS);
 800bcee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff ff88 	bl	800bc08 <advance_recursive>
 800bcf8:	4603      	mov	r3, r0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	08015758 	.word	0x08015758
 800bd08:	080163c0 	.word	0x080163c0
 800bd0c:	08015594 	.word	0x08015594

0800bd10 <cbor_value_skip_tag>:
 * the number of tags. It does use constant memory (O(1) memory requirements).
 *
 * \sa cbor_value_advance_fixed(), cbor_value_advance()
 */
CborError cbor_value_skip_tag(CborValue *it)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
    while (cbor_value_is_tag(it)) {
 800bd18:	e008      	b.n	800bd2c <cbor_value_skip_tag+0x1c>
        CborError err = cbor_value_advance_fixed(it);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff ff40 	bl	800bba0 <cbor_value_advance_fixed>
 800bd20:	60f8      	str	r0, [r7, #12]
        if (err)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <cbor_value_skip_tag+0x1c>
            return err;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	e006      	b.n	800bd3a <cbor_value_skip_tag+0x2a>
    while (cbor_value_is_tag(it)) {
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff fb69 	bl	800b404 <cbor_value_is_tag>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1f0      	bne.n	800bd1a <cbor_value_skip_tag+0xa>
    }
    return CborNoError;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <cbor_value_enter_container>:
 * The \a it CborValue iterator must point to a container.
 *
 * \sa cbor_value_is_container(), cbor_value_leave_container(), cbor_value_advance()
 */
CborError cbor_value_enter_container(const CborValue *it, CborValue *recursed)
{
 800bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
    cbor_static_assert(CborIteratorFlag_ContainerIsMap == (CborMapType & ~CborArrayType));
    cbor_assert(cbor_value_is_container(it));
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7ff fb2d 	bl	800b3ae <cbor_value_is_container>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <cbor_value_enter_container+0x24>
 800bd5a:	4b3c      	ldr	r3, [pc, #240]	@ (800be4c <cbor_value_enter_container+0x108>)
 800bd5c:	4a3c      	ldr	r2, [pc, #240]	@ (800be50 <cbor_value_enter_container+0x10c>)
 800bd5e:	f240 215f 	movw	r1, #607	@ 0x25f
 800bd62:	483c      	ldr	r0, [pc, #240]	@ (800be54 <cbor_value_enter_container+0x110>)
 800bd64:	f003 fd28 	bl	800f7b8 <__assert_func>
    *recursed = *it;
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd70:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

    if (it->flags & CborIteratorFlag_UnknownLength) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7bdb      	ldrb	r3, [r3, #15]
 800bd78:	f003 0304 	and.w	r3, r3, #4
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d009      	beq.n	800bd94 <cbor_value_enter_container+0x50>
        recursed->remaining = UINT32_MAX;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	f04f 32ff 	mov.w	r2, #4294967295
 800bd86:	609a      	str	r2, [r3, #8]
        ++recursed->ptr;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	605a      	str	r2, [r3, #4]
 800bd92:	e04c      	b.n	800be2e <cbor_value_enter_container+0xea>
    } else {
        uint64_t len;
        CborError err = _cbor_value_extract_number(&recursed->ptr, recursed->parser->end, &len);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	1d18      	adds	r0, r3, #4
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f107 0208 	add.w	r2, r7, #8
 800bda2:	4619      	mov	r1, r3
 800bda4:	f7ff fbc2 	bl	800b52c <_cbor_value_extract_number>
 800bda8:	6178      	str	r0, [r7, #20]
        cbor_assert(err == CborNoError);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d006      	beq.n	800bdbe <cbor_value_enter_container+0x7a>
 800bdb0:	4b29      	ldr	r3, [pc, #164]	@ (800be58 <cbor_value_enter_container+0x114>)
 800bdb2:	4a27      	ldr	r2, [pc, #156]	@ (800be50 <cbor_value_enter_container+0x10c>)
 800bdb4:	f44f 711a 	mov.w	r1, #616	@ 0x268
 800bdb8:	4826      	ldr	r0, [pc, #152]	@ (800be54 <cbor_value_enter_container+0x110>)
 800bdba:	f003 fcfd 	bl	800f7b8 <__assert_func>

        recursed->remaining = (uint32_t)len;
 800bdbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	609a      	str	r2, [r3, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	461c      	mov	r4, r3
 800bdce:	4615      	mov	r5, r2
 800bdd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bdd4:	429d      	cmp	r5, r3
 800bdd6:	bf08      	it	eq
 800bdd8:	4294      	cmpeq	r4, r2
 800bdda:	d104      	bne.n	800bde6 <cbor_value_enter_container+0xa2>
 800bddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bde0:	1c51      	adds	r1, r2, #1
 800bde2:	430b      	orrs	r3, r1
 800bde4:	d106      	bne.n	800bdf4 <cbor_value_enter_container+0xb0>
            /* back track the pointer to indicate where the error occurred */
            recursed->ptr = it->ptr;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	605a      	str	r2, [r3, #4]
            return CborErrorDataTooLarge;
 800bdee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdf2:	e027      	b.n	800be44 <cbor_value_enter_container+0x100>
        }
        if (recursed->type == CborMapType) {
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	7b9b      	ldrb	r3, [r3, #14]
 800bdf8:	2ba0      	cmp	r3, #160	@ 0xa0
 800bdfa:	d10f      	bne.n	800be1c <cbor_value_enter_container+0xd8>
            /* maps have keys and values, so we need to multiply by 2 */
            if (recursed->remaining > UINT32_MAX / 2) {
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	2b00      	cmp	r3, #0
 800be02:	da06      	bge.n	800be12 <cbor_value_enter_container+0xce>
                /* back track the pointer to indicate where the error occurred */
                recursed->ptr = it->ptr;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	605a      	str	r2, [r3, #4]
                return CborErrorDataTooLarge;
 800be0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be10:	e018      	b.n	800be44 <cbor_value_enter_container+0x100>
            }
            recursed->remaining *= 2;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	005a      	lsls	r2, r3, #1
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	609a      	str	r2, [r3, #8]
        }
        if (len == 0) {
 800be1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be20:	4313      	orrs	r3, r2
 800be22:	d104      	bne.n	800be2e <cbor_value_enter_container+0xea>
            /* the case of the empty container */
            recursed->type = CborInvalidType;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	22ff      	movs	r2, #255	@ 0xff
 800be28:	739a      	strb	r2, [r3, #14]
            return CborNoError;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e00a      	b.n	800be44 <cbor_value_enter_container+0x100>
        }
    }
    recursed->flags = (recursed->type & CborIteratorFlag_ContainerIsMap);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	7b9b      	ldrb	r3, [r3, #14]
 800be32:	f003 0320 	and.w	r3, r3, #32
 800be36:	b2da      	uxtb	r2, r3
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	73da      	strb	r2, [r3, #15]
    return preparse_next_value_nodecrement(recursed);
 800be3c:	6838      	ldr	r0, [r7, #0]
 800be3e:	f7ff fd55 	bl	800b8ec <preparse_next_value_nodecrement>
 800be42:	4603      	mov	r3, r0
}
 800be44:	4618      	mov	r0, r3
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be4c:	0801578c 	.word	0x0801578c
 800be50:	080163d4 	.word	0x080163d4
 800be54:	08015594 	.word	0x08015594
 800be58:	080155ec 	.word	0x080155ec

0800be5c <cbor_value_leave_container>:
 * cbor_value_enter_container().
 *
 * \sa cbor_value_enter_container(), cbor_value_at_end()
 */
CborError cbor_value_leave_container(CborValue *it, const CborValue *recursed)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
    cbor_assert(cbor_value_is_container(it));
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff faa1 	bl	800b3ae <cbor_value_is_container>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d106      	bne.n	800be80 <cbor_value_leave_container+0x24>
 800be72:	4b0f      	ldr	r3, [pc, #60]	@ (800beb0 <cbor_value_leave_container+0x54>)
 800be74:	4a0f      	ldr	r2, [pc, #60]	@ (800beb4 <cbor_value_leave_container+0x58>)
 800be76:	f240 2191 	movw	r1, #657	@ 0x291
 800be7a:	480f      	ldr	r0, [pc, #60]	@ (800beb8 <cbor_value_leave_container+0x5c>)
 800be7c:	f003 fc9c 	bl	800f7b8 <__assert_func>
    cbor_assert(recursed->type == CborInvalidType);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	7b9b      	ldrb	r3, [r3, #14]
 800be84:	2bff      	cmp	r3, #255	@ 0xff
 800be86:	d006      	beq.n	800be96 <cbor_value_leave_container+0x3a>
 800be88:	4b0c      	ldr	r3, [pc, #48]	@ (800bebc <cbor_value_leave_container+0x60>)
 800be8a:	4a0a      	ldr	r2, [pc, #40]	@ (800beb4 <cbor_value_leave_container+0x58>)
 800be8c:	f240 2192 	movw	r1, #658	@ 0x292
 800be90:	4809      	ldr	r0, [pc, #36]	@ (800beb8 <cbor_value_leave_container+0x5c>)
 800be92:	f003 fc91 	bl	800f7b8 <__assert_func>
    it->ptr = recursed->ptr;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	605a      	str	r2, [r3, #4]
    return preparse_next_value(it);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff fd61 	bl	800b966 <preparse_next_value>
 800bea4:	4603      	mov	r3, r0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	0801578c 	.word	0x0801578c
 800beb4:	080163f0 	.word	0x080163f0
 800beb8:	08015594 	.word	0x08015594
 800bebc:	080157a8 	.word	0x080157a8

0800bec0 <cbor_value_calculate_string_length>:
 * fit in 32-bit.
 *
 * \sa cbor_value_get_string_length(), cbor_value_copy_text_string(), cbor_value_copy_byte_string(), cbor_value_is_length_known()
 */
CborError cbor_value_calculate_string_length(const CborValue *value, size_t *len)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
    *len = SIZE_MAX;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	f04f 32ff 	mov.w	r2, #4294967295
 800bed0:	601a      	str	r2, [r3, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
 800bed2:	2300      	movs	r3, #0
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	2100      	movs	r1, #0
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f959 	bl	800c190 <_cbor_value_copy_string>
 800bede:	4603      	mov	r3, r0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <prepare_string_iteration>:

static inline void prepare_string_iteration(CborValue *it)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
    if (!cbor_value_is_length_known(it)) {
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff fa74 	bl	800b3de <cbor_value_is_length_known>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f083 0301 	eor.w	r3, r3, #1
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00b      	beq.n	800bf1a <prepare_string_iteration+0x32>
        /* chunked string: we're before the first chunk;
         * advance to the first chunk */
        ++it->ptr;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	605a      	str	r2, [r3, #4]
        it->flags |= CborIteratorFlag_IteratingStringChunks;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	7bdb      	ldrb	r3, [r3, #15]
 800bf10:	f043 0302 	orr.w	r3, r3, #2
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	73da      	strb	r2, [r3, #15]
    }
}
 800bf1a:	bf00      	nop
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <get_string_chunk>:
        return CborErrorUnexpectedEOF;
    return CborNoError;
}

static CborError get_string_chunk(CborValue *it, const void **bufferptr, size_t *len)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	60b9      	str	r1, [r7, #8]
 800bf2c:	607a      	str	r2, [r7, #4]
     *     no       |    no     | before the first chunk of a chunked string
     *     yes      |    no     | at a non-chunked string
     *     no       |    yes    | second or later chunk
     *     yes      |    yes    | after a non-chunked string
     */
    if (it->flags & CborIteratorFlag_IteratingStringChunks) {
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	7bdb      	ldrb	r3, [r3, #15]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d006      	beq.n	800bf48 <get_string_chunk+0x26>
        /* already iterating */
        if (cbor_value_is_length_known(it)) {
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f7ff fa4f 	bl	800b3de <cbor_value_is_length_known>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <get_string_chunk+0x2c>
            /* if the length was known, it wasn't chunked, so finish iteration */
            goto last_chunk;
 800bf46:	e016      	b.n	800bf76 <get_string_chunk+0x54>
        }
    } else {
        prepare_string_iteration(it);
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f7ff ffcd 	bl	800bee8 <prepare_string_iteration>
    }

    /* are we at the end? */
    if (it->ptr == it->parser->end)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d102      	bne.n	800bf62 <get_string_chunk+0x40>
        return CborErrorUnexpectedEOF;
 800bf5c:	f240 1301 	movw	r3, #257	@ 0x101
 800bf60:	e04e      	b.n	800c000 <get_string_chunk+0xde>

    if (*it->ptr == BreakByte) {
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2bff      	cmp	r3, #255	@ 0xff
 800bf6a:	d10f      	bne.n	800bf8c <get_string_chunk+0x6a>
        /* last chunk */
        ++it->ptr;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	605a      	str	r2, [r3, #4]
last_chunk:
        *bufferptr = NULL;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
        *len = 0;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]
        return preparse_next_value(it);
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7ff fcef 	bl	800b966 <preparse_next_value>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	e039      	b.n	800c000 <get_string_chunk+0xde>
    } else if ((uint8_t)(*it->ptr & MajorTypeMask) == it->type) {
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	7b92      	ldrb	r2, [r2, #14]
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d12e      	bne.n	800bffc <get_string_chunk+0xda>
        err = extract_length(it->parser, &it->ptr, len);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3304      	adds	r3, #4
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f7ff fb45 	bl	800b638 <extract_length>
 800bfae:	6178      	str	r0, [r7, #20]
        if (err)
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <get_string_chunk+0x98>
            return err;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	e022      	b.n	800c000 <get_string_chunk+0xde>
        if (*len > (size_t)(it->parser->end - it->ptr))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	6812      	ldr	r2, [r2, #0]
 800bfc2:	6811      	ldr	r1, [r2, #0]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	6852      	ldr	r2, [r2, #4]
 800bfc8:	1a8a      	subs	r2, r1, r2
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d902      	bls.n	800bfd4 <get_string_chunk+0xb2>
            return CborErrorUnexpectedEOF;
 800bfce:	f240 1301 	movw	r3, #257	@ 0x101
 800bfd2:	e015      	b.n	800c000 <get_string_chunk+0xde>

        *bufferptr = it->ptr;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	601a      	str	r2, [r3, #0]
        it->ptr += *len;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	605a      	str	r2, [r3, #4]
    } else {
        return CborErrorIllegalType;
    }

    it->flags |= CborIteratorFlag_IteratingStringChunks;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	7bdb      	ldrb	r3, [r3, #15]
 800bfee:	f043 0302 	orr.w	r3, r3, #2
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	73da      	strb	r2, [r3, #15]
    return CborNoError;
 800bff8:	2300      	movs	r3, #0
 800bffa:	e001      	b.n	800c000 <get_string_chunk+0xde>
        return CborErrorIllegalType;
 800bffc:	f44f 7382 	mov.w	r3, #260	@ 0x104
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <iterate_noop>:
 * parser API (cbor_value_copy_string), while memcmp is used in convenience API
 * only. */
typedef uintptr_t (*IterateFunction)(char *, const uint8_t *, size_t);

static uintptr_t iterate_noop(char *dest, const uint8_t *src, size_t len)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
    (void)dest;
    (void)src;
    (void)len;
    return true;
 800c014:	2301      	movs	r3, #1
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <iterate_memcmp>:

static uintptr_t iterate_memcmp(char *s1, const uint8_t *s2, size_t len)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b084      	sub	sp, #16
 800c026:	af00      	add	r7, sp, #0
 800c028:	60f8      	str	r0, [r7, #12]
 800c02a:	60b9      	str	r1, [r7, #8]
 800c02c:	607a      	str	r2, [r7, #4]
    return memcmp(s1, (const char *)s2, len) == 0;
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	68b9      	ldr	r1, [r7, #8]
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f005 f812 	bl	801105c <memcmp>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	bf0c      	ite	eq
 800c03e:	2301      	moveq	r3, #1
 800c040:	2300      	movne	r3, #0
 800c042:	b2db      	uxtb	r3, r3
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <iterate_memcpy>:

static uintptr_t iterate_memcpy(char *dest, const uint8_t *src, size_t len)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
    return (uintptr_t)memcpy(dest, src, len);
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f005 f910 	bl	8011282 <memcpy>
 800c062:	4603      	mov	r3, r0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
 800c06c:	b590      	push	{r4, r7, lr}
 800c06e:	b08f      	sub	sp, #60	@ 0x3c
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
    CborError err;
    CborValue tmp;
    size_t total = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	637b      	str	r3, [r7, #52]	@ 0x34
    const void *ptr;

    cbor_assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f7ff f9d1 	bl	800b426 <cbor_value_is_byte_string>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10c      	bne.n	800c0a4 <iterate_string_chunks+0x38>
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff f9dc 	bl	800b448 <cbor_value_is_text_string>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <iterate_string_chunks+0x38>
 800c096:	4b3b      	ldr	r3, [pc, #236]	@ (800c184 <iterate_string_chunks+0x118>)
 800c098:	4a3b      	ldr	r2, [pc, #236]	@ (800c188 <iterate_string_chunks+0x11c>)
 800c09a:	f240 4153 	movw	r1, #1107	@ 0x453
 800c09e:	483b      	ldr	r0, [pc, #236]	@ (800c18c <iterate_string_chunks+0x120>)
 800c0a0:	f003 fb8a 	bl	800f7b8 <__assert_func>
    if (!next)
 800c0a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <iterate_string_chunks+0x44>
        next = &tmp;
 800c0aa:	f107 0320 	add.w	r3, r7, #32
 800c0ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    *next = *value;
 800c0b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	4614      	mov	r4, r2
 800c0b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c0b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    *result = true;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	701a      	strb	r2, [r3, #0]

    while (1) {
        size_t newTotal;
        size_t chunkLen;
        err = get_string_chunk(next, &ptr, &chunkLen);
 800c0c2:	f107 0214 	add.w	r2, r7, #20
 800c0c6:	f107 031c 	add.w	r3, r7, #28
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c0ce:	f7ff ff28 	bl	800bf22 <get_string_chunk>
 800c0d2:	6338      	str	r0, [r7, #48]	@ 0x30
        if (err)
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <iterate_string_chunks+0x72>
            return err;
 800c0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0dc:	e04e      	b.n	800c17c <iterate_string_chunks+0x110>
        if (!ptr)
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d104      	bne.n	800c0ee <iterate_string_chunks+0x82>

        total = newTotal;
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d12c      	bne.n	800c146 <iterate_string_chunks+0xda>
 800c0ec:	e042      	b.n	800c174 <iterate_string_chunks+0x108>
        if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f107 0218 	add.w	r2, r7, #24
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c0f8:	f7ff f9c8 	bl	800b48c <add_check_overflow>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <iterate_string_chunks+0x9c>
            return CborErrorDataTooLarge;
 800c102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c106:	e039      	b.n	800c17c <iterate_string_chunks+0x110>
        if (*result && *buflen >= newTotal)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d014      	beq.n	800c13a <iterate_string_chunks+0xce>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	429a      	cmp	r2, r3
 800c118:	d30f      	bcc.n	800c13a <iterate_string_chunks+0xce>
            *result = !!func(buffer + total, (const uint8_t *)ptr, chunkLen);
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c11e:	18d0      	adds	r0, r2, r3
 800c120:	69f9      	ldr	r1, [r7, #28]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c126:	4798      	blx	r3
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	bf14      	ite	ne
 800c12e:	2301      	movne	r3, #1
 800c130:	2300      	moveq	r3, #0
 800c132:	b2da      	uxtb	r2, r3
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	e002      	b.n	800c140 <iterate_string_chunks+0xd4>
            *result = false;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2200      	movs	r2, #0
 800c13e:	701a      	strb	r2, [r3, #0]
        total = newTotal;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	637b      	str	r3, [r7, #52]	@ 0x34
    while (1) {
 800c144:	e7bd      	b.n	800c0c2 <iterate_string_chunks+0x56>
    if (*result && *buflen > total) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d211      	bcs.n	800c174 <iterate_string_chunks+0x108>
        uint8_t nul[] = { 0 };
 800c150:	2300      	movs	r3, #0
 800c152:	743b      	strb	r3, [r7, #16]
        *result = !!func(buffer + total, nul, 1);
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c158:	18d0      	adds	r0, r2, r3
 800c15a:	f107 0110 	add.w	r1, r7, #16
 800c15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c160:	2201      	movs	r2, #1
 800c162:	4798      	blx	r3
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	bf14      	ite	ne
 800c16a:	2301      	movne	r3, #1
 800c16c:	2300      	moveq	r3, #0
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	701a      	strb	r2, [r3, #0]
    }
    *buflen = total;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c178:	601a      	str	r2, [r3, #0]
    return CborNoError;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	373c      	adds	r7, #60	@ 0x3c
 800c180:	46bd      	mov	sp, r7
 800c182:	bd90      	pop	{r4, r7, pc}
 800c184:	08015828 	.word	0x08015828
 800c188:	0801640c 	.word	0x0801640c
 800c18c:	08015594 	.word	0x08015594

0800c190 <_cbor_value_copy_string>:
 * \sa cbor_value_get_byte_string_chunk(), cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af02      	add	r7, sp, #8
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d001      	beq.n	800c1a8 <_cbor_value_copy_string+0x18>
 800c1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e4 <_cbor_value_copy_string+0x54>)
 800c1a6:	e000      	b.n	800c1aa <_cbor_value_copy_string+0x1a>
 800c1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e8 <_cbor_value_copy_string+0x58>)
 800c1aa:	f107 0213 	add.w	r2, r7, #19
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f7ff ff56 	bl	800c06c <iterate_string_chunks>
 800c1c0:	6178      	str	r0, [r7, #20]
                                          buffer ? iterate_memcpy : iterate_noop);
    return err ? err :
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d107      	bne.n	800c1d8 <_cbor_value_copy_string+0x48>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
 800c1c8:	7cfb      	ldrb	r3, [r7, #19]
    return err ? err :
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <_cbor_value_copy_string+0x42>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e003      	b.n	800c1da <_cbor_value_copy_string+0x4a>
 800c1d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c1d6:	e000      	b.n	800c1da <_cbor_value_copy_string+0x4a>
 800c1d8:	697b      	ldr	r3, [r7, #20]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	0800c04d 	.word	0x0800c04d
 800c1e8:	0800c009 	.word	0x0800c009

0800c1ec <cbor_value_map_find_value>:
 * found as elements of this map.
 *
 * \sa cbor_value_is_valid(), cbor_value_text_string_equals(), cbor_value_advance()
 */
CborError cbor_value_map_find_value(const CborValue *map, const char *string, CborValue *element)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08a      	sub	sp, #40	@ 0x28
 800c1f0:	af02      	add	r7, sp, #8
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
    CborError err;
    size_t len = strlen(string);
 800c1f8:	68b8      	ldr	r0, [r7, #8]
 800c1fa:	f7f4 f859 	bl	80002b0 <strlen>
 800c1fe:	61b8      	str	r0, [r7, #24]
    cbor_assert(cbor_value_is_map(map));
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff f932 	bl	800b46a <cbor_value_is_map>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <cbor_value_map_find_value+0x2e>
 800c20c:	4b36      	ldr	r3, [pc, #216]	@ (800c2e8 <cbor_value_map_find_value+0xfc>)
 800c20e:	4a37      	ldr	r2, [pc, #220]	@ (800c2ec <cbor_value_map_find_value+0x100>)
 800c210:	f240 5132 	movw	r1, #1330	@ 0x532
 800c214:	4836      	ldr	r0, [pc, #216]	@ (800c2f0 <cbor_value_map_find_value+0x104>)
 800c216:	f003 facf 	bl	800f7b8 <__assert_func>
    err = cbor_value_enter_container(map, element);
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fd91 	bl	800bd44 <cbor_value_enter_container>
 800c222:	61f8      	str	r0, [r7, #28]
    if (err)
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d14b      	bne.n	800c2c2 <cbor_value_map_find_value+0xd6>
        goto error;

    while (!cbor_value_at_end(element)) {
 800c22a:	e03c      	b.n	800c2a6 <cbor_value_map_find_value+0xba>
        /* find the non-tag so we can compare */
        err = cbor_value_skip_tag(element);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fd6f 	bl	800bd10 <cbor_value_skip_tag>
 800c232:	61f8      	str	r0, [r7, #28]
        if (err)
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d145      	bne.n	800c2c6 <cbor_value_map_find_value+0xda>
            goto error;
        if (cbor_value_is_text_string(element)) {
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff f904 	bl	800b448 <cbor_value_is_text_string>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d01a      	beq.n	800c27c <cbor_value_map_find_value+0x90>
            bool equals;
            size_t dummyLen = len;
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	613b      	str	r3, [r7, #16]
            err = iterate_string_chunks(element, CONST_CAST(char *, string), &dummyLen,
 800c24a:	f107 0117 	add.w	r1, r7, #23
 800c24e:	f107 0210 	add.w	r2, r7, #16
 800c252:	4b28      	ldr	r3, [pc, #160]	@ (800c2f4 <cbor_value_map_find_value+0x108>)
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	460b      	mov	r3, r1
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff ff04 	bl	800c06c <iterate_string_chunks>
 800c264:	61f8      	str	r0, [r7, #28]
                                        &equals, element, iterate_memcmp);
            if (err)
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d12e      	bne.n	800c2ca <cbor_value_map_find_value+0xde>
                goto error;
            if (equals)
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <cbor_value_map_find_value+0x9e>
                return preparse_value(element);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fa2c 	bl	800b6d0 <preparse_value>
 800c278:	4603      	mov	r3, r0
 800c27a:	e031      	b.n	800c2e0 <cbor_value_map_find_value+0xf4>
        } else {
            /* skip this key */
            err = cbor_value_advance(element);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff fd21 	bl	800bcc4 <cbor_value_advance>
 800c282:	61f8      	str	r0, [r7, #28]
            if (err)
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d121      	bne.n	800c2ce <cbor_value_map_find_value+0xe2>
                goto error;
        }

        /* skip this value */
        err = cbor_value_skip_tag(element);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fd40 	bl	800bd10 <cbor_value_skip_tag>
 800c290:	61f8      	str	r0, [r7, #28]
        if (err)
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d11c      	bne.n	800c2d2 <cbor_value_map_find_value+0xe6>
            goto error;
        err = cbor_value_advance(element);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff fd13 	bl	800bcc4 <cbor_value_advance>
 800c29e:	61f8      	str	r0, [r7, #28]
        if (err)
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d117      	bne.n	800c2d6 <cbor_value_map_find_value+0xea>
    while (!cbor_value_at_end(element)) {
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7ff f870 	bl	800b38c <cbor_value_at_end>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f083 0301 	eor.w	r3, r3, #1
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1b9      	bne.n	800c22c <cbor_value_map_find_value+0x40>
            goto error;
    }

    /* not found */
    element->type = CborInvalidType;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	22ff      	movs	r2, #255	@ 0xff
 800c2bc:	739a      	strb	r2, [r3, #14]
    return CborNoError;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e00e      	b.n	800c2e0 <cbor_value_map_find_value+0xf4>
        goto error;
 800c2c2:	bf00      	nop
 800c2c4:	e008      	b.n	800c2d8 <cbor_value_map_find_value+0xec>
            goto error;
 800c2c6:	bf00      	nop
 800c2c8:	e006      	b.n	800c2d8 <cbor_value_map_find_value+0xec>
                goto error;
 800c2ca:	bf00      	nop
 800c2cc:	e004      	b.n	800c2d8 <cbor_value_map_find_value+0xec>
                goto error;
 800c2ce:	bf00      	nop
 800c2d0:	e002      	b.n	800c2d8 <cbor_value_map_find_value+0xec>
            goto error;
 800c2d2:	bf00      	nop
 800c2d4:	e000      	b.n	800c2d8 <cbor_value_map_find_value+0xec>
            goto error;
 800c2d6:	bf00      	nop

error:
    element->type = CborInvalidType;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	22ff      	movs	r2, #255	@ 0xff
 800c2dc:	739a      	strb	r2, [r3, #14]
    return err;
 800c2de:	69fb      	ldr	r3, [r7, #28]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3720      	adds	r7, #32
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	08015870 	.word	0x08015870
 800c2ec:	08016424 	.word	0x08016424
 800c2f0:	08015594 	.word	0x08015594
 800c2f4:	0800c023 	.word	0x0800c023

0800c2f8 <isValidChar>:
 * @return true if the character is valid;
 * false otherwise
 */
static bool isValidChar( char a,
                         bool allowColon )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	460a      	mov	r2, r1
 800c302:	71fb      	strb	r3, [r7, #7]
 800c304:	4613      	mov	r3, r2
 800c306:	71bb      	strb	r3, [r7, #6]
    bool ret;

    if( ( a == '-' ) || ( a == '_' ) )
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c30c:	d002      	beq.n	800c314 <isValidChar+0x1c>
 800c30e:	79fb      	ldrb	r3, [r7, #7]
 800c310:	2b5f      	cmp	r3, #95	@ 0x5f
 800c312:	d102      	bne.n	800c31a <isValidChar+0x22>
    {
        ret = true;
 800c314:	2301      	movs	r3, #1
 800c316:	73fb      	strb	r3, [r7, #15]
 800c318:	e022      	b.n	800c360 <isValidChar+0x68>
    }
    else if( ( a >= '0' ) && ( a <= '9' ) )
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c31e:	d905      	bls.n	800c32c <isValidChar+0x34>
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	2b39      	cmp	r3, #57	@ 0x39
 800c324:	d802      	bhi.n	800c32c <isValidChar+0x34>
    {
        ret = true;
 800c326:	2301      	movs	r3, #1
 800c328:	73fb      	strb	r3, [r7, #15]
 800c32a:	e019      	b.n	800c360 <isValidChar+0x68>
    }
    else if( ( a >= 'A' ) && ( a <= 'Z' ) )
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	2b40      	cmp	r3, #64	@ 0x40
 800c330:	d905      	bls.n	800c33e <isValidChar+0x46>
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	2b5a      	cmp	r3, #90	@ 0x5a
 800c336:	d802      	bhi.n	800c33e <isValidChar+0x46>
    {
        ret = true;
 800c338:	2301      	movs	r3, #1
 800c33a:	73fb      	strb	r3, [r7, #15]
 800c33c:	e010      	b.n	800c360 <isValidChar+0x68>
    }
    else if( ( a >= 'a' ) && ( a <= 'z' ) )
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	2b60      	cmp	r3, #96	@ 0x60
 800c342:	d905      	bls.n	800c350 <isValidChar+0x58>
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	2b7a      	cmp	r3, #122	@ 0x7a
 800c348:	d802      	bhi.n	800c350 <isValidChar+0x58>
    {
        ret = true;
 800c34a:	2301      	movs	r3, #1
 800c34c:	73fb      	strb	r3, [r7, #15]
 800c34e:	e007      	b.n	800c360 <isValidChar+0x68>
    }
    else if( a == ':' )
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	2b3a      	cmp	r3, #58	@ 0x3a
 800c354:	d102      	bne.n	800c35c <isValidChar+0x64>
    {
        ret = allowColon;
 800c356:	79bb      	ldrb	r3, [r7, #6]
 800c358:	73fb      	strb	r3, [r7, #15]
 800c35a:	e001      	b.n	800c360 <isValidChar+0x68>
    }
    else
    {
        ret = false;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <isValidID>:
 */
static bool isValidID( const char * id,
                       uint16_t length,
                       uint16_t max,
                       bool allowColon )
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b086      	sub	sp, #24
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	4608      	mov	r0, r1
 800c378:	4611      	mov	r1, r2
 800c37a:	461a      	mov	r2, r3
 800c37c:	4603      	mov	r3, r0
 800c37e:	817b      	strh	r3, [r7, #10]
 800c380:	460b      	mov	r3, r1
 800c382:	813b      	strh	r3, [r7, #8]
 800c384:	4613      	mov	r3, r2
 800c386:	71fb      	strb	r3, [r7, #7]
    bool ret = false;
 800c388:	2300      	movs	r3, #0
 800c38a:	75fb      	strb	r3, [r7, #23]

    if( ( id != NULL ) && ( length > 0U ) &&
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d028      	beq.n	800c3e4 <isValidID+0x76>
 800c392:	897b      	ldrh	r3, [r7, #10]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d025      	beq.n	800c3e4 <isValidID+0x76>
 800c398:	897a      	ldrh	r2, [r7, #10]
 800c39a:	893b      	ldrh	r3, [r7, #8]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d821      	bhi.n	800c3e4 <isValidID+0x76>
        ( length <= max ) )
    {
        size_t i;

        for( i = 0; i < length; i++ )
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	613b      	str	r3, [r7, #16]
 800c3a4:	e011      	b.n	800c3ca <isValidID+0x5c>
        {
            if( isValidChar( id[ i ], allowColon ) == false )
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	79fa      	ldrb	r2, [r7, #7]
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff ffa0 	bl	800c2f8 <isValidChar>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	f083 0301 	eor.w	r3, r3, #1
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d107      	bne.n	800c3d4 <isValidID+0x66>
        for( i = 0; i < length; i++ )
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	613b      	str	r3, [r7, #16]
 800c3ca:	897b      	ldrh	r3, [r7, #10]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d3e9      	bcc.n	800c3a6 <isValidID+0x38>
 800c3d2:	e000      	b.n	800c3d6 <isValidID+0x68>
            {
                break;
 800c3d4:	bf00      	nop
            }
        }

        ret = ( i == length ) ? true : false;
 800c3d6:	897b      	ldrh	r3, [r7, #10]
 800c3d8:	693a      	ldr	r2, [r7, #16]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	bf0c      	ite	eq
 800c3de:	2301      	moveq	r3, #1
 800c3e0:	2300      	movne	r3, #0
 800c3e2:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <isValidThingName>:
 * @return true if the thing name is valid;
 * false otherwise
 */
static bool isValidThingName( const char * thingName,
                              uint16_t thingNameLength )
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	807b      	strh	r3, [r7, #2]
    return isValidID( thingName, thingNameLength,
 800c3fa:	8879      	ldrh	r1, [r7, #2]
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	2280      	movs	r2, #128	@ 0x80
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff ffb4 	bl	800c36e <isValidID>
 800c406:	4603      	mov	r3, r0
                      THINGNAME_MAX_LENGTH, true );
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <isValidJobId>:
 * @return true if the job ID is valid;
 * false otherwise
 */
static bool isValidJobId( const char * jobId,
                          uint16_t jobIdLength )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	460b      	mov	r3, r1
 800c41a:	807b      	strh	r3, [r7, #2]
    return isValidID( jobId, jobIdLength,
 800c41c:	8879      	ldrh	r1, [r7, #2]
 800c41e:	2300      	movs	r3, #0
 800c420:	2240      	movs	r2, #64	@ 0x40
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff ffa3 	bl	800c36e <isValidID>
 800c428:	4603      	mov	r3, r0
                      JOBID_MAX_LENGTH, false );
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <strnAppend>:
static JobsStatus_t strnAppend( char * buffer,
                                size_t * start,
                                size_t max,
                                const char * value,
                                size_t valueLength )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
    size_t i, j = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	613b      	str	r3, [r7, #16]

    assert( ( buffer != NULL ) && ( start != NULL ) && ( value != NULL ) );
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d005      	beq.n	800c458 <strnAppend+0x24>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <strnAppend+0x24>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d105      	bne.n	800c464 <strnAppend+0x30>
 800c458:	4b16      	ldr	r3, [pc, #88]	@ (800c4b4 <strnAppend+0x80>)
 800c45a:	4a17      	ldr	r2, [pc, #92]	@ (800c4b8 <strnAppend+0x84>)
 800c45c:	21e0      	movs	r1, #224	@ 0xe0
 800c45e:	4817      	ldr	r0, [pc, #92]	@ (800c4bc <strnAppend+0x88>)
 800c460:	f003 f9aa 	bl	800f7b8 <__assert_func>

    i = *start;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	617b      	str	r3, [r7, #20]

    while( ( i < max ) && ( j < valueLength ) )
 800c46a:	e00d      	b.n	800c488 <strnAppend+0x54>
    {
        buffer[ i ] = value[ j ];
 800c46c:	683a      	ldr	r2, [r7, #0]
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	441a      	add	r2, r3
 800c472:	68f9      	ldr	r1, [r7, #12]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	440b      	add	r3, r1
 800c478:	7812      	ldrb	r2, [r2, #0]
 800c47a:	701a      	strb	r2, [r3, #0]
        i++;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	3301      	adds	r3, #1
 800c480:	617b      	str	r3, [r7, #20]
        j++;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	3301      	adds	r3, #1
 800c486:	613b      	str	r3, [r7, #16]
    while( ( i < max ) && ( j < valueLength ) )
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d203      	bcs.n	800c498 <strnAppend+0x64>
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	429a      	cmp	r2, r3
 800c496:	d3e9      	bcc.n	800c46c <strnAppend+0x38>
    }

    *start = i;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	601a      	str	r2, [r3, #0]

    return ( i < max ) ? JobsSuccess : JobsBufferTooSmall;
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d201      	bcs.n	800c4aa <strnAppend+0x76>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e000      	b.n	800c4ac <strnAppend+0x78>
 800c4aa:	2304      	movs	r3, #4
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	08015924 	.word	0x08015924
 800c4b8:	08016440 	.word	0x08016440
 800c4bc:	08015964 	.word	0x08015964

0800c4c0 <writePreamble>:
static void writePreamble( char * buffer,
                           size_t * start,
                           size_t length,
                           const char * thingName,
                           uint16_t thingNameLength )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	603b      	str	r3, [r7, #0]
    ( void ) strnAppend( buffer, start, length,
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c508 <writePreamble+0x48>)
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	68b9      	ldr	r1, [r7, #8]
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f7ff ffab 	bl	800c434 <strnAppend>
                         JOBS_API_PREFIX, JOBS_API_PREFIX_LENGTH );
    ( void ) strnAppend( buffer, start, length,
 800c4de:	8b3b      	ldrh	r3, [r7, #24]
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff ffa3 	bl	800c434 <strnAppend>
                         thingName, thingNameLength );
    ( void ) strnAppend( buffer, start, length,
 800c4ee:	2306      	movs	r3, #6
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	4b06      	ldr	r3, [pc, #24]	@ (800c50c <writePreamble+0x4c>)
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	68b9      	ldr	r1, [r7, #8]
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7ff ff9b 	bl	800c434 <strnAppend>
                         JOBS_API_BRIDGE, JOBS_API_BRIDGE_LENGTH );
}
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	080159c8 	.word	0x080159c8
 800c50c:	080159d8 	.word	0x080159d8

0800c510 <isThingnameTopicMatch>:
                                   const size_t topicLength,
                                   const char * topicSuffix,
                                   const size_t topicSuffixLength,
                                   const char * thingName,
                                   const size_t thingNameLength )
{
 800c510:	b590      	push	{r4, r7, lr}
 800c512:	b0c9      	sub	sp, #292	@ 0x124
 800c514:	af02      	add	r7, sp, #8
 800c516:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800c51a:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 800c51e:	6020      	str	r0, [r4, #0]
 800c520:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800c524:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 800c528:	6001      	str	r1, [r0, #0]
 800c52a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800c52e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 800c532:	600a      	str	r2, [r1, #0]
 800c534:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800c538:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800c53c:	6013      	str	r3, [r2, #0]
    char expectedTopicBuffer[ TOPIC_BUFFER_SIZE + 1 ] = { '\0' };
 800c53e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c546:	4618      	mov	r0, r3
 800c548:	f240 1301 	movw	r3, #257	@ 0x101
 800c54c:	461a      	mov	r2, r3
 800c54e:	2100      	movs	r1, #0
 800c550:	f004 fdae 	bl	80110b0 <memset>
    bool isMatch = true;
 800c554:	2301      	movs	r3, #1
 800c556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    size_t start = 0U;
 800c55a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c55e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c562:	2200      	movs	r2, #0
 800c564:	601a      	str	r2, [r3, #0]

    if( ( topic == NULL ) || ( topicLength == 0U ) )
 800c566:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c56a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d006      	beq.n	800c582 <isThingnameTopicMatch+0x72>
 800c574:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c578:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d103      	bne.n	800c58a <isThingnameTopicMatch+0x7a>
    {
        isMatch = false;
 800c582:	2300      	movs	r3, #0
 800c584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800c588:	e00a      	b.n	800c5a0 <isThingnameTopicMatch+0x90>
    }
    else if( ( thingName == NULL ) || ( thingNameLength == 0U ) )
 800c58a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <isThingnameTopicMatch+0x8a>
 800c592:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <isThingnameTopicMatch+0x90>
    {
        isMatch = false;
 800c59a:	2300      	movs	r3, #0
 800c59c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    else
    {
        /* Empty MISRA body */
    }

    if( isMatch )
 800c5a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d053      	beq.n	800c650 <isThingnameTopicMatch+0x140>
    {
        writePreamble( expectedTopicBuffer, &start, TOPIC_BUFFER_SIZE, thingName, ( uint16_t ) thingNameLength );
 800c5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	f107 0110 	add.w	r1, r7, #16
 800c5b2:	f107 0014 	add.w	r0, r7, #20
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5c0:	f7ff ff7e 	bl	800c4c0 <writePreamble>
        ( void ) strnAppend( expectedTopicBuffer, &start, TOPIC_BUFFER_SIZE, topicSuffix, topicSuffixLength );
 800c5c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c5c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c5cc:	f107 0110 	add.w	r1, r7, #16
 800c5d0:	f107 0014 	add.w	r0, r7, #20
 800c5d4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800c5d8:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	9200      	str	r2, [sp, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5e6:	f7ff ff25 	bl	800c434 <strnAppend>

        isMatch = ( size_t ) strnlen( expectedTopicBuffer, TOPIC_BUFFER_SIZE ) ==
 800c5ea:	f107 0314 	add.w	r3, r7, #20
 800c5ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f004 fd9c 	bl	8011130 <strnlen>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c5fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4293      	cmp	r3, r2
 800c606:	bf0c      	ite	eq
 800c608:	2301      	moveq	r3, #1
 800c60a:	2300      	movne	r3, #0
 800c60c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
                  topicLength;
        isMatch = isMatch && ( strncmp( expectedTopicBuffer, topic, topicLength ) == 0 );
 800c610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c614:	2b00      	cmp	r3, #0
 800c616:	d012      	beq.n	800c63e <isThingnameTopicMatch+0x12e>
 800c618:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c61c:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800c620:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c628:	f107 0014 	add.w	r0, r7, #20
 800c62c:	6812      	ldr	r2, [r2, #0]
 800c62e:	6819      	ldr	r1, [r3, #0]
 800c630:	f004 fd59 	bl	80110e6 <strncmp>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <isThingnameTopicMatch+0x12e>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e000      	b.n	800c640 <isThingnameTopicMatch+0x130>
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800c644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    else
    {
        /* Empty MISRA body */
    }

    return isMatch;
 800c650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
}
 800c654:	4618      	mov	r0, r3
 800c656:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd90      	pop	{r4, r7, pc}
	...

0800c660 <Jobs_StartNext>:
JobsStatus_t Jobs_StartNext( char * buffer,
                             size_t length,
                             const char * thingName,
                             uint16_t thingNameLength,
                             size_t * outLength )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af02      	add	r7, sp, #8
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	807b      	strh	r3, [r7, #2]
    JobsStatus_t ret = JobsBadParameter;
 800c66e:	2303      	movs	r3, #3
 800c670:	75fb      	strb	r3, [r7, #23]
    size_t start = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	613b      	str	r3, [r7, #16]

    if( checkCommonParams() )
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d032      	beq.n	800c6e2 <Jobs_StartNext+0x82>
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d02f      	beq.n	800c6e2 <Jobs_StartNext+0x82>
 800c682:	887b      	ldrh	r3, [r7, #2]
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff feb1 	bl	800c3ee <isValidThingName>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d027      	beq.n	800c6e2 <Jobs_StartNext+0x82>
    {
        writePreamble( buffer, &start, length, thingName, thingNameLength );
 800c692:	f107 0110 	add.w	r1, r7, #16
 800c696:	887b      	ldrh	r3, [r7, #2]
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff ff0e 	bl	800c4c0 <writePreamble>

        ret = strnAppend( buffer, &start, length,
 800c6a4:	f107 0110 	add.w	r1, r7, #16
 800c6a8:	230a      	movs	r3, #10
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c6ec <Jobs_StartNext+0x8c>)
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff febf 	bl	800c434 <strnAppend>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	75fb      	strb	r3, [r7, #23]
                          JOBS_API_STARTNEXT, JOBS_API_STARTNEXT_LENGTH );

        start = ( start >= length ) ? ( length - 1U ) : start;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d802      	bhi.n	800c6c8 <Jobs_StartNext+0x68>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	e000      	b.n	800c6ca <Jobs_StartNext+0x6a>
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	613b      	str	r3, [r7, #16]
        buffer[ start ] = '\0';
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	701a      	strb	r2, [r3, #0]

        if( outLength != NULL )
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <Jobs_StartNext+0x82>
        {
            *outLength = start;
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	601a      	str	r2, [r3, #0]
        }
    }

    return ret;
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3718      	adds	r7, #24
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	08015a70 	.word	0x08015a70

0800c6f0 <Jobs_StartNextMsg>:

size_t Jobs_StartNextMsg( const char * clientToken,
                          size_t clientTokenLength,
                          char * buffer,
                          size_t bufferSize )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af02      	add	r7, sp, #8
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]
    size_t start = 0U;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]

    if( ( clientToken != NULL ) && ( clientTokenLength > 0U ) && ( bufferSize >= ( 18U + clientTokenLength ) ) )
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d022      	beq.n	800c74e <Jobs_StartNextMsg+0x5e>
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d01f      	beq.n	800c74e <Jobs_StartNextMsg+0x5e>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	3312      	adds	r3, #18
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d31a      	bcc.n	800c74e <Jobs_StartNextMsg+0x5e>
    {
        ( void ) strnAppend( buffer, &start, bufferSize, JOBS_API_CLIENTTOKEN, JOBS_API_CLIENTTOKEN_LENGTH );
 800c718:	f107 0114 	add.w	r1, r7, #20
 800c71c:	2310      	movs	r3, #16
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <Jobs_StartNextMsg+0x68>)
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff fe85 	bl	800c434 <strnAppend>
        ( void ) strnAppend( buffer, &start, bufferSize, clientToken, clientTokenLength );
 800c72a:	f107 0114 	add.w	r1, r7, #20
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fe7c 	bl	800c434 <strnAppend>
        ( void ) strnAppend( buffer, &start, bufferSize, "\"}", ( CONST_STRLEN( "\"}" ) ) );
 800c73c:	f107 0114 	add.w	r1, r7, #20
 800c740:	2302      	movs	r3, #2
 800c742:	9300      	str	r3, [sp, #0]
 800c744:	4b05      	ldr	r3, [pc, #20]	@ (800c75c <Jobs_StartNextMsg+0x6c>)
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7ff fe73 	bl	800c434 <strnAppend>
    }

    return start;
 800c74e:	697b      	ldr	r3, [r7, #20]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	08015a7c 	.word	0x08015a7c
 800c75c:	08015a90 	.word	0x08015a90

0800c760 <Jobs_Update>:
                          const char * thingName,
                          uint16_t thingNameLength,
                          const char * jobId,
                          uint16_t jobIdLength,
                          size_t * outLength )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af02      	add	r7, sp, #8
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	807b      	strh	r3, [r7, #2]
    JobsStatus_t ret = JobsBadParameter;
 800c76e:	2303      	movs	r3, #3
 800c770:	75fb      	strb	r3, [r7, #23]
    size_t start = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	613b      	str	r3, [r7, #16]

    if( checkCommonParams() &&
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d04c      	beq.n	800c816 <Jobs_Update+0xb6>
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d049      	beq.n	800c816 <Jobs_Update+0xb6>
 800c782:	887b      	ldrh	r3, [r7, #2]
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff fe31 	bl	800c3ee <isValidThingName>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d041      	beq.n	800c816 <Jobs_Update+0xb6>
        ( isValidJobId( jobId, jobIdLength ) == true ) )
 800c792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c794:	4619      	mov	r1, r3
 800c796:	6a38      	ldr	r0, [r7, #32]
 800c798:	f7ff fe3a 	bl	800c410 <isValidJobId>
 800c79c:	4603      	mov	r3, r0
    if( checkCommonParams() &&
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d039      	beq.n	800c816 <Jobs_Update+0xb6>
    {
        writePreamble( buffer, &start, length, thingName, thingNameLength );
 800c7a2:	f107 0110 	add.w	r1, r7, #16
 800c7a6:	887b      	ldrh	r3, [r7, #2]
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f7ff fe86 	bl	800c4c0 <writePreamble>

        ( void ) strnAppend( buffer, &start, length,
 800c7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7b6:	f107 0110 	add.w	r1, r7, #16
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f7ff fe37 	bl	800c434 <strnAppend>
                             jobId, jobIdLength );
        ( void ) strnAppend( buffer, &start, length,
 800c7c6:	f107 0110 	add.w	r1, r7, #16
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	4b14      	ldr	r3, [pc, #80]	@ (800c820 <Jobs_Update+0xc0>)
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f7ff fe2e 	bl	800c434 <strnAppend>
                             "/", ( CONST_STRLEN( "/" ) ) );
        ret = strnAppend( buffer, &start, length,
 800c7d8:	f107 0110 	add.w	r1, r7, #16
 800c7dc:	2306      	movs	r3, #6
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	4b10      	ldr	r3, [pc, #64]	@ (800c824 <Jobs_Update+0xc4>)
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff fe25 	bl	800c434 <strnAppend>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]
                          JOBS_API_UPDATE, JOBS_API_UPDATE_LENGTH );

        start = ( start >= length ) ? ( length - 1U ) : start;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d802      	bhi.n	800c7fc <Jobs_Update+0x9c>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	e000      	b.n	800c7fe <Jobs_Update+0x9e>
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	613b      	str	r3, [r7, #16]
        buffer[ start ] = '\0';
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	4413      	add	r3, r2
 800c806:	2200      	movs	r2, #0
 800c808:	701a      	strb	r2, [r3, #0]

        if( outLength != NULL )
 800c80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <Jobs_Update+0xb6>
        {
            *outLength = start;
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c814:	601a      	str	r2, [r3, #0]
        }
    }

    return ret;
 800c816:	7dfb      	ldrb	r3, [r7, #23]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	08015a94 	.word	0x08015a94
 800c824:	08015a98 	.word	0x08015a98

0800c828 <Jobs_UpdateMsg>:
size_t Jobs_UpdateMsg( JobCurrentStatus_t status,
                       const char * expectedVersion,
                       size_t expectedVersionLength,
                       char * buffer,
                       size_t bufferSize )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	607a      	str	r2, [r7, #4]
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	4603      	mov	r3, r0
 800c836:	73fb      	strb	r3, [r7, #15]
        CONST_STRLEN( "FAILED" ),
        CONST_STRLEN( "SUCCEEDED" ),
        CONST_STRLEN( "REJECTED" )
    };

    assert( ( ( size_t ) status ) < ARRAY_LENGTH( jobStatusString ) );
 800c838:	7bfb      	ldrb	r3, [r7, #15]
 800c83a:	2b04      	cmp	r3, #4
 800c83c:	d906      	bls.n	800c84c <Jobs_UpdateMsg+0x24>
 800c83e:	4b2c      	ldr	r3, [pc, #176]	@ (800c8f0 <Jobs_UpdateMsg+0xc8>)
 800c840:	4a2c      	ldr	r2, [pc, #176]	@ (800c8f4 <Jobs_UpdateMsg+0xcc>)
 800c842:	f44f 7152 	mov.w	r1, #840	@ 0x348
 800c846:	482c      	ldr	r0, [pc, #176]	@ (800c8f8 <Jobs_UpdateMsg+0xd0>)
 800c848:	f002 ffb6 	bl	800f7b8 <__assert_func>

    size_t start = 0U;
 800c84c:	2300      	movs	r3, #0
 800c84e:	617b      	str	r3, [r7, #20]

    if( ( expectedVersion != NULL ) && ( expectedVersionLength > 0U ) && ( bufferSize >=
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d046      	beq.n	800c8e4 <Jobs_UpdateMsg+0xbc>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d043      	beq.n	800c8e4 <Jobs_UpdateMsg+0xbc>
                                                                           ( 34U + expectedVersionLength + jobStatusStringLengths[ status ] ) ) &&
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	4a27      	ldr	r2, [pc, #156]	@ (800c8fc <Jobs_UpdateMsg+0xd4>)
 800c860:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4413      	add	r3, r2
 800c868:	3322      	adds	r3, #34	@ 0x22
    if( ( expectedVersion != NULL ) && ( expectedVersionLength > 0U ) && ( bufferSize >=
 800c86a:	6a3a      	ldr	r2, [r7, #32]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d339      	bcc.n	800c8e4 <Jobs_UpdateMsg+0xbc>
        ( jobStatusString[ status ] != NULL ) )
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	4a23      	ldr	r2, [pc, #140]	@ (800c900 <Jobs_UpdateMsg+0xd8>)
 800c874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                                                           ( 34U + expectedVersionLength + jobStatusStringLengths[ status ] ) ) &&
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d033      	beq.n	800c8e4 <Jobs_UpdateMsg+0xbc>
    {
        ( void ) strnAppend( buffer, &start, bufferSize, JOBS_API_STATUS, JOBS_API_STATUS_LENGTH );
 800c87c:	f107 0114 	add.w	r1, r7, #20
 800c880:	230b      	movs	r3, #11
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	4b1f      	ldr	r3, [pc, #124]	@ (800c904 <Jobs_UpdateMsg+0xdc>)
 800c886:	6a3a      	ldr	r2, [r7, #32]
 800c888:	6838      	ldr	r0, [r7, #0]
 800c88a:	f7ff fdd3 	bl	800c434 <strnAppend>
        ( void ) strnAppend( buffer, &start, bufferSize, jobStatusString[ status ], jobStatusStringLengths[ status ] );
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	4a1b      	ldr	r2, [pc, #108]	@ (800c900 <Jobs_UpdateMsg+0xd8>)
 800c892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	4918      	ldr	r1, [pc, #96]	@ (800c8fc <Jobs_UpdateMsg+0xd4>)
 800c89a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c89e:	f107 0114 	add.w	r1, r7, #20
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	6a3a      	ldr	r2, [r7, #32]
 800c8a8:	6838      	ldr	r0, [r7, #0]
 800c8aa:	f7ff fdc3 	bl	800c434 <strnAppend>
        ( void ) strnAppend( buffer, &start, bufferSize, JOBS_API_EXPECTED_VERSION, JOBS_API_EXPECTED_VERSION_LENGTH );
 800c8ae:	f107 0114 	add.w	r1, r7, #20
 800c8b2:	2315      	movs	r3, #21
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	4b14      	ldr	r3, [pc, #80]	@ (800c908 <Jobs_UpdateMsg+0xe0>)
 800c8b8:	6a3a      	ldr	r2, [r7, #32]
 800c8ba:	6838      	ldr	r0, [r7, #0]
 800c8bc:	f7ff fdba 	bl	800c434 <strnAppend>
        ( void ) strnAppend( buffer, &start, bufferSize, expectedVersion, expectedVersionLength );
 800c8c0:	f107 0114 	add.w	r1, r7, #20
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	6a3a      	ldr	r2, [r7, #32]
 800c8cc:	6838      	ldr	r0, [r7, #0]
 800c8ce:	f7ff fdb1 	bl	800c434 <strnAppend>
        ( void ) strnAppend( buffer, &start, bufferSize, "\"}", ( CONST_STRLEN( "\"}" ) ) );
 800c8d2:	f107 0114 	add.w	r1, r7, #20
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	4b0c      	ldr	r3, [pc, #48]	@ (800c90c <Jobs_UpdateMsg+0xe4>)
 800c8dc:	6a3a      	ldr	r2, [r7, #32]
 800c8de:	6838      	ldr	r0, [r7, #0]
 800c8e0:	f7ff fda8 	bl	800c434 <strnAppend>
    }

    return start;
 800c8e4:	697b      	ldr	r3, [r7, #20]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	08015aa0 	.word	0x08015aa0
 800c8f4:	0801644c 	.word	0x0801644c
 800c8f8:	08015964 	.word	0x08015964
 800c8fc:	0801645c 	.word	0x0801645c
 800c900:	08016470 	.word	0x08016470
 800c904:	08015ad8 	.word	0x08015ad8
 800c908:	08015ae4 	.word	0x08015ae4
 800c90c:	08015a90 	.word	0x08015a90

0800c910 <Jobs_IsStartNextAccepted>:

bool Jobs_IsStartNextAccepted( const char * topic,
                               const size_t topicLength,
                               const char * thingName,
                               const size_t thingNameLength )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af02      	add	r7, sp, #8
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	603b      	str	r3, [r7, #0]
    return isThingnameTopicMatch( topic, topicLength, "start-next/accepted", strlen( "start-next/accepted" ), thingName, thingNameLength );
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	2313      	movs	r3, #19
 800c928:	4a04      	ldr	r2, [pc, #16]	@ (800c93c <Jobs_IsStartNextAccepted+0x2c>)
 800c92a:	68b9      	ldr	r1, [r7, #8]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7ff fdef 	bl	800c510 <isThingnameTopicMatch>
 800c932:	4603      	mov	r3, r0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	080158dc 	.word	0x080158dc

0800c940 <Jobs_IsJobUpdateStatus>:
                             const char * jobId,
                             const size_t jobIdLength,
                             const char * thingName,
                             const size_t thingNameLength,
                             JobUpdateStatus_t expectedStatus )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b0c4      	sub	sp, #272	@ 0x110
 800c944:	af02      	add	r7, sp, #8
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c94c:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800c950:	6001      	str	r1, [r0, #0]
 800c952:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800c956:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800c95a:	600a      	str	r2, [r1, #0]
 800c95c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c960:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c964:	6013      	str	r3, [r2, #0]
    {
        CONST_STRLEN( "accepted" ),
        CONST_STRLEN( "rejected" )
    };

    assert( ( ( size_t ) expectedStatus ) < ARRAY_LENGTH( jobUpdateStatusString ) );
 800c966:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d906      	bls.n	800c97c <Jobs_IsJobUpdateStatus+0x3c>
 800c96e:	4b31      	ldr	r3, [pc, #196]	@ (800ca34 <Jobs_IsJobUpdateStatus+0xf4>)
 800c970:	4a31      	ldr	r2, [pc, #196]	@ (800ca38 <Jobs_IsJobUpdateStatus+0xf8>)
 800c972:	f240 3176 	movw	r1, #886	@ 0x376
 800c976:	4831      	ldr	r0, [pc, #196]	@ (800ca3c <Jobs_IsJobUpdateStatus+0xfc>)
 800c978:	f002 ff1e 	bl	800f7b8 <__assert_func>

    /* Max suffix size = max topic size - "$aws/<thingname>" prefix */
    size_t suffixBufferLength = ( TOPIC_BUFFER_SIZE - CONST_STRLEN( "$aws/<thingname>" ) );
 800c97c:	23f0      	movs	r3, #240	@ 0xf0
 800c97e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    char suffixBuffer[ TOPIC_BUFFER_SIZE - CONST_STRLEN( "$aws/<thingname>" ) ] = { '\0' };
 800c982:	f107 0314 	add.w	r3, r7, #20
 800c986:	22f0      	movs	r2, #240	@ 0xf0
 800c988:	2100      	movs	r1, #0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f004 fb90 	bl	80110b0 <memset>
    size_t start = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	613b      	str	r3, [r7, #16]

    ( void ) strnAppend( suffixBuffer, &start, suffixBufferLength, jobId, jobIdLength );
 800c994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c99c:	f107 0110 	add.w	r1, r7, #16
 800c9a0:	f107 0014 	add.w	r0, r7, #20
 800c9a4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c9a8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c9ac:	6812      	ldr	r2, [r2, #0]
 800c9ae:	9200      	str	r2, [sp, #0]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c9b6:	f7ff fd3d 	bl	800c434 <strnAppend>
    ( void ) strnAppend( suffixBuffer, &start, suffixBufferLength, "/update/", ( CONST_STRLEN( "/update/" ) ) );
 800c9ba:	f107 0110 	add.w	r1, r7, #16
 800c9be:	f107 0014 	add.w	r0, r7, #20
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	4b1e      	ldr	r3, [pc, #120]	@ (800ca40 <Jobs_IsJobUpdateStatus+0x100>)
 800c9c8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c9cc:	f7ff fd32 	bl	800c434 <strnAppend>
    ( void ) strnAppend( suffixBuffer, &start, suffixBufferLength, jobUpdateStatusString[ expectedStatus ], jobUpdateStatusStringLengths[ expectedStatus ] );
 800c9d0:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 800c9d4:	4a1b      	ldr	r2, [pc, #108]	@ (800ca44 <Jobs_IsJobUpdateStatus+0x104>)
 800c9d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c9da:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 800c9de:	491a      	ldr	r1, [pc, #104]	@ (800ca48 <Jobs_IsJobUpdateStatus+0x108>)
 800c9e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9e4:	f107 0110 	add.w	r1, r7, #16
 800c9e8:	f107 0014 	add.w	r0, r7, #20
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c9f4:	f7ff fd1e 	bl	800c434 <strnAppend>

    return isThingnameTopicMatch( topic, topicLength, suffixBuffer, strnlen( suffixBuffer, suffixBufferLength ), thingName, thingNameLength );
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800ca00:	4618      	mov	r0, r3
 800ca02:	f004 fb95 	bl	8011130 <strnlen>
 800ca06:	f107 0214 	add.w	r2, r7, #20
 800ca0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca0e:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 800ca12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca16:	9301      	str	r3, [sp, #4]
 800ca18:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	4603      	mov	r3, r0
 800ca20:	6809      	ldr	r1, [r1, #0]
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f7ff fd74 	bl	800c510 <isThingnameTopicMatch>
 800ca28:	4603      	mov	r3, r0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	08015afc 	.word	0x08015afc
 800ca38:	08016484 	.word	0x08016484
 800ca3c:	08015964 	.word	0x08015964
 800ca40:	08015b44 	.word	0x08015b44
 800ca44:	0801649c 	.word	0x0801649c
 800ca48:	080164a4 	.word	0x080164a4

0800ca4c <Jobs_GetJobId>:

size_t Jobs_GetJobId( const char * message,
                      size_t messageLength,
                      const char ** jobId )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08a      	sub	sp, #40	@ 0x28
 800ca50:	af04      	add	r7, sp, #16
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
    size_t jobIdLength = 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	613b      	str	r3, [r7, #16]
    JSONStatus_t jsonResult = JSONNotFound;
 800ca5c:	2304      	movs	r3, #4
 800ca5e:	75fb      	strb	r3, [r7, #23]

    jsonResult = JSON_Validate( message, messageLength );
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f002 f92a 	bl	800ecbc <JSON_Validate>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	75fb      	strb	r3, [r7, #23]

    if( jsonResult == JSONSuccess )
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d10e      	bne.n	800ca90 <Jobs_GetJobId+0x44>
    {
        jsonResult = JSON_SearchConst( message,
 800ca72:	2300      	movs	r3, #0
 800ca74:	9302      	str	r3, [sp, #8]
 800ca76:	f107 0310 	add.w	r3, r7, #16
 800ca7a:	9301      	str	r3, [sp, #4]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	230f      	movs	r3, #15
 800ca82:	4a06      	ldr	r2, [pc, #24]	@ (800ca9c <Jobs_GetJobId+0x50>)
 800ca84:	68b9      	ldr	r1, [r7, #8]
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f002 fd48 	bl	800f51c <JSON_SearchConst>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	75fb      	strb	r3, [r7, #23]
                                       jobId,
                                       &jobIdLength,
                                       NULL );
    }

    return jobIdLength;
 800ca90:	693b      	ldr	r3, [r7, #16]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	08015b50 	.word	0x08015b50

0800caa0 <Jobs_GetJobDocument>:

size_t Jobs_GetJobDocument( const char * message,
                            size_t messageLength,
                            const char ** jobDoc )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	@ 0x28
 800caa4:	af04      	add	r7, sp, #16
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
    size_t jobDocLength = 0U;
 800caac:	2300      	movs	r3, #0
 800caae:	613b      	str	r3, [r7, #16]
    JSONStatus_t jsonResult = JSONNotFound;
 800cab0:	2304      	movs	r3, #4
 800cab2:	75fb      	strb	r3, [r7, #23]

    jsonResult = JSON_Validate( message, messageLength );
 800cab4:	68b9      	ldr	r1, [r7, #8]
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f002 f900 	bl	800ecbc <JSON_Validate>
 800cabc:	4603      	mov	r3, r0
 800cabe:	75fb      	strb	r3, [r7, #23]

    if( jsonResult == JSONSuccess )
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d10e      	bne.n	800cae4 <Jobs_GetJobDocument+0x44>
    {
        jsonResult = JSON_SearchConst( message,
 800cac6:	2300      	movs	r3, #0
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	f107 0310 	add.w	r3, r7, #16
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	2315      	movs	r3, #21
 800cad6:	4a06      	ldr	r2, [pc, #24]	@ (800caf0 <Jobs_GetJobDocument+0x50>)
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f002 fd1e 	bl	800f51c <JSON_SearchConst>
 800cae0:	4603      	mov	r3, r0
 800cae2:	75fb      	strb	r3, [r7, #23]
                                       jobDoc,
                                       &jobDocLength,
                                       NULL );
    }

    return jobDocLength;
 800cae4:	693b      	ldr	r3, [r7, #16]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3718      	adds	r7, #24
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	08015b60 	.word	0x08015b60

0800caf4 <stringBuilder>:
                                 int32_t * num );

static size_t stringBuilder( char * buffer,
                             size_t bufferSizeBytes,
                             const char * const strings[] )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b088      	sub	sp, #32
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
    size_t curLen = 0;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61fb      	str	r3, [r7, #28]
    size_t i;
    size_t thisLength = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	617b      	str	r3, [r7, #20]

    buffer[ 0 ] = '\0';
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	701a      	strb	r2, [r3, #0]

    for( i = 0; strings[ i ] != NULL; i++ )
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61bb      	str	r3, [r7, #24]
 800cb12:	e026      	b.n	800cb62 <stringBuilder+0x6e>
    {
        thisLength = strlen( strings[ i ] );
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7f3 fbc6 	bl	80002b0 <strlen>
 800cb24:	6178      	str	r0, [r7, #20]

        if( ( thisLength + curLen + 1U ) > bufferSizeBytes )
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d202      	bcs.n	800cb3a <stringBuilder+0x46>
        {
            curLen = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	61fb      	str	r3, [r7, #28]
            break;
 800cb38:	e01a      	b.n	800cb70 <stringBuilder+0x7c>
        }

        ( void ) strncat( buffer, strings[ i ], bufferSizeBytes - curLen - 1U );
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4413      	add	r3, r2
 800cb42:	6819      	ldr	r1, [r3, #0]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f004 fab6 	bl	80110c0 <strncat>
        curLen += thisLength;
 800cb54:	69fa      	ldr	r2, [r7, #28]
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	4413      	add	r3, r2
 800cb5a:	61fb      	str	r3, [r7, #28]
    for( i = 0; strings[ i ] != NULL; i++ )
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	61bb      	str	r3, [r7, #24]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4413      	add	r3, r2
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1d1      	bne.n	800cb14 <stringBuilder+0x20>
    }

    buffer[ curLen ] = '\0';
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	4413      	add	r3, r2
 800cb76:	2200      	movs	r2, #0
 800cb78:	701a      	strb	r2, [r3, #0]

    return curLen;
 800cb7a:	69fb      	ldr	r3, [r7, #28]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3720      	adds	r7, #32
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <createTopic>:
                             const char * streamName,
                             size_t streamNameLength,
                             const char * thingName,
                             size_t thingNameLength,
                             const char * apiSuffix )
{
 800cb84:	b5b0      	push	{r4, r5, r7, lr}
 800cb86:	b0b8      	sub	sp, #224	@ 0xe0
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
    uint16_t topicLen = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    char streamNameBuff[ STREAM_NAME_MAX_LEN + 1 ];
    char thingNameBuff[ MAX_THINGNAME_LEN + 1 ];

    /* NULL-terminated list of topic string parts. */
    const char * topicParts[] =
 800cb98:	4b20      	ldr	r3, [pc, #128]	@ (800cc1c <createTopic+0x98>)
 800cb9a:	f107 0414 	add.w	r4, r7, #20
 800cb9e:	461d      	mov	r5, r3
 800cba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cba8:	e884 0003 	stmia.w	r4, {r0, r1}
               * time, initialized below.*/
        NULL,
        NULL
    };

    ( void ) memset( streamNameBuff, ( int32_t ) '\0', STREAM_NAME_MAX_LEN + 1U );
 800cbac:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800cbb0:	222d      	movs	r2, #45	@ 0x2d
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f004 fa7b 	bl	80110b0 <memset>
    ( void ) memcpy( streamNameBuff, streamName, streamNameLength );
 800cbba:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	6879      	ldr	r1, [r7, #4]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f004 fb5d 	bl	8011282 <memcpy>

    ( void ) memset( thingNameBuff, ( int32_t ) '\0', MAX_THINGNAME_LEN + 1U );
 800cbc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cbcc:	2281      	movs	r2, #129	@ 0x81
 800cbce:	2100      	movs	r1, #0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f004 fa6d 	bl	80110b0 <memset>
    ( void ) memcpy( thingNameBuff, thingName, thingNameLength );
 800cbd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cbda:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800cbde:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f004 fb4d 	bl	8011282 <memcpy>

    topicParts[ 1 ] = ( const char * ) thingNameBuff;
 800cbe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cbec:	61bb      	str	r3, [r7, #24]
    topicParts[ 3 ] = ( const char * ) streamNameBuff;
 800cbee:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800cbf2:	623b      	str	r3, [r7, #32]
    topicParts[ 4 ] = ( const char * ) apiSuffix;
 800cbf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cbf8:	627b      	str	r3, [r7, #36]	@ 0x24

    topicLen = ( uint16_t ) stringBuilder( topicBuffer,
 800cbfa:	f107 0314 	add.w	r3, r7, #20
 800cbfe:	461a      	mov	r2, r3
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff ff76 	bl	800caf4 <stringBuilder>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
                                           topicBufferLen,
                                           topicParts );

    return topicLen;
 800cc0e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	37e0      	adds	r7, #224	@ 0xe0
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bdb0      	pop	{r4, r5, r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	08015be0 	.word	0x08015be0

0800cc20 <mqttDownloader_init>:
                                                const char * streamName,
                                                size_t streamNameLength,
                                                const char * thingName,
                                                size_t thingNameLength,
                                                DataType_t dataType )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08c      	sub	sp, #48	@ 0x30
 800cc24:	af04      	add	r7, sp, #16
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
 800cc2c:	603b      	str	r3, [r7, #0]
    const char * streamDataApiSuffix = NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	61fb      	str	r3, [r7, #28]
    const char * getStreamApiSuffix = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	61bb      	str	r3, [r7, #24]
    MQTTFileDownloaderStatus_t initStatus = MQTTFileDownloaderSuccess;
 800cc36:	2301      	movs	r3, #1
 800cc38:	75fb      	strb	r3, [r7, #23]

    if( ( streamName == NULL ) || ( streamNameLength == 0U ) ||
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00b      	beq.n	800cc58 <mqttDownloader_init+0x38>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d008      	beq.n	800cc58 <mqttDownloader_init+0x38>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d005      	beq.n	800cc58 <mqttDownloader_init+0x38>
        ( thingName == NULL ) || ( thingNameLength == 0U ) || ( context == NULL ) )
 800cc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <mqttDownloader_init+0x38>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <mqttDownloader_init+0x3c>
    {
        initStatus = MQTTFileDownloaderBadParameter;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	75fb      	strb	r3, [r7, #23]
    }

    if( initStatus == MQTTFileDownloaderSuccess )
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d13b      	bne.n	800ccda <mqttDownloader_init+0xba>
    {
        /* Initializing MQTT File Downloader context */
        ( void ) memset( context->topicStreamData, ( int32_t ) '\0', TOPIC_STREAM_DATA_BUFFER_SIZE );
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	22cc      	movs	r2, #204	@ 0xcc
 800cc66:	2100      	movs	r1, #0
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f004 fa21 	bl	80110b0 <memset>
        ( void ) memset( context->topicGetStream, ( int32_t ) '\0', TOPIC_GET_STREAM_BUFFER_SIZE );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	33d0      	adds	r3, #208	@ 0xd0
 800cc72:	22cb      	movs	r2, #203	@ 0xcb
 800cc74:	2100      	movs	r1, #0
 800cc76:	4618      	mov	r0, r3
 800cc78:	f004 fa1a 	bl	80110b0 <memset>
        context->topicStreamDataLength = 0U;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        context->topicGetStreamLength = 0U;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
        context->dataType = ( uint8_t ) dataType;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cc92:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0

        if( context->dataType == ( uint8_t ) DATA_TYPE_JSON )
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d102      	bne.n	800cca6 <mqttDownloader_init+0x86>
        {
            streamDataApiSuffix = MQTT_API_DATA_JSON;
 800cca0:	4b23      	ldr	r3, [pc, #140]	@ (800cd30 <mqttDownloader_init+0x110>)
 800cca2:	61fb      	str	r3, [r7, #28]
 800cca4:	e001      	b.n	800ccaa <mqttDownloader_init+0x8a>
        }
        else
        {
            streamDataApiSuffix = MQTT_API_DATA_CBOR;
 800cca6:	4b23      	ldr	r3, [pc, #140]	@ (800cd34 <mqttDownloader_init+0x114>)
 800cca8:	61fb      	str	r3, [r7, #28]
        }

        context->topicStreamDataLength = createTopic(
            context->topicStreamData,
 800ccaa:	68f8      	ldr	r0, [r7, #12]
        context->topicStreamDataLength = createTopic(
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	9302      	str	r3, [sp, #8]
 800ccb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb2:	9301      	str	r3, [sp, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	21cc      	movs	r1, #204	@ 0xcc
 800ccbe:	f7ff ff61 	bl	800cb84 <createTopic>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            streamNameLength,
            thingName,
            thingNameLength,
            streamDataApiSuffix );

        if( context->topicStreamDataLength == 0U )
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <mqttDownloader_init+0xba>
        {
            initStatus = MQTTFileDownloaderInitFailed;
 800ccd6:	2304      	movs	r3, #4
 800ccd8:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( initStatus == MQTTFileDownloaderSuccess )
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d122      	bne.n	800cd26 <mqttDownloader_init+0x106>
    {
        if( dataType == DATA_TYPE_JSON )
 800cce0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d102      	bne.n	800ccee <mqttDownloader_init+0xce>
        {
            getStreamApiSuffix = MQTT_API_GET_JSON;
 800cce8:	4b13      	ldr	r3, [pc, #76]	@ (800cd38 <mqttDownloader_init+0x118>)
 800ccea:	61bb      	str	r3, [r7, #24]
 800ccec:	e001      	b.n	800ccf2 <mqttDownloader_init+0xd2>
        }
        else
        {
            getStreamApiSuffix = MQTT_API_GET_CBOR;
 800ccee:	4b13      	ldr	r3, [pc, #76]	@ (800cd3c <mqttDownloader_init+0x11c>)
 800ccf0:	61bb      	str	r3, [r7, #24]
        }

        context
           ->topicGetStreamLength = createTopic( context->topicGetStream,
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	9302      	str	r3, [sp, #8]
 800ccfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccfe:	9301      	str	r3, [sp, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	21cb      	movs	r1, #203	@ 0xcb
 800cd0a:	f7ff ff3b 	bl	800cb84 <createTopic>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	461a      	mov	r2, r3
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
                                                 streamNameLength,
                                                 thingName,
                                                 thingNameLength,
                                                 getStreamApiSuffix );

        if( context->topicGetStreamLength == 0U )
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <mqttDownloader_init+0x106>
        {
            initStatus = MQTTFileDownloaderInitFailed;
 800cd22:	2304      	movs	r3, #4
 800cd24:	75fb      	strb	r3, [r7, #23]
        }
    }

    return initStatus;
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3720      	adds	r7, #32
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	08015bf8 	.word	0x08015bf8
 800cd34:	08015c04 	.word	0x08015c04
 800cd38:	08015c10 	.word	0x08015c10
 800cd3c:	08015c1c 	.word	0x08015c1c

0800cd40 <mqttDownloader_createGetDataBlockRequest>:
                                                 uint32_t blockSize,
                                                 uint16_t blockOffset,
                                                 uint32_t numberOfBlocksRequested,
                                                 char * getStreamRequest,
                                                 size_t getStreamRequestLength )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08c      	sub	sp, #48	@ 0x30
 800cd44:	af06      	add	r7, sp, #24
 800cd46:	60ba      	str	r2, [r7, #8]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	73fb      	strb	r3, [r7, #15]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	81bb      	strh	r3, [r7, #12]
 800cd52:	4613      	mov	r3, r2
 800cd54:	80fb      	strh	r3, [r7, #6]
    size_t requestLength = 0U;
 800cd56:	2300      	movs	r3, #0
 800cd58:	617b      	str	r3, [r7, #20]
    /*
     * Get stream request format
     *
     *   "{ \"s\" : 1, \"f\": 1, \"l\": 256, \"o\": 0, \"n\": 1 }";
     */
    if( ( getStreamRequestLength >= GET_STREAM_REQUEST_BUFFER_SIZE ) &&
 800cd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5c:	2bff      	cmp	r3, #255	@ 0xff
 800cd5e:	d936      	bls.n	800cdce <mqttDownloader_createGetDataBlockRequest+0x8e>
 800cd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d033      	beq.n	800cdce <mqttDownloader_createGetDataBlockRequest+0x8e>
        ( getStreamRequest != NULL ) )
    {
        ( void ) memset( getStreamRequest, ( int32_t ) '\0', GET_STREAM_REQUEST_BUFFER_SIZE );
 800cd66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd6e:	f004 f99f 	bl	80110b0 <memset>

        if( dataType == DATA_TYPE_JSON )
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d115      	bne.n	800cda4 <mqttDownloader_createGetDataBlockRequest+0x64>
        {
            /* MISRA Ref 21.6.1 [Use of snprintf] */
            /* More details at: https://github.com/aws/aws-iot-core-mqtt-file-streams-embedded-c//blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( getStreamRequest,
 800cd78:	89b9      	ldrh	r1, [r7, #12]
 800cd7a:	88fb      	ldrh	r3, [r7, #6]
 800cd7c:	6a3a      	ldr	r2, [r7, #32]
 800cd7e:	9202      	str	r2, [sp, #8]
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	460b      	mov	r3, r1
 800cd88:	4a13      	ldr	r2, [pc, #76]	@ (800cdd8 <mqttDownloader_createGetDataBlockRequest+0x98>)
 800cd8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd90:	f004 f806 	bl	8010da0 <sniprintf>
                               fileId,
                               blockSize,
                               blockOffset,
                               numberOfBlocksRequested );

            requestLength = strnlen( getStreamRequest,
 800cd94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd9a:	f004 f9c9 	bl	8011130 <strnlen>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	617b      	str	r3, [r7, #20]
 800cda2:	e014      	b.n	800cdce <mqttDownloader_createGetDataBlockRequest+0x8e>
        }
        else
        {
            /* MISRA Ref 7.4.1 [Use of string literal] */
            /* More details at: https://github.com/aws/aws-iot-core-mqtt-file-streams-embedded-c//blob/main/MISRA.md#rule-74 */
            ( void ) CBOR_Encode_GetStreamRequestMessage( ( uint8_t * ) getStreamRequest,
 800cda4:	89bb      	ldrh	r3, [r7, #12]
 800cda6:	88fa      	ldrh	r2, [r7, #6]
 800cda8:	f107 0014 	add.w	r0, r7, #20
 800cdac:	6a39      	ldr	r1, [r7, #32]
 800cdae:	9105      	str	r1, [sp, #20]
 800cdb0:	2104      	movs	r1, #4
 800cdb2:	9104      	str	r1, [sp, #16]
 800cdb4:	4909      	ldr	r1, [pc, #36]	@ (800cddc <mqttDownloader_createGetDataBlockRequest+0x9c>)
 800cdb6:	9103      	str	r1, [sp, #12]
 800cdb8:	9202      	str	r2, [sp, #8]
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	9201      	str	r2, [sp, #4]
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	4b07      	ldr	r3, [pc, #28]	@ (800cde0 <mqttDownloader_createGetDataBlockRequest+0xa0>)
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cdc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdca:	f000 fdcf 	bl	800d96c <CBOR_Encode_GetStreamRequestMessage>
                                                          strlen( "MQ==" ),
                                                          numberOfBlocksRequested );
        }
    }

    return requestLength;
 800cdce:	697b      	ldr	r3, [r7, #20]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3718      	adds	r7, #24
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	08015c28 	.word	0x08015c28
 800cddc:	08015c58 	.word	0x08015c58
 800cde0:	08015c54 	.word	0x08015c54

0800cde4 <handleCborMessage>:
                                                     int32_t * fileId,
                                                     int32_t * blockId,
                                                     int32_t * blockSize,
                                                     uint8_t * decodedData,
                                                     size_t * decodedDataLength )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08c      	sub	sp, #48	@ 0x30
 800cde8:	af04      	add	r7, sp, #16
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	603b      	str	r3, [r7, #0]
    bool cborDecodeRet = false;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	77bb      	strb	r3, [r7, #30]
    uint8_t * payload = decodedData;
 800cdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf8:	61bb      	str	r3, [r7, #24]
    size_t payloadSize = mqttFileDownloader_CONFIG_BLOCK_SIZE;
 800cdfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdfe:	617b      	str	r3, [r7, #20]
    MQTTFileDownloaderStatus_t handleStatus = MQTTFileDownloaderSuccess;
 800ce00:	2301      	movs	r3, #1
 800ce02:	77fb      	strb	r3, [r7, #31]

    cborDecodeRet = CBOR_Decode_GetStreamResponseMessage( message,
 800ce04:	f107 0314 	add.w	r3, r7, #20
 800ce08:	9302      	str	r3, [sp, #8]
 800ce0a:	f107 0318 	add.w	r3, r7, #24
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	68b9      	ldr	r1, [r7, #8]
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 fcb8 	bl	800d790 <CBOR_Decode_GetStreamResponseMessage>
 800ce20:	4603      	mov	r3, r0
 800ce22:	77bb      	strb	r3, [r7, #30]
                                                          blockId,
                                                          blockSize,
                                                          &payload,
                                                          &payloadSize );

    if( cborDecodeRet )
 800ce24:	7fbb      	ldrb	r3, [r7, #30]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d003      	beq.n	800ce32 <handleCborMessage+0x4e>
    {
        *decodedDataLength = payloadSize;
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	e001      	b.n	800ce36 <handleCborMessage+0x52>
    }
    else
    {
        handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800ce32:	2307      	movs	r3, #7
 800ce34:	77fb      	strb	r3, [r7, #31]
    }

    return handleStatus;
 800ce36:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3720      	adds	r7, #32
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <getNumberFromString>:

static bool getNumberFromString( const char * str,
                                 size_t len,
                                 int32_t * num )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08a      	sub	sp, #40	@ 0x28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
    int32_t out = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t digit;
    bool retVal = true;
 800ce50:	2301      	movs	r3, #1
 800ce52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    const int32_t maxValue = 2147483647;
 800ce56:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ce5a:	61bb      	str	r3, [r7, #24]

    /* Biggest number which can fit in an int32_t is 2147483647 which has 10 digits. */
    assert( len <= 10 );
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b0a      	cmp	r3, #10
 800ce60:	d906      	bls.n	800ce70 <getNumberFromString+0x30>
 800ce62:	4b33      	ldr	r3, [pc, #204]	@ (800cf30 <getNumberFromString+0xf0>)
 800ce64:	4a33      	ldr	r2, [pc, #204]	@ (800cf34 <getNumberFromString+0xf4>)
 800ce66:	f240 1187 	movw	r1, #391	@ 0x187
 800ce6a:	4833      	ldr	r0, [pc, #204]	@ (800cf38 <getNumberFromString+0xf8>)
 800ce6c:	f002 fca4 	bl	800f7b8 <__assert_func>

    for( size_t uxIndex = 0U; uxIndex < len; uxIndex++ )
 800ce70:	2300      	movs	r3, #0
 800ce72:	61fb      	str	r3, [r7, #28]
 800ce74:	e049      	b.n	800cf0a <getNumberFromString+0xca>
    {
        if( IS_CHAR_DIGIT( str[ uxIndex ] ) == true )
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce80:	d907      	bls.n	800ce92 <getNumberFromString+0x52>
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	4413      	add	r3, r2
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b39      	cmp	r3, #57	@ 0x39
 800ce8c:	d801      	bhi.n	800ce92 <getNumberFromString+0x52>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <getNumberFromString+0x54>
 800ce92:	2300      	movs	r3, #0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d12b      	bne.n	800cef0 <getNumberFromString+0xb0>
        {
            digit = CHAR_TO_DIGIT( str[ uxIndex ] );
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	3b30      	subs	r3, #48	@ 0x30
 800cea2:	617b      	str	r3, [r7, #20]

            if( ( maxValue / 10 ) < out )
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	4a25      	ldr	r2, [pc, #148]	@ (800cf3c <getNumberFromString+0xfc>)
 800cea8:	fb82 1203 	smull	r1, r2, r2, r3
 800ceac:	1092      	asrs	r2, r2, #2
 800ceae:	17db      	asrs	r3, r3, #31
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	dd03      	ble.n	800cec0 <getNumberFromString+0x80>
            {
                /* The out value will overflow on multiplication with 10. */
                retVal = false;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cebe:	e01a      	b.n	800cef6 <getNumberFromString+0xb6>
            }
            else if( ( maxValue - digit ) < ( out * 10 ) )
 800cec0:	69ba      	ldr	r2, [r7, #24]
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	1ad1      	subs	r1, r2, r3
 800cec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec8:	4613      	mov	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	4299      	cmp	r1, r3
 800ced2:	da03      	bge.n	800cedc <getNumberFromString+0x9c>
            {
                /* The value ( out * 10 ) will overflow when the digit is
                 * added to it. */
                retVal = false;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ceda:	e00c      	b.n	800cef6 <getNumberFromString+0xb6>
            }
            else
            {
                out = ( out * 10 ) + digit;
 800cedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	461a      	mov	r2, r3
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	4413      	add	r3, r2
 800ceec:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceee:	e002      	b.n	800cef6 <getNumberFromString+0xb6>
            }
        }
        else
        {
            retVal = false;
 800cef0:	2300      	movs	r3, #0
 800cef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        }

        if( retVal == false )
 800cef6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cefa:	f083 0301 	eor.w	r3, r3, #1
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d107      	bne.n	800cf14 <getNumberFromString+0xd4>
    for( size_t uxIndex = 0U; uxIndex < len; uxIndex++ )
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	3301      	adds	r3, #1
 800cf08:	61fb      	str	r3, [r7, #28]
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d3b1      	bcc.n	800ce76 <getNumberFromString+0x36>
 800cf12:	e000      	b.n	800cf16 <getNumberFromString+0xd6>
        {
            break;
 800cf14:	bf00      	nop
        }
    }

    if( retVal == true )
 800cf16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <getNumberFromString+0xe4>
    {
        *num = out;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf22:	601a      	str	r2, [r3, #0]
    }

    return retVal;
 800cf24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3728      	adds	r7, #40	@ 0x28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	08015c60 	.word	0x08015c60
 800cf34:	080164ac 	.word	0x080164ac
 800cf38:	08015c6c 	.word	0x08015c6c
 800cf3c:	66666667 	.word	0x66666667

0800cf40 <handleJsonMessage>:
                                                     int32_t * fileId,
                                                     int32_t * blockId,
                                                     int32_t * blockSize,
                                                     uint8_t * decodedData,
                                                     size_t * decodedDataLength )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b096      	sub	sp, #88	@ 0x58
 800cf44:	af04      	add	r7, sp, #16
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
    const char fileIdQuery[] = "f";
 800cf4e:	2366      	movs	r3, #102	@ 0x66
 800cf50:	863b      	strh	r3, [r7, #48]	@ 0x30
    size_t fileIdQueryLength = sizeof( fileIdQuery ) - 1U;
 800cf52:	2301      	movs	r3, #1
 800cf54:	643b      	str	r3, [r7, #64]	@ 0x40
    const char blockIdQuery[] = "i";
 800cf56:	2369      	movs	r3, #105	@ 0x69
 800cf58:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    size_t blockIdQueryLength = sizeof( blockIdQuery ) - 1U;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const char blockSizeQuery[] = "l";
 800cf5e:	236c      	movs	r3, #108	@ 0x6c
 800cf60:	853b      	strh	r3, [r7, #40]	@ 0x28
    size_t blockSizeQueryLength = sizeof( blockSizeQuery ) - 1U;
 800cf62:	2301      	movs	r3, #1
 800cf64:	63bb      	str	r3, [r7, #56]	@ 0x38
    const char dataQuery[] = "p";
 800cf66:	2370      	movs	r3, #112	@ 0x70
 800cf68:	84bb      	strh	r3, [r7, #36]	@ 0x24
    size_t dataQueryLength = sizeof( dataQuery ) - 1U;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	637b      	str	r3, [r7, #52]	@ 0x34
    char * dataValue;
    size_t dataValueLength;
    size_t fileBlockLength;
    char * value;
    JSONStatus_t result = JSONSuccess;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    MQTTFileDownloaderStatus_t handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800cf74:	2307      	movs	r3, #7
 800cf76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    Base64Status_t base64Status = Base64Success;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    result = JSON_Search( ( char * ) message,
 800cf80:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800cf84:	2300      	movs	r3, #0
 800cf86:	9302      	str	r3, [sp, #8]
 800cf88:	f107 0318 	add.w	r3, r7, #24
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	f107 0314 	add.w	r3, r7, #20
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf96:	68b9      	ldr	r1, [r7, #8]
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f002 fb14 	bl	800f5c6 <JSON_SearchT>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                          fileIdQuery,
                          fileIdQueryLength,
                          &value,
                          &fileBlockLength );

    if( result == JSONSuccess )
 800cfa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d10b      	bne.n	800cfc4 <handleJsonMessage+0x84>
    {
        if( getNumberFromString( value, fileBlockLength, fileId ) == true )
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	69b9      	ldr	r1, [r7, #24]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7ff ff44 	bl	800ce40 <getNumberFromString>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d002      	beq.n	800cfc4 <handleJsonMessage+0x84>
        {
            handleStatus = MQTTFileDownloaderSuccess;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( handleStatus == MQTTFileDownloaderSuccess )
 800cfc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d128      	bne.n	800d01e <handleJsonMessage+0xde>
    {
        result = JSON_Search( ( char * ) message,
 800cfcc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	9302      	str	r3, [sp, #8]
 800cfd4:	f107 0318 	add.w	r3, r7, #24
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	f107 0314 	add.w	r3, r7, #20
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f002 faee 	bl	800f5c6 <JSON_SearchT>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                              blockIdQuery,
                              blockIdQueryLength,
                              &value,
                              &fileBlockLength );

        if( result == JSONSuccess )
 800cff0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d10f      	bne.n	800d018 <handleJsonMessage+0xd8>
        {
            if( getNumberFromString( value, fileBlockLength, blockId ) == false )
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	69b9      	ldr	r1, [r7, #24]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff ff1e 	bl	800ce40 <getNumberFromString>
 800d004:	4603      	mov	r3, r0
 800d006:	f083 0301 	eor.w	r3, r3, #1
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <handleJsonMessage+0xde>
            {
                handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800d010:	2307      	movs	r3, #7
 800d012:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d016:	e002      	b.n	800d01e <handleJsonMessage+0xde>
            }
        }
        else
        {
            handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800d018:	2307      	movs	r3, #7
 800d01a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( handleStatus == MQTTFileDownloaderSuccess )
 800d01e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d022:	2b01      	cmp	r3, #1
 800d024:	d128      	bne.n	800d078 <handleJsonMessage+0x138>
    {
        result = JSON_Search( ( char * ) message,
 800d026:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d02a:	2300      	movs	r3, #0
 800d02c:	9302      	str	r3, [sp, #8]
 800d02e:	f107 0318 	add.w	r3, r7, #24
 800d032:	9301      	str	r3, [sp, #4]
 800d034:	f107 0314 	add.w	r3, r7, #20
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03c:	68b9      	ldr	r1, [r7, #8]
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f002 fac1 	bl	800f5c6 <JSON_SearchT>
 800d044:	4603      	mov	r3, r0
 800d046:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                              blockSizeQuery,
                              blockSizeQueryLength,
                              &value,
                              &fileBlockLength );

        if( result == JSONSuccess )
 800d04a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d10f      	bne.n	800d072 <handleJsonMessage+0x132>
        {
            if( getNumberFromString( value, fileBlockLength, blockSize ) == false )
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	69b9      	ldr	r1, [r7, #24]
 800d056:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fef1 	bl	800ce40 <getNumberFromString>
 800d05e:	4603      	mov	r3, r0
 800d060:	f083 0301 	eor.w	r3, r3, #1
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <handleJsonMessage+0x138>
            {
                handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800d06a:	2307      	movs	r3, #7
 800d06c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d070:	e002      	b.n	800d078 <handleJsonMessage+0x138>
            }
        }
        else
        {
            handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800d072:	2307      	movs	r3, #7
 800d074:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( handleStatus == MQTTFileDownloaderSuccess )
 800d078:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d118      	bne.n	800d0b2 <handleJsonMessage+0x172>
    {
        result = JSON_Search( ( char * ) message,
 800d080:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d084:	2300      	movs	r3, #0
 800d086:	9302      	str	r3, [sp, #8]
 800d088:	f107 031c 	add.w	r3, r7, #28
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	f107 0320 	add.w	r3, r7, #32
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d096:	68b9      	ldr	r1, [r7, #8]
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f002 fa94 	bl	800f5c6 <JSON_SearchT>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                              dataQuery,
                              dataQueryLength,
                              &dataValue,
                              &dataValueLength );

        if( result != JSONSuccess )
 800d0a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d002      	beq.n	800d0b2 <handleJsonMessage+0x172>
        {
            handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800d0ac:	2307      	movs	r3, #7
 800d0ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( handleStatus == MQTTFileDownloaderSuccess )
 800d0b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d113      	bne.n	800d0e2 <handleJsonMessage+0x1a2>
    {
        base64Status = base64_Decode( decodedData,
 800d0ba:	6a3a      	ldr	r2, [r7, #32]
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d0c8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d0ca:	f000 f9cd 	bl	800d468 <base64_Decode>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                                      mqttFileDownloader_CONFIG_BLOCK_SIZE,
                                      decodedDataLength,
                                      ( const uint8_t * ) dataValue,
                                      dataValueLength );

        if( base64Status != Base64Success )
 800d0d4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <handleJsonMessage+0x1a2>
        {
            handleStatus = MQTTFileDownloaderDataDecodingFailed;
 800d0dc:	2307      	movs	r3, #7
 800d0de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    return handleStatus;
 800d0e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3748      	adds	r7, #72	@ 0x48
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <mqttDownloader_isDataBlockReceived>:

MQTTFileDownloaderStatus_t mqttDownloader_isDataBlockReceived( const MqttFileDownloaderContext_t * context,
                                                               const char * topic,
                                                               size_t topicLength )
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b086      	sub	sp, #24
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	60f8      	str	r0, [r7, #12]
 800d0f6:	60b9      	str	r1, [r7, #8]
 800d0f8:	607a      	str	r2, [r7, #4]
    MQTTFileDownloaderStatus_t status = MQTTFileDownloaderFailure;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	75fb      	strb	r3, [r7, #23]

    if( ( topic == NULL ) || ( topicLength == 0U ) )
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <mqttDownloader_isDataBlockReceived+0x1c>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d102      	bne.n	800d110 <mqttDownloader_isDataBlockReceived+0x22>
    {
        status = MQTTFileDownloaderBadParameter;
 800d10a:	2302      	movs	r3, #2
 800d10c:	75fb      	strb	r3, [r7, #23]
 800d10e:	e010      	b.n	800d132 <mqttDownloader_isDataBlockReceived+0x44>
    }
    else if( ( topicLength == context->topicStreamDataLength ) &&
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d10a      	bne.n	800d132 <mqttDownloader_isDataBlockReceived+0x44>
             ( 0 == strncmp( context->topicStreamData, topic, topicLength ) ) )
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	4618      	mov	r0, r3
 800d124:	f003 ffdf 	bl	80110e6 <strncmp>
 800d128:	4603      	mov	r3, r0
    else if( ( topicLength == context->topicStreamDataLength ) &&
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <mqttDownloader_isDataBlockReceived+0x44>
    {
        status = MQTTFileDownloaderSuccess;
 800d12e:	2301      	movs	r3, #1
 800d130:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty MISRA body */
    }

    return status;
 800d132:	7dfb      	ldrb	r3, [r7, #23]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <mqttDownloader_processReceivedDataBlock>:
                                                                    int32_t * fileId,
                                                                    int32_t * blockId,
                                                                    int32_t * blockSize,
                                                                    uint8_t * data,
                                                                    size_t * dataLength )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08a      	sub	sp, #40	@ 0x28
 800d140:	af04      	add	r7, sp, #16
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
    MQTTFileDownloaderStatus_t decodingStatus = MQTTFileDownloaderFailure;
 800d14a:	2300      	movs	r3, #0
 800d14c:	75fb      	strb	r3, [r7, #23]

    if( ( message != NULL ) && ( messageLength != 0U ) &&
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d039      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d036      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
 800d15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d033      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
        ( data != NULL ) && ( dataLength != NULL ) &&
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	2b00      	cmp	r3, #0
 800d164:	d030      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d02d      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
        ( fileId != NULL ) && ( blockId != NULL ) &&
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d02a      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
 800d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	d027      	beq.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
        ( blockSize != NULL ) )
    {
        ( void ) memset( data, ( int32_t ) '\0', mqttFileDownloader_CONFIG_BLOCK_SIZE );
 800d178:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d17c:	2100      	movs	r1, #0
 800d17e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d180:	f003 ff96 	bl	80110b0 <memset>

        if( context->dataType == ( uint8_t ) DATA_TYPE_JSON )
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10e      	bne.n	800d1ac <mqttDownloader_processReceivedDataBlock+0x70>
        {
            decodingStatus = handleJsonMessage( message,
 800d18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d190:	9302      	str	r3, [sp, #8]
 800d192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	6879      	ldr	r1, [r7, #4]
 800d1a0:	68b8      	ldr	r0, [r7, #8]
 800d1a2:	f7ff fecd 	bl	800cf40 <handleJsonMessage>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	75fb      	strb	r3, [r7, #23]
 800d1aa:	e00d      	b.n	800d1c8 <mqttDownloader_processReceivedDataBlock+0x8c>
                                                data,
                                                dataLength );
        }
        else
        {
            decodingStatus = handleCborMessage( message,
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	9302      	str	r3, [sp, #8]
 800d1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	68b8      	ldr	r0, [r7, #8]
 800d1c0:	f7ff fe10 	bl	800cde4 <handleCborMessage>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	75fb      	strb	r3, [r7, #23]
                                                data,
                                                dataLength );
        }
    }

    return decodingStatus;
 800d1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <preprocessBase64Index>:
 *                  encoded data or input parameters are invalid.
 */
static Base64Status_t preprocessBase64Index( uint8_t base64Index,
                                             int64_t * numPadding,
                                             int64_t * numWhitespace )
{
 800d1d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d1d8:	b08a      	sub	sp, #40	@ 0x28
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	4603      	mov	r3, r0
 800d1de:	60b9      	str	r1, [r7, #8]
 800d1e0:	607a      	str	r2, [r7, #4]
 800d1e2:	73fb      	strb	r3, [r7, #15]
    Base64Status_t returnVal = Base64Success;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int64_t numPaddingVal;
    int64_t numWhitespaceVal;

    numPaddingVal = *numPadding;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    numWhitespaceVal = *numWhitespace;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Validate that the Base64 index is valid and in an appropriate place. */
    if( base64Index == NON_BASE64_INDEX )
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	2b43      	cmp	r3, #67	@ 0x43
 800d202:	d103      	bne.n	800d20c <preprocessBase64Index+0x38>
    {
        returnVal = Base64InvalidSymbol;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d20a:	e03e      	b.n	800d28a <preprocessBase64Index+0xb6>
    }
    else if( base64Index == PADDING_SYMBOL )
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	2b42      	cmp	r3, #66	@ 0x42
 800d210:	d119      	bne.n	800d246 <preprocessBase64Index+0x72>
    {
        if( numWhitespaceVal != 0 )
 800d212:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d216:	4313      	orrs	r3, r2
 800d218:	d003      	beq.n	800d222 <preprocessBase64Index+0x4e>
        {
            returnVal = Base64InvalidSymbolOrdering;
 800d21a:	2302      	movs	r3, #2
 800d21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d220:	e033      	b.n	800d28a <preprocessBase64Index+0xb6>
        }
        else if( ++numPaddingVal > MAX_EXPECTED_NUM_PADDING )
 800d222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d226:	f112 0801 	adds.w	r8, r2, #1
 800d22a:	f143 0900 	adc.w	r9, r3, #0
 800d22e:	e9c7 8906 	strd	r8, r9, [r7, #24]
 800d232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d236:	2a03      	cmp	r2, #3
 800d238:	f173 0300 	sbcs.w	r3, r3, #0
 800d23c:	db25      	blt.n	800d28a <preprocessBase64Index+0xb6>
        {
            returnVal = Base64InvalidPaddingSymbol;
 800d23e:	2307      	movs	r3, #7
 800d240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d244:	e021      	b.n	800d28a <preprocessBase64Index+0xb6>
        else
        {
            /* No action required. */
        }
    }
    else if( base64Index == WHITESPACE )
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	2b41      	cmp	r3, #65	@ 0x41
 800d24a:	d107      	bne.n	800d25c <preprocessBase64Index+0x88>
    {
        ++numWhitespaceVal;
 800d24c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d250:	1c54      	adds	r4, r2, #1
 800d252:	f143 0500 	adc.w	r5, r3, #0
 800d256:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800d25a:	e016      	b.n	800d28a <preprocessBase64Index+0xb6>
    }
    else if( base64Index == NEWLINE )
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	2b40      	cmp	r3, #64	@ 0x40
 800d260:	d013      	beq.n	800d28a <preprocessBase64Index+0xb6>
    /* In this case, the input is valid because the value of its index is
     * inclusively between 0 and 63. Check that there was not a whitespace or
     * padding symbol before this valid index. */
    else
    {
        assert( base64Index <= BASE64_INDEX_VALUE_UPPER_BOUND );
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	2b3f      	cmp	r3, #63	@ 0x3f
 800d266:	d905      	bls.n	800d274 <preprocessBase64Index+0xa0>
 800d268:	4b10      	ldr	r3, [pc, #64]	@ (800d2ac <preprocessBase64Index+0xd8>)
 800d26a:	4a11      	ldr	r2, [pc, #68]	@ (800d2b0 <preprocessBase64Index+0xdc>)
 800d26c:	21e8      	movs	r1, #232	@ 0xe8
 800d26e:	4811      	ldr	r0, [pc, #68]	@ (800d2b4 <preprocessBase64Index+0xe0>)
 800d270:	f002 faa2 	bl	800f7b8 <__assert_func>

        if( ( numWhitespaceVal != 0 ) || ( numPaddingVal != 0 ) )
 800d274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d278:	4313      	orrs	r3, r2
 800d27a:	d103      	bne.n	800d284 <preprocessBase64Index+0xb0>
 800d27c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d280:	4313      	orrs	r3, r2
 800d282:	d002      	beq.n	800d28a <preprocessBase64Index+0xb6>
        {
            returnVal = Base64InvalidSymbolOrdering;
 800d284:	2302      	movs	r3, #2
 800d286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    *numWhitespace = numWhitespaceVal;
 800d28a:	6879      	ldr	r1, [r7, #4]
 800d28c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d290:	e9c1 2300 	strd	r2, r3, [r1]
    *numPadding = numPaddingVal;
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d29a:	e9c1 2300 	strd	r2, r3, [r1]
    return returnVal;
 800d29e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3728      	adds	r7, #40	@ 0x28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d2ac:	08015ce0 	.word	0x08015ce0
 800d2b0:	080165c0 	.word	0x080165c0
 800d2b4:	08015d10 	.word	0x08015d10

0800d2b8 <updateBase64DecodingBuffer>:
 *                base64Index is stored in base64IndexBufferPtr.
 */
static void updateBase64DecodingBuffer( const uint8_t base64Index,
                                        uint32_t * base64IndexBufferPtr,
                                        uint32_t * numDataIndexBuffer )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	73fb      	strb	r3, [r7, #15]
    uint32_t base64IndexBuffer;
    uint32_t numDataInBuffer;

    assert( base64Index <= SYMBOL_TO_INDEX_MAP_VALUE_UPPER_BOUND );
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	2b43      	cmp	r3, #67	@ 0x43
 800d2ca:	d906      	bls.n	800d2da <updateBase64DecodingBuffer+0x22>
 800d2cc:	4b10      	ldr	r3, [pc, #64]	@ (800d310 <updateBase64DecodingBuffer+0x58>)
 800d2ce:	4a11      	ldr	r2, [pc, #68]	@ (800d314 <updateBase64DecodingBuffer+0x5c>)
 800d2d0:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800d2d4:	4810      	ldr	r0, [pc, #64]	@ (800d318 <updateBase64DecodingBuffer+0x60>)
 800d2d6:	f002 fa6f 	bl	800f7b8 <__assert_func>

    base64IndexBuffer = *base64IndexBufferPtr;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	617b      	str	r3, [r7, #20]
    numDataInBuffer = *numDataIndexBuffer;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	613b      	str	r3, [r7, #16]

    /* Only update the buffer if the Base64 index is representing a Base64
     * digit. Base64 digits have a Base64 index that is inclusively between 0
     * and 63. */
    if( base64Index <= VALID_BASE64_SYMBOL_INDEX_RANGE_MAX )
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
 800d2e8:	2b3f      	cmp	r3, #63	@ 0x3f
 800d2ea:	d807      	bhi.n	800d2fc <updateBase64DecodingBuffer+0x44>
         * Base64 sextet and store the current Base64 index that is represented
         * by the 6 least significant bits. Six is the number of bits you need
         * to represent a character in Base64 (log2(64) = 6). The remaining two
         * most significant bits will always be 0 since the only valid range of
         * input data is between 0 and 63. */
        base64IndexBuffer = ( base64IndexBuffer << SEXTET_SIZE ) | base64Index;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	019a      	lsls	r2, r3, #6
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	617b      	str	r3, [r7, #20]
        ++numDataInBuffer;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	613b      	str	r3, [r7, #16]
    }

    *base64IndexBufferPtr = base64IndexBuffer;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	601a      	str	r2, [r3, #0]
    *numDataIndexBuffer = numDataInBuffer;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	601a      	str	r2, [r3, #0]
}
 800d308:	bf00      	nop
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	08015d8c 	.word	0x08015d8c
 800d314:	080165d8 	.word	0x080165d8
 800d318:	08015d10 	.word	0x08015d10

0800d31c <decodeBase64IndexBuffer>:
static Base64Status_t decodeBase64IndexBuffer( uint32_t * base64IndexBufferPtr,
                                               uint32_t * numDataIndexBuffer,
                                               uint8_t * dest,
                                               const size_t destLen,
                                               size_t * outputLength )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08a      	sub	sp, #40	@ 0x28
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
    Base64Status_t returnVal = Base64Success;
 800d32a:	2300      	movs	r3, #0
 800d32c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    size_t outputLen;
    uint32_t base64IndexBuffer;
    uint32_t numDataInBuffer;
    uint32_t numDataToWrite;

    assert( ( *numDataIndexBuffer == 2U ) || ( *numDataIndexBuffer == 3U ) ||
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d00e      	beq.n	800d356 <decodeBase64IndexBuffer+0x3a>
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d00a      	beq.n	800d356 <decodeBase64IndexBuffer+0x3a>
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b04      	cmp	r3, #4
 800d346:	d006      	beq.n	800d356 <decodeBase64IndexBuffer+0x3a>
 800d348:	4b44      	ldr	r3, [pc, #272]	@ (800d45c <decodeBase64IndexBuffer+0x140>)
 800d34a:	4a45      	ldr	r2, [pc, #276]	@ (800d460 <decodeBase64IndexBuffer+0x144>)
 800d34c:	f240 1141 	movw	r1, #321	@ 0x141
 800d350:	4844      	ldr	r0, [pc, #272]	@ (800d464 <decodeBase64IndexBuffer+0x148>)
 800d352:	f002 fa31 	bl	800f7b8 <__assert_func>
            ( *numDataIndexBuffer == 4U ) );

    outputLen = *outputLength;
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	623b      	str	r3, [r7, #32]
    base64IndexBuffer = *base64IndexBufferPtr;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	61fb      	str	r3, [r7, #28]
    numDataInBuffer = *numDataIndexBuffer;
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	61bb      	str	r3, [r7, #24]
    numDataToWrite = ( numDataInBuffer * 3U ) / 4U;
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	4613      	mov	r3, r2
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	4413      	add	r3, r2
 800d370:	089b      	lsrs	r3, r3, #2
 800d372:	617b      	str	r3, [r7, #20]

    if( destLen < ( outputLen + numDataToWrite ) )
 800d374:	6a3a      	ldr	r2, [r7, #32]
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	4413      	add	r3, r2
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d203      	bcs.n	800d388 <decodeBase64IndexBuffer+0x6c>
    {
        returnVal = Base64InvalidBufferSize;
 800d380:	2305      	movs	r3, #5
 800d382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d386:	e059      	b.n	800d43c <decodeBase64IndexBuffer+0x120>
    else
    {
        /* If the buffer is full, convert the 4 sextets of encoded data into
         * three sequential octets of decoded data starting from the most
         * significant bits and ending at the least significant bits. */
        if( numDataInBuffer == MAX_NUM_BASE64_DATA )
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	2b04      	cmp	r3, #4
 800d38c:	d118      	bne.n	800d3c0 <decodeBase64IndexBuffer+0xa4>
        {
            dest[ outputLen ] = ( uint8_t ) ( ( base64IndexBuffer >>
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	0c19      	lsrs	r1, r3, #16
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	4413      	add	r3, r2
 800d398:	b2ca      	uxtb	r2, r1
 800d39a:	701a      	strb	r2, [r3, #0]
                                                SIZE_OF_TWO_OCTETS ) &
                                              0xFFU );
            dest[ outputLen + 1U ] = ( uint8_t ) ( ( base64IndexBuffer >>
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	0a19      	lsrs	r1, r3, #8
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	b2ca      	uxtb	r2, r1
 800d3aa:	701a      	strb	r2, [r3, #0]
                                                     SIZE_OF_ONE_OCTET ) &
                                                   0xFFU );
            dest[ outputLen + 2U ] = ( uint8_t ) ( base64IndexBuffer & 0xFFU );
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	69fa      	ldr	r2, [r7, #28]
 800d3b6:	b2d2      	uxtb	r2, r2
 800d3b8:	701a      	strb	r2, [r3, #0]
            outputLen += 3U;
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	3303      	adds	r3, #3
 800d3be:	623b      	str	r3, [r7, #32]
        }

        if( numDataInBuffer == 3U )
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	2b03      	cmp	r3, #3
 800d3c4:	d11f      	bne.n	800d406 <decodeBase64IndexBuffer+0xea>
            /* When there are only three sextets of data remaining at the end of
             * the encoded data, it is assumed that these three sextets should
             * be decoded into two octets of data. In this case, the two least
             * significant bits are ignored and the following sixteen least
             * significant bits are converted into two octets of data. */
            if( ( base64IndexBuffer & 0x3U ) != 0U )
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	f003 0303 	and.w	r3, r3, #3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <decodeBase64IndexBuffer+0xba>
            {
                returnVal = Base64NonZeroPadding;
 800d3d0:	2306      	movs	r3, #6
 800d3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            if( returnVal == Base64Success )
 800d3d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d113      	bne.n	800d406 <decodeBase64IndexBuffer+0xea>
            {
                base64IndexBuffer = base64IndexBuffer >>
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	089b      	lsrs	r3, r3, #2
 800d3e2:	61fb      	str	r3, [r7, #28]
                                    SIZE_OF_PADDING_WITH_THREE_SEXTETS;
                dest[ outputLen ] = ( uint8_t ) ( ( base64IndexBuffer >>
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	0a19      	lsrs	r1, r3, #8
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	b2ca      	uxtb	r2, r1
 800d3f0:	701a      	strb	r2, [r3, #0]
                                                    SIZE_OF_ONE_OCTET ) &
                                                  0xFFU );
                dest[ outputLen + 1U ] = ( uint8_t ) ( base64IndexBuffer &
 800d3f2:	6a3b      	ldr	r3, [r7, #32]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	69fa      	ldr	r2, [r7, #28]
 800d3fc:	b2d2      	uxtb	r2, r2
 800d3fe:	701a      	strb	r2, [r3, #0]
                                                       0xFFU );
                outputLen += 2U;
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	3302      	adds	r3, #2
 800d404:	623b      	str	r3, [r7, #32]
            }
        }

        if( numDataInBuffer == 2U )
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d117      	bne.n	800d43c <decodeBase64IndexBuffer+0x120>
            /* When there are only two sextets of data remaining at the end of
             * the encoded data, it is assumed that these two sextets should be
             * decoded into one octet of data. In this case, the four least
             * significant bits are ignored and the following eight least
             * significant bits are converted into one octet of data. */
            if( ( base64IndexBuffer & 0xFU ) != 0U )
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	f003 030f 	and.w	r3, r3, #15
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <decodeBase64IndexBuffer+0x100>
            {
                returnVal = Base64NonZeroPadding;
 800d416:	2306      	movs	r3, #6
 800d418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            if( returnVal == Base64Success )
 800d41c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10b      	bne.n	800d43c <decodeBase64IndexBuffer+0x120>
            {
                base64IndexBuffer = base64IndexBuffer >>
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	091b      	lsrs	r3, r3, #4
 800d428:	61fb      	str	r3, [r7, #28]
                                    SIZE_OF_PADDING_WITH_TWO_SEXTETS;
                dest[ outputLen ] = ( uint8_t ) ( base64IndexBuffer & 0xFFU );
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6a3b      	ldr	r3, [r7, #32]
 800d42e:	4413      	add	r3, r2
 800d430:	69fa      	ldr	r2, [r7, #28]
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	701a      	strb	r2, [r3, #0]
                outputLen += 1U;
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	3301      	adds	r3, #1
 800d43a:	623b      	str	r3, [r7, #32]
            }
        }
    }

    *numDataIndexBuffer = 0;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	2200      	movs	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
    *outputLength = outputLen;
 800d442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d444:	6a3a      	ldr	r2, [r7, #32]
 800d446:	601a      	str	r2, [r3, #0]
    *base64IndexBufferPtr = 0;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	601a      	str	r2, [r3, #0]
    return returnVal;
 800d44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d452:	4618      	mov	r0, r3
 800d454:	3728      	adds	r7, #40	@ 0x28
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	08015dc4 	.word	0x08015dc4
 800d460:	080165f4 	.word	0x080165f4
 800d464:	08015d10 	.word	0x08015d10

0800d468 <base64_Decode>:
Base64Status_t base64_Decode( uint8_t * dest,
                              const size_t destLen,
                              size_t * resultLen,
                              const uint8_t * encodedData,
                              const size_t encodedLen )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b090      	sub	sp, #64	@ 0x40
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
    uint32_t base64IndexBuffer = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t numDataInBuffer = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint8_t * pCurrBase64Symbol = encodedData;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	637b      	str	r3, [r7, #52]	@ 0x34
    size_t outputLen = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	627b      	str	r3, [r7, #36]	@ 0x24
    int64_t numPadding = 0;
 800d486:	f04f 0200 	mov.w	r2, #0
 800d48a:	f04f 0300 	mov.w	r3, #0
 800d48e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int64_t numWhitespace = 0;
 800d492:	f04f 0200 	mov.w	r2, #0
 800d496:	f04f 0300 	mov.w	r3, #0
 800d49a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    Base64Status_t returnVal = Base64Success;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if( ( encodedData == NULL ) || ( dest == NULL ) || ( resultLen == NULL ) )
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d005      	beq.n	800d4b6 <base64_Decode+0x4e>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <base64_Decode+0x4e>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d102      	bne.n	800d4bc <base64_Decode+0x54>
    {
        returnVal = Base64NullPointerInput;
 800d4b6:	2304      	movs	r3, #4
 800d4b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    }

    if( encodedLen < MIN_VALID_ENCODED_DATA_SIZE )
 800d4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d83c      	bhi.n	800d53c <base64_Decode+0xd4>
    {
        returnVal = Base64InvalidInputSize;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    }

    /* This loop will decode the first (encodedLen - (encodedLen % 4)) amount of
     * data. */
    while( ( returnVal == Base64Success ) &&
 800d4c8:	e038      	b.n	800d53c <base64_Decode+0xd4>
           ( pCurrBase64Symbol < &encodedData[ encodedLen ] ) )
    {
        uint8_t base64Index = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        /* Read in the next Ascii character that represents the current Base64
         * symbol. */
        uint8_t base64AsciiSymbol = *pCurrBase64Symbol++;
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
        /* Get the Base64 index that represents the Base64 symbol. */
        base64Index = base64SymbolToIndexMap[ base64AsciiSymbol ];
 800d4dc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800d4e0:	4a34      	ldr	r2, [pc, #208]	@ (800d5b4 <base64_Decode+0x14c>)
 800d4e2:	5cd3      	ldrb	r3, [r2, r3]
 800d4e4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        /* Validate the input and update counters for padding and whitespace. */
        returnVal = preprocessBase64Index( base64Index,
 800d4e8:	f107 0210 	add.w	r2, r7, #16
 800d4ec:	f107 0118 	add.w	r1, r7, #24
 800d4f0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fe6d 	bl	800d1d4 <preprocessBase64Index>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                                           &numPadding,
                                           &numWhitespace );

        if( returnVal != Base64Success )
 800d500:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d504:	2b00      	cmp	r3, #0
 800d506:	d124      	bne.n	800d552 <base64_Decode+0xea>
        {
            break;
        }

        /* Add the current Base64 index to a buffer. */
        updateBase64DecodingBuffer( base64Index,
 800d508:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d50c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d510:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fecf 	bl	800d2b8 <updateBase64DecodingBuffer>
                                    &base64IndexBuffer,
                                    &numDataInBuffer );

        /* Decode the buffer when it's full and store the result. */
        if( numDataInBuffer == MAX_NUM_BASE64_DATA )
 800d51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	d10d      	bne.n	800d53c <base64_Decode+0xd4>
        {
            returnVal = decodeBase64IndexBuffer( &base64IndexBuffer,
 800d520:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d524:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800d528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	f7ff fef3 	bl	800d31c <decodeBase64IndexBuffer>
 800d536:	4603      	mov	r3, r0
 800d538:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    while( ( returnVal == Base64Success ) &&
 800d53c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d540:	2b00      	cmp	r3, #0
 800d542:	d107      	bne.n	800d554 <base64_Decode+0xec>
           ( pCurrBase64Symbol < &encodedData[ encodedLen ] ) )
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d548:	4413      	add	r3, r2
    while( ( returnVal == Base64Success ) &&
 800d54a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d3bc      	bcc.n	800d4ca <base64_Decode+0x62>
 800d550:	e000      	b.n	800d554 <base64_Decode+0xec>
            break;
 800d552:	bf00      	nop
                                                 destLen,
                                                 &outputLen );
        }
    }

    if( returnVal == Base64Success )
 800d554:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d105      	bne.n	800d568 <base64_Decode+0x100>
        /* This scenario is only possible when the number of encoded symbols (
         * excluding newlines and padding ) being decoded mod four is equal to
         * one. There is no valid scenario where data can be encoded to create a
         * result of this size. Therefore if this size is encountered, it's
         * assumed that the incoming Base64 data is not encoded correctly. */
        if( numDataInBuffer == 1U )
 800d55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d102      	bne.n	800d568 <base64_Decode+0x100>
        {
            returnVal = Base64InvalidInputSize;
 800d562:	2303      	movs	r3, #3
 800d564:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }
    }

    if( returnVal == Base64Success )
 800d568:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d113      	bne.n	800d598 <base64_Decode+0x130>
         * data.
         *
         * Note: This implementation assumes that non-zero padding bits are an
         * error. This prevents having multiple non-matching encoded data
         * strings map to identical decoded strings. */
        if( ( numDataInBuffer == 2U ) || ( numDataInBuffer == 3U ) )
 800d570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d572:	2b02      	cmp	r3, #2
 800d574:	d002      	beq.n	800d57c <base64_Decode+0x114>
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d10d      	bne.n	800d598 <base64_Decode+0x130>
        {
            returnVal = decodeBase64IndexBuffer( &base64IndexBuffer,
 800d57c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d580:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800d584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	f7ff fec5 	bl	800d31c <decodeBase64IndexBuffer>
 800d592:	4603      	mov	r3, r0
 800d594:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                                                 destLen,
                                                 &outputLen );
        }
    }

    if( returnVal == Base64Success )
 800d598:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d102      	bne.n	800d5a6 <base64_Decode+0x13e>
    {
        *resultLen = outputLen;
 800d5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	601a      	str	r2, [r3, #0]
    }

    return returnVal;
 800d5a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3738      	adds	r7, #56	@ 0x38
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	080164c0 	.word	0x080164c0

0800d5b8 <cbor_encode_text_stringz>:
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	6838      	ldr	r0, [r7, #0]
 800d5c4:	f7f2 fe74 	bl	80002b0 <strlen>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7fd fe23 	bl	800b21a <cbor_encode_text_string>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <cbor_encoder_get_buffer_size>:
{
    return encoder->data.ptr;
}

CBOR_INLINE_API size_t cbor_encoder_get_buffer_size(const CborEncoder *encoder, const uint8_t *buffer)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b083      	sub	sp, #12
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
    return (size_t)(encoder->data.ptr - buffer);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	1ad3      	subs	r3, r2, r3
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <_cbor_value_extract_int64_helper>:
CBOR_API CborError cbor_value_enter_container(const CborValue *it, CborValue *recursed);
CBOR_API CborError cbor_value_leave_container(CborValue *it, const CborValue *recursed);

CBOR_PRIVATE_API uint64_t _cbor_value_decode_int64_internal(const CborValue *value);
CBOR_INLINE_API uint64_t _cbor_value_extract_int64_helper(const CborValue *value)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
 800d604:	6879      	ldr	r1, [r7, #4]
 800d606:	7bc9      	ldrb	r1, [r1, #15]
 800d608:	f001 0101 	and.w	r1, r1, #1
                _cbor_value_decode_int64_internal(value) : value->extra;
 800d60c:	2900      	cmp	r1, #0
 800d60e:	d005      	beq.n	800d61c <_cbor_value_extract_int64_helper+0x20>
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7fe fa35 	bl	800ba80 <_cbor_value_decode_int64_internal>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	e005      	b.n	800d628 <_cbor_value_extract_int64_helper+0x2c>
 800d61c:	6879      	ldr	r1, [r7, #4]
 800d61e:	8989      	ldrh	r1, [r1, #12]
 800d620:	b289      	uxth	r1, r1
 800d622:	2000      	movs	r0, #0
 800d624:	460a      	mov	r2, r1
 800d626:	4603      	mov	r3, r0
}
 800d628:	4610      	mov	r0, r2
 800d62a:	4619      	mov	r1, r3
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <cbor_value_get_type>:

CBOR_INLINE_API bool cbor_value_is_valid(const CborValue *value)
{ return value && value->type != CborInvalidType; }
CBOR_INLINE_API CborType cbor_value_get_type(const CborValue *value)
{ return (CborType)value->type; }
 800d632:	b480      	push	{r7}
 800d634:	b083      	sub	sp, #12
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7b9b      	ldrb	r3, [r3, #14]
 800d63e:	4618      	mov	r0, r3
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <cbor_value_is_integer>:
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
 800d64a:	b480      	push	{r7}
 800d64c:	b083      	sub	sp, #12
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	7b9b      	ldrb	r3, [r3, #14]
 800d656:	2b00      	cmp	r3, #0
 800d658:	bf0c      	ite	eq
 800d65a:	2301      	moveq	r3, #1
 800d65c:	2300      	movne	r3, #0
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	4618      	mov	r0, r3
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <cbor_value_get_int>:
        *result = -*result - 1;
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int(const CborValue *value, int *result)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
    assert(cbor_value_is_integer(value));
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff ffe7 	bl	800d64a <cbor_value_is_integer>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <cbor_value_get_int+0x24>
 800d682:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c0 <cbor_value_get_int+0x54>)
 800d684:	4a0f      	ldr	r2, [pc, #60]	@ (800d6c4 <cbor_value_get_int+0x58>)
 800d686:	f240 117d 	movw	r1, #381	@ 0x17d
 800d68a:	480f      	ldr	r0, [pc, #60]	@ (800d6c8 <cbor_value_get_int+0x5c>)
 800d68c:	f002 f894 	bl	800f7b8 <__assert_func>
    *result = (int) _cbor_value_extract_int64_helper(value);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ffb3 	bl	800d5fc <_cbor_value_extract_int64_helper>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	601a      	str	r2, [r3, #0]
    if (value->flags & CborIteratorFlag_NegativeInteger)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	7bdb      	ldrb	r3, [r3, #15]
 800d6a2:	f003 0302 	and.w	r3, r3, #2
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <cbor_value_get_int+0x48>
        *result = -*result - 1;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	43da      	mvns	r2, r3
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	601a      	str	r2, [r3, #0]
    return CborNoError;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	08015e24 	.word	0x08015e24
 800d6c4:	0801660c 	.word	0x0801660c
 800d6c8:	08015e44 	.word	0x08015e44

0800d6cc <cbor_value_is_byte_string>:
}
CBOR_API CborError cbor_value_skip_tag(CborValue *it);

/* Strings */
CBOR_INLINE_API bool cbor_value_is_byte_string(const CborValue *value)
{ return value->type == CborByteStringType; }
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7b9b      	ldrb	r3, [r3, #14]
 800d6d8:	2b40      	cmp	r3, #64	@ 0x40
 800d6da:	bf0c      	ite	eq
 800d6dc:	2301      	moveq	r3, #1
 800d6de:	2300      	movne	r3, #0
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
	...

0800d6f0 <cbor_value_copy_byte_string>:
    assert(cbor_value_is_text_string(value));
    return _cbor_value_copy_string(value, buffer, buflen, next);
}
CBOR_INLINE_API CborError cbor_value_copy_byte_string(const CborValue *value, uint8_t *buffer,
                                                      size_t *buflen, CborValue *next)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
 800d6fc:	603b      	str	r3, [r7, #0]
    assert(cbor_value_is_byte_string(value));
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f7ff ffe4 	bl	800d6cc <cbor_value_is_byte_string>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <cbor_value_copy_byte_string+0x28>
 800d70a:	4b09      	ldr	r3, [pc, #36]	@ (800d730 <cbor_value_copy_byte_string+0x40>)
 800d70c:	4a09      	ldr	r2, [pc, #36]	@ (800d734 <cbor_value_copy_byte_string+0x44>)
 800d70e:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 800d712:	4809      	ldr	r0, [pc, #36]	@ (800d738 <cbor_value_copy_byte_string+0x48>)
 800d714:	f002 f850 	bl	800f7b8 <__assert_func>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	68b9      	ldr	r1, [r7, #8]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7fe fd36 	bl	800c190 <_cbor_value_copy_string>
 800d724:	4603      	mov	r3, r0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	08015ef8 	.word	0x08015ef8
 800d734:	08016620 	.word	0x08016620
 800d738:	08015e44 	.word	0x08015e44

0800d73c <cbor_value_is_map>:

/* Maps and arrays */
CBOR_INLINE_API bool cbor_value_is_array(const CborValue *value)
{ return value->type == CborArrayType; }
CBOR_INLINE_API bool cbor_value_is_map(const CborValue *value)
{ return value->type == CborMapType; }
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7b9b      	ldrb	r3, [r3, #14]
 800d748:	2ba0      	cmp	r3, #160	@ 0xa0
 800d74a:	bf0c      	ite	eq
 800d74c:	2301      	moveq	r3, #1
 800d74e:	2300      	movne	r3, #0
 800d750:	b2db      	uxtb	r3, r3
 800d752:	4618      	mov	r0, r3
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <checkDataType>:
 * @param[in] Value Value to check.
 * @return CborError
 */
static CborError checkDataType( CborType expectedType,
                                const CborValue * Value )
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	4603      	mov	r3, r0
 800d766:	6039      	str	r1, [r7, #0]
 800d768:	71fb      	strb	r3, [r7, #7]
    CborError cborResult = CborNoError;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
    CborType actualType = cbor_value_get_type( Value );
 800d76e:	6838      	ldr	r0, [r7, #0]
 800d770:	f7ff ff5f 	bl	800d632 <cbor_value_get_type>
 800d774:	4603      	mov	r3, r0
 800d776:	72fb      	strb	r3, [r7, #11]

    if( actualType != expectedType )
 800d778:	7afa      	ldrb	r2, [r7, #11]
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d002      	beq.n	800d786 <checkDataType+0x28>
    {
        cborResult = CborErrorIllegalType;
 800d780:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d784:	60fb      	str	r3, [r7, #12]
    }

    return cborResult;
 800d786:	68fb      	ldr	r3, [r7, #12]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <CBOR_Decode_GetStreamResponseMessage>:
                                           int32_t * fileId,
                                           int32_t * blockId,
                                           int32_t * blockSize,
                                           uint8_t * const * payload,
                                           size_t * payloadSize )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b092      	sub	sp, #72	@ 0x48
 800d794:	af02      	add	r7, sp, #8
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	603b      	str	r3, [r7, #0]
    CborError cborResult = CborNoError;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    CborParser parser;
    CborValue value, cborMap;
    size_t payloadSizeReceived = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	613b      	str	r3, [r7, #16]

    if( ( fileId == NULL ) || ( blockId == NULL ) || ( blockSize == NULL ) ||
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00e      	beq.n	800d7ca <CBOR_Decode_GetStreamResponseMessage+0x3a>
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <CBOR_Decode_GetStreamResponseMessage+0x3a>
 800d7b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d008      	beq.n	800d7ca <CBOR_Decode_GetStreamResponseMessage+0x3a>
 800d7b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d005      	beq.n	800d7ca <CBOR_Decode_GetStreamResponseMessage+0x3a>
        ( payload == NULL ) || ( payloadSize == NULL ) ||
 800d7be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d002      	beq.n	800d7ca <CBOR_Decode_GetStreamResponseMessage+0x3a>
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <CBOR_Decode_GetStreamResponseMessage+0x3e>
        ( messageBuffer == NULL ) )
    {
        cborResult = CborUnknownError;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Initialize the parser. */
    if( CborNoError == cborResult )
 800d7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10b      	bne.n	800d7ec <CBOR_Decode_GetStreamResponseMessage+0x5c>
    {
        cborResult = cbor_parser_init( messageBuffer,
 800d7d4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d7d8:	f107 0314 	add.w	r3, r7, #20
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	68b9      	ldr	r1, [r7, #8]
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f7fe f9b3 	bl	800bb50 <cbor_parser_init>
 800d7ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                       &cborMap );
    }

    /* Get the outer element and confirm that it's a "map," i.e., a set of
     * CBOR key/value pairs. */
    if( CborNoError == cborResult )
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10d      	bne.n	800d80e <CBOR_Decode_GetStreamResponseMessage+0x7e>
    {
        if( false == cbor_value_is_map( &cborMap ) )
 800d7f2:	f107 0314 	add.w	r3, r7, #20
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff ffa0 	bl	800d73c <cbor_value_is_map>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	f083 0301 	eor.w	r3, r3, #1
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <CBOR_Decode_GetStreamResponseMessage+0x7e>
        {
            cborResult = CborErrorIllegalType;
 800d808:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    /* Find the file ID. */
    if( CborNoError == cborResult )
 800d80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d108      	bne.n	800d826 <CBOR_Decode_GetStreamResponseMessage+0x96>
    {
        cborResult = cbor_value_map_find_value( &cborMap,
 800d814:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d818:	f107 0314 	add.w	r3, r7, #20
 800d81c:	494f      	ldr	r1, [pc, #316]	@ (800d95c <CBOR_Decode_GetStreamResponseMessage+0x1cc>)
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fe fce4 	bl	800c1ec <cbor_value_map_find_value>
 800d824:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                OTA_CBOR_FILEID_KEY,
                                                &value );
    }

    if( CborNoError == cborResult )
 800d826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d106      	bne.n	800d83a <CBOR_Decode_GetStreamResponseMessage+0xaa>
    {
        cborResult = checkDataType( CborIntegerType, &value );
 800d82c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d830:	4619      	mov	r1, r3
 800d832:	2000      	movs	r0, #0
 800d834:	f7ff ff93 	bl	800d75e <checkDataType>
 800d838:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if( CborNoError == cborResult )
 800d83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d106      	bne.n	800d84e <CBOR_Decode_GetStreamResponseMessage+0xbe>
    {
        cborResult = cbor_value_get_int( &value, ( int * ) fileId );
 800d840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d844:	6879      	ldr	r1, [r7, #4]
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff ff10 	bl	800d66c <cbor_value_get_int>
 800d84c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Find the block ID. */
    if( CborNoError == cborResult )
 800d84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d108      	bne.n	800d866 <CBOR_Decode_GetStreamResponseMessage+0xd6>
    {
        cborResult = cbor_value_map_find_value( &cborMap,
 800d854:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d858:	f107 0314 	add.w	r3, r7, #20
 800d85c:	4940      	ldr	r1, [pc, #256]	@ (800d960 <CBOR_Decode_GetStreamResponseMessage+0x1d0>)
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fcc4 	bl	800c1ec <cbor_value_map_find_value>
 800d864:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                OTA_CBOR_BLOCKID_KEY,
                                                &value );
    }

    if( CborNoError == cborResult )
 800d866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <CBOR_Decode_GetStreamResponseMessage+0xea>
    {
        cborResult = checkDataType( CborIntegerType, &value );
 800d86c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d870:	4619      	mov	r1, r3
 800d872:	2000      	movs	r0, #0
 800d874:	f7ff ff73 	bl	800d75e <checkDataType>
 800d878:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if( CborNoError == cborResult )
 800d87a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d106      	bne.n	800d88e <CBOR_Decode_GetStreamResponseMessage+0xfe>
    {
        cborResult = cbor_value_get_int( &value, ( int * ) blockId );
 800d880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	4618      	mov	r0, r3
 800d888:	f7ff fef0 	bl	800d66c <cbor_value_get_int>
 800d88c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Find the block size. */
    if( CborNoError == cborResult )
 800d88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d890:	2b00      	cmp	r3, #0
 800d892:	d108      	bne.n	800d8a6 <CBOR_Decode_GetStreamResponseMessage+0x116>
    {
        cborResult = cbor_value_map_find_value( &cborMap,
 800d894:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d898:	f107 0314 	add.w	r3, r7, #20
 800d89c:	4931      	ldr	r1, [pc, #196]	@ (800d964 <CBOR_Decode_GetStreamResponseMessage+0x1d4>)
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fca4 	bl	800c1ec <cbor_value_map_find_value>
 800d8a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                OTA_CBOR_BLOCKSIZE_KEY,
                                                &value );
    }

    if( CborNoError == cborResult )
 800d8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <CBOR_Decode_GetStreamResponseMessage+0x12a>
    {
        cborResult = checkDataType( CborIntegerType, &value );
 800d8ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	f7ff ff53 	bl	800d75e <checkDataType>
 800d8b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if( CborNoError == cborResult )
 800d8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <CBOR_Decode_GetStreamResponseMessage+0x13e>
    {
        cborResult = cbor_value_get_int( &value, ( int * ) blockSize );
 800d8c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fed0 	bl	800d66c <cbor_value_get_int>
 800d8cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Find the payload bytes. */
    if( CborNoError == cborResult )
 800d8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d108      	bne.n	800d8e6 <CBOR_Decode_GetStreamResponseMessage+0x156>
    {
        cborResult = cbor_value_map_find_value( &cborMap,
 800d8d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d8d8:	f107 0314 	add.w	r3, r7, #20
 800d8dc:	4922      	ldr	r1, [pc, #136]	@ (800d968 <CBOR_Decode_GetStreamResponseMessage+0x1d8>)
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fe fc84 	bl	800c1ec <cbor_value_map_find_value>
 800d8e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                OTA_CBOR_BLOCKPAYLOAD_KEY,
                                                &value );
    }

    if( CborNoError == cborResult )
 800d8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d106      	bne.n	800d8fa <CBOR_Decode_GetStreamResponseMessage+0x16a>
    {
        cborResult = checkDataType( CborByteStringType, &value );
 800d8ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	2040      	movs	r0, #64	@ 0x40
 800d8f4:	f7ff ff33 	bl	800d75e <checkDataType>
 800d8f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Calculate the size we need to malloc for the payload. */
    if( CborNoError == cborResult )
 800d8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d108      	bne.n	800d912 <CBOR_Decode_GetStreamResponseMessage+0x182>
    {
        cborResult = cbor_value_calculate_string_length( &value,
 800d900:	f107 0210 	add.w	r2, r7, #16
 800d904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d908:	4611      	mov	r1, r2
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fad8 	bl	800bec0 <cbor_value_calculate_string_length>
 800d910:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                         &payloadSizeReceived );
    }

    if( CborNoError == cborResult )
 800d912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10b      	bne.n	800d930 <CBOR_Decode_GetStreamResponseMessage+0x1a0>
    {
        /* Check if the received payload size is less than or equal to buffer
         * size. */
        if( payloadSizeReceived <= ( *payloadSize ) )
 800d918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d303      	bcc.n	800d92a <CBOR_Decode_GetStreamResponseMessage+0x19a>
        {
            *payloadSize = payloadSizeReceived;
 800d922:	693a      	ldr	r2, [r7, #16]
 800d924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	e002      	b.n	800d930 <CBOR_Decode_GetStreamResponseMessage+0x1a0>
        }
        else
        {
            cborResult = CborErrorOutOfMemory;
 800d92a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    if( CborNoError == cborResult )
 800d930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d932:	2b00      	cmp	r3, #0
 800d934:	d108      	bne.n	800d948 <CBOR_Decode_GetStreamResponseMessage+0x1b8>
    {
        cborResult = cbor_value_copy_byte_string( &value,
 800d936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d938:	6819      	ldr	r1, [r3, #0]
 800d93a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d93e:	2300      	movs	r3, #0
 800d940:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d942:	f7ff fed5 	bl	800d6f0 <cbor_value_copy_byte_string>
 800d946:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                  *payload,
                                                  payloadSize,
                                                  NULL );
    }

    return CborNoError == cborResult;
 800d948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	bf0c      	ite	eq
 800d94e:	2301      	moveq	r3, #1
 800d950:	2300      	movne	r3, #0
 800d952:	b2db      	uxtb	r3, r3
}
 800d954:	4618      	mov	r0, r3
 800d956:	3740      	adds	r7, #64	@ 0x40
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	08015f1c 	.word	0x08015f1c
 800d960:	08015f20 	.word	0x08015f20
 800d964:	08015f24 	.word	0x08015f24
 800d968:	08015f28 	.word	0x08015f28

0800d96c <CBOR_Encode_GetStreamRequestMessage>:
                                          uint32_t blockSize,
                                          uint32_t blockOffset,
                                          const uint8_t * blockBitmap,
                                          size_t blockBitmapSize,
                                          uint32_t numOfBlocksRequested )
{
 800d96c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d970:	b090      	sub	sp, #64	@ 0x40
 800d972:	af00      	add	r7, sp, #0
 800d974:	6178      	str	r0, [r7, #20]
 800d976:	6139      	str	r1, [r7, #16]
 800d978:	60fa      	str	r2, [r7, #12]
 800d97a:	60bb      	str	r3, [r7, #8]
    CborError cborResult = CborNoError;
 800d97c:	2300      	movs	r3, #0
 800d97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    CborEncoder encoder, cborMapEncoder;

    if( ( messageBuffer == NULL ) || ( encodedMessageSize == NULL ) ||
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d008      	beq.n	800d998 <CBOR_Encode_GetStreamRequestMessage+0x2c>
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <CBOR_Encode_GetStreamRequestMessage+0x2c>
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <CBOR_Encode_GetStreamRequestMessage+0x2c>
        ( clientToken == NULL ) || ( blockBitmap == NULL ) )
 800d992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <CBOR_Encode_GetStreamRequestMessage+0x30>
    {
        cborResult = CborUnknownError;
 800d998:	2301      	movs	r3, #1
 800d99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Initialize the CBOR encoder. */
    if( CborNoError == cborResult )
 800d99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10f      	bne.n	800d9c2 <CBOR_Encode_GetStreamRequestMessage+0x56>
    {
        cbor_encoder_init( &encoder, messageBuffer, messageBufferSize, 0 );
 800d9a2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	6979      	ldr	r1, [r7, #20]
 800d9ac:	f7fd fa72 	bl	800ae94 <cbor_encoder_init>
        cborResult = cbor_encoder_create_map( &encoder,
 800d9b0:	f107 011c 	add.w	r1, r7, #28
 800d9b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d9b8:	2206      	movs	r2, #6
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fd fc89 	bl	800b2d2 <cbor_encoder_create_map>
 800d9c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                              &cborMapEncoder,
                                              CBOR_GETSTREAMREQUEST_ITEM_COUNT );
    }

    /* Encode the client token key and value. */
    if( CborNoError == cborResult )
 800d9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d106      	bne.n	800d9d6 <CBOR_Encode_GetStreamRequestMessage+0x6a>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder,
 800d9c8:	f107 031c 	add.w	r3, r7, #28
 800d9cc:	4955      	ldr	r1, [pc, #340]	@ (800db24 <CBOR_Encode_GetStreamRequestMessage+0x1b8>)
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff fdf2 	bl	800d5b8 <cbor_encode_text_stringz>
 800d9d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                               OTA_CBOR_CLIENTTOKEN_KEY );
    }

    if( CborNoError == cborResult )
 800d9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <CBOR_Encode_GetStreamRequestMessage+0x7e>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder, clientToken );
 800d9dc:	f107 031c 	add.w	r3, r7, #28
 800d9e0:	68b9      	ldr	r1, [r7, #8]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fde8 	bl	800d5b8 <cbor_encode_text_stringz>
 800d9e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Encode the file ID key and value. */
    if( CborNoError == cborResult )
 800d9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d106      	bne.n	800d9fe <CBOR_Encode_GetStreamRequestMessage+0x92>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder,
 800d9f0:	f107 031c 	add.w	r3, r7, #28
 800d9f4:	494c      	ldr	r1, [pc, #304]	@ (800db28 <CBOR_Encode_GetStreamRequestMessage+0x1bc>)
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff fdde 	bl	800d5b8 <cbor_encode_text_stringz>
 800d9fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                               OTA_CBOR_FILEID_KEY );
    }

    if( CborNoError == cborResult )
 800d9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10b      	bne.n	800da1c <CBOR_Encode_GetStreamRequestMessage+0xb0>
    {
        cborResult = cbor_encode_int( &cborMapEncoder, ( int64_t ) fileId );
 800da04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da06:	2200      	movs	r2, #0
 800da08:	603b      	str	r3, [r7, #0]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	f107 011c 	add.w	r1, r7, #28
 800da10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da14:	4608      	mov	r0, r1
 800da16:	f7fd fb99 	bl	800b14c <cbor_encode_int>
 800da1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Encode the block size key and value. */
    if( CborNoError == cborResult )
 800da1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d106      	bne.n	800da30 <CBOR_Encode_GetStreamRequestMessage+0xc4>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder,
 800da22:	f107 031c 	add.w	r3, r7, #28
 800da26:	4941      	ldr	r1, [pc, #260]	@ (800db2c <CBOR_Encode_GetStreamRequestMessage+0x1c0>)
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff fdc5 	bl	800d5b8 <cbor_encode_text_stringz>
 800da2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                               OTA_CBOR_BLOCKSIZE_KEY );
    }

    if( CborNoError == cborResult )
 800da30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10b      	bne.n	800da4e <CBOR_Encode_GetStreamRequestMessage+0xe2>
    {
        cborResult = cbor_encode_int( &cborMapEncoder, ( int64_t ) blockSize );
 800da36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da38:	2200      	movs	r2, #0
 800da3a:	469a      	mov	sl, r3
 800da3c:	4693      	mov	fp, r2
 800da3e:	f107 011c 	add.w	r1, r7, #28
 800da42:	4652      	mov	r2, sl
 800da44:	465b      	mov	r3, fp
 800da46:	4608      	mov	r0, r1
 800da48:	f7fd fb80 	bl	800b14c <cbor_encode_int>
 800da4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Encode the block offset key and value. */
    if( CborNoError == cborResult )
 800da4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d106      	bne.n	800da62 <CBOR_Encode_GetStreamRequestMessage+0xf6>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder,
 800da54:	f107 031c 	add.w	r3, r7, #28
 800da58:	4935      	ldr	r1, [pc, #212]	@ (800db30 <CBOR_Encode_GetStreamRequestMessage+0x1c4>)
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fdac 	bl	800d5b8 <cbor_encode_text_stringz>
 800da60:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                               OTA_CBOR_BLOCKOFFSET_KEY );
    }

    if( CborNoError == cborResult )
 800da62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10b      	bne.n	800da80 <CBOR_Encode_GetStreamRequestMessage+0x114>
    {
        cborResult = cbor_encode_int( &cborMapEncoder, ( int64_t ) blockOffset );
 800da68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da6a:	2200      	movs	r2, #0
 800da6c:	4698      	mov	r8, r3
 800da6e:	4691      	mov	r9, r2
 800da70:	f107 011c 	add.w	r1, r7, #28
 800da74:	4642      	mov	r2, r8
 800da76:	464b      	mov	r3, r9
 800da78:	4608      	mov	r0, r1
 800da7a:	f7fd fb67 	bl	800b14c <cbor_encode_int>
 800da7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Encode the block bitmap key and value. */
    if( CborNoError == cborResult )
 800da80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <CBOR_Encode_GetStreamRequestMessage+0x128>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder,
 800da86:	f107 031c 	add.w	r3, r7, #28
 800da8a:	492a      	ldr	r1, [pc, #168]	@ (800db34 <CBOR_Encode_GetStreamRequestMessage+0x1c8>)
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7ff fd93 	bl	800d5b8 <cbor_encode_text_stringz>
 800da92:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                               OTA_CBOR_BLOCKBITMAP_KEY );
    }

    if( CborNoError == cborResult )
 800da94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da96:	2b00      	cmp	r3, #0
 800da98:	d107      	bne.n	800daaa <CBOR_Encode_GetStreamRequestMessage+0x13e>
    {
        cborResult = cbor_encode_byte_string( &cborMapEncoder,
 800da9a:	f107 031c 	add.w	r3, r7, #28
 800da9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800daa0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fd fba8 	bl	800b1f8 <cbor_encode_byte_string>
 800daa8:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                              blockBitmap,
                                              blockBitmapSize );
    }

    /* Encode the number of blocks requested key and value. */
    if( CborNoError == cborResult )
 800daaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daac:	2b00      	cmp	r3, #0
 800daae:	d106      	bne.n	800dabe <CBOR_Encode_GetStreamRequestMessage+0x152>
    {
        cborResult = cbor_encode_text_stringz( &cborMapEncoder,
 800dab0:	f107 031c 	add.w	r3, r7, #28
 800dab4:	4920      	ldr	r1, [pc, #128]	@ (800db38 <CBOR_Encode_GetStreamRequestMessage+0x1cc>)
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff fd7e 	bl	800d5b8 <cbor_encode_text_stringz>
 800dabc:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                               OTA_CBOR_NUMBEROFBLOCKS_KEY );
    }

    if( CborNoError == cborResult )
 800dabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10b      	bne.n	800dadc <CBOR_Encode_GetStreamRequestMessage+0x170>
    {
        cborResult = cbor_encode_int( &cborMapEncoder, ( int64_t ) numOfBlocksRequested );
 800dac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dac6:	2200      	movs	r2, #0
 800dac8:	461c      	mov	r4, r3
 800daca:	4615      	mov	r5, r2
 800dacc:	f107 011c 	add.w	r1, r7, #28
 800dad0:	4622      	mov	r2, r4
 800dad2:	462b      	mov	r3, r5
 800dad4:	4608      	mov	r0, r1
 800dad6:	f7fd fb39 	bl	800b14c <cbor_encode_int>
 800dada:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    /* Close the encoder. */
    if( CborNoError == cborResult )
 800dadc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d108      	bne.n	800daf4 <CBOR_Encode_GetStreamRequestMessage+0x188>
    {
        cborResult = cbor_encoder_close_container_checked( &encoder,
 800dae2:	f107 021c 	add.w	r2, r7, #28
 800dae6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800daea:	4611      	mov	r1, r2
 800daec:	4618      	mov	r0, r3
 800daee:	f7fd fc3f 	bl	800b370 <cbor_encoder_close_container_checked>
 800daf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                           &cborMapEncoder );
    }

    /* Get the encoded size. */
    if( CborNoError == cborResult )
 800daf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d108      	bne.n	800db0c <CBOR_Encode_GetStreamRequestMessage+0x1a0>
    {
        *encodedMessageSize = cbor_encoder_get_buffer_size( &encoder,
 800dafa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dafe:	6979      	ldr	r1, [r7, #20]
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff fd6c 	bl	800d5de <cbor_encoder_get_buffer_size>
 800db06:	4602      	mov	r2, r0
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	601a      	str	r2, [r3, #0]
                                                            messageBuffer );
    }

    return CborNoError == cborResult;
 800db0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bf0c      	ite	eq
 800db12:	2301      	moveq	r3, #1
 800db14:	2300      	movne	r3, #0
 800db16:	b2db      	uxtb	r3, r3
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3740      	adds	r7, #64	@ 0x40
 800db1c:	46bd      	mov	sp, r7
 800db1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db22:	bf00      	nop
 800db24:	08015f2c 	.word	0x08015f2c
 800db28:	08015f1c 	.word	0x08015f1c
 800db2c:	08015f24 	.word	0x08015f24
 800db30:	08015f30 	.word	0x08015f30
 800db34:	08015f34 	.word	0x08015f34
 800db38:	08015f38 	.word	0x08015f38

0800db3c <skipSpace>:
 * @param[in] max  The size of the buffer.
 */
static void skipSpace( const char * buf,
                       size_t * start,
                       size_t max )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
    size_t i = 0U;
 800db48:	2300      	movs	r3, #0
 800db4a:	617b      	str	r3, [r7, #20]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d005      	beq.n	800db5e <skipSpace+0x22>
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <skipSpace+0x22>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d105      	bne.n	800db6a <skipSpace+0x2e>
 800db5e:	4b19      	ldr	r3, [pc, #100]	@ (800dbc4 <skipSpace+0x88>)
 800db60:	4a19      	ldr	r2, [pc, #100]	@ (800dbc8 <skipSpace+0x8c>)
 800db62:	214f      	movs	r1, #79	@ 0x4f
 800db64:	4819      	ldr	r0, [pc, #100]	@ (800dbcc <skipSpace+0x90>)
 800db66:	f001 fe27 	bl	800f7b8 <__assert_func>

    for( i = *start; i < max; i++ )
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	e01a      	b.n	800dba8 <skipSpace+0x6c>
    {
        if( !isspace_( buf[ i ] ) )
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	4413      	add	r3, r2
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b20      	cmp	r3, #32
 800db7c:	d011      	beq.n	800dba2 <skipSpace+0x66>
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	4413      	add	r3, r2
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b09      	cmp	r3, #9
 800db88:	d00b      	beq.n	800dba2 <skipSpace+0x66>
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	4413      	add	r3, r2
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b0a      	cmp	r3, #10
 800db94:	d005      	beq.n	800dba2 <skipSpace+0x66>
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	4413      	add	r3, r2
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b0d      	cmp	r3, #13
 800dba0:	d107      	bne.n	800dbb2 <skipSpace+0x76>
    for( i = *start; i < max; i++ )
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	3301      	adds	r3, #1
 800dba6:	617b      	str	r3, [r7, #20]
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d3e0      	bcc.n	800db72 <skipSpace+0x36>
 800dbb0:	e000      	b.n	800dbb4 <skipSpace+0x78>
        {
            break;
 800dbb2:	bf00      	nop
        }
    }

    *start = i;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	697a      	ldr	r2, [r7, #20]
 800dbb8:	601a      	str	r2, [r3, #0]
}
 800dbba:	bf00      	nop
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	08015f3c 	.word	0x08015f3c
 800dbc8:	0801663c 	.word	0x0801663c
 800dbcc:	08015f80 	.word	0x08015f80

0800dbd0 <countHighBits>:
 * indicate the number of additional bytes to follow.
 *
 * @return the count
 */
static size_t countHighBits( uint8_t c )
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	71fb      	strb	r3, [r7, #7]
    uint8_t n = c;
 800dbda:	79fb      	ldrb	r3, [r7, #7]
 800dbdc:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	60bb      	str	r3, [r7, #8]

    while( ( n & 0x80U ) != 0U )
 800dbe2:	e005      	b.n	800dbf0 <countHighBits+0x20>
    {
        i++;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	60bb      	str	r3, [r7, #8]
        n = ( n & 0x7FU ) << 1U;
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	73fb      	strb	r3, [r7, #15]
    while( ( n & 0x80U ) != 0U )
 800dbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dbf5      	blt.n	800dbe4 <countHighBits+0x14>
    }

    return i;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
	...

0800dc08 <shortestUTF8>:
 *
 * @note Disallow ASCII, as this is called only for multibyte sequences.
 */
static bool shortestUTF8( size_t length,
                          uint32_t value )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
    bool ret = false;
 800dc12:	2300      	movs	r3, #0
 800dc14:	75fb      	strb	r3, [r7, #23]
    uint32_t min = 0U, max = 0U;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60fb      	str	r3, [r7, #12]

    coreJSON_ASSERT( ( length >= 2U ) && ( length <= 4U ) );
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d902      	bls.n	800dc2a <shortestUTF8+0x22>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b04      	cmp	r3, #4
 800dc28:	d905      	bls.n	800dc36 <shortestUTF8+0x2e>
 800dc2a:	4b1b      	ldr	r3, [pc, #108]	@ (800dc98 <shortestUTF8+0x90>)
 800dc2c:	4a1b      	ldr	r2, [pc, #108]	@ (800dc9c <shortestUTF8+0x94>)
 800dc2e:	2189      	movs	r1, #137	@ 0x89
 800dc30:	481b      	ldr	r0, [pc, #108]	@ (800dca0 <shortestUTF8+0x98>)
 800dc32:	f001 fdc1 	bl	800f7b8 <__assert_func>

    switch( length )
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d003      	beq.n	800dc44 <shortestUTF8+0x3c>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b03      	cmp	r3, #3
 800dc40:	d006      	beq.n	800dc50 <shortestUTF8+0x48>
 800dc42:	e00c      	b.n	800dc5e <shortestUTF8+0x56>
    {
        case 2:
            min = ( uint32_t ) 1 << 7U;
 800dc44:	2380      	movs	r3, #128	@ 0x80
 800dc46:	613b      	str	r3, [r7, #16]
            max = ( ( uint32_t ) 1 << 11U ) - 1U;
 800dc48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800dc4c:	60fb      	str	r3, [r7, #12]
            break;
 800dc4e:	e00c      	b.n	800dc6a <shortestUTF8+0x62>

        case 3:
            min = ( uint32_t ) 1 << 11U;
 800dc50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc54:	613b      	str	r3, [r7, #16]
            max = ( ( uint32_t ) 1 << 16U ) - 1U;
 800dc56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc5a:	60fb      	str	r3, [r7, #12]
            break;
 800dc5c:	e005      	b.n	800dc6a <shortestUTF8+0x62>

        default:
            min = ( uint32_t ) 1 << 16U;
 800dc5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800dc62:	613b      	str	r3, [r7, #16]
            max = 0x10FFFFU;
 800dc64:	4b0f      	ldr	r3, [pc, #60]	@ (800dca4 <shortestUTF8+0x9c>)
 800dc66:	60fb      	str	r3, [r7, #12]
            break;
 800dc68:	bf00      	nop
    }

    if( ( value >= min ) && ( value <= max ) &&
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d30d      	bcc.n	800dc8e <shortestUTF8+0x86>
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d809      	bhi.n	800dc8e <shortestUTF8+0x86>
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800dc80:	d303      	bcc.n	800dc8a <shortestUTF8+0x82>
        ( ( value < 0xD800U ) || ( value > 0xDFFFU ) ) )
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800dc88:	d301      	bcc.n	800dc8e <shortestUTF8+0x86>
    {
        ret = true;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	08015fd8 	.word	0x08015fd8
 800dc9c:	08016648 	.word	0x08016648
 800dca0:	08015f80 	.word	0x08015f80
 800dca4:	0010ffff 	.word	0x0010ffff

0800dca8 <skipUTF8MultiByte>:
 * introduce a value greater than the last code point, 0x10FFFF.
 */
static bool skipUTF8MultiByte( const char * buf,
                               size_t * start,
                               size_t max )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08a      	sub	sp, #40	@ 0x28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    size_t i = 0U, bitCount = 0U, j = 0U;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	623b      	str	r3, [r7, #32]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	61fb      	str	r3, [r7, #28]
    uint32_t value = 0U;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	61bb      	str	r3, [r7, #24]
    char_ c;

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d005      	beq.n	800dcdc <skipUTF8MultiByte+0x34>
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <skipUTF8MultiByte+0x34>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d105      	bne.n	800dce8 <skipUTF8MultiByte+0x40>
 800dcdc:	4b3c      	ldr	r3, [pc, #240]	@ (800ddd0 <skipUTF8MultiByte+0x128>)
 800dcde:	4a3d      	ldr	r2, [pc, #244]	@ (800ddd4 <skipUTF8MultiByte+0x12c>)
 800dce0:	21c6      	movs	r1, #198	@ 0xc6
 800dce2:	483d      	ldr	r0, [pc, #244]	@ (800ddd8 <skipUTF8MultiByte+0x130>)
 800dce4:	f001 fd68 	bl	800f7b8 <__assert_func>

    i = *start;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	623b      	str	r3, [r7, #32]
    coreJSON_ASSERT( i < max );
 800dcee:	6a3a      	ldr	r2, [r7, #32]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d305      	bcc.n	800dd02 <skipUTF8MultiByte+0x5a>
 800dcf6:	4b39      	ldr	r3, [pc, #228]	@ (800dddc <skipUTF8MultiByte+0x134>)
 800dcf8:	4a36      	ldr	r2, [pc, #216]	@ (800ddd4 <skipUTF8MultiByte+0x12c>)
 800dcfa:	21c9      	movs	r1, #201	@ 0xc9
 800dcfc:	4836      	ldr	r0, [pc, #216]	@ (800ddd8 <skipUTF8MultiByte+0x130>)
 800dcfe:	f001 fd5b 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( !isascii_( buf[ i ] ) );
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	4413      	add	r3, r2
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	b25b      	sxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	db05      	blt.n	800dd1c <skipUTF8MultiByte+0x74>
 800dd10:	4b33      	ldr	r3, [pc, #204]	@ (800dde0 <skipUTF8MultiByte+0x138>)
 800dd12:	4a30      	ldr	r2, [pc, #192]	@ (800ddd4 <skipUTF8MultiByte+0x12c>)
 800dd14:	21ca      	movs	r1, #202	@ 0xca
 800dd16:	4830      	ldr	r0, [pc, #192]	@ (800ddd8 <skipUTF8MultiByte+0x130>)
 800dd18:	f001 fd4e 	bl	800f7b8 <__assert_func>

    c.c = buf[ i ];
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	6a3b      	ldr	r3, [r7, #32]
 800dd20:	4413      	add	r3, r2
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	743b      	strb	r3, [r7, #16]

    if( ( c.u > 0xC1U ) && ( c.u < 0xF5U ) )
 800dd26:	7c3b      	ldrb	r3, [r7, #16]
 800dd28:	2bc1      	cmp	r3, #193	@ 0xc1
 800dd2a:	d94a      	bls.n	800ddc2 <skipUTF8MultiByte+0x11a>
 800dd2c:	7c3b      	ldrb	r3, [r7, #16]
 800dd2e:	2bf4      	cmp	r3, #244	@ 0xf4
 800dd30:	d847      	bhi.n	800ddc2 <skipUTF8MultiByte+0x11a>
    {
        bitCount = countHighBits( c.u );
 800dd32:	7c3b      	ldrb	r3, [r7, #16]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff ff4b 	bl	800dbd0 <countHighBits>
 800dd3a:	6178      	str	r0, [r7, #20]
        value = ( ( uint32_t ) c.u ) & ( ( ( uint32_t ) 1 << ( 7U - bitCount ) ) - 1U );
 800dd3c:	7c3b      	ldrb	r3, [r7, #16]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f1c3 0307 	rsb	r3, r3, #7
 800dd46:	f04f 32ff 	mov.w	r2, #4294967295
 800dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4e:	43db      	mvns	r3, r3
 800dd50:	400b      	ands	r3, r1
 800dd52:	61bb      	str	r3, [r7, #24]

        /* The bit count is 1 greater than the number of bytes,
         * e.g., when j is 2, we skip one more byte. */
        for( j = bitCount - 1U; j > 0U; j-- )
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	61fb      	str	r3, [r7, #28]
 800dd5a:	e01a      	b.n	800dd92 <skipUTF8MultiByte+0xea>
        {
            i++;
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	623b      	str	r3, [r7, #32]

            if( i >= max )
 800dd62:	6a3a      	ldr	r2, [r7, #32]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d217      	bcs.n	800dd9a <skipUTF8MultiByte+0xf2>
            {
                break;
            }

            c.c = buf[ i ];
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	4413      	add	r3, r2
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	743b      	strb	r3, [r7, #16]

            /* Additional bytes must match 10xxxxxx. */
            if( ( c.u & 0xC0U ) != 0x80U )
 800dd74:	7c3b      	ldrb	r3, [r7, #16]
 800dd76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dd7a:	2b80      	cmp	r3, #128	@ 0x80
 800dd7c:	d10f      	bne.n	800dd9e <skipUTF8MultiByte+0xf6>
            {
                break;
            }

            value = ( value << 6U ) | ( c.u & 0x3FU );
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	019a      	lsls	r2, r3, #6
 800dd82:	7c3b      	ldrb	r3, [r7, #16]
 800dd84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	61bb      	str	r3, [r7, #24]
        for( j = bitCount - 1U; j > 0U; j-- )
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	61fb      	str	r3, [r7, #28]
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1e1      	bne.n	800dd5c <skipUTF8MultiByte+0xb4>
 800dd98:	e002      	b.n	800dda0 <skipUTF8MultiByte+0xf8>
                break;
 800dd9a:	bf00      	nop
 800dd9c:	e000      	b.n	800dda0 <skipUTF8MultiByte+0xf8>
                break;
 800dd9e:	bf00      	nop
        }

        if( ( j == 0U ) && ( shortestUTF8( bitCount, value ) == true ) )
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d10d      	bne.n	800ddc2 <skipUTF8MultiByte+0x11a>
 800dda6:	69b9      	ldr	r1, [r7, #24]
 800dda8:	6978      	ldr	r0, [r7, #20]
 800ddaa:	f7ff ff2d 	bl	800dc08 <shortestUTF8>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d006      	beq.n	800ddc2 <skipUTF8MultiByte+0x11a>
        {
            *start = i + 1U;
 800ddb4:	6a3b      	ldr	r3, [r7, #32]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	601a      	str	r2, [r3, #0]
            ret = true;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return ret;
 800ddc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3728      	adds	r7, #40	@ 0x28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	08015f3c 	.word	0x08015f3c
 800ddd4:	08016658 	.word	0x08016658
 800ddd8:	08015f80 	.word	0x08015f80
 800dddc:	08016000 	.word	0x08016000
 800dde0:	08016008 	.word	0x08016008

0800dde4 <skipUTF8>:
 * false otherwise.
 */
static bool skipUTF8( const char * buf,
                      size_t * start,
                      size_t max )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	75fb      	strb	r3, [r7, #23]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <skipUTF8+0x22>
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <skipUTF8+0x22>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <skipUTF8+0x30>
 800de06:	4b14      	ldr	r3, [pc, #80]	@ (800de58 <skipUTF8+0x74>)
 800de08:	4a14      	ldr	r2, [pc, #80]	@ (800de5c <skipUTF8+0x78>)
 800de0a:	f240 1103 	movw	r1, #259	@ 0x103
 800de0e:	4814      	ldr	r0, [pc, #80]	@ (800de60 <skipUTF8+0x7c>)
 800de10:	f001 fcd2 	bl	800f7b8 <__assert_func>

    if( *start < max )
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d916      	bls.n	800de4c <skipUTF8+0x68>
    {
        if( isascii_( buf[ *start ] ) )
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	4413      	add	r3, r2
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	b25b      	sxtb	r3, r3
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	db07      	blt.n	800de3e <skipUTF8+0x5a>
        {
            *start += 1U;
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	601a      	str	r2, [r3, #0]
            ret = true;
 800de38:	2301      	movs	r3, #1
 800de3a:	75fb      	strb	r3, [r7, #23]
 800de3c:	e006      	b.n	800de4c <skipUTF8+0x68>
        }
        else
        {
            ret = skipUTF8MultiByte( buf, start, max );
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	68b9      	ldr	r1, [r7, #8]
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7ff ff30 	bl	800dca8 <skipUTF8MultiByte>
 800de48:	4603      	mov	r3, r0
 800de4a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
 800de4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3718      	adds	r7, #24
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	08015f3c 	.word	0x08015f3c
 800de5c:	0801666c 	.word	0x0801666c
 800de60:	08015f80 	.word	0x08015f80

0800de64 <hexToInt>:
 *
 * @return the integer value upon success or NOT_A_HEX_CHAR on failure.
 */
#define NOT_A_HEX_CHAR    ( 0x10U )
static uint8_t hexToInt( char c )
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	71fb      	strb	r3, [r7, #7]
    char_ n;

    n.c = c;
 800de6e:	79fb      	ldrb	r3, [r7, #7]
 800de70:	733b      	strb	r3, [r7, #12]

    if( ( c >= 'a' ) && ( c <= 'f' ) )
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	2b60      	cmp	r3, #96	@ 0x60
 800de76:	d90b      	bls.n	800de90 <hexToInt+0x2c>
 800de78:	79fb      	ldrb	r3, [r7, #7]
 800de7a:	2b66      	cmp	r3, #102	@ 0x66
 800de7c:	d808      	bhi.n	800de90 <hexToInt+0x2c>
    {
        n.c -= 'a';
 800de7e:	7b3b      	ldrb	r3, [r7, #12]
 800de80:	3b61      	subs	r3, #97	@ 0x61
 800de82:	b2db      	uxtb	r3, r3
 800de84:	733b      	strb	r3, [r7, #12]
        n.u += 10U;
 800de86:	7b3b      	ldrb	r3, [r7, #12]
 800de88:	330a      	adds	r3, #10
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	733b      	strb	r3, [r7, #12]
 800de8e:	e01b      	b.n	800dec8 <hexToInt+0x64>
    }
    else if( ( c >= 'A' ) && ( c <= 'F' ) )
 800de90:	79fb      	ldrb	r3, [r7, #7]
 800de92:	2b40      	cmp	r3, #64	@ 0x40
 800de94:	d90b      	bls.n	800deae <hexToInt+0x4a>
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	2b46      	cmp	r3, #70	@ 0x46
 800de9a:	d808      	bhi.n	800deae <hexToInt+0x4a>
    {
        n.c -= 'A';
 800de9c:	7b3b      	ldrb	r3, [r7, #12]
 800de9e:	3b41      	subs	r3, #65	@ 0x41
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	733b      	strb	r3, [r7, #12]
        n.u += 10U;
 800dea4:	7b3b      	ldrb	r3, [r7, #12]
 800dea6:	330a      	adds	r3, #10
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	733b      	strb	r3, [r7, #12]
 800deac:	e00c      	b.n	800dec8 <hexToInt+0x64>
    }
    else if( isdigit_( c ) )
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	2b2f      	cmp	r3, #47	@ 0x2f
 800deb2:	d907      	bls.n	800dec4 <hexToInt+0x60>
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	2b39      	cmp	r3, #57	@ 0x39
 800deb8:	d804      	bhi.n	800dec4 <hexToInt+0x60>
    {
        n.c -= '0';
 800deba:	7b3b      	ldrb	r3, [r7, #12]
 800debc:	3b30      	subs	r3, #48	@ 0x30
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	733b      	strb	r3, [r7, #12]
 800dec2:	e001      	b.n	800dec8 <hexToInt+0x64>
    }
    else
    {
        n.u = NOT_A_HEX_CHAR;
 800dec4:	2310      	movs	r3, #16
 800dec6:	733b      	strb	r3, [r7, #12]
    }

    return n.u;
 800dec8:	7b3b      	ldrb	r3, [r7, #12]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
	...

0800ded8 <skipOneHexEscape>:
 */
static bool skipOneHexEscape( const char * buf,
                              size_t * start,
                              size_t max,
                              uint16_t * outValue )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08a      	sub	sp, #40	@ 0x28
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	603b      	str	r3, [r7, #0]
    bool ret = false;
 800dee6:	2300      	movs	r3, #0
 800dee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    size_t i = 0U, end = 0U;
 800deec:	2300      	movs	r3, #0
 800deee:	623b      	str	r3, [r7, #32]
 800def0:	2300      	movs	r3, #0
 800def2:	61bb      	str	r3, [r7, #24]
    uint16_t value = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	83fb      	strh	r3, [r7, #30]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d005      	beq.n	800df0a <skipOneHexEscape+0x32>
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <skipOneHexEscape+0x32>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <skipOneHexEscape+0x40>
 800df0a:	4b33      	ldr	r3, [pc, #204]	@ (800dfd8 <skipOneHexEscape+0x100>)
 800df0c:	4a33      	ldr	r2, [pc, #204]	@ (800dfdc <skipOneHexEscape+0x104>)
 800df0e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800df12:	4833      	ldr	r0, [pc, #204]	@ (800dfe0 <skipOneHexEscape+0x108>)
 800df14:	f001 fc50 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( outValue != NULL );
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <skipOneHexEscape+0x54>
 800df1e:	4b31      	ldr	r3, [pc, #196]	@ (800dfe4 <skipOneHexEscape+0x10c>)
 800df20:	4a2e      	ldr	r2, [pc, #184]	@ (800dfdc <skipOneHexEscape+0x104>)
 800df22:	f240 1151 	movw	r1, #337	@ 0x151
 800df26:	482e      	ldr	r0, [pc, #184]	@ (800dfe0 <skipOneHexEscape+0x108>)
 800df28:	f001 fc46 	bl	800f7b8 <__assert_func>

    i = *start;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	623b      	str	r3, [r7, #32]
#define HEX_ESCAPE_LENGTH    ( 6U )   /* e.g., \u1234 */
    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/coreJSON/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    end = ( i <= ( SIZE_MAX - HEX_ESCAPE_LENGTH ) ) ? ( i + HEX_ESCAPE_LENGTH ) : SIZE_MAX;
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	f113 0f07 	cmn.w	r3, #7
 800df38:	d802      	bhi.n	800df40 <skipOneHexEscape+0x68>
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	3306      	adds	r3, #6
 800df3e:	e001      	b.n	800df44 <skipOneHexEscape+0x6c>
 800df40:	f04f 33ff 	mov.w	r3, #4294967295
 800df44:	61bb      	str	r3, [r7, #24]

    if( ( end < max ) && ( buf[ i ] == '\\' ) && ( buf[ i + 1U ] == 'u' ) )
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d22e      	bcs.n	800dfac <skipOneHexEscape+0xd4>
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	4413      	add	r3, r2
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	2b5c      	cmp	r3, #92	@ 0x5c
 800df58:	d128      	bne.n	800dfac <skipOneHexEscape+0xd4>
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	3301      	adds	r3, #1
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	4413      	add	r3, r2
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b75      	cmp	r3, #117	@ 0x75
 800df66:	d121      	bne.n	800dfac <skipOneHexEscape+0xd4>
    {
        for( i += 2U; i < end; i++ )
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	3302      	adds	r3, #2
 800df6c:	623b      	str	r3, [r7, #32]
 800df6e:	e017      	b.n	800dfa0 <skipOneHexEscape+0xc8>
        {
            uint8_t n = hexToInt( buf[ i ] );
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	4413      	add	r3, r2
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff ff73 	bl	800de64 <hexToInt>
 800df7e:	4603      	mov	r3, r0
 800df80:	75fb      	strb	r3, [r7, #23]

            if( n == NOT_A_HEX_CHAR )
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	2b10      	cmp	r3, #16
 800df86:	d010      	beq.n	800dfaa <skipOneHexEscape+0xd2>
            {
                break;
            }

            value = ( value << 4U ) | n;
 800df88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df8c:	011b      	lsls	r3, r3, #4
 800df8e:	b21a      	sxth	r2, r3
 800df90:	7dfb      	ldrb	r3, [r7, #23]
 800df92:	b21b      	sxth	r3, r3
 800df94:	4313      	orrs	r3, r2
 800df96:	b21b      	sxth	r3, r3
 800df98:	83fb      	strh	r3, [r7, #30]
        for( i += 2U; i < end; i++ )
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	3301      	adds	r3, #1
 800df9e:	623b      	str	r3, [r7, #32]
 800dfa0:	6a3a      	ldr	r2, [r7, #32]
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d3e3      	bcc.n	800df70 <skipOneHexEscape+0x98>
 800dfa8:	e000      	b.n	800dfac <skipOneHexEscape+0xd4>
                break;
 800dfaa:	bf00      	nop
        }
    }

    if( ( i == end ) && ( value > 0U ) )
 800dfac:	6a3a      	ldr	r2, [r7, #32]
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d10b      	bne.n	800dfcc <skipOneHexEscape+0xf4>
 800dfb4:	8bfb      	ldrh	r3, [r7, #30]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d008      	beq.n	800dfcc <skipOneHexEscape+0xf4>
    {
        ret = true;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        *outValue = value;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	8bfa      	ldrh	r2, [r7, #30]
 800dfc4:	801a      	strh	r2, [r3, #0]
        *start = i;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6a3a      	ldr	r2, [r7, #32]
 800dfca:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800dfcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3728      	adds	r7, #40	@ 0x28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	08015f3c 	.word	0x08015f3c
 800dfdc:	08016678 	.word	0x08016678
 800dfe0:	08015f80 	.word	0x08015f80
 800dfe4:	08016024 	.word	0x08016024

0800dfe8 <skipHexEscape>:
#define isLowSurrogate( x )     ( ( ( x ) >= 0xDC00U ) && ( ( x ) <= 0xDFFFU ) )

static bool skipHexEscape( const char * buf,
                           size_t * start,
                           size_t max )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b088      	sub	sp, #32
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800dff4:	2300      	movs	r3, #0
 800dff6:	77fb      	strb	r3, [r7, #31]
    size_t i = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	61bb      	str	r3, [r7, #24]
    uint16_t value = 0U;
 800dffc:	2300      	movs	r3, #0
 800dffe:	82fb      	strh	r3, [r7, #22]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d005      	beq.n	800e012 <skipHexEscape+0x2a>
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <skipHexEscape+0x2a>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <skipHexEscape+0x38>
 800e012:	4b25      	ldr	r3, [pc, #148]	@ (800e0a8 <skipHexEscape+0xc0>)
 800e014:	4a25      	ldr	r2, [pc, #148]	@ (800e0ac <skipHexEscape+0xc4>)
 800e016:	f240 118f 	movw	r1, #399	@ 0x18f
 800e01a:	4825      	ldr	r0, [pc, #148]	@ (800e0b0 <skipHexEscape+0xc8>)
 800e01c:	f001 fbcc 	bl	800f7b8 <__assert_func>

    i = *start;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	61bb      	str	r3, [r7, #24]

    if( skipOneHexEscape( buf, &i, max, &value ) == true )
 800e026:	f107 0316 	add.w	r3, r7, #22
 800e02a:	f107 0118 	add.w	r1, r7, #24
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff ff51 	bl	800ded8 <skipOneHexEscape>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d029      	beq.n	800e090 <skipHexEscape+0xa8>
    {
        if( isHighSurrogate( value ) )
 800e03c:	8afb      	ldrh	r3, [r7, #22]
 800e03e:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800e042:	d319      	bcc.n	800e078 <skipHexEscape+0x90>
 800e044:	8afb      	ldrh	r3, [r7, #22]
 800e046:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e04a:	d215      	bcs.n	800e078 <skipHexEscape+0x90>
        {
            if( ( skipOneHexEscape( buf, &i, max, &value ) == true ) &&
 800e04c:	f107 0316 	add.w	r3, r7, #22
 800e050:	f107 0118 	add.w	r1, r7, #24
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff ff3e 	bl	800ded8 <skipOneHexEscape>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d015      	beq.n	800e08e <skipHexEscape+0xa6>
                ( isLowSurrogate( value ) ) )
 800e062:	8afb      	ldrh	r3, [r7, #22]
            if( ( skipOneHexEscape( buf, &i, max, &value ) == true ) &&
 800e064:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e068:	d311      	bcc.n	800e08e <skipHexEscape+0xa6>
                ( isLowSurrogate( value ) ) )
 800e06a:	8afb      	ldrh	r3, [r7, #22]
 800e06c:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e070:	d20d      	bcs.n	800e08e <skipHexEscape+0xa6>
            {
                ret = true;
 800e072:	2301      	movs	r3, #1
 800e074:	77fb      	strb	r3, [r7, #31]
            if( ( skipOneHexEscape( buf, &i, max, &value ) == true ) &&
 800e076:	e00a      	b.n	800e08e <skipHexEscape+0xa6>
            }
        }
        else if( isLowSurrogate( value ) )
 800e078:	8afb      	ldrh	r3, [r7, #22]
 800e07a:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e07e:	d303      	bcc.n	800e088 <skipHexEscape+0xa0>
 800e080:	8afb      	ldrh	r3, [r7, #22]
 800e082:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e086:	d303      	bcc.n	800e090 <skipHexEscape+0xa8>
        {
            /* premature low surrogate */
        }
        else
        {
            ret = true;
 800e088:	2301      	movs	r3, #1
 800e08a:	77fb      	strb	r3, [r7, #31]
 800e08c:	e000      	b.n	800e090 <skipHexEscape+0xa8>
            if( ( skipOneHexEscape( buf, &i, max, &value ) == true ) &&
 800e08e:	bf00      	nop
        }
    }

    if( ret == true )
 800e090:	7ffb      	ldrb	r3, [r7, #31]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d002      	beq.n	800e09c <skipHexEscape+0xb4>
    {
        *start = i;
 800e096:	69ba      	ldr	r2, [r7, #24]
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800e09c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3720      	adds	r7, #32
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	08015f3c 	.word	0x08015f3c
 800e0ac:	0801668c 	.word	0x0801668c
 800e0b0:	08015f80 	.word	0x08015f80

0800e0b4 <skipEscape>:
 * @note For the sake of security, \NUL is disallowed.
 */
static bool skipEscape( const char * buf,
                        size_t * start,
                        size_t max )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	75fb      	strb	r3, [r7, #23]
    size_t i = 0U;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	613b      	str	r3, [r7, #16]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d005      	beq.n	800e0da <skipEscape+0x26>
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <skipEscape+0x26>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d106      	bne.n	800e0e8 <skipEscape+0x34>
 800e0da:	4b34      	ldr	r3, [pc, #208]	@ (800e1ac <skipEscape+0xf8>)
 800e0dc:	4a34      	ldr	r2, [pc, #208]	@ (800e1b0 <skipEscape+0xfc>)
 800e0de:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800e0e2:	4834      	ldr	r0, [pc, #208]	@ (800e1b4 <skipEscape+0x100>)
 800e0e4:	f001 fb68 	bl	800f7b8 <__assert_func>

    i = *start;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	613b      	str	r3, [r7, #16]

    if( ( i < ( max - 1U ) ) && ( buf[ i ] == '\\' ) )
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	1e5a      	subs	r2, r3, #1
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d94e      	bls.n	800e196 <skipEscape+0xe2>
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	2b5c      	cmp	r3, #92	@ 0x5c
 800e102:	d148      	bne.n	800e196 <skipEscape+0xe2>
    {
        char c = buf[ i + 1U ];
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	3301      	adds	r3, #1
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	4413      	add	r3, r2
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	75bb      	strb	r3, [r7, #22]

        switch( c )
 800e110:	7dbb      	ldrb	r3, [r7, #22]
 800e112:	2b75      	cmp	r3, #117	@ 0x75
 800e114:	dc2f      	bgt.n	800e176 <skipEscape+0xc2>
 800e116:	2b5c      	cmp	r3, #92	@ 0x5c
 800e118:	da08      	bge.n	800e12c <skipEscape+0x78>
 800e11a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e11c:	d025      	beq.n	800e16a <skipEscape+0xb6>
 800e11e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e120:	dc29      	bgt.n	800e176 <skipEscape+0xc2>
 800e122:	2b00      	cmp	r3, #0
 800e124:	d034      	beq.n	800e190 <skipEscape+0xdc>
 800e126:	2b22      	cmp	r3, #34	@ 0x22
 800e128:	d01f      	beq.n	800e16a <skipEscape+0xb6>
 800e12a:	e024      	b.n	800e176 <skipEscape+0xc2>
 800e12c:	3b5c      	subs	r3, #92	@ 0x5c
 800e12e:	2201      	movs	r2, #1
 800e130:	409a      	lsls	r2, r3
 800e132:	4b21      	ldr	r3, [pc, #132]	@ (800e1b8 <skipEscape+0x104>)
 800e134:	4013      	ands	r3, r2
 800e136:	2b00      	cmp	r3, #0
 800e138:	bf14      	ite	ne
 800e13a:	2301      	movne	r3, #1
 800e13c:	2300      	moveq	r3, #0
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b00      	cmp	r3, #0
 800e142:	d112      	bne.n	800e16a <skipEscape+0xb6>
 800e144:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	bf14      	ite	ne
 800e14c:	2301      	movne	r3, #1
 800e14e:	2300      	moveq	r3, #0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00f      	beq.n	800e176 <skipEscape+0xc2>
        {
            case '\0':
                break;

            case 'u':
                ret = skipHexEscape( buf, &i, max );
 800e156:	f107 0310 	add.w	r3, r7, #16
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	4619      	mov	r1, r3
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff ff42 	bl	800dfe8 <skipHexEscape>
 800e164:	4603      	mov	r3, r0
 800e166:	75fb      	strb	r3, [r7, #23]
                break;
 800e168:	e015      	b.n	800e196 <skipEscape+0xe2>
            case 'b':
            case 'f':
            case 'n':
            case 'r':
            case 't':
                i += 2U;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	3302      	adds	r3, #2
 800e16e:	613b      	str	r3, [r7, #16]
                ret = true;
 800e170:	2301      	movs	r3, #1
 800e172:	75fb      	strb	r3, [r7, #23]
                break;
 800e174:	e00f      	b.n	800e196 <skipEscape+0xe2>

            default:

                /* a control character: (NUL,SPACE) */
                if( iscntrl_( c ) )
 800e176:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	db0a      	blt.n	800e194 <skipEscape+0xe0>
 800e17e:	7dbb      	ldrb	r3, [r7, #22]
 800e180:	2b1f      	cmp	r3, #31
 800e182:	d807      	bhi.n	800e194 <skipEscape+0xe0>
                {
                    i += 2U;
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	3302      	adds	r3, #2
 800e188:	613b      	str	r3, [r7, #16]
                    ret = true;
 800e18a:	2301      	movs	r3, #1
 800e18c:	75fb      	strb	r3, [r7, #23]
                }

                break;
 800e18e:	e001      	b.n	800e194 <skipEscape+0xe0>
                break;
 800e190:	bf00      	nop
 800e192:	e000      	b.n	800e196 <skipEscape+0xe2>
                break;
 800e194:	bf00      	nop
        }
    }

    if( ret == true )
 800e196:	7dfb      	ldrb	r3, [r7, #23]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <skipEscape+0xee>
    {
        *start = i;
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	08015f3c 	.word	0x08015f3c
 800e1b0:	0801669c 	.word	0x0801669c
 800e1b4:	08015f80 	.word	0x08015f80
 800e1b8:	01440441 	.word	0x01440441

0800e1bc <skipString>:
 * false otherwise.
 */
static bool skipString( const char * buf,
                        size_t * start,
                        size_t max )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	75fb      	strb	r3, [r7, #23]
    size_t i = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	613b      	str	r3, [r7, #16]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d005      	beq.n	800e1e2 <skipString+0x26>
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <skipString+0x26>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d106      	bne.n	800e1f0 <skipString+0x34>
 800e1e2:	4b31      	ldr	r3, [pc, #196]	@ (800e2a8 <skipString+0xec>)
 800e1e4:	4a31      	ldr	r2, [pc, #196]	@ (800e2ac <skipString+0xf0>)
 800e1e6:	f240 2105 	movw	r1, #517	@ 0x205
 800e1ea:	4831      	ldr	r0, [pc, #196]	@ (800e2b0 <skipString+0xf4>)
 800e1ec:	f001 fae4 	bl	800f7b8 <__assert_func>

    i = *start;
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	613b      	str	r3, [r7, #16]

    if( ( i < max ) && ( buf[ i ] == '"' ) )
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d949      	bls.n	800e292 <skipString+0xd6>
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	4413      	add	r3, r2
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b22      	cmp	r3, #34	@ 0x22
 800e208:	d143      	bne.n	800e292 <skipString+0xd6>
    {
        i++;
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	3301      	adds	r3, #1
 800e20e:	613b      	str	r3, [r7, #16]

        while( i < max )
 800e210:	e039      	b.n	800e286 <skipString+0xca>
        {
            if( buf[ i ] == '"' )
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	4413      	add	r3, r2
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b22      	cmp	r3, #34	@ 0x22
 800e21c:	d105      	bne.n	800e22a <skipString+0x6e>
            {
                ret = true;
 800e21e:	2301      	movs	r3, #1
 800e220:	75fb      	strb	r3, [r7, #23]
                i++;
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	3301      	adds	r3, #1
 800e226:	613b      	str	r3, [r7, #16]
                break;
 800e228:	e033      	b.n	800e292 <skipString+0xd6>
            }

            if( buf[ i ] == '\\' )
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	4413      	add	r3, r2
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	2b5c      	cmp	r3, #92	@ 0x5c
 800e234:	d10d      	bne.n	800e252 <skipString+0x96>
            {
                if( skipEscape( buf, &i, max ) != true )
 800e236:	f107 0310 	add.w	r3, r7, #16
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4619      	mov	r1, r3
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7ff ff38 	bl	800e0b4 <skipEscape>
 800e244:	4603      	mov	r3, r0
 800e246:	f083 0301 	eor.w	r3, r3, #1
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d01a      	beq.n	800e286 <skipString+0xca>
                {
                    break;
 800e250:	e01f      	b.n	800e292 <skipString+0xd6>
                }
            }
            /* An unescaped control character is not allowed. */
            else if( iscntrl_( buf[ i ] ) )
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	4413      	add	r3, r2
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	b25b      	sxtb	r3, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	db05      	blt.n	800e26c <skipString+0xb0>
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	4413      	add	r3, r2
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	2b1f      	cmp	r3, #31
 800e26a:	d912      	bls.n	800e292 <skipString+0xd6>
            {
                break;
            }
            else if( skipUTF8( buf, &i, max ) != true )
 800e26c:	f107 0310 	add.w	r3, r7, #16
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	4619      	mov	r1, r3
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f7ff fdb5 	bl	800dde4 <skipUTF8>
 800e27a:	4603      	mov	r3, r0
 800e27c:	f083 0301 	eor.w	r3, r3, #1
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b00      	cmp	r3, #0
 800e284:	d104      	bne.n	800e290 <skipString+0xd4>
        while( i < max )
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d8c1      	bhi.n	800e212 <skipString+0x56>
 800e28e:	e000      	b.n	800e292 <skipString+0xd6>
            {
                break;
 800e290:	bf00      	nop
                /* MISRA 15.7 */
            }
        }
    }

    if( ret == true )
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <skipString+0xe2>
    {
        *start = i;
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	08015f3c 	.word	0x08015f3c
 800e2ac:	080166a8 	.word	0x080166a8
 800e2b0:	08015f80 	.word	0x08015f80

0800e2b4 <strnEq>:
 * false otherwise
 */
static bool strnEq( const char * a,
                    const char * b,
                    size_t n )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	607a      	str	r2, [r7, #4]
    size_t i = 0U;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	617b      	str	r3, [r7, #20]

    coreJSON_ASSERT( ( a != NULL ) && ( b != NULL ) );
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <strnEq+0x1c>
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <strnEq+0x2a>
 800e2d0:	4b13      	ldr	r3, [pc, #76]	@ (800e320 <strnEq+0x6c>)
 800e2d2:	4a14      	ldr	r2, [pc, #80]	@ (800e324 <strnEq+0x70>)
 800e2d4:	f240 2145 	movw	r1, #581	@ 0x245
 800e2d8:	4813      	ldr	r0, [pc, #76]	@ (800e328 <strnEq+0x74>)
 800e2da:	f001 fa6d 	bl	800f7b8 <__assert_func>

    for( i = 0; i < n; i++ )
 800e2de:	2300      	movs	r3, #0
 800e2e0:	617b      	str	r3, [r7, #20]
 800e2e2:	e00c      	b.n	800e2fe <strnEq+0x4a>
    {
        if( a[ i ] != b[ i ] )
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	781a      	ldrb	r2, [r3, #0]
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	440b      	add	r3, r1
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d107      	bne.n	800e308 <strnEq+0x54>
    for( i = 0; i < n; i++ )
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	617b      	str	r3, [r7, #20]
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	429a      	cmp	r2, r3
 800e304:	d3ee      	bcc.n	800e2e4 <strnEq+0x30>
 800e306:	e000      	b.n	800e30a <strnEq+0x56>
        {
            break;
 800e308:	bf00      	nop
        }
    }

    return ( i == n ) ? true : false;
 800e30a:	697a      	ldr	r2, [r7, #20]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	429a      	cmp	r2, r3
 800e310:	bf0c      	ite	eq
 800e312:	2301      	moveq	r3, #1
 800e314:	2300      	movne	r3, #0
 800e316:	b2db      	uxtb	r3, r3
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3718      	adds	r7, #24
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	0801603c 	.word	0x0801603c
 800e324:	080166b4 	.word	0x080166b4
 800e328:	08015f80 	.word	0x08015f80

0800e32c <skipLiteral>:
static bool skipLiteral( const char * buf,
                         size_t * start,
                         size_t max,
                         const char * literal,
                         size_t length )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
    bool ret = false;
 800e33a:	2300      	movs	r3, #0
 800e33c:	75fb      	strb	r3, [r7, #23]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d005      	beq.n	800e350 <skipLiteral+0x24>
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <skipLiteral+0x24>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <skipLiteral+0x32>
 800e350:	4b1a      	ldr	r3, [pc, #104]	@ (800e3bc <skipLiteral+0x90>)
 800e352:	4a1b      	ldr	r2, [pc, #108]	@ (800e3c0 <skipLiteral+0x94>)
 800e354:	f240 2166 	movw	r1, #614	@ 0x266
 800e358:	481a      	ldr	r0, [pc, #104]	@ (800e3c4 <skipLiteral+0x98>)
 800e35a:	f001 fa2d 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( literal != NULL );
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d106      	bne.n	800e372 <skipLiteral+0x46>
 800e364:	4b18      	ldr	r3, [pc, #96]	@ (800e3c8 <skipLiteral+0x9c>)
 800e366:	4a16      	ldr	r2, [pc, #88]	@ (800e3c0 <skipLiteral+0x94>)
 800e368:	f240 2167 	movw	r1, #615	@ 0x267
 800e36c:	4815      	ldr	r0, [pc, #84]	@ (800e3c4 <skipLiteral+0x98>)
 800e36e:	f001 fa23 	bl	800f7b8 <__assert_func>

    if( ( *start < max ) && ( length <= ( max - *start ) ) )
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d911      	bls.n	800e3a0 <skipLiteral+0x74>
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	6a3a      	ldr	r2, [r7, #32]
 800e386:	429a      	cmp	r2, r3
 800e388:	d80a      	bhi.n	800e3a0 <skipLiteral+0x74>
    {
        ret = strnEq( &buf[ *start ], literal, length );
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	4413      	add	r3, r2
 800e392:	6a3a      	ldr	r2, [r7, #32]
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff ff8c 	bl	800e2b4 <strnEq>
 800e39c:	4603      	mov	r3, r0
 800e39e:	75fb      	strb	r3, [r7, #23]
    }

    if( ret == true )
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d005      	beq.n	800e3b2 <skipLiteral+0x86>
    {
        *start += length;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	441a      	add	r2, r3
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3718      	adds	r7, #24
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	08015f3c 	.word	0x08015f3c
 800e3c0:	080166bc 	.word	0x080166bc
 800e3c4:	08015f80 	.word	0x08015f80
 800e3c8:	0801606c 	.word	0x0801606c

0800e3cc <skipAnyLiteral>:
 * false otherwise.
 */
static bool skipAnyLiteral( const char * buf,
                            size_t * start,
                            size_t max )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b088      	sub	sp, #32
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]

#define skipLit_( x ) \
    ( skipLiteral( buf, start, max, ( x ), ( sizeof( x ) - 1UL ) ) == true )

    if( skipLit_( "true" ) )
 800e3dc:	2304      	movs	r3, #4
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	4b17      	ldr	r3, [pc, #92]	@ (800e440 <skipAnyLiteral+0x74>)
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	68b9      	ldr	r1, [r7, #8]
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7ff ffa0 	bl	800e32c <skipLiteral>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <skipAnyLiteral+0x2c>
    {
        ret = true;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	75fb      	strb	r3, [r7, #23]
 800e3f6:	e01d      	b.n	800e434 <skipAnyLiteral+0x68>
    }
    else if( skipLit_( "false" ) )
 800e3f8:	2305      	movs	r3, #5
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	4b11      	ldr	r3, [pc, #68]	@ (800e444 <skipAnyLiteral+0x78>)
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	68b9      	ldr	r1, [r7, #8]
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f7ff ff92 	bl	800e32c <skipLiteral>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <skipAnyLiteral+0x48>
    {
        ret = true;
 800e40e:	2301      	movs	r3, #1
 800e410:	75fb      	strb	r3, [r7, #23]
 800e412:	e00f      	b.n	800e434 <skipAnyLiteral+0x68>
    }
    else if( skipLit_( "null" ) )
 800e414:	2304      	movs	r3, #4
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	4b0b      	ldr	r3, [pc, #44]	@ (800e448 <skipAnyLiteral+0x7c>)
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	68b9      	ldr	r1, [r7, #8]
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff ff84 	bl	800e32c <skipLiteral>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d002      	beq.n	800e430 <skipAnyLiteral+0x64>
    {
        ret = true;
 800e42a:	2301      	movs	r3, #1
 800e42c:	75fb      	strb	r3, [r7, #23]
 800e42e:	e001      	b.n	800e434 <skipAnyLiteral+0x68>
    }
    else
    {
        ret = false;
 800e430:	2300      	movs	r3, #0
 800e432:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800e434:	7dfb      	ldrb	r3, [r7, #23]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	08016084 	.word	0x08016084
 800e444:	0801608c 	.word	0x0801608c
 800e448:	08016094 	.word	0x08016094

0800e44c <skipDigits>:
#define MAX_FACTOR    ( MAX_INDEX_VALUE / 10 )
static bool skipDigits( const char * buf,
                        size_t * start,
                        size_t max,
                        int32_t * outValue )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08a      	sub	sp, #40	@ 0x28
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
    bool ret = false;
 800e45a:	2300      	movs	r3, #0
 800e45c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    size_t i = 0U, saveStart = 0U;
 800e460:	2300      	movs	r3, #0
 800e462:	623b      	str	r3, [r7, #32]
 800e464:	2300      	movs	r3, #0
 800e466:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	61fb      	str	r3, [r7, #28]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d005      	beq.n	800e47e <skipDigits+0x32>
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d002      	beq.n	800e47e <skipDigits+0x32>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d106      	bne.n	800e48c <skipDigits+0x40>
 800e47e:	4b2c      	ldr	r3, [pc, #176]	@ (800e530 <skipDigits+0xe4>)
 800e480:	4a2c      	ldr	r2, [pc, #176]	@ (800e534 <skipDigits+0xe8>)
 800e482:	f240 21b6 	movw	r1, #694	@ 0x2b6
 800e486:	482c      	ldr	r0, [pc, #176]	@ (800e538 <skipDigits+0xec>)
 800e488:	f001 f996 	bl	800f7b8 <__assert_func>

    saveStart = *start;
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	61bb      	str	r3, [r7, #24]

    for( i = *start; i < max; i++ )
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	623b      	str	r3, [r7, #32]
 800e498:	e02f      	b.n	800e4fa <skipDigits+0xae>
    {
        if( !isdigit_( buf[ i ] ) )
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	4413      	add	r3, r2
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	2b2f      	cmp	r3, #47	@ 0x2f
 800e4a4:	d92d      	bls.n	800e502 <skipDigits+0xb6>
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	6a3b      	ldr	r3, [r7, #32]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b39      	cmp	r3, #57	@ 0x39
 800e4b0:	d827      	bhi.n	800e502 <skipDigits+0xb6>
        {
            break;
        }

        if( ( outValue != NULL ) && ( value > -1 ) )
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01d      	beq.n	800e4f4 <skipDigits+0xa8>
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	db1a      	blt.n	800e4f4 <skipDigits+0xa8>
        {
            int8_t n = ( int8_t ) hexToInt( buf[ i ] );
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fccc 	bl	800de64 <hexToInt>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	75fb      	strb	r3, [r7, #23]

            if( value <= MAX_FACTOR )
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	4a1a      	ldr	r2, [pc, #104]	@ (800e53c <skipDigits+0xf0>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	da0a      	bge.n	800e4ee <skipDigits+0xa2>
            {
                value = ( value * 10 ) + n;
 800e4d8:	69fa      	ldr	r2, [r7, #28]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	4413      	add	r3, r2
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	61fb      	str	r3, [r7, #28]
 800e4ec:	e002      	b.n	800e4f4 <skipDigits+0xa8>
            }
            else
            {
                value = -1;
 800e4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f2:	61fb      	str	r3, [r7, #28]
    for( i = *start; i < max; i++ )
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	623b      	str	r3, [r7, #32]
 800e4fa:	6a3a      	ldr	r2, [r7, #32]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d3cb      	bcc.n	800e49a <skipDigits+0x4e>
            }
        }
    }

    if( i > saveStart )
 800e502:	6a3a      	ldr	r2, [r7, #32]
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	429a      	cmp	r2, r3
 800e508:	d90b      	bls.n	800e522 <skipDigits+0xd6>
    {
        ret = true;
 800e50a:	2301      	movs	r3, #1
 800e50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        *start = i;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	6a3a      	ldr	r2, [r7, #32]
 800e514:	601a      	str	r2, [r3, #0]

        if( outValue != NULL )
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <skipDigits+0xd6>
        {
            *outValue = value;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	69fa      	ldr	r2, [r7, #28]
 800e520:	601a      	str	r2, [r3, #0]
        }
    }

    return ret;
 800e522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e526:	4618      	mov	r0, r3
 800e528:	3728      	adds	r7, #40	@ 0x28
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	08015f3c 	.word	0x08015f3c
 800e534:	080166c8 	.word	0x080166c8
 800e538:	08015f80 	.word	0x08015f80
 800e53c:	0ccccccc 	.word	0x0ccccccc

0800e540 <skipDecimals>:
 * @param[in] max  The size of the buffer.
 */
static void skipDecimals( const char * buf,
                          size_t * start,
                          size_t max )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
    size_t i = 0U;
 800e54c:	2300      	movs	r3, #0
 800e54e:	617b      	str	r3, [r7, #20]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d005      	beq.n	800e562 <skipDecimals+0x22>
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <skipDecimals+0x22>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <skipDecimals+0x30>
 800e562:	4b14      	ldr	r3, [pc, #80]	@ (800e5b4 <skipDecimals+0x74>)
 800e564:	4a14      	ldr	r2, [pc, #80]	@ (800e5b8 <skipDecimals+0x78>)
 800e566:	f240 21eb 	movw	r1, #747	@ 0x2eb
 800e56a:	4814      	ldr	r0, [pc, #80]	@ (800e5bc <skipDecimals+0x7c>)
 800e56c:	f001 f924 	bl	800f7b8 <__assert_func>

    i = *start;
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	617b      	str	r3, [r7, #20]

    if( ( i < max ) && ( buf[ i ] == '.' ) )
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d915      	bls.n	800e5aa <skipDecimals+0x6a>
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	4413      	add	r3, r2
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	2b2e      	cmp	r3, #46	@ 0x2e
 800e588:	d10f      	bne.n	800e5aa <skipDecimals+0x6a>
    {
        i++;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	3301      	adds	r3, #1
 800e58e:	617b      	str	r3, [r7, #20]

        if( skipDigits( buf, &i, max, NULL ) == true )
 800e590:	f107 0114 	add.w	r1, r7, #20
 800e594:	2300      	movs	r3, #0
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f7ff ff57 	bl	800e44c <skipDigits>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <skipDecimals+0x6a>
        {
            *start = i;
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	601a      	str	r2, [r3, #0]
        }
    }
}
 800e5aa:	bf00      	nop
 800e5ac:	3718      	adds	r7, #24
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	08015f3c 	.word	0x08015f3c
 800e5b8:	080166d4 	.word	0x080166d4
 800e5bc:	08015f80 	.word	0x08015f80

0800e5c0 <skipExponent>:
 * @param[in] max  The size of the buffer.
 */
static void skipExponent( const char * buf,
                          size_t * start,
                          size_t max )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
    size_t i = 0U;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	617b      	str	r3, [r7, #20]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d005      	beq.n	800e5e2 <skipExponent+0x22>
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <skipExponent+0x22>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d106      	bne.n	800e5f0 <skipExponent+0x30>
 800e5e2:	4b20      	ldr	r3, [pc, #128]	@ (800e664 <skipExponent+0xa4>)
 800e5e4:	4a20      	ldr	r2, [pc, #128]	@ (800e668 <skipExponent+0xa8>)
 800e5e6:	f240 3107 	movw	r1, #775	@ 0x307
 800e5ea:	4820      	ldr	r0, [pc, #128]	@ (800e66c <skipExponent+0xac>)
 800e5ec:	f001 f8e4 	bl	800f7b8 <__assert_func>

    i = *start;
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	617b      	str	r3, [r7, #20]

    if( ( i < max ) && ( ( buf[ i ] == 'e' ) || ( buf[ i ] == 'E' ) ) )
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d92e      	bls.n	800e65c <skipExponent+0x9c>
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	4413      	add	r3, r2
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b65      	cmp	r3, #101	@ 0x65
 800e608:	d005      	beq.n	800e616 <skipExponent+0x56>
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	68fa      	ldr	r2, [r7, #12]
 800e60e:	4413      	add	r3, r2
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	2b45      	cmp	r3, #69	@ 0x45
 800e614:	d122      	bne.n	800e65c <skipExponent+0x9c>
    {
        i++;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	3301      	adds	r3, #1
 800e61a:	617b      	str	r3, [r7, #20]

        if( ( i < max ) && ( ( buf[ i ] == '-' ) || ( buf[ i ] == '+' ) ) )
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	429a      	cmp	r2, r3
 800e622:	d90e      	bls.n	800e642 <skipExponent+0x82>
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	4413      	add	r3, r2
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b2d      	cmp	r3, #45	@ 0x2d
 800e62e:	d005      	beq.n	800e63c <skipExponent+0x7c>
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	4413      	add	r3, r2
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b2b      	cmp	r3, #43	@ 0x2b
 800e63a:	d102      	bne.n	800e642 <skipExponent+0x82>
        {
            i++;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	3301      	adds	r3, #1
 800e640:	617b      	str	r3, [r7, #20]
        }

        if( skipDigits( buf, &i, max, NULL ) == true )
 800e642:	f107 0114 	add.w	r1, r7, #20
 800e646:	2300      	movs	r3, #0
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f7ff fefe 	bl	800e44c <skipDigits>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d002      	beq.n	800e65c <skipExponent+0x9c>
        {
            *start = i;
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	601a      	str	r2, [r3, #0]
        }
    }
}
 800e65c:	bf00      	nop
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	08015f3c 	.word	0x08015f3c
 800e668:	080166e4 	.word	0x080166e4
 800e66c:	08015f80 	.word	0x08015f80

0800e670 <skipNumber>:
 * false otherwise.
 */
static bool skipNumber( const char * buf,
                        size_t * start,
                        size_t max )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b086      	sub	sp, #24
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800e67c:	2300      	movs	r3, #0
 800e67e:	75fb      	strb	r3, [r7, #23]
    size_t i = 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	613b      	str	r3, [r7, #16]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d005      	beq.n	800e696 <skipNumber+0x26>
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d002      	beq.n	800e696 <skipNumber+0x26>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <skipNumber+0x34>
 800e696:	4b24      	ldr	r3, [pc, #144]	@ (800e728 <skipNumber+0xb8>)
 800e698:	4a24      	ldr	r2, [pc, #144]	@ (800e72c <skipNumber+0xbc>)
 800e69a:	f44f 714b 	mov.w	r1, #812	@ 0x32c
 800e69e:	4824      	ldr	r0, [pc, #144]	@ (800e730 <skipNumber+0xc0>)
 800e6a0:	f001 f88a 	bl	800f7b8 <__assert_func>

    i = *start;
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	613b      	str	r3, [r7, #16]

    if( ( i < max ) && ( buf[ i ] == '-' ) )
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d908      	bls.n	800e6c4 <skipNumber+0x54>
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800e6bc:	d102      	bne.n	800e6c4 <skipNumber+0x54>
    {
        i++;
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	613b      	str	r3, [r7, #16]
    }

    if( i < max )
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d914      	bls.n	800e6f6 <skipNumber+0x86>
         * a decimal or exponent.
         *
         * Should there be a digit after the zero, that digit
         * will not be skipped by this function, and later parsing
         * will judge this an illegal document. */
        if( buf[ i ] == '0' )
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	2b30      	cmp	r3, #48	@ 0x30
 800e6d6:	d105      	bne.n	800e6e4 <skipNumber+0x74>
        {
            ret = true;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	75fb      	strb	r3, [r7, #23]
            i++;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	613b      	str	r3, [r7, #16]
 800e6e2:	e008      	b.n	800e6f6 <skipNumber+0x86>
        }
        else
        {
            ret = skipDigits( buf, &i, max, NULL );
 800e6e4:	f107 0110 	add.w	r1, r7, #16
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7ff fead 	bl	800e44c <skipDigits>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ret == true )
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d010      	beq.n	800e71e <skipNumber+0xae>
    {
        skipDecimals( buf, &i, max );
 800e6fc:	f107 0310 	add.w	r3, r7, #16
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	4619      	mov	r1, r3
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7ff ff1b 	bl	800e540 <skipDecimals>
        skipExponent( buf, &i, max );
 800e70a:	f107 0310 	add.w	r3, r7, #16
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	4619      	mov	r1, r3
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7ff ff54 	bl	800e5c0 <skipExponent>
        *start = i;
 800e718:	693a      	ldr	r2, [r7, #16]
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	08015f3c 	.word	0x08015f3c
 800e72c:	080166f4 	.word	0x080166f4
 800e730:	08015f80 	.word	0x08015f80

0800e734 <skipAnyScalar>:
 * false otherwise.
 */
static bool skipAnyScalar( const char * buf,
                           size_t * start,
                           size_t max )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800e740:	2300      	movs	r3, #0
 800e742:	75fb      	strb	r3, [r7, #23]

    if( skipString( buf, start, max ) == true )
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	68b9      	ldr	r1, [r7, #8]
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f7ff fd37 	bl	800e1bc <skipString>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d002      	beq.n	800e75a <skipAnyScalar+0x26>
    {
        ret = true;
 800e754:	2301      	movs	r3, #1
 800e756:	75fb      	strb	r3, [r7, #23]
 800e758:	e017      	b.n	800e78a <skipAnyScalar+0x56>
    }
    else if( skipAnyLiteral( buf, start, max ) == true )
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	68b9      	ldr	r1, [r7, #8]
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f7ff fe34 	bl	800e3cc <skipAnyLiteral>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d002      	beq.n	800e770 <skipAnyScalar+0x3c>
    {
        ret = true;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
 800e76e:	e00c      	b.n	800e78a <skipAnyScalar+0x56>
    }
    else if( skipNumber( buf, start, max ) == true )
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	68b9      	ldr	r1, [r7, #8]
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f7ff ff7b 	bl	800e670 <skipNumber>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <skipAnyScalar+0x52>
    {
        ret = true;
 800e780:	2301      	movs	r3, #1
 800e782:	75fb      	strb	r3, [r7, #23]
 800e784:	e001      	b.n	800e78a <skipAnyScalar+0x56>
    }
    else
    {
        ret = false;
 800e786:	2300      	movs	r3, #0
 800e788:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800e78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <skipSpaceAndComma>:
 * false otherwise.
 */
static bool skipSpaceAndComma( const char * buf,
                               size_t * start,
                               size_t max )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	607a      	str	r2, [r7, #4]
    bool ret = false;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	75fb      	strb	r3, [r7, #23]
    size_t i = 0U;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	613b      	str	r3, [r7, #16]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d005      	beq.n	800e7ba <skipSpaceAndComma+0x26>
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <skipSpaceAndComma+0x26>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <skipSpaceAndComma+0x34>
 800e7ba:	4b1e      	ldr	r3, [pc, #120]	@ (800e834 <skipSpaceAndComma+0xa0>)
 800e7bc:	4a1e      	ldr	r2, [pc, #120]	@ (800e838 <skipSpaceAndComma+0xa4>)
 800e7be:	f44f 7163 	mov.w	r1, #908	@ 0x38c
 800e7c2:	481e      	ldr	r0, [pc, #120]	@ (800e83c <skipSpaceAndComma+0xa8>)
 800e7c4:	f000 fff8 	bl	800f7b8 <__assert_func>

    skipSpace( buf, start, max );
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	68b9      	ldr	r1, [r7, #8]
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f7ff f9b5 	bl	800db3c <skipSpace>
    i = *start;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	613b      	str	r3, [r7, #16]

    if( ( i < max ) && ( buf[ i ] == ',' ) )
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d924      	bls.n	800e82a <skipSpaceAndComma+0x96>
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	2b2c      	cmp	r3, #44	@ 0x2c
 800e7ea:	d11e      	bne.n	800e82a <skipSpaceAndComma+0x96>
    {
        i++;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	613b      	str	r3, [r7, #16]
        skipSpace( buf, &i, max );
 800e7f2:	f107 0310 	add.w	r3, r7, #16
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f7ff f99e 	bl	800db3c <skipSpace>

        if( ( i < max ) && !isCloseBracket_( buf[ i ] ) )
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	429a      	cmp	r2, r3
 800e806:	d910      	bls.n	800e82a <skipSpaceAndComma+0x96>
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	4413      	add	r3, r2
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b7d      	cmp	r3, #125	@ 0x7d
 800e812:	d00a      	beq.n	800e82a <skipSpaceAndComma+0x96>
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	4413      	add	r3, r2
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	2b5d      	cmp	r3, #93	@ 0x5d
 800e81e:	d004      	beq.n	800e82a <skipSpaceAndComma+0x96>
        {
            ret = true;
 800e820:	2301      	movs	r3, #1
 800e822:	75fb      	strb	r3, [r7, #23]
            *start = i;
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	601a      	str	r2, [r3, #0]
        }
    }

    return ret;
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	08015f3c 	.word	0x08015f3c
 800e838:	08016700 	.word	0x08016700
 800e83c:	08015f80 	.word	0x08015f80

0800e840 <skipArrayScalars>:
 * @note Stops advance if a value is an object or array.
 */
static void skipArrayScalars( const char * buf,
                              size_t * start,
                              size_t max )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
    size_t i = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	617b      	str	r3, [r7, #20]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d005      	beq.n	800e862 <skipArrayScalars+0x22>
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <skipArrayScalars+0x22>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <skipArrayScalars+0x30>
 800e862:	4b1a      	ldr	r3, [pc, #104]	@ (800e8cc <skipArrayScalars+0x8c>)
 800e864:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d0 <skipArrayScalars+0x90>)
 800e866:	f240 31af 	movw	r1, #943	@ 0x3af
 800e86a:	481a      	ldr	r0, [pc, #104]	@ (800e8d4 <skipArrayScalars+0x94>)
 800e86c:	f000 ffa4 	bl	800f7b8 <__assert_func>

    i = *start;
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	617b      	str	r3, [r7, #20]

    while( i < max )
 800e876:	e019      	b.n	800e8ac <skipArrayScalars+0x6c>
    {
        if( skipAnyScalar( buf, &i, max ) != true )
 800e878:	f107 0314 	add.w	r3, r7, #20
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	4619      	mov	r1, r3
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f7ff ff57 	bl	800e734 <skipAnyScalar>
 800e886:	4603      	mov	r3, r0
 800e888:	f083 0301 	eor.w	r3, r3, #1
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d111      	bne.n	800e8b6 <skipArrayScalars+0x76>
        {
            break;
        }

        if( skipSpaceAndComma( buf, &i, max ) != true )
 800e892:	f107 0314 	add.w	r3, r7, #20
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	4619      	mov	r1, r3
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f7ff ff7a 	bl	800e794 <skipSpaceAndComma>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	f083 0301 	eor.w	r3, r3, #1
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d106      	bne.n	800e8ba <skipArrayScalars+0x7a>
    while( i < max )
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d8e1      	bhi.n	800e878 <skipArrayScalars+0x38>
 800e8b4:	e002      	b.n	800e8bc <skipArrayScalars+0x7c>
            break;
 800e8b6:	bf00      	nop
 800e8b8:	e000      	b.n	800e8bc <skipArrayScalars+0x7c>
        {
            break;
 800e8ba:	bf00      	nop
        }
    }

    *start = i;
 800e8bc:	697a      	ldr	r2, [r7, #20]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	601a      	str	r2, [r3, #0]
}
 800e8c2:	bf00      	nop
 800e8c4:	3718      	adds	r7, #24
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	08015f3c 	.word	0x08015f3c
 800e8d0:	08016714 	.word	0x08016714
 800e8d4:	08015f80 	.word	0x08015f80

0800e8d8 <skipObjectScalars>:
 * @note Stops advance if a value is an object or array.
 */
static bool skipObjectScalars( const char * buf,
                               size_t * start,
                               size_t max )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b086      	sub	sp, #24
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
    size_t i = 0U;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	613b      	str	r3, [r7, #16]
    bool comma = false;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	75bb      	strb	r3, [r7, #22]
    bool ret = true;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	75fb      	strb	r3, [r7, #23]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d005      	beq.n	800e902 <skipObjectScalars+0x2a>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <skipObjectScalars+0x2a>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <skipObjectScalars+0x38>
 800e902:	4b3d      	ldr	r3, [pc, #244]	@ (800e9f8 <skipObjectScalars+0x120>)
 800e904:	4a3d      	ldr	r2, [pc, #244]	@ (800e9fc <skipObjectScalars+0x124>)
 800e906:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800e90a:	483d      	ldr	r0, [pc, #244]	@ (800ea00 <skipObjectScalars+0x128>)
 800e90c:	f000 ff54 	bl	800f7b8 <__assert_func>

    i = *start;
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	613b      	str	r3, [r7, #16]

    while( i < max )
 800e916:	e063      	b.n	800e9e0 <skipObjectScalars+0x108>
    {
        if( skipString( buf, &i, max ) != true )
 800e918:	f107 0310 	add.w	r3, r7, #16
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	4619      	mov	r1, r3
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f7ff fc4b 	bl	800e1bc <skipString>
 800e926:	4603      	mov	r3, r0
 800e928:	f083 0301 	eor.w	r3, r3, #1
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d002      	beq.n	800e938 <skipObjectScalars+0x60>
        {
            ret = false;
 800e932:	2300      	movs	r3, #0
 800e934:	75fb      	strb	r3, [r7, #23]
            break;
 800e936:	e059      	b.n	800e9ec <skipObjectScalars+0x114>
        }

        skipSpace( buf, &i, max );
 800e938:	f107 0310 	add.w	r3, r7, #16
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	4619      	mov	r1, r3
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7ff f8fb 	bl	800db3c <skipSpace>

        if( ( i < max ) && ( buf[ i ] != ':' ) )
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d908      	bls.n	800e960 <skipObjectScalars+0x88>
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	68fa      	ldr	r2, [r7, #12]
 800e952:	4413      	add	r3, r2
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	2b3a      	cmp	r3, #58	@ 0x3a
 800e958:	d002      	beq.n	800e960 <skipObjectScalars+0x88>
        {
            ret = false;
 800e95a:	2300      	movs	r3, #0
 800e95c:	75fb      	strb	r3, [r7, #23]
            break;
 800e95e:	e045      	b.n	800e9ec <skipObjectScalars+0x114>
        }

        i++;
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	3301      	adds	r3, #1
 800e964:	613b      	str	r3, [r7, #16]
        skipSpace( buf, &i, max );
 800e966:	f107 0310 	add.w	r3, r7, #16
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	4619      	mov	r1, r3
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7ff f8e4 	bl	800db3c <skipSpace>

        if( ( i < max ) && isOpenBracket_( buf[ i ] ) )
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d90f      	bls.n	800e99c <skipObjectScalars+0xc4>
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	4413      	add	r3, r2
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	2b7b      	cmp	r3, #123	@ 0x7b
 800e986:	d005      	beq.n	800e994 <skipObjectScalars+0xbc>
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	4413      	add	r3, r2
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	2b5b      	cmp	r3, #91	@ 0x5b
 800e992:	d103      	bne.n	800e99c <skipObjectScalars+0xc4>
        {
            *start = i;
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	601a      	str	r2, [r3, #0]
            break;
 800e99a:	e027      	b.n	800e9ec <skipObjectScalars+0x114>
        }

        if( skipAnyScalar( buf, &i, max ) != true )
 800e99c:	f107 0310 	add.w	r3, r7, #16
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7ff fec5 	bl	800e734 <skipAnyScalar>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	f083 0301 	eor.w	r3, r3, #1
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d002      	beq.n	800e9bc <skipObjectScalars+0xe4>
        {
            ret = false;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	75fb      	strb	r3, [r7, #23]
            break;
 800e9ba:	e017      	b.n	800e9ec <skipObjectScalars+0x114>
        }

        comma = skipSpaceAndComma( buf, &i, max );
 800e9bc:	f107 0310 	add.w	r3, r7, #16
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f7ff fee5 	bl	800e794 <skipSpaceAndComma>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	75bb      	strb	r3, [r7, #22]
        *start = i;
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	601a      	str	r2, [r3, #0]

        if( comma != true )
 800e9d4:	7dbb      	ldrb	r3, [r7, #22]
 800e9d6:	f083 0301 	eor.w	r3, r3, #1
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d104      	bne.n	800e9ea <skipObjectScalars+0x112>
    while( i < max )
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d897      	bhi.n	800e918 <skipObjectScalars+0x40>
 800e9e8:	e000      	b.n	800e9ec <skipObjectScalars+0x114>
        {
            break;
 800e9ea:	bf00      	nop
        }
    }

    return ret;
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	08015f3c 	.word	0x08015f3c
 800e9fc:	08016728 	.word	0x08016728
 800ea00:	08015f80 	.word	0x08015f80

0800ea04 <skipScalars>:
 */
static bool skipScalars( const char * buf,
                         size_t * start,
                         size_t max,
                         char mode )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b088      	sub	sp, #32
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
 800ea10:	70fb      	strb	r3, [r7, #3]
    size_t i = 0U;
 800ea12:	2300      	movs	r3, #0
 800ea14:	61bb      	str	r3, [r7, #24]
    bool modeIsOpenBracket = ( bool ) isOpenBracket_( mode );
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	2b7b      	cmp	r3, #123	@ 0x7b
 800ea1a:	d002      	beq.n	800ea22 <skipScalars+0x1e>
 800ea1c:	78fb      	ldrb	r3, [r7, #3]
 800ea1e:	2b5b      	cmp	r3, #91	@ 0x5b
 800ea20:	d101      	bne.n	800ea26 <skipScalars+0x22>
 800ea22:	2301      	movs	r3, #1
 800ea24:	e000      	b.n	800ea28 <skipScalars+0x24>
 800ea26:	2300      	movs	r3, #0
 800ea28:	75fb      	strb	r3, [r7, #23]
 800ea2a:	7dfb      	ldrb	r3, [r7, #23]
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	75fb      	strb	r3, [r7, #23]
    bool ret = true;
 800ea32:	2301      	movs	r3, #1
 800ea34:	77fb      	strb	r3, [r7, #31]

    /* assert function may be implemented in macro using a # or ## operator.
     * Using a local variable here to prevent macro replacement is subjected
     * to macro itself. */
    coreJSON_ASSERT( modeIsOpenBracket != false );
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <skipScalars+0x46>
 800ea3c:	4b19      	ldr	r3, [pc, #100]	@ (800eaa4 <skipScalars+0xa0>)
 800ea3e:	4a1a      	ldr	r2, [pc, #104]	@ (800eaa8 <skipScalars+0xa4>)
 800ea40:	f240 4123 	movw	r1, #1059	@ 0x423
 800ea44:	4819      	ldr	r0, [pc, #100]	@ (800eaac <skipScalars+0xa8>)
 800ea46:	f000 feb7 	bl	800f7b8 <__assert_func>

    /* Adding this line to avoid unused variable warning in release mode. */
    ( void ) modeIsOpenBracket;

    skipSpace( buf, start, max );
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	68b9      	ldr	r1, [r7, #8]
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f7ff f874 	bl	800db3c <skipSpace>

    i = *start;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	61bb      	str	r3, [r7, #24]

    if( i < max )
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d21b      	bcs.n	800ea9a <skipScalars+0x96>
    {
        if( mode == '[' )
 800ea62:	78fb      	ldrb	r3, [r7, #3]
 800ea64:	2b5b      	cmp	r3, #91	@ 0x5b
 800ea66:	d10b      	bne.n	800ea80 <skipScalars+0x7c>
        {
            if( !isSquareClose_( buf[ i ] ) )
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b5d      	cmp	r3, #93	@ 0x5d
 800ea72:	d012      	beq.n	800ea9a <skipScalars+0x96>
            {
                skipArrayScalars( buf, start, max );
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	68b9      	ldr	r1, [r7, #8]
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f7ff fee1 	bl	800e840 <skipArrayScalars>
 800ea7e:	e00c      	b.n	800ea9a <skipScalars+0x96>
            }
        }
        else
        {
            if( !isCurlyClose_( buf[ i ] ) )
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	4413      	add	r3, r2
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b7d      	cmp	r3, #125	@ 0x7d
 800ea8a:	d006      	beq.n	800ea9a <skipScalars+0x96>
            {
                ret = skipObjectScalars( buf, start, max );
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	68b9      	ldr	r1, [r7, #8]
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f7ff ff21 	bl	800e8d8 <skipObjectScalars>
 800ea96:	4603      	mov	r3, r0
 800ea98:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    return ret;
 800ea9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3720      	adds	r7, #32
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	0801609c 	.word	0x0801609c
 800eaa8:	0801673c 	.word	0x0801673c
 800eaac:	08015f80 	.word	0x08015f80

0800eab0 <skipCollection>:
    #define JSON_MAX_DEPTH    32
#endif
static JSONStatus_t skipCollection( const char * buf,
                                    size_t * start,
                                    size_t max )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b090      	sub	sp, #64	@ 0x40
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
    JSONStatus_t ret = JSONPartial;
 800eabc:	2300      	movs	r3, #0
 800eabe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    char c, stack[ JSON_MAX_DEPTH ];
    int16_t depth = -1;
 800eac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eac6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    size_t i = 0U;
 800eac8:	2300      	movs	r3, #0
 800eaca:	617b      	str	r3, [r7, #20]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d005      	beq.n	800eade <skipCollection+0x2e>
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <skipCollection+0x2e>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d106      	bne.n	800eaec <skipCollection+0x3c>
 800eade:	4b74      	ldr	r3, [pc, #464]	@ (800ecb0 <skipCollection+0x200>)
 800eae0:	4a74      	ldr	r2, [pc, #464]	@ (800ecb4 <skipCollection+0x204>)
 800eae2:	f240 415c 	movw	r1, #1116	@ 0x45c
 800eae6:	4874      	ldr	r0, [pc, #464]	@ (800ecb8 <skipCollection+0x208>)
 800eae8:	f000 fe66 	bl	800f7b8 <__assert_func>

    i = *start;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	617b      	str	r3, [r7, #20]

    while( i < max )
 800eaf2:	e0c8      	b.n	800ec86 <skipCollection+0x1d6>
    {
        c = buf[ i ];
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	4413      	add	r3, r2
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        i++;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	3301      	adds	r3, #1
 800eb04:	617b      	str	r3, [r7, #20]

        switch( c )
 800eb06:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800eb0a:	2b7d      	cmp	r3, #125	@ 0x7d
 800eb0c:	d038      	beq.n	800eb80 <skipCollection+0xd0>
 800eb0e:	2b7d      	cmp	r3, #125	@ 0x7d
 800eb10:	f300 80ae 	bgt.w	800ec70 <skipCollection+0x1c0>
 800eb14:	2b7b      	cmp	r3, #123	@ 0x7b
 800eb16:	d007      	beq.n	800eb28 <skipCollection+0x78>
 800eb18:	2b7b      	cmp	r3, #123	@ 0x7b
 800eb1a:	f300 80a9 	bgt.w	800ec70 <skipCollection+0x1c0>
 800eb1e:	2b5b      	cmp	r3, #91	@ 0x5b
 800eb20:	d002      	beq.n	800eb28 <skipCollection+0x78>
 800eb22:	2b5d      	cmp	r3, #93	@ 0x5d
 800eb24:	d02c      	beq.n	800eb80 <skipCollection+0xd0>
 800eb26:	e0a3      	b.n	800ec70 <skipCollection+0x1c0>
        {
            case '{':
            case '[':
                depth++;
 800eb28:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	3301      	adds	r3, #1
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	87bb      	strh	r3, [r7, #60]	@ 0x3c

                if( depth >= JSON_MAX_DEPTH )
 800eb34:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb38:	2b1f      	cmp	r3, #31
 800eb3a:	dd03      	ble.n	800eb44 <skipCollection+0x94>
                {
                    ret = JSONMaxDepthExceeded;
 800eb3c:	2303      	movs	r3, #3
 800eb3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                    break;
 800eb42:	e09c      	b.n	800ec7e <skipCollection+0x1ce>
                }

                stack[ depth ] = c;
 800eb44:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb48:	3340      	adds	r3, #64	@ 0x40
 800eb4a:	443b      	add	r3, r7
 800eb4c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800eb50:	f803 2c28 	strb.w	r2, [r3, #-40]

                if( skipScalars( buf, &i, max, stack[ depth ] ) != true )
 800eb54:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb58:	3340      	adds	r3, #64	@ 0x40
 800eb5a:	443b      	add	r3, r7
 800eb5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800eb60:	f107 0114 	add.w	r1, r7, #20
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f7ff ff4c 	bl	800ea04 <skipScalars>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	f083 0301 	eor.w	r3, r3, #1
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d07f      	beq.n	800ec78 <skipCollection+0x1c8>
                {
                    ret = JSONIllegalDocument;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                }

                break;
 800eb7e:	e07b      	b.n	800ec78 <skipCollection+0x1c8>

            case '}':
            case ']':

                if( ( depth > 0 ) && ( depth < JSON_MAX_DEPTH ) &&
 800eb80:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	dd51      	ble.n	800ec2c <skipCollection+0x17c>
 800eb88:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb8c:	2b1f      	cmp	r3, #31
 800eb8e:	dc4d      	bgt.n	800ec2c <skipCollection+0x17c>
                    isMatchingBracket_( stack[ depth ], c ) )
 800eb90:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800eb94:	3340      	adds	r3, #64	@ 0x40
 800eb96:	443b      	add	r3, r7
 800eb98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
                if( ( depth > 0 ) && ( depth < JSON_MAX_DEPTH ) &&
 800eb9c:	2b7b      	cmp	r3, #123	@ 0x7b
 800eb9e:	d103      	bne.n	800eba8 <skipCollection+0xf8>
                    isMatchingBracket_( stack[ depth ], c ) )
 800eba0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800eba4:	2b7d      	cmp	r3, #125	@ 0x7d
 800eba6:	d00b      	beq.n	800ebc0 <skipCollection+0x110>
 800eba8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ebac:	3340      	adds	r3, #64	@ 0x40
 800ebae:	443b      	add	r3, r7
 800ebb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ebb4:	2b5b      	cmp	r3, #91	@ 0x5b
 800ebb6:	d139      	bne.n	800ec2c <skipCollection+0x17c>
 800ebb8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ebbc:	2b5d      	cmp	r3, #93	@ 0x5d
 800ebbe:	d135      	bne.n	800ec2c <skipCollection+0x17c>
                {
                    depth--;
 800ebc0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	87bb      	strh	r3, [r7, #60]	@ 0x3c

                    if( ( skipSpaceAndComma( buf, &i, max ) == true ) &&
 800ebcc:	f107 0314 	add.w	r3, r7, #20
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7ff fddd 	bl	800e794 <skipSpaceAndComma>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d04d      	beq.n	800ec7c <skipCollection+0x1cc>
                        isOpenBracket_( stack[ depth ] ) )
 800ebe0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ebe4:	3340      	adds	r3, #64	@ 0x40
 800ebe6:	443b      	add	r3, r7
 800ebe8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
                    if( ( skipSpaceAndComma( buf, &i, max ) == true ) &&
 800ebec:	2b7b      	cmp	r3, #123	@ 0x7b
 800ebee:	d007      	beq.n	800ec00 <skipCollection+0x150>
                        isOpenBracket_( stack[ depth ] ) )
 800ebf0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ebf4:	3340      	adds	r3, #64	@ 0x40
 800ebf6:	443b      	add	r3, r7
 800ebf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ebfc:	2b5b      	cmp	r3, #91	@ 0x5b
 800ebfe:	d13d      	bne.n	800ec7c <skipCollection+0x1cc>
                    {
                        if( skipScalars( buf, &i, max, stack[ depth ] ) != true )
 800ec00:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ec04:	3340      	adds	r3, #64	@ 0x40
 800ec06:	443b      	add	r3, r7
 800ec08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ec0c:	f107 0114 	add.w	r1, r7, #20
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	f7ff fef6 	bl	800ea04 <skipScalars>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	f083 0301 	eor.w	r3, r3, #1
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d02b      	beq.n	800ec7c <skipCollection+0x1cc>
                        {
                            ret = JSONIllegalDocument;
 800ec24:	2302      	movs	r3, #2
 800ec26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        }
                    }

                    break;
 800ec2a:	e027      	b.n	800ec7c <skipCollection+0x1cc>
                }

                ret = ( ( depth == 0 ) && isMatchingBracket_( stack[ depth ], c ) ) ?
                      JSONSuccess : JSONIllegalDocument;
 800ec2c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d119      	bne.n	800ec68 <skipCollection+0x1b8>
                ret = ( ( depth == 0 ) && isMatchingBracket_( stack[ depth ], c ) ) ?
 800ec34:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ec38:	3340      	adds	r3, #64	@ 0x40
 800ec3a:	443b      	add	r3, r7
 800ec3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ec40:	2b7b      	cmp	r3, #123	@ 0x7b
 800ec42:	d103      	bne.n	800ec4c <skipCollection+0x19c>
 800ec44:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ec48:	2b7d      	cmp	r3, #125	@ 0x7d
 800ec4a:	d00b      	beq.n	800ec64 <skipCollection+0x1b4>
 800ec4c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800ec50:	3340      	adds	r3, #64	@ 0x40
 800ec52:	443b      	add	r3, r7
 800ec54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ec58:	2b5b      	cmp	r3, #91	@ 0x5b
 800ec5a:	d105      	bne.n	800ec68 <skipCollection+0x1b8>
 800ec5c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ec60:	2b5d      	cmp	r3, #93	@ 0x5d
 800ec62:	d101      	bne.n	800ec68 <skipCollection+0x1b8>
                      JSONSuccess : JSONIllegalDocument;
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <skipCollection+0x1ba>
 800ec68:	2302      	movs	r3, #2
                ret = ( ( depth == 0 ) && isMatchingBracket_( stack[ depth ], c ) ) ?
 800ec6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                break;
 800ec6e:	e006      	b.n	800ec7e <skipCollection+0x1ce>

            default:
                ret = JSONIllegalDocument;
 800ec70:	2302      	movs	r3, #2
 800ec72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                break;
 800ec76:	e002      	b.n	800ec7e <skipCollection+0x1ce>
                break;
 800ec78:	bf00      	nop
 800ec7a:	e000      	b.n	800ec7e <skipCollection+0x1ce>
                    break;
 800ec7c:	bf00      	nop
        }

        if( ret != JSONPartial )
 800ec7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d105      	bne.n	800ec92 <skipCollection+0x1e2>
    while( i < max )
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	f63f af32 	bhi.w	800eaf4 <skipCollection+0x44>
 800ec90:	e000      	b.n	800ec94 <skipCollection+0x1e4>
        {
            break;
 800ec92:	bf00      	nop
        }
    }

    if( ret == JSONSuccess )
 800ec94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d102      	bne.n	800eca2 <skipCollection+0x1f2>
    {
        *start = i;
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800eca2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3740      	adds	r7, #64	@ 0x40
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08015f3c 	.word	0x08015f3c
 800ecb4:	08016748 	.word	0x08016748
 800ecb8:	08015f80 	.word	0x08015f80

0800ecbc <JSON_Validate>:
 * Verify that the entire buffer contains exactly one scalar
 * or collection within optional whitespace.
 */
JSONStatus_t JSON_Validate( const char * buf,
                            size_t max )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
    JSONStatus_t ret;
    size_t i = 0U;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	60bb      	str	r3, [r7, #8]

    if( buf == NULL )
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d102      	bne.n	800ecd6 <JSON_Validate+0x1a>
    {
        ret = JSONNullParameter;
 800ecd0:	2305      	movs	r3, #5
 800ecd2:	73fb      	strb	r3, [r7, #15]
 800ecd4:	e022      	b.n	800ed1c <JSON_Validate+0x60>
    }
    else if( max == 0U )
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d102      	bne.n	800ece2 <JSON_Validate+0x26>
    {
        ret = JSONBadParameter;
 800ecdc:	2306      	movs	r3, #6
 800ecde:	73fb      	strb	r3, [r7, #15]
 800ece0:	e01c      	b.n	800ed1c <JSON_Validate+0x60>
    }
    else
    {
        skipSpace( buf, &i, max );
 800ece2:	f107 0308 	add.w	r3, r7, #8
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7fe ff26 	bl	800db3c <skipSpace>

        /** @cond DO_NOT_DOCUMENT */
        #ifndef JSON_VALIDATE_COLLECTIONS_ONLY
            if( skipAnyScalar( buf, &i, max ) == true )
 800ecf0:	f107 0308 	add.w	r3, r7, #8
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff fd1b 	bl	800e734 <skipAnyScalar>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d002      	beq.n	800ed0a <JSON_Validate+0x4e>
            {
                ret = JSONSuccess;
 800ed04:	2301      	movs	r3, #1
 800ed06:	73fb      	strb	r3, [r7, #15]
 800ed08:	e008      	b.n	800ed1c <JSON_Validate+0x60>
            }
            else
        #endif
        /** @endcond */
        {
            ret = skipCollection( buf, &i, max );
 800ed0a:	f107 0308 	add.w	r3, r7, #8
 800ed0e:	683a      	ldr	r2, [r7, #0]
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff fecc 	bl	800eab0 <skipCollection>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( ( ret == JSONSuccess ) && ( i < max ) )
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d110      	bne.n	800ed44 <JSON_Validate+0x88>
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d90c      	bls.n	800ed44 <JSON_Validate+0x88>
    {
        skipSpace( buf, &i, max );
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7fe ff02 	bl	800db3c <skipSpace>

        if( i != max )
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d001      	beq.n	800ed44 <JSON_Validate+0x88>
        {
            ret = JSONIllegalDocument;
 800ed40:	2302      	movs	r3, #2
 800ed42:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <nextValue>:
static bool nextValue( const char * buf,
                       size_t * start,
                       size_t max,
                       size_t * value,
                       size_t * valueLength )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	603b      	str	r3, [r7, #0]
    bool ret = true;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	77fb      	strb	r3, [r7, #31]
    size_t i = 0U, valueStart = 0U;
 800ed62:	2300      	movs	r3, #0
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	2300      	movs	r3, #0
 800ed68:	61bb      	str	r3, [r7, #24]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d005      	beq.n	800ed7c <nextValue+0x2c>
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <nextValue+0x2c>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d106      	bne.n	800ed8a <nextValue+0x3a>
 800ed7c:	4b25      	ldr	r3, [pc, #148]	@ (800ee14 <nextValue+0xc4>)
 800ed7e:	4a26      	ldr	r2, [pc, #152]	@ (800ee18 <nextValue+0xc8>)
 800ed80:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 800ed84:	4825      	ldr	r0, [pc, #148]	@ (800ee1c <nextValue+0xcc>)
 800ed86:	f000 fd17 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( value != NULL ) && ( valueLength != NULL ) );
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <nextValue+0x46>
 800ed90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d106      	bne.n	800eda4 <nextValue+0x54>
 800ed96:	4b22      	ldr	r3, [pc, #136]	@ (800ee20 <nextValue+0xd0>)
 800ed98:	4a1f      	ldr	r2, [pc, #124]	@ (800ee18 <nextValue+0xc8>)
 800ed9a:	f240 41f6 	movw	r1, #1270	@ 0x4f6
 800ed9e:	481f      	ldr	r0, [pc, #124]	@ (800ee1c <nextValue+0xcc>)
 800eda0:	f000 fd0a 	bl	800f7b8 <__assert_func>

    i = *start;
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	617b      	str	r3, [r7, #20]
    valueStart = i;
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	61bb      	str	r3, [r7, #24]

    if( skipAnyScalar( buf, &i, max ) == true )
 800edae:	f107 0314 	add.w	r3, r7, #20
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	4619      	mov	r1, r3
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f7ff fcbc 	bl	800e734 <skipAnyScalar>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d008      	beq.n	800edd4 <nextValue+0x84>
    {
        *value = valueStart;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	69ba      	ldr	r2, [r7, #24]
 800edc6:	601a      	str	r2, [r3, #0]
        *valueLength = i - valueStart;
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	1ad2      	subs	r2, r2, r3
 800edce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	e014      	b.n	800edfe <nextValue+0xae>
    }
    else if( skipCollection( buf, &i, max ) == JSONSuccess )
 800edd4:	f107 0314 	add.w	r3, r7, #20
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	4619      	mov	r1, r3
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f7ff fe67 	bl	800eab0 <skipCollection>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d108      	bne.n	800edfa <nextValue+0xaa>
    {
        *value = valueStart;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	601a      	str	r2, [r3, #0]
        *valueLength = i - valueStart;
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	1ad2      	subs	r2, r2, r3
 800edf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf6:	601a      	str	r2, [r3, #0]
 800edf8:	e001      	b.n	800edfe <nextValue+0xae>
    }
    else
    {
        ret = false;
 800edfa:	2300      	movs	r3, #0
 800edfc:	77fb      	strb	r3, [r7, #31]
    }

    if( ret == true )
 800edfe:	7ffb      	ldrb	r3, [r7, #31]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <nextValue+0xba>
    {
        *start = i;
 800ee04:	697a      	ldr	r2, [r7, #20]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800ee0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3720      	adds	r7, #32
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	08015f3c 	.word	0x08015f3c
 800ee18:	08016758 	.word	0x08016758
 800ee1c:	08015f80 	.word	0x08015f80
 800ee20:	080160b4 	.word	0x080160b4

0800ee24 <nextKeyValuePair>:
                              size_t max,
                              size_t * key,
                              size_t * keyLength,
                              size_t * value,
                              size_t * valueLength )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08a      	sub	sp, #40	@ 0x28
 800ee28:	af02      	add	r7, sp, #8
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	603b      	str	r3, [r7, #0]
    bool ret = true;
 800ee32:	2301      	movs	r3, #1
 800ee34:	77fb      	strb	r3, [r7, #31]
    size_t i = 0U, keyStart = 0U;
 800ee36:	2300      	movs	r3, #0
 800ee38:	617b      	str	r3, [r7, #20]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	61bb      	str	r3, [r7, #24]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( max > 0U ) );
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <nextKeyValuePair+0x2c>
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d002      	beq.n	800ee50 <nextKeyValuePair+0x2c>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d106      	bne.n	800ee5e <nextKeyValuePair+0x3a>
 800ee50:	4b3b      	ldr	r3, [pc, #236]	@ (800ef40 <nextKeyValuePair+0x11c>)
 800ee52:	4a3c      	ldr	r2, [pc, #240]	@ (800ef44 <nextKeyValuePair+0x120>)
 800ee54:	f240 512e 	movw	r1, #1326	@ 0x52e
 800ee58:	483b      	ldr	r0, [pc, #236]	@ (800ef48 <nextKeyValuePair+0x124>)
 800ee5a:	f000 fcad 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( key != NULL ) && ( keyLength != NULL ) );
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <nextKeyValuePair+0x46>
 800ee64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d106      	bne.n	800ee78 <nextKeyValuePair+0x54>
 800ee6a:	4b38      	ldr	r3, [pc, #224]	@ (800ef4c <nextKeyValuePair+0x128>)
 800ee6c:	4a35      	ldr	r2, [pc, #212]	@ (800ef44 <nextKeyValuePair+0x120>)
 800ee6e:	f240 512f 	movw	r1, #1327	@ 0x52f
 800ee72:	4835      	ldr	r0, [pc, #212]	@ (800ef48 <nextKeyValuePair+0x124>)
 800ee74:	f000 fca0 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( value != NULL ) && ( valueLength != NULL ) );
 800ee78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <nextKeyValuePair+0x60>
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d106      	bne.n	800ee92 <nextKeyValuePair+0x6e>
 800ee84:	4b32      	ldr	r3, [pc, #200]	@ (800ef50 <nextKeyValuePair+0x12c>)
 800ee86:	4a2f      	ldr	r2, [pc, #188]	@ (800ef44 <nextKeyValuePair+0x120>)
 800ee88:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 800ee8c:	482e      	ldr	r0, [pc, #184]	@ (800ef48 <nextKeyValuePair+0x124>)
 800ee8e:	f000 fc93 	bl	800f7b8 <__assert_func>

    i = *start;
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	617b      	str	r3, [r7, #20]
    keyStart = i;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	61bb      	str	r3, [r7, #24]

    if( skipString( buf, &i, max ) == true )
 800ee9c:	f107 0314 	add.w	r3, r7, #20
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	4619      	mov	r1, r3
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7ff f989 	bl	800e1bc <skipString>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00a      	beq.n	800eec6 <nextKeyValuePair+0xa2>
    {
        *key = keyStart + 1U;
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	1c5a      	adds	r2, r3, #1
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	601a      	str	r2, [r3, #0]
        *keyLength = i - keyStart - 2U;
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	1e9a      	subs	r2, r3, #2
 800eec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	e001      	b.n	800eeca <nextKeyValuePair+0xa6>
    }
    else
    {
        ret = false;
 800eec6:	2300      	movs	r3, #0
 800eec8:	77fb      	strb	r3, [r7, #31]
    }

    if( ret == true )
 800eeca:	7ffb      	ldrb	r3, [r7, #31]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01d      	beq.n	800ef0c <nextKeyValuePair+0xe8>
    {
        skipSpace( buf, &i, max );
 800eed0:	f107 0314 	add.w	r3, r7, #20
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	4619      	mov	r1, r3
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7fe fe2f 	bl	800db3c <skipSpace>

        if( ( i < max ) && ( buf[ i ] == ':' ) )
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d910      	bls.n	800ef08 <nextKeyValuePair+0xe4>
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	2b3a      	cmp	r3, #58	@ 0x3a
 800eef0:	d10a      	bne.n	800ef08 <nextKeyValuePair+0xe4>
        {
            i++;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	3301      	adds	r3, #1
 800eef6:	617b      	str	r3, [r7, #20]
            skipSpace( buf, &i, max );
 800eef8:	f107 0314 	add.w	r3, r7, #20
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	4619      	mov	r1, r3
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7fe fe1b 	bl	800db3c <skipSpace>
 800ef06:	e001      	b.n	800ef0c <nextKeyValuePair+0xe8>
        }
        else
        {
            ret = false;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	77fb      	strb	r3, [r7, #31]
        }
    }

    if( ret == true )
 800ef0c:	7ffb      	ldrb	r3, [r7, #31]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00a      	beq.n	800ef28 <nextKeyValuePair+0x104>
    {
        ret = nextValue( buf, &i, max, value, valueLength );
 800ef12:	f107 0114 	add.w	r1, r7, #20
 800ef16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f7ff ff16 	bl	800ed50 <nextValue>
 800ef24:	4603      	mov	r3, r0
 800ef26:	77fb      	strb	r3, [r7, #31]
    }

    if( ret == true )
 800ef28:	7ffb      	ldrb	r3, [r7, #31]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d002      	beq.n	800ef34 <nextKeyValuePair+0x110>
    {
        *start = i;
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800ef34:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3720      	adds	r7, #32
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	08015f3c 	.word	0x08015f3c
 800ef44:	08016764 	.word	0x08016764
 800ef48:	08015f80 	.word	0x08015f80
 800ef4c:	080160f0 	.word	0x080160f0
 800ef50:	080160b4 	.word	0x080160b4

0800ef54 <objectSearch>:
                          size_t max,
                          const char * query,
                          size_t queryLength,
                          size_t * outValue,
                          size_t * outValueLength )
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b08e      	sub	sp, #56	@ 0x38
 800ef58:	af04      	add	r7, sp, #16
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	603b      	str	r3, [r7, #0]
    bool ret = false;
 800ef62:	2300      	movs	r3, #0
 800ef64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    size_t i = 0U, key = 0U, keyLength = 0U, value = 0U, valueLength = 0U;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	623b      	str	r3, [r7, #32]
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	61fb      	str	r3, [r7, #28]
 800ef70:	2300      	movs	r3, #0
 800ef72:	61bb      	str	r3, [r7, #24]
 800ef74:	2300      	movs	r3, #0
 800ef76:	617b      	str	r3, [r7, #20]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	613b      	str	r3, [r7, #16]

    coreJSON_ASSERT( ( buf != NULL ) && ( query != NULL ) );
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <objectSearch+0x34>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d106      	bne.n	800ef96 <objectSearch+0x42>
 800ef88:	4b3f      	ldr	r3, [pc, #252]	@ (800f088 <objectSearch+0x134>)
 800ef8a:	4a40      	ldr	r2, [pc, #256]	@ (800f08c <objectSearch+0x138>)
 800ef8c:	f240 5177 	movw	r1, #1399	@ 0x577
 800ef90:	483f      	ldr	r0, [pc, #252]	@ (800f090 <objectSearch+0x13c>)
 800ef92:	f000 fc11 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( outValue != NULL ) && ( outValueLength != NULL ) );
 800ef96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <objectSearch+0x4e>
 800ef9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <objectSearch+0x5c>
 800efa2:	4b3c      	ldr	r3, [pc, #240]	@ (800f094 <objectSearch+0x140>)
 800efa4:	4a39      	ldr	r2, [pc, #228]	@ (800f08c <objectSearch+0x138>)
 800efa6:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 800efaa:	4839      	ldr	r0, [pc, #228]	@ (800f090 <objectSearch+0x13c>)
 800efac:	f000 fc04 	bl	800f7b8 <__assert_func>

    skipSpace( buf, &i, max );
 800efb0:	f107 0320 	add.w	r3, r7, #32
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	4619      	mov	r1, r3
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f7fe fdbf 	bl	800db3c <skipSpace>

    if( ( i < max ) && ( buf[ i ] == '{' ) )
 800efbe:	6a3b      	ldr	r3, [r7, #32]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d950      	bls.n	800f068 <objectSearch+0x114>
 800efc6:	6a3b      	ldr	r3, [r7, #32]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	4413      	add	r3, r2
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b7b      	cmp	r3, #123	@ 0x7b
 800efd0:	d14a      	bne.n	800f068 <objectSearch+0x114>
    {
        i++;
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	3301      	adds	r3, #1
 800efd6:	623b      	str	r3, [r7, #32]
        skipSpace( buf, &i, max );
 800efd8:	f107 0320 	add.w	r3, r7, #32
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	4619      	mov	r1, r3
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f7fe fdab 	bl	800db3c <skipSpace>

        while( i < max )
 800efe6:	e037      	b.n	800f058 <objectSearch+0x104>
        {
            if( nextKeyValuePair( buf, &i, max, &key, &keyLength,
 800efe8:	f107 021c 	add.w	r2, r7, #28
 800efec:	f107 0120 	add.w	r1, r7, #32
 800eff0:	f107 0310 	add.w	r3, r7, #16
 800eff4:	9302      	str	r3, [sp, #8]
 800eff6:	f107 0314 	add.w	r3, r7, #20
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	f107 0318 	add.w	r3, r7, #24
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	4613      	mov	r3, r2
 800f004:	68ba      	ldr	r2, [r7, #8]
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7ff ff0c 	bl	800ee24 <nextKeyValuePair>
 800f00c:	4603      	mov	r3, r0
                                  &value, &valueLength ) != true )
 800f00e:	f083 0301 	eor.w	r3, r3, #1
 800f012:	b2db      	uxtb	r3, r3
            if( nextKeyValuePair( buf, &i, max, &key, &keyLength,
 800f014:	2b00      	cmp	r3, #0
 800f016:	d124      	bne.n	800f062 <objectSearch+0x10e>
            {
                break;
            }

            if( ( queryLength == keyLength ) &&
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d10e      	bne.n	800f03e <objectSearch+0xea>
                ( strnEq( query, &buf[ key ], keyLength ) == true ) )
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	4413      	add	r3, r2
 800f026:	69ba      	ldr	r2, [r7, #24]
 800f028:	4619      	mov	r1, r3
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7ff f942 	bl	800e2b4 <strnEq>
 800f030:	4603      	mov	r3, r0
            if( ( queryLength == keyLength ) &&
 800f032:	2b00      	cmp	r3, #0
 800f034:	d003      	beq.n	800f03e <objectSearch+0xea>
            {
                ret = true;
 800f036:	2301      	movs	r3, #1
 800f038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 800f03c:	e014      	b.n	800f068 <objectSearch+0x114>
            }

            if( skipSpaceAndComma( buf, &i, max ) != true )
 800f03e:	f107 0320 	add.w	r3, r7, #32
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	4619      	mov	r1, r3
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f7ff fba4 	bl	800e794 <skipSpaceAndComma>
 800f04c:	4603      	mov	r3, r0
 800f04e:	f083 0301 	eor.w	r3, r3, #1
 800f052:	b2db      	uxtb	r3, r3
 800f054:	2b00      	cmp	r3, #0
 800f056:	d106      	bne.n	800f066 <objectSearch+0x112>
        while( i < max )
 800f058:	6a3b      	ldr	r3, [r7, #32]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d8c3      	bhi.n	800efe8 <objectSearch+0x94>
 800f060:	e002      	b.n	800f068 <objectSearch+0x114>
                break;
 800f062:	bf00      	nop
 800f064:	e000      	b.n	800f068 <objectSearch+0x114>
            {
                break;
 800f066:	bf00      	nop
            }
        }
    }

    if( ret == true )
 800f068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d005      	beq.n	800f07c <objectSearch+0x128>
    {
        *outValue = value;
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	601a      	str	r2, [r3, #0]
        *outValueLength = valueLength;
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f07a:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800f07c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f080:	4618      	mov	r0, r3
 800f082:	3728      	adds	r7, #40	@ 0x28
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	08016128 	.word	0x08016128
 800f08c:	08016778 	.word	0x08016778
 800f090:	08015f80 	.word	0x08015f80
 800f094:	0801615c 	.word	0x0801615c

0800f098 <arraySearch>:
static bool arraySearch( const char * buf,
                         size_t max,
                         uint32_t queryIndex,
                         size_t * outValue,
                         size_t * outValueLength )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08c      	sub	sp, #48	@ 0x30
 800f09c:	af02      	add	r7, sp, #8
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	603b      	str	r3, [r7, #0]
    bool ret = false;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    size_t i = 0U, value = 0U, valueLength = 0U;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	61fb      	str	r3, [r7, #28]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	61bb      	str	r3, [r7, #24]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	617b      	str	r3, [r7, #20]
    uint32_t currentIndex = 0U;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	623b      	str	r3, [r7, #32]

    coreJSON_ASSERT( buf != NULL );
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d106      	bne.n	800f0d0 <arraySearch+0x38>
 800f0c2:	4b3a      	ldr	r3, [pc, #232]	@ (800f1ac <arraySearch+0x114>)
 800f0c4:	4a3a      	ldr	r2, [pc, #232]	@ (800f1b0 <arraySearch+0x118>)
 800f0c6:	f240 51ba 	movw	r1, #1466	@ 0x5ba
 800f0ca:	483a      	ldr	r0, [pc, #232]	@ (800f1b4 <arraySearch+0x11c>)
 800f0cc:	f000 fb74 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( outValue != NULL ) && ( outValueLength != NULL ) );
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d002      	beq.n	800f0dc <arraySearch+0x44>
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d106      	bne.n	800f0ea <arraySearch+0x52>
 800f0dc:	4b36      	ldr	r3, [pc, #216]	@ (800f1b8 <arraySearch+0x120>)
 800f0de:	4a34      	ldr	r2, [pc, #208]	@ (800f1b0 <arraySearch+0x118>)
 800f0e0:	f240 51bb 	movw	r1, #1467	@ 0x5bb
 800f0e4:	4833      	ldr	r0, [pc, #204]	@ (800f1b4 <arraySearch+0x11c>)
 800f0e6:	f000 fb67 	bl	800f7b8 <__assert_func>

    skipSpace( buf, &i, max );
 800f0ea:	f107 031c 	add.w	r3, r7, #28
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f7fe fd22 	bl	800db3c <skipSpace>

    if( ( i < max ) && ( buf[ i ] == '[' ) )
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d944      	bls.n	800f18a <arraySearch+0xf2>
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	4413      	add	r3, r2
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	2b5b      	cmp	r3, #91	@ 0x5b
 800f10a:	d13e      	bne.n	800f18a <arraySearch+0xf2>
    {
        i++;
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	3301      	adds	r3, #1
 800f110:	61fb      	str	r3, [r7, #28]
        skipSpace( buf, &i, max );
 800f112:	f107 031c 	add.w	r3, r7, #28
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	4619      	mov	r1, r3
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f7fe fd0e 	bl	800db3c <skipSpace>

        while( i < max )
 800f120:	e02d      	b.n	800f17e <arraySearch+0xe6>
        {
            if( nextValue( buf, &i, max, &value, &valueLength ) != true )
 800f122:	f107 0218 	add.w	r2, r7, #24
 800f126:	f107 011c 	add.w	r1, r7, #28
 800f12a:	f107 0314 	add.w	r3, r7, #20
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	4613      	mov	r3, r2
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f7ff fe0b 	bl	800ed50 <nextValue>
 800f13a:	4603      	mov	r3, r0
 800f13c:	f083 0301 	eor.w	r3, r3, #1
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d120      	bne.n	800f188 <arraySearch+0xf0>
            {
                break;
            }

            if( currentIndex == queryIndex )
 800f146:	6a3a      	ldr	r2, [r7, #32]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d103      	bne.n	800f156 <arraySearch+0xbe>
            {
                ret = true;
 800f14e:	2301      	movs	r3, #1
 800f150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 800f154:	e019      	b.n	800f18a <arraySearch+0xf2>
            }

            if( ( skipSpaceAndComma( buf, &i, max ) != true ) ||
 800f156:	f107 031c 	add.w	r3, r7, #28
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	4619      	mov	r1, r3
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7ff fb18 	bl	800e794 <skipSpaceAndComma>
 800f164:	4603      	mov	r3, r0
 800f166:	f083 0301 	eor.w	r3, r3, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10c      	bne.n	800f18a <arraySearch+0xf2>
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d008      	beq.n	800f18a <arraySearch+0xf2>
                ( currentIndex == UINT32_MAX ) )
            {
                break;
            }

            currentIndex++;
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	3301      	adds	r3, #1
 800f17c:	623b      	str	r3, [r7, #32]
        while( i < max )
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	429a      	cmp	r2, r3
 800f184:	d8cd      	bhi.n	800f122 <arraySearch+0x8a>
 800f186:	e000      	b.n	800f18a <arraySearch+0xf2>
                break;
 800f188:	bf00      	nop
        }
    }

    if( ret == true )
 800f18a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d005      	beq.n	800f19e <arraySearch+0x106>
    {
        *outValue = value;
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	601a      	str	r2, [r3, #0]
        *outValueLength = valueLength;
 800f198:	697a      	ldr	r2, [r7, #20]
 800f19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19c:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800f19e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3728      	adds	r7, #40	@ 0x28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	080161a0 	.word	0x080161a0
 800f1b0:	08016788 	.word	0x08016788
 800f1b4:	08015f80 	.word	0x08015f80
 800f1b8:	0801615c 	.word	0x0801615c

0800f1bc <skipQueryPart>:
#define isSeparator_( x )    ( ( x ) == JSON_QUERY_KEY_SEPARATOR )
static bool skipQueryPart( const char * buf,
                           size_t * start,
                           size_t max,
                           size_t * outLength )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
    bool ret = false;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]
    size_t i = 0U;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	613b      	str	r3, [r7, #16]

    coreJSON_ASSERT( ( buf != NULL ) && ( start != NULL ) && ( outLength != NULL ) );
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d005      	beq.n	800f1e4 <skipQueryPart+0x28>
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d002      	beq.n	800f1e4 <skipQueryPart+0x28>
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d106      	bne.n	800f1f2 <skipQueryPart+0x36>
 800f1e4:	4b1e      	ldr	r3, [pc, #120]	@ (800f260 <skipQueryPart+0xa4>)
 800f1e6:	4a1f      	ldr	r2, [pc, #124]	@ (800f264 <skipQueryPart+0xa8>)
 800f1e8:	f240 51fe 	movw	r1, #1534	@ 0x5fe
 800f1ec:	481e      	ldr	r0, [pc, #120]	@ (800f268 <skipQueryPart+0xac>)
 800f1ee:	f000 fae3 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( max > 0U );
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d106      	bne.n	800f206 <skipQueryPart+0x4a>
 800f1f8:	4b1c      	ldr	r3, [pc, #112]	@ (800f26c <skipQueryPart+0xb0>)
 800f1fa:	4a1a      	ldr	r2, [pc, #104]	@ (800f264 <skipQueryPart+0xa8>)
 800f1fc:	f240 51ff 	movw	r1, #1535	@ 0x5ff
 800f200:	4819      	ldr	r0, [pc, #100]	@ (800f268 <skipQueryPart+0xac>)
 800f202:	f000 fad9 	bl	800f7b8 <__assert_func>

    i = *start;
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	613b      	str	r3, [r7, #16]

    while( ( i < max ) &&
 800f20c:	e002      	b.n	800f214 <skipQueryPart+0x58>
           !isSeparator_( buf[ i ] ) &&
           !isSquareOpen_( buf[ i ] ) )
    {
        i++;
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	3301      	adds	r3, #1
 800f212:	613b      	str	r3, [r7, #16]
           !isSeparator_( buf[ i ] ) &&
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d20b      	bcs.n	800f234 <skipQueryPart+0x78>
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	4413      	add	r3, r2
 800f222:	781b      	ldrb	r3, [r3, #0]
    while( ( i < max ) &&
 800f224:	2b2e      	cmp	r3, #46	@ 0x2e
 800f226:	d005      	beq.n	800f234 <skipQueryPart+0x78>
           !isSquareOpen_( buf[ i ] ) )
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	4413      	add	r3, r2
 800f22e:	781b      	ldrb	r3, [r3, #0]
           !isSeparator_( buf[ i ] ) &&
 800f230:	2b5b      	cmp	r3, #91	@ 0x5b
 800f232:	d1ec      	bne.n	800f20e <skipQueryPart+0x52>
    }

    if( i > *start )
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	693a      	ldr	r2, [r7, #16]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d90a      	bls.n	800f254 <skipQueryPart+0x98>
    {
        ret = true;
 800f23e:	2301      	movs	r3, #1
 800f240:	75fb      	strb	r3, [r7, #23]
        *outLength = i - *start;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	1ad2      	subs	r2, r2, r3
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	601a      	str	r2, [r3, #0]
        *start = i;
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	693a      	ldr	r2, [r7, #16]
 800f252:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800f254:	7dfb      	ldrb	r3, [r7, #23]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3718      	adds	r7, #24
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	080161b4 	.word	0x080161b4
 800f264:	08016794 	.word	0x08016794
 800f268:	08015f80 	.word	0x08015f80
 800f26c:	08016208 	.word	0x08016208

0800f270 <multiSearch>:
                                 size_t max,
                                 const char * query,
                                 size_t queryLength,
                                 size_t * outValue,
                                 size_t * outValueLength )
{
 800f270:	b590      	push	{r4, r7, lr}
 800f272:	b091      	sub	sp, #68	@ 0x44
 800f274:	af02      	add	r7, sp, #8
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
 800f27c:	603b      	str	r3, [r7, #0]
    JSONStatus_t ret = JSONSuccess;
 800f27e:	2301      	movs	r3, #1
 800f280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    size_t i = 0U, start = 0U, queryStart = 0U, value = 0U, length = max;
 800f284:	2300      	movs	r3, #0
 800f286:	627b      	str	r3, [r7, #36]	@ 0x24
 800f288:	2300      	movs	r3, #0
 800f28a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f28c:	2300      	movs	r3, #0
 800f28e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f290:	2300      	movs	r3, #0
 800f292:	623b      	str	r3, [r7, #32]
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	61fb      	str	r3, [r7, #28]

    coreJSON_ASSERT( ( buf != NULL ) && ( query != NULL ) );
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d002      	beq.n	800f2a4 <multiSearch+0x34>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d106      	bne.n	800f2b2 <multiSearch+0x42>
 800f2a4:	4b5f      	ldr	r3, [pc, #380]	@ (800f424 <multiSearch+0x1b4>)
 800f2a6:	4a60      	ldr	r2, [pc, #384]	@ (800f428 <multiSearch+0x1b8>)
 800f2a8:	f240 612f 	movw	r1, #1583	@ 0x62f
 800f2ac:	485f      	ldr	r0, [pc, #380]	@ (800f42c <multiSearch+0x1bc>)
 800f2ae:	f000 fa83 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( outValue != NULL ) && ( outValueLength != NULL ) );
 800f2b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <multiSearch+0x4e>
 800f2b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <multiSearch+0x5c>
 800f2be:	4b5c      	ldr	r3, [pc, #368]	@ (800f430 <multiSearch+0x1c0>)
 800f2c0:	4a59      	ldr	r2, [pc, #356]	@ (800f428 <multiSearch+0x1b8>)
 800f2c2:	f44f 61c6 	mov.w	r1, #1584	@ 0x630
 800f2c6:	4859      	ldr	r0, [pc, #356]	@ (800f42c <multiSearch+0x1bc>)
 800f2c8:	f000 fa76 	bl	800f7b8 <__assert_func>
    coreJSON_ASSERT( ( max > 0U ) && ( queryLength > 0U ) );
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <multiSearch+0x6a>
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f040 8090 	bne.w	800f3fa <multiSearch+0x18a>
 800f2da:	4b56      	ldr	r3, [pc, #344]	@ (800f434 <multiSearch+0x1c4>)
 800f2dc:	4a52      	ldr	r2, [pc, #328]	@ (800f428 <multiSearch+0x1b8>)
 800f2de:	f240 6131 	movw	r1, #1585	@ 0x631
 800f2e2:	4852      	ldr	r0, [pc, #328]	@ (800f42c <multiSearch+0x1bc>)
 800f2e4:	f000 fa68 	bl	800f7b8 <__assert_func>

    while( i < queryLength )
    {
        bool found = false;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if( isSquareOpen_( query[ i ] ) )
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	2b5b      	cmp	r3, #91	@ 0x5b
 800f2f8:	d134      	bne.n	800f364 <multiSearch+0xf4>
        {
            int32_t queryIndex = -1;
 800f2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fe:	61bb      	str	r3, [r7, #24]
            i++;
 800f300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f302:	3301      	adds	r3, #1
 800f304:	627b      	str	r3, [r7, #36]	@ 0x24

            ( void ) skipDigits( query, &i, queryLength, &queryIndex );
 800f306:	f107 0318 	add.w	r3, r7, #24
 800f30a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff f89b 	bl	800e44c <skipDigits>

            if( ( queryIndex < 0 ) ||
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	db09      	blt.n	800f330 <multiSearch+0xc0>
                ( i >= queryLength ) || !isSquareClose_( query[ i ] ) )
 800f31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
            if( ( queryIndex < 0 ) ||
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	429a      	cmp	r2, r3
 800f322:	d905      	bls.n	800f330 <multiSearch+0xc0>
                ( i >= queryLength ) || !isSquareClose_( query[ i ] ) )
 800f324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	4413      	add	r3, r2
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	2b5d      	cmp	r3, #93	@ 0x5d
 800f32e:	d003      	beq.n	800f338 <multiSearch+0xc8>
            {
                ret = JSONBadParameter;
 800f330:	2306      	movs	r3, #6
 800f332:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f336:	e065      	b.n	800f404 <multiSearch+0x194>
                break;
            }

            i++;
 800f338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33a:	3301      	adds	r3, #1
 800f33c:	627b      	str	r3, [r7, #36]	@ 0x24

            found = arraySearch( &buf[ start ], length, ( uint32_t ) queryIndex, &value, &length );
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f342:	18d0      	adds	r0, r2, r3
 800f344:	69f9      	ldr	r1, [r7, #28]
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	461c      	mov	r4, r3
 800f34a:	f107 0220 	add.w	r2, r7, #32
 800f34e:	f107 031c 	add.w	r3, r7, #28
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	4613      	mov	r3, r2
 800f356:	4622      	mov	r2, r4
 800f358:	f7ff fe9e 	bl	800f098 <arraySearch>
 800f35c:	4603      	mov	r3, r0
 800f35e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f362:	e02e      	b.n	800f3c2 <multiSearch+0x152>
        }
        else
        {
            size_t keyLength = 0;
 800f364:	2300      	movs	r3, #0
 800f366:	617b      	str	r3, [r7, #20]

            queryStart = i;
 800f368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36a:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( ( skipQueryPart( query, &i, queryLength, &keyLength ) != true ) ||
 800f36c:	f107 0314 	add.w	r3, r7, #20
 800f370:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7ff ff20 	bl	800f1bc <skipQueryPart>
 800f37c:	4603      	mov	r3, r0
 800f37e:	f083 0301 	eor.w	r3, r3, #1
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d104      	bne.n	800f392 <multiSearch+0x122>
                /* catch an empty key part or a trailing separator */
                ( i == ( queryLength - 1U ) ) )
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	1e5a      	subs	r2, r3, #1
 800f38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
            if( ( skipQueryPart( query, &i, queryLength, &keyLength ) != true ) ||
 800f38e:	429a      	cmp	r2, r3
 800f390:	d103      	bne.n	800f39a <multiSearch+0x12a>
            {
                ret = JSONBadParameter;
 800f392:	2306      	movs	r3, #6
 800f394:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f398:	e034      	b.n	800f404 <multiSearch+0x194>
                break;
            }

            found = objectSearch( &buf[ start ], length, &query[ queryStart ], keyLength, &value, &length );
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39e:	18d0      	adds	r0, r2, r3
 800f3a0:	69f9      	ldr	r1, [r7, #28]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a6:	441a      	add	r2, r3
 800f3a8:	697c      	ldr	r4, [r7, #20]
 800f3aa:	f107 031c 	add.w	r3, r7, #28
 800f3ae:	9301      	str	r3, [sp, #4]
 800f3b0:	f107 0320 	add.w	r3, r7, #32
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	4623      	mov	r3, r4
 800f3b8:	f7ff fdcc 	bl	800ef54 <objectSearch>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if( found == false )
 800f3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f3c6:	f083 0301 	eor.w	r3, r3, #1
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d003      	beq.n	800f3d8 <multiSearch+0x168>
        {
            ret = JSONNotFound;
 800f3d0:	2304      	movs	r3, #4
 800f3d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 800f3d6:	e015      	b.n	800f404 <multiSearch+0x194>
        }

        start += value;
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3dc:	4413      	add	r3, r2
 800f3de:	633b      	str	r3, [r7, #48]	@ 0x30

        if( ( i < queryLength ) && isSeparator_( query[ i ] ) )
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d908      	bls.n	800f3fa <multiSearch+0x18a>
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3f2:	d102      	bne.n	800f3fa <multiSearch+0x18a>
        {
            i++;
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	627b      	str	r3, [r7, #36]	@ 0x24
    while( i < queryLength )
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	f63f af72 	bhi.w	800f2e8 <multiSearch+0x78>
        }
    }

    if( ret == JSONSuccess )
 800f404:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d105      	bne.n	800f418 <multiSearch+0x1a8>
    {
        *outValue = start;
 800f40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f410:	601a      	str	r2, [r3, #0]
        *outValueLength = length;
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f416:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800f418:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	373c      	adds	r7, #60	@ 0x3c
 800f420:	46bd      	mov	sp, r7
 800f422:	bd90      	pop	{r4, r7, pc}
 800f424:	08016128 	.word	0x08016128
 800f428:	080167a4 	.word	0x080167a4
 800f42c:	08015f80 	.word	0x08015f80
 800f430:	0801615c 	.word	0x0801615c
 800f434:	08016214 	.word	0x08016214

0800f438 <getType>:
 * @param[in] c  The character to classify.
 *
 * @return an enum of JSONTypes_t
 */
static JSONTypes_t getType( char c )
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	4603      	mov	r3, r0
 800f440:	71fb      	strb	r3, [r7, #7]
    JSONTypes_t t;

    switch( c )
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	2b22      	cmp	r3, #34	@ 0x22
 800f446:	d04d      	beq.n	800f4e4 <getType+0xac>
 800f448:	2b22      	cmp	r3, #34	@ 0x22
 800f44a:	db5d      	blt.n	800f508 <getType+0xd0>
 800f44c:	2b7b      	cmp	r3, #123	@ 0x7b
 800f44e:	dc5b      	bgt.n	800f508 <getType+0xd0>
 800f450:	2b5b      	cmp	r3, #91	@ 0x5b
 800f452:	db59      	blt.n	800f508 <getType+0xd0>
 800f454:	3b5b      	subs	r3, #91	@ 0x5b
 800f456:	2b20      	cmp	r3, #32
 800f458:	d856      	bhi.n	800f508 <getType+0xd0>
 800f45a:	a201      	add	r2, pc, #4	@ (adr r2, 800f460 <getType+0x28>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f4f1 	.word	0x0800f4f1
 800f464:	0800f509 	.word	0x0800f509
 800f468:	0800f509 	.word	0x0800f509
 800f46c:	0800f509 	.word	0x0800f509
 800f470:	0800f509 	.word	0x0800f509
 800f474:	0800f509 	.word	0x0800f509
 800f478:	0800f509 	.word	0x0800f509
 800f47c:	0800f509 	.word	0x0800f509
 800f480:	0800f509 	.word	0x0800f509
 800f484:	0800f509 	.word	0x0800f509
 800f488:	0800f509 	.word	0x0800f509
 800f48c:	0800f4fd 	.word	0x0800f4fd
 800f490:	0800f509 	.word	0x0800f509
 800f494:	0800f509 	.word	0x0800f509
 800f498:	0800f509 	.word	0x0800f509
 800f49c:	0800f509 	.word	0x0800f509
 800f4a0:	0800f509 	.word	0x0800f509
 800f4a4:	0800f509 	.word	0x0800f509
 800f4a8:	0800f509 	.word	0x0800f509
 800f4ac:	0800f503 	.word	0x0800f503
 800f4b0:	0800f509 	.word	0x0800f509
 800f4b4:	0800f509 	.word	0x0800f509
 800f4b8:	0800f509 	.word	0x0800f509
 800f4bc:	0800f509 	.word	0x0800f509
 800f4c0:	0800f509 	.word	0x0800f509
 800f4c4:	0800f4f7 	.word	0x0800f4f7
 800f4c8:	0800f509 	.word	0x0800f509
 800f4cc:	0800f509 	.word	0x0800f509
 800f4d0:	0800f509 	.word	0x0800f509
 800f4d4:	0800f509 	.word	0x0800f509
 800f4d8:	0800f509 	.word	0x0800f509
 800f4dc:	0800f509 	.word	0x0800f509
 800f4e0:	0800f4eb 	.word	0x0800f4eb
    {
        case '"':
            t = JSONString;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	73fb      	strb	r3, [r7, #15]
            break;
 800f4e8:	e011      	b.n	800f50e <getType+0xd6>

        case '{':
            t = JSONObject;
 800f4ea:	2306      	movs	r3, #6
 800f4ec:	73fb      	strb	r3, [r7, #15]
            break;
 800f4ee:	e00e      	b.n	800f50e <getType+0xd6>

        case '[':
            t = JSONArray;
 800f4f0:	2307      	movs	r3, #7
 800f4f2:	73fb      	strb	r3, [r7, #15]
            break;
 800f4f4:	e00b      	b.n	800f50e <getType+0xd6>

        case 't':
            t = JSONTrue;
 800f4f6:	2303      	movs	r3, #3
 800f4f8:	73fb      	strb	r3, [r7, #15]
            break;
 800f4fa:	e008      	b.n	800f50e <getType+0xd6>

        case 'f':
            t = JSONFalse;
 800f4fc:	2304      	movs	r3, #4
 800f4fe:	73fb      	strb	r3, [r7, #15]
            break;
 800f500:	e005      	b.n	800f50e <getType+0xd6>

        case 'n':
            t = JSONNull;
 800f502:	2305      	movs	r3, #5
 800f504:	73fb      	strb	r3, [r7, #15]
            break;
 800f506:	e002      	b.n	800f50e <getType+0xd6>

        default:
            t = JSONNumber;
 800f508:	2302      	movs	r3, #2
 800f50a:	73fb      	strb	r3, [r7, #15]
            break;
 800f50c:	bf00      	nop
    }

    return t;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <JSON_SearchConst>:
                               const char * query,
                               size_t queryLength,
                               const char ** outValue,
                               size_t * outValueLength,
                               JSONTypes_t * outType )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b088      	sub	sp, #32
 800f520:	af02      	add	r7, sp, #8
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
 800f528:	603b      	str	r3, [r7, #0]
    JSONStatus_t ret;
    size_t value = 0U;
 800f52a:	2300      	movs	r3, #0
 800f52c:	613b      	str	r3, [r7, #16]

    if( ( buf == NULL ) || ( query == NULL ) ||
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d008      	beq.n	800f546 <JSON_SearchConst+0x2a>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d005      	beq.n	800f546 <JSON_SearchConst+0x2a>
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <JSON_SearchConst+0x2a>
        ( outValue == NULL ) || ( outValueLength == NULL ) )
 800f540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <JSON_SearchConst+0x30>
    {
        ret = JSONNullParameter;
 800f546:	2305      	movs	r3, #5
 800f548:	75fb      	strb	r3, [r7, #23]
 800f54a:	e015      	b.n	800f578 <JSON_SearchConst+0x5c>
    }
    else if( ( max == 0U ) || ( queryLength == 0U ) )
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d002      	beq.n	800f558 <JSON_SearchConst+0x3c>
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d102      	bne.n	800f55e <JSON_SearchConst+0x42>
    {
        ret = JSONBadParameter;
 800f558:	2306      	movs	r3, #6
 800f55a:	75fb      	strb	r3, [r7, #23]
 800f55c:	e00c      	b.n	800f578 <JSON_SearchConst+0x5c>
    }
    else
    {
        ret = multiSearch( buf, max, query, queryLength, &value, outValueLength );
 800f55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f560:	9301      	str	r3, [sp, #4]
 800f562:	f107 0310 	add.w	r3, r7, #16
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	68b9      	ldr	r1, [r7, #8]
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f7ff fe7e 	bl	800f270 <multiSearch>
 800f574:	4603      	mov	r3, r0
 800f576:	75fb      	strb	r3, [r7, #23]
    }

    if( ret == JSONSuccess )
 800f578:	7dfb      	ldrb	r3, [r7, #23]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d11e      	bne.n	800f5bc <JSON_SearchConst+0xa0>
    {
        JSONTypes_t t = getType( buf[ value ] );
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	4413      	add	r3, r2
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff ff56 	bl	800f438 <getType>
 800f58c:	4603      	mov	r3, r0
 800f58e:	75bb      	strb	r3, [r7, #22]

        if( t == JSONString )
 800f590:	7dbb      	ldrb	r3, [r7, #22]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d107      	bne.n	800f5a6 <JSON_SearchConst+0x8a>
        {
            /* strip the surrounding quotes */
            value++;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	3301      	adds	r3, #1
 800f59a:	613b      	str	r3, [r7, #16]
            *outValueLength -= 2U;
 800f59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	1e9a      	subs	r2, r3, #2
 800f5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a4:	601a      	str	r2, [r3, #0]
        }

        *outValue = &buf[ value ];
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	441a      	add	r2, r3
 800f5ac:	6a3b      	ldr	r3, [r7, #32]
 800f5ae:	601a      	str	r2, [r3, #0]

        if( outType != NULL )
 800f5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d002      	beq.n	800f5bc <JSON_SearchConst+0xa0>
        {
            *outType = t;
 800f5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b8:	7dba      	ldrb	r2, [r7, #22]
 800f5ba:	701a      	strb	r2, [r3, #0]
        }
    }

    return ret;
 800f5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <JSON_SearchT>:
                           const char * query,
                           size_t queryLength,
                           char ** outValue,
                           size_t * outValueLength,
                           JSONTypes_t * outType )
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b088      	sub	sp, #32
 800f5ca:	af04      	add	r7, sp, #16
 800f5cc:	60f8      	str	r0, [r7, #12]
 800f5ce:	60b9      	str	r1, [r7, #8]
 800f5d0:	607a      	str	r2, [r7, #4]
 800f5d2:	603b      	str	r3, [r7, #0]
    /* MISRA Ref 11.3.1 [Pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/coreJSON/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    return JSON_SearchConst( ( const char * ) buf, max, query, queryLength, ( const char ** ) outValue, outValueLength, outType );
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	9302      	str	r3, [sp, #8]
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	9301      	str	r3, [sp, #4]
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	68b9      	ldr	r1, [r7, #8]
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7ff ff98 	bl	800f51c <JSON_SearchConst>
 800f5ec:	4603      	mov	r3, r0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <mqtt_connect>:
#include "application_config.h"

static mqtt_connection_status_t mqtt_conn_status = MQTT_DISCONNECTED;


mqtt_status_t mqtt_connect(char *thingname, char *host, uint16_t port) {
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b096      	sub	sp, #88	@ 0x58
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	80fb      	strh	r3, [r7, #6]
    mqtt_connection_info_t connect_info = {0};
 800f606:	f107 0314 	add.w	r3, r7, #20
 800f60a:	2238      	movs	r2, #56	@ 0x38
 800f60c:	2100      	movs	r1, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f001 fd4e 	bl	80110b0 <memset>
    esp32_status_t mqtt_status = ESP32_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    /* Fill user config */
    connect_info.user_config.scheme = MQTT_SCHEME_TLS_BOTH_CERTS;
 800f61a:	2305      	movs	r3, #5
 800f61c:	753b      	strb	r3, [r7, #20]
    connect_info.user_config.p_client_id = thingname;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	61bb      	str	r3, [r7, #24]
    connect_info.user_config.p_username = NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	61fb      	str	r3, [r7, #28]
    connect_info.user_config.p_password = NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	623b      	str	r3, [r7, #32]
    connect_info.user_config.cert_key_id = 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    connect_info.user_config.ca_id = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    connect_info.user_config.path = NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Fill connection config */
    const char *lwt_payload = "offline";
 800f63a:	4b26      	ldr	r3, [pc, #152]	@ (800f6d4 <mqtt_connect+0xdc>)
 800f63c:	653b      	str	r3, [r7, #80]	@ 0x50
    const char *lwt_topic = "device/status";
 800f63e:	4b26      	ldr	r3, [pc, #152]	@ (800f6d8 <mqtt_connect+0xe0>)
 800f640:	64fb      	str	r3, [r7, #76]	@ 0x4c

    connect_info.conn_config.keep_alive = 60;
 800f642:	233c      	movs	r3, #60	@ 0x3c
 800f644:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    connect_info.conn_config.disable_clean_session = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    connect_info.conn_config.lwt_info.p_payload = lwt_payload;
 800f64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f64e:	63bb      	str	r3, [r7, #56]	@ 0x38
    connect_info.conn_config.lwt_info.payload_length = strlen(lwt_payload);
 800f650:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f652:	f7f0 fe2d 	bl	80002b0 <strlen>
 800f656:	4603      	mov	r3, r0
 800f658:	63fb      	str	r3, [r7, #60]	@ 0x3c
    connect_info.conn_config.lwt_info.p_topic = lwt_topic;
 800f65a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f65c:	633b      	str	r3, [r7, #48]	@ 0x30
    connect_info.conn_config.lwt_info.topic_length = strlen(lwt_topic);
 800f65e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800f660:	f7f0 fe26 	bl	80002b0 <strlen>
 800f664:	4603      	mov	r3, r0
 800f666:	637b      	str	r3, [r7, #52]	@ 0x34
    connect_info.conn_config.lwt_info.qos = MQTT_QOS0;
 800f668:	2300      	movs	r3, #0
 800f66a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    connect_info.conn_config.lwt_info.retain = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

    /* Fill host and port */
    connect_info.p_host = host;
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	647b      	str	r3, [r7, #68]	@ 0x44
    connect_info.p_port = port;
 800f678:	88fb      	ldrh	r3, [r7, #6]
 800f67a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    connect_info.reconnect = MQTT_RECONNECT_ENABLE;
 800f67e:	2301      	movs	r3, #1
 800f680:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

    /* Step 1: Configure MQTT user settings */
    mqtt_status = esp32_mqtt_configure(&connect_info);
 800f684:	f107 0314 	add.w	r3, r7, #20
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f8 f807 	bl	800769c <esp32_mqtt_configure>
 800f68e:	4603      	mov	r3, r0
 800f690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mqtt_status != ESP32_OK) {
 800f694:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <mqtt_connect+0xa8>
        return false;
 800f69c:	2300      	movs	r3, #0
 800f69e:	e014      	b.n	800f6ca <mqtt_connect+0xd2>
    }

    /* Step 2: Connect to MQTT broker */
    mqtt_status = esp32_mqtt_connect_to_broker( &connect_info);
 800f6a0:	f107 0314 	add.w	r3, r7, #20
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7f8 f8a7 	bl	80077f8 <esp32_mqtt_connect_to_broker>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mqtt_status != ESP32_OK) {
 800f6b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d004      	beq.n	800f6c2 <mqtt_connect+0xca>
        mqtt_conn_status = MQTT_DISCONNECTED;
 800f6b8:	4b08      	ldr	r3, [pc, #32]	@ (800f6dc <mqtt_connect+0xe4>)
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	701a      	strb	r2, [r3, #0]
        return false;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e003      	b.n	800f6ca <mqtt_connect+0xd2>
    }

    mqtt_conn_status = MQTT_CONNECTED;
 800f6c2:	4b06      	ldr	r3, [pc, #24]	@ (800f6dc <mqtt_connect+0xe4>)
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	701a      	strb	r2, [r3, #0]
    return true;
 800f6c8:	2301      	movs	r3, #1
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3758      	adds	r7, #88	@ 0x58
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	080162d8 	.word	0x080162d8
 800f6d8:	080162e0 	.word	0x080162e0
 800f6dc:	20010810 	.word	0x20010810

0800f6e0 <mqtt_publish>:

mqtt_status_t mqtt_publish(char *topic, size_t topic_length, uint8_t *message, size_t message_length) {
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b08a      	sub	sp, #40	@ 0x28
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
 800f6ec:	603b      	str	r3, [r7, #0]
    if (!topic || !message || topic_length == 0 || message_length == 0) {
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d008      	beq.n	800f706 <mqtt_publish+0x26>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d005      	beq.n	800f706 <mqtt_publish+0x26>
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <mqtt_publish+0x26>
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <mqtt_publish+0x2a>
        return false;
 800f706:	2300      	movs	r3, #0
 800f708:	e027      	b.n	800f75a <mqtt_publish+0x7a>
    }

    mqtt_publish_t pub_args = {0};
 800f70a:	f107 0310 	add.w	r3, r7, #16
 800f70e:	2200      	movs	r2, #0
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	605a      	str	r2, [r3, #4]
 800f714:	609a      	str	r2, [r3, #8]
 800f716:	60da      	str	r2, [r3, #12]
 800f718:	611a      	str	r2, [r3, #16]
    esp32_status_t status = ESP32_OK;
 800f71a:	2300      	movs	r3, #0
 800f71c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pub_args.p_payload = (const char *)message;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	61bb      	str	r3, [r7, #24]
    pub_args.payload_length = message_length;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	61fb      	str	r3, [r7, #28]
    pub_args.qos = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	f887 3020 	strb.w	r3, [r7, #32]
    pub_args.retain = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    pub_args.p_topic = topic;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	613b      	str	r3, [r7, #16]
    pub_args.topic_length = topic_length;
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	617b      	str	r3, [r7, #20]

    status = esp32_mqtt_publish(&pub_args);
 800f73c:	f107 0310 	add.w	r3, r7, #16
 800f740:	4618      	mov	r0, r3
 800f742:	f7f8 f8c3 	bl	80078cc <esp32_mqtt_publish>
 800f746:	4603      	mov	r3, r0
 800f748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != ESP32_OK) {
 800f74c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <mqtt_publish+0x78>
        return false;
 800f754:	2300      	movs	r3, #0
 800f756:	e000      	b.n	800f75a <mqtt_publish+0x7a>
    }
    return true;
 800f758:	2301      	movs	r3, #1
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3728      	adds	r7, #40	@ 0x28
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <mqtt_subscribe>:

mqtt_status_t mqtt_subscribe(char *topic, size_t topic_length) {
 800f762:	b580      	push	{r7, lr}
 800f764:	b086      	sub	sp, #24
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
 800f76a:	6039      	str	r1, [r7, #0]
    if (!topic || topic_length == 0) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <mqtt_subscribe+0x16>
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d101      	bne.n	800f77c <mqtt_subscribe+0x1a>
        return false;
 800f778:	2300      	movs	r3, #0
 800f77a:	e018      	b.n	800f7ae <mqtt_subscribe+0x4c>
    }

    mqtt_subscribe_t sub_args = {0};
 800f77c:	f107 0308 	add.w	r3, r7, #8
 800f780:	2200      	movs	r2, #0
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	605a      	str	r2, [r3, #4]
 800f786:	609a      	str	r2, [r3, #8]
    sub_args.p_topic_filter = topic;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	60bb      	str	r3, [r7, #8]
    sub_args.qos = 1;
 800f78c:	2301      	movs	r3, #1
 800f78e:	743b      	strb	r3, [r7, #16]
    sub_args.topic_filter_length = topic_length;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	60fb      	str	r3, [r7, #12]

    esp32_status_t status = esp32_mqtt_subscribe(&sub_args);
 800f794:	f107 0308 	add.w	r3, r7, #8
 800f798:	4618      	mov	r0, r3
 800f79a:	f7f8 f869 	bl	8007870 <esp32_mqtt_subscribe>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	75fb      	strb	r3, [r7, #23]
    if (status != ESP32_OK) {
 800f7a2:	7dfb      	ldrb	r3, [r7, #23]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <mqtt_subscribe+0x4a>
        return false;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e000      	b.n	800f7ae <mqtt_subscribe+0x4c>
    }
    return true;
 800f7ac:	2301      	movs	r3, #1
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3718      	adds	r7, #24
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
	...

0800f7b8 <__assert_func>:
 800f7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7ba:	4614      	mov	r4, r2
 800f7bc:	461a      	mov	r2, r3
 800f7be:	4b09      	ldr	r3, [pc, #36]	@ (800f7e4 <__assert_func+0x2c>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	68d8      	ldr	r0, [r3, #12]
 800f7c6:	b14c      	cbz	r4, 800f7dc <__assert_func+0x24>
 800f7c8:	4b07      	ldr	r3, [pc, #28]	@ (800f7e8 <__assert_func+0x30>)
 800f7ca:	9100      	str	r1, [sp, #0]
 800f7cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7d0:	4906      	ldr	r1, [pc, #24]	@ (800f7ec <__assert_func+0x34>)
 800f7d2:	462b      	mov	r3, r5
 800f7d4:	f001 fa44 	bl	8010c60 <fiprintf>
 800f7d8:	f001 fd68 	bl	80112ac <abort>
 800f7dc:	4b04      	ldr	r3, [pc, #16]	@ (800f7f0 <__assert_func+0x38>)
 800f7de:	461c      	mov	r4, r3
 800f7e0:	e7f3      	b.n	800f7ca <__assert_func+0x12>
 800f7e2:	bf00      	nop
 800f7e4:	20000020 	.word	0x20000020
 800f7e8:	080167b0 	.word	0x080167b0
 800f7ec:	080167bd 	.word	0x080167bd
 800f7f0:	080167eb 	.word	0x080167eb

0800f7f4 <atoi>:
 800f7f4:	220a      	movs	r2, #10
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	f000 b932 	b.w	800fa60 <strtol>

0800f7fc <malloc>:
 800f7fc:	4b02      	ldr	r3, [pc, #8]	@ (800f808 <malloc+0xc>)
 800f7fe:	4601      	mov	r1, r0
 800f800:	6818      	ldr	r0, [r3, #0]
 800f802:	f000 b825 	b.w	800f850 <_malloc_r>
 800f806:	bf00      	nop
 800f808:	20000020 	.word	0x20000020

0800f80c <sbrk_aligned>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	4e0f      	ldr	r6, [pc, #60]	@ (800f84c <sbrk_aligned+0x40>)
 800f810:	460c      	mov	r4, r1
 800f812:	6831      	ldr	r1, [r6, #0]
 800f814:	4605      	mov	r5, r0
 800f816:	b911      	cbnz	r1, 800f81e <sbrk_aligned+0x12>
 800f818:	f001 fce4 	bl	80111e4 <_sbrk_r>
 800f81c:	6030      	str	r0, [r6, #0]
 800f81e:	4621      	mov	r1, r4
 800f820:	4628      	mov	r0, r5
 800f822:	f001 fcdf 	bl	80111e4 <_sbrk_r>
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	d103      	bne.n	800f832 <sbrk_aligned+0x26>
 800f82a:	f04f 34ff 	mov.w	r4, #4294967295
 800f82e:	4620      	mov	r0, r4
 800f830:	bd70      	pop	{r4, r5, r6, pc}
 800f832:	1cc4      	adds	r4, r0, #3
 800f834:	f024 0403 	bic.w	r4, r4, #3
 800f838:	42a0      	cmp	r0, r4
 800f83a:	d0f8      	beq.n	800f82e <sbrk_aligned+0x22>
 800f83c:	1a21      	subs	r1, r4, r0
 800f83e:	4628      	mov	r0, r5
 800f840:	f001 fcd0 	bl	80111e4 <_sbrk_r>
 800f844:	3001      	adds	r0, #1
 800f846:	d1f2      	bne.n	800f82e <sbrk_aligned+0x22>
 800f848:	e7ef      	b.n	800f82a <sbrk_aligned+0x1e>
 800f84a:	bf00      	nop
 800f84c:	20010814 	.word	0x20010814

0800f850 <_malloc_r>:
 800f850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f854:	1ccd      	adds	r5, r1, #3
 800f856:	f025 0503 	bic.w	r5, r5, #3
 800f85a:	3508      	adds	r5, #8
 800f85c:	2d0c      	cmp	r5, #12
 800f85e:	bf38      	it	cc
 800f860:	250c      	movcc	r5, #12
 800f862:	2d00      	cmp	r5, #0
 800f864:	4606      	mov	r6, r0
 800f866:	db01      	blt.n	800f86c <_malloc_r+0x1c>
 800f868:	42a9      	cmp	r1, r5
 800f86a:	d904      	bls.n	800f876 <_malloc_r+0x26>
 800f86c:	230c      	movs	r3, #12
 800f86e:	6033      	str	r3, [r6, #0]
 800f870:	2000      	movs	r0, #0
 800f872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f94c <_malloc_r+0xfc>
 800f87a:	f000 f869 	bl	800f950 <__malloc_lock>
 800f87e:	f8d8 3000 	ldr.w	r3, [r8]
 800f882:	461c      	mov	r4, r3
 800f884:	bb44      	cbnz	r4, 800f8d8 <_malloc_r+0x88>
 800f886:	4629      	mov	r1, r5
 800f888:	4630      	mov	r0, r6
 800f88a:	f7ff ffbf 	bl	800f80c <sbrk_aligned>
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	4604      	mov	r4, r0
 800f892:	d158      	bne.n	800f946 <_malloc_r+0xf6>
 800f894:	f8d8 4000 	ldr.w	r4, [r8]
 800f898:	4627      	mov	r7, r4
 800f89a:	2f00      	cmp	r7, #0
 800f89c:	d143      	bne.n	800f926 <_malloc_r+0xd6>
 800f89e:	2c00      	cmp	r4, #0
 800f8a0:	d04b      	beq.n	800f93a <_malloc_r+0xea>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	eb04 0903 	add.w	r9, r4, r3
 800f8ac:	f001 fc9a 	bl	80111e4 <_sbrk_r>
 800f8b0:	4581      	cmp	r9, r0
 800f8b2:	d142      	bne.n	800f93a <_malloc_r+0xea>
 800f8b4:	6821      	ldr	r1, [r4, #0]
 800f8b6:	1a6d      	subs	r5, r5, r1
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f7ff ffa6 	bl	800f80c <sbrk_aligned>
 800f8c0:	3001      	adds	r0, #1
 800f8c2:	d03a      	beq.n	800f93a <_malloc_r+0xea>
 800f8c4:	6823      	ldr	r3, [r4, #0]
 800f8c6:	442b      	add	r3, r5
 800f8c8:	6023      	str	r3, [r4, #0]
 800f8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	bb62      	cbnz	r2, 800f92c <_malloc_r+0xdc>
 800f8d2:	f8c8 7000 	str.w	r7, [r8]
 800f8d6:	e00f      	b.n	800f8f8 <_malloc_r+0xa8>
 800f8d8:	6822      	ldr	r2, [r4, #0]
 800f8da:	1b52      	subs	r2, r2, r5
 800f8dc:	d420      	bmi.n	800f920 <_malloc_r+0xd0>
 800f8de:	2a0b      	cmp	r2, #11
 800f8e0:	d917      	bls.n	800f912 <_malloc_r+0xc2>
 800f8e2:	1961      	adds	r1, r4, r5
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	6025      	str	r5, [r4, #0]
 800f8e8:	bf18      	it	ne
 800f8ea:	6059      	strne	r1, [r3, #4]
 800f8ec:	6863      	ldr	r3, [r4, #4]
 800f8ee:	bf08      	it	eq
 800f8f0:	f8c8 1000 	streq.w	r1, [r8]
 800f8f4:	5162      	str	r2, [r4, r5]
 800f8f6:	604b      	str	r3, [r1, #4]
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f000 f82f 	bl	800f95c <__malloc_unlock>
 800f8fe:	f104 000b 	add.w	r0, r4, #11
 800f902:	1d23      	adds	r3, r4, #4
 800f904:	f020 0007 	bic.w	r0, r0, #7
 800f908:	1ac2      	subs	r2, r0, r3
 800f90a:	bf1c      	itt	ne
 800f90c:	1a1b      	subne	r3, r3, r0
 800f90e:	50a3      	strne	r3, [r4, r2]
 800f910:	e7af      	b.n	800f872 <_malloc_r+0x22>
 800f912:	6862      	ldr	r2, [r4, #4]
 800f914:	42a3      	cmp	r3, r4
 800f916:	bf0c      	ite	eq
 800f918:	f8c8 2000 	streq.w	r2, [r8]
 800f91c:	605a      	strne	r2, [r3, #4]
 800f91e:	e7eb      	b.n	800f8f8 <_malloc_r+0xa8>
 800f920:	4623      	mov	r3, r4
 800f922:	6864      	ldr	r4, [r4, #4]
 800f924:	e7ae      	b.n	800f884 <_malloc_r+0x34>
 800f926:	463c      	mov	r4, r7
 800f928:	687f      	ldr	r7, [r7, #4]
 800f92a:	e7b6      	b.n	800f89a <_malloc_r+0x4a>
 800f92c:	461a      	mov	r2, r3
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	42a3      	cmp	r3, r4
 800f932:	d1fb      	bne.n	800f92c <_malloc_r+0xdc>
 800f934:	2300      	movs	r3, #0
 800f936:	6053      	str	r3, [r2, #4]
 800f938:	e7de      	b.n	800f8f8 <_malloc_r+0xa8>
 800f93a:	230c      	movs	r3, #12
 800f93c:	6033      	str	r3, [r6, #0]
 800f93e:	4630      	mov	r0, r6
 800f940:	f000 f80c 	bl	800f95c <__malloc_unlock>
 800f944:	e794      	b.n	800f870 <_malloc_r+0x20>
 800f946:	6005      	str	r5, [r0, #0]
 800f948:	e7d6      	b.n	800f8f8 <_malloc_r+0xa8>
 800f94a:	bf00      	nop
 800f94c:	20010818 	.word	0x20010818

0800f950 <__malloc_lock>:
 800f950:	4801      	ldr	r0, [pc, #4]	@ (800f958 <__malloc_lock+0x8>)
 800f952:	f001 bc94 	b.w	801127e <__retarget_lock_acquire_recursive>
 800f956:	bf00      	nop
 800f958:	2001095c 	.word	0x2001095c

0800f95c <__malloc_unlock>:
 800f95c:	4801      	ldr	r0, [pc, #4]	@ (800f964 <__malloc_unlock+0x8>)
 800f95e:	f001 bc8f 	b.w	8011280 <__retarget_lock_release_recursive>
 800f962:	bf00      	nop
 800f964:	2001095c 	.word	0x2001095c

0800f968 <_strtol_l.isra.0>:
 800f968:	2b24      	cmp	r3, #36	@ 0x24
 800f96a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f96e:	4686      	mov	lr, r0
 800f970:	4690      	mov	r8, r2
 800f972:	d801      	bhi.n	800f978 <_strtol_l.isra.0+0x10>
 800f974:	2b01      	cmp	r3, #1
 800f976:	d106      	bne.n	800f986 <_strtol_l.isra.0+0x1e>
 800f978:	f001 fc56 	bl	8011228 <__errno>
 800f97c:	2316      	movs	r3, #22
 800f97e:	6003      	str	r3, [r0, #0]
 800f980:	2000      	movs	r0, #0
 800f982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f986:	4834      	ldr	r0, [pc, #208]	@ (800fa58 <_strtol_l.isra.0+0xf0>)
 800f988:	460d      	mov	r5, r1
 800f98a:	462a      	mov	r2, r5
 800f98c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f990:	5d06      	ldrb	r6, [r0, r4]
 800f992:	f016 0608 	ands.w	r6, r6, #8
 800f996:	d1f8      	bne.n	800f98a <_strtol_l.isra.0+0x22>
 800f998:	2c2d      	cmp	r4, #45	@ 0x2d
 800f99a:	d110      	bne.n	800f9be <_strtol_l.isra.0+0x56>
 800f99c:	782c      	ldrb	r4, [r5, #0]
 800f99e:	2601      	movs	r6, #1
 800f9a0:	1c95      	adds	r5, r2, #2
 800f9a2:	f033 0210 	bics.w	r2, r3, #16
 800f9a6:	d115      	bne.n	800f9d4 <_strtol_l.isra.0+0x6c>
 800f9a8:	2c30      	cmp	r4, #48	@ 0x30
 800f9aa:	d10d      	bne.n	800f9c8 <_strtol_l.isra.0+0x60>
 800f9ac:	782a      	ldrb	r2, [r5, #0]
 800f9ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9b2:	2a58      	cmp	r2, #88	@ 0x58
 800f9b4:	d108      	bne.n	800f9c8 <_strtol_l.isra.0+0x60>
 800f9b6:	786c      	ldrb	r4, [r5, #1]
 800f9b8:	3502      	adds	r5, #2
 800f9ba:	2310      	movs	r3, #16
 800f9bc:	e00a      	b.n	800f9d4 <_strtol_l.isra.0+0x6c>
 800f9be:	2c2b      	cmp	r4, #43	@ 0x2b
 800f9c0:	bf04      	itt	eq
 800f9c2:	782c      	ldrbeq	r4, [r5, #0]
 800f9c4:	1c95      	addeq	r5, r2, #2
 800f9c6:	e7ec      	b.n	800f9a2 <_strtol_l.isra.0+0x3a>
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1f6      	bne.n	800f9ba <_strtol_l.isra.0+0x52>
 800f9cc:	2c30      	cmp	r4, #48	@ 0x30
 800f9ce:	bf14      	ite	ne
 800f9d0:	230a      	movne	r3, #10
 800f9d2:	2308      	moveq	r3, #8
 800f9d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f9d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f9dc:	2200      	movs	r2, #0
 800f9de:	fbbc f9f3 	udiv	r9, ip, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800f9e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f9ec:	2f09      	cmp	r7, #9
 800f9ee:	d80f      	bhi.n	800fa10 <_strtol_l.isra.0+0xa8>
 800f9f0:	463c      	mov	r4, r7
 800f9f2:	42a3      	cmp	r3, r4
 800f9f4:	dd1b      	ble.n	800fa2e <_strtol_l.isra.0+0xc6>
 800f9f6:	1c57      	adds	r7, r2, #1
 800f9f8:	d007      	beq.n	800fa0a <_strtol_l.isra.0+0xa2>
 800f9fa:	4581      	cmp	r9, r0
 800f9fc:	d314      	bcc.n	800fa28 <_strtol_l.isra.0+0xc0>
 800f9fe:	d101      	bne.n	800fa04 <_strtol_l.isra.0+0x9c>
 800fa00:	45a2      	cmp	sl, r4
 800fa02:	db11      	blt.n	800fa28 <_strtol_l.isra.0+0xc0>
 800fa04:	fb00 4003 	mla	r0, r0, r3, r4
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa0e:	e7eb      	b.n	800f9e8 <_strtol_l.isra.0+0x80>
 800fa10:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fa14:	2f19      	cmp	r7, #25
 800fa16:	d801      	bhi.n	800fa1c <_strtol_l.isra.0+0xb4>
 800fa18:	3c37      	subs	r4, #55	@ 0x37
 800fa1a:	e7ea      	b.n	800f9f2 <_strtol_l.isra.0+0x8a>
 800fa1c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fa20:	2f19      	cmp	r7, #25
 800fa22:	d804      	bhi.n	800fa2e <_strtol_l.isra.0+0xc6>
 800fa24:	3c57      	subs	r4, #87	@ 0x57
 800fa26:	e7e4      	b.n	800f9f2 <_strtol_l.isra.0+0x8a>
 800fa28:	f04f 32ff 	mov.w	r2, #4294967295
 800fa2c:	e7ed      	b.n	800fa0a <_strtol_l.isra.0+0xa2>
 800fa2e:	1c53      	adds	r3, r2, #1
 800fa30:	d108      	bne.n	800fa44 <_strtol_l.isra.0+0xdc>
 800fa32:	2322      	movs	r3, #34	@ 0x22
 800fa34:	f8ce 3000 	str.w	r3, [lr]
 800fa38:	4660      	mov	r0, ip
 800fa3a:	f1b8 0f00 	cmp.w	r8, #0
 800fa3e:	d0a0      	beq.n	800f982 <_strtol_l.isra.0+0x1a>
 800fa40:	1e69      	subs	r1, r5, #1
 800fa42:	e006      	b.n	800fa52 <_strtol_l.isra.0+0xea>
 800fa44:	b106      	cbz	r6, 800fa48 <_strtol_l.isra.0+0xe0>
 800fa46:	4240      	negs	r0, r0
 800fa48:	f1b8 0f00 	cmp.w	r8, #0
 800fa4c:	d099      	beq.n	800f982 <_strtol_l.isra.0+0x1a>
 800fa4e:	2a00      	cmp	r2, #0
 800fa50:	d1f6      	bne.n	800fa40 <_strtol_l.isra.0+0xd8>
 800fa52:	f8c8 1000 	str.w	r1, [r8]
 800fa56:	e794      	b.n	800f982 <_strtol_l.isra.0+0x1a>
 800fa58:	080169a0 	.word	0x080169a0

0800fa5c <_strtol_r>:
 800fa5c:	f7ff bf84 	b.w	800f968 <_strtol_l.isra.0>

0800fa60 <strtol>:
 800fa60:	4613      	mov	r3, r2
 800fa62:	460a      	mov	r2, r1
 800fa64:	4601      	mov	r1, r0
 800fa66:	4802      	ldr	r0, [pc, #8]	@ (800fa70 <strtol+0x10>)
 800fa68:	6800      	ldr	r0, [r0, #0]
 800fa6a:	f7ff bf7d 	b.w	800f968 <_strtol_l.isra.0>
 800fa6e:	bf00      	nop
 800fa70:	20000020 	.word	0x20000020

0800fa74 <__cvt>:
 800fa74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa78:	ec57 6b10 	vmov	r6, r7, d0
 800fa7c:	2f00      	cmp	r7, #0
 800fa7e:	460c      	mov	r4, r1
 800fa80:	4619      	mov	r1, r3
 800fa82:	463b      	mov	r3, r7
 800fa84:	bfbb      	ittet	lt
 800fa86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fa8a:	461f      	movlt	r7, r3
 800fa8c:	2300      	movge	r3, #0
 800fa8e:	232d      	movlt	r3, #45	@ 0x2d
 800fa90:	700b      	strb	r3, [r1, #0]
 800fa92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa98:	4691      	mov	r9, r2
 800fa9a:	f023 0820 	bic.w	r8, r3, #32
 800fa9e:	bfbc      	itt	lt
 800faa0:	4632      	movlt	r2, r6
 800faa2:	4616      	movlt	r6, r2
 800faa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800faa8:	d005      	beq.n	800fab6 <__cvt+0x42>
 800faaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800faae:	d100      	bne.n	800fab2 <__cvt+0x3e>
 800fab0:	3401      	adds	r4, #1
 800fab2:	2102      	movs	r1, #2
 800fab4:	e000      	b.n	800fab8 <__cvt+0x44>
 800fab6:	2103      	movs	r1, #3
 800fab8:	ab03      	add	r3, sp, #12
 800faba:	9301      	str	r3, [sp, #4]
 800fabc:	ab02      	add	r3, sp, #8
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	ec47 6b10 	vmov	d0, r6, r7
 800fac4:	4653      	mov	r3, sl
 800fac6:	4622      	mov	r2, r4
 800fac8:	f001 fc82 	bl	80113d0 <_dtoa_r>
 800facc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fad0:	4605      	mov	r5, r0
 800fad2:	d119      	bne.n	800fb08 <__cvt+0x94>
 800fad4:	f019 0f01 	tst.w	r9, #1
 800fad8:	d00e      	beq.n	800faf8 <__cvt+0x84>
 800fada:	eb00 0904 	add.w	r9, r0, r4
 800fade:	2200      	movs	r2, #0
 800fae0:	2300      	movs	r3, #0
 800fae2:	4630      	mov	r0, r6
 800fae4:	4639      	mov	r1, r7
 800fae6:	f7f1 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 800faea:	b108      	cbz	r0, 800faf0 <__cvt+0x7c>
 800faec:	f8cd 900c 	str.w	r9, [sp, #12]
 800faf0:	2230      	movs	r2, #48	@ 0x30
 800faf2:	9b03      	ldr	r3, [sp, #12]
 800faf4:	454b      	cmp	r3, r9
 800faf6:	d31e      	bcc.n	800fb36 <__cvt+0xc2>
 800faf8:	9b03      	ldr	r3, [sp, #12]
 800fafa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fafc:	1b5b      	subs	r3, r3, r5
 800fafe:	4628      	mov	r0, r5
 800fb00:	6013      	str	r3, [r2, #0]
 800fb02:	b004      	add	sp, #16
 800fb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fb0c:	eb00 0904 	add.w	r9, r0, r4
 800fb10:	d1e5      	bne.n	800fade <__cvt+0x6a>
 800fb12:	7803      	ldrb	r3, [r0, #0]
 800fb14:	2b30      	cmp	r3, #48	@ 0x30
 800fb16:	d10a      	bne.n	800fb2e <__cvt+0xba>
 800fb18:	2200      	movs	r2, #0
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	4639      	mov	r1, r7
 800fb20:	f7f0 fff2 	bl	8000b08 <__aeabi_dcmpeq>
 800fb24:	b918      	cbnz	r0, 800fb2e <__cvt+0xba>
 800fb26:	f1c4 0401 	rsb	r4, r4, #1
 800fb2a:	f8ca 4000 	str.w	r4, [sl]
 800fb2e:	f8da 3000 	ldr.w	r3, [sl]
 800fb32:	4499      	add	r9, r3
 800fb34:	e7d3      	b.n	800fade <__cvt+0x6a>
 800fb36:	1c59      	adds	r1, r3, #1
 800fb38:	9103      	str	r1, [sp, #12]
 800fb3a:	701a      	strb	r2, [r3, #0]
 800fb3c:	e7d9      	b.n	800faf2 <__cvt+0x7e>

0800fb3e <__exponent>:
 800fb3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb40:	2900      	cmp	r1, #0
 800fb42:	bfba      	itte	lt
 800fb44:	4249      	neglt	r1, r1
 800fb46:	232d      	movlt	r3, #45	@ 0x2d
 800fb48:	232b      	movge	r3, #43	@ 0x2b
 800fb4a:	2909      	cmp	r1, #9
 800fb4c:	7002      	strb	r2, [r0, #0]
 800fb4e:	7043      	strb	r3, [r0, #1]
 800fb50:	dd29      	ble.n	800fba6 <__exponent+0x68>
 800fb52:	f10d 0307 	add.w	r3, sp, #7
 800fb56:	461d      	mov	r5, r3
 800fb58:	270a      	movs	r7, #10
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb60:	fb07 1416 	mls	r4, r7, r6, r1
 800fb64:	3430      	adds	r4, #48	@ 0x30
 800fb66:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	2c63      	cmp	r4, #99	@ 0x63
 800fb6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb72:	4631      	mov	r1, r6
 800fb74:	dcf1      	bgt.n	800fb5a <__exponent+0x1c>
 800fb76:	3130      	adds	r1, #48	@ 0x30
 800fb78:	1e94      	subs	r4, r2, #2
 800fb7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb7e:	1c41      	adds	r1, r0, #1
 800fb80:	4623      	mov	r3, r4
 800fb82:	42ab      	cmp	r3, r5
 800fb84:	d30a      	bcc.n	800fb9c <__exponent+0x5e>
 800fb86:	f10d 0309 	add.w	r3, sp, #9
 800fb8a:	1a9b      	subs	r3, r3, r2
 800fb8c:	42ac      	cmp	r4, r5
 800fb8e:	bf88      	it	hi
 800fb90:	2300      	movhi	r3, #0
 800fb92:	3302      	adds	r3, #2
 800fb94:	4403      	add	r3, r0
 800fb96:	1a18      	subs	r0, r3, r0
 800fb98:	b003      	add	sp, #12
 800fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fba0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fba4:	e7ed      	b.n	800fb82 <__exponent+0x44>
 800fba6:	2330      	movs	r3, #48	@ 0x30
 800fba8:	3130      	adds	r1, #48	@ 0x30
 800fbaa:	7083      	strb	r3, [r0, #2]
 800fbac:	70c1      	strb	r1, [r0, #3]
 800fbae:	1d03      	adds	r3, r0, #4
 800fbb0:	e7f1      	b.n	800fb96 <__exponent+0x58>
	...

0800fbb4 <_printf_float>:
 800fbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb8:	b08d      	sub	sp, #52	@ 0x34
 800fbba:	460c      	mov	r4, r1
 800fbbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fbc0:	4616      	mov	r6, r2
 800fbc2:	461f      	mov	r7, r3
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	f001 fad5 	bl	8011174 <_localeconv_r>
 800fbca:	6803      	ldr	r3, [r0, #0]
 800fbcc:	9304      	str	r3, [sp, #16]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7f0 fb6e 	bl	80002b0 <strlen>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbd8:	f8d8 3000 	ldr.w	r3, [r8]
 800fbdc:	9005      	str	r0, [sp, #20]
 800fbde:	3307      	adds	r3, #7
 800fbe0:	f023 0307 	bic.w	r3, r3, #7
 800fbe4:	f103 0208 	add.w	r2, r3, #8
 800fbe8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fbec:	f8d4 b000 	ldr.w	fp, [r4]
 800fbf0:	f8c8 2000 	str.w	r2, [r8]
 800fbf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fbfc:	9307      	str	r3, [sp, #28]
 800fbfe:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fc06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc0a:	4b9c      	ldr	r3, [pc, #624]	@ (800fe7c <_printf_float+0x2c8>)
 800fc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc10:	f7f0 ffac 	bl	8000b6c <__aeabi_dcmpun>
 800fc14:	bb70      	cbnz	r0, 800fc74 <_printf_float+0xc0>
 800fc16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc1a:	4b98      	ldr	r3, [pc, #608]	@ (800fe7c <_printf_float+0x2c8>)
 800fc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc20:	f7f0 ff86 	bl	8000b30 <__aeabi_dcmple>
 800fc24:	bb30      	cbnz	r0, 800fc74 <_printf_float+0xc0>
 800fc26:	2200      	movs	r2, #0
 800fc28:	2300      	movs	r3, #0
 800fc2a:	4640      	mov	r0, r8
 800fc2c:	4649      	mov	r1, r9
 800fc2e:	f7f0 ff75 	bl	8000b1c <__aeabi_dcmplt>
 800fc32:	b110      	cbz	r0, 800fc3a <_printf_float+0x86>
 800fc34:	232d      	movs	r3, #45	@ 0x2d
 800fc36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc3a:	4a91      	ldr	r2, [pc, #580]	@ (800fe80 <_printf_float+0x2cc>)
 800fc3c:	4b91      	ldr	r3, [pc, #580]	@ (800fe84 <_printf_float+0x2d0>)
 800fc3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc42:	bf8c      	ite	hi
 800fc44:	4690      	movhi	r8, r2
 800fc46:	4698      	movls	r8, r3
 800fc48:	2303      	movs	r3, #3
 800fc4a:	6123      	str	r3, [r4, #16]
 800fc4c:	f02b 0304 	bic.w	r3, fp, #4
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	f04f 0900 	mov.w	r9, #0
 800fc56:	9700      	str	r7, [sp, #0]
 800fc58:	4633      	mov	r3, r6
 800fc5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f000 fb14 	bl	801028c <_printf_common>
 800fc64:	3001      	adds	r0, #1
 800fc66:	f040 808d 	bne.w	800fd84 <_printf_float+0x1d0>
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6e:	b00d      	add	sp, #52	@ 0x34
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	4642      	mov	r2, r8
 800fc76:	464b      	mov	r3, r9
 800fc78:	4640      	mov	r0, r8
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	f7f0 ff76 	bl	8000b6c <__aeabi_dcmpun>
 800fc80:	b140      	cbz	r0, 800fc94 <_printf_float+0xe0>
 800fc82:	464b      	mov	r3, r9
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bfbc      	itt	lt
 800fc88:	232d      	movlt	r3, #45	@ 0x2d
 800fc8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc8e:	4a7e      	ldr	r2, [pc, #504]	@ (800fe88 <_printf_float+0x2d4>)
 800fc90:	4b7e      	ldr	r3, [pc, #504]	@ (800fe8c <_printf_float+0x2d8>)
 800fc92:	e7d4      	b.n	800fc3e <_printf_float+0x8a>
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fc9a:	9206      	str	r2, [sp, #24]
 800fc9c:	1c5a      	adds	r2, r3, #1
 800fc9e:	d13b      	bne.n	800fd18 <_printf_float+0x164>
 800fca0:	2306      	movs	r3, #6
 800fca2:	6063      	str	r3, [r4, #4]
 800fca4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fca8:	2300      	movs	r3, #0
 800fcaa:	6022      	str	r2, [r4, #0]
 800fcac:	9303      	str	r3, [sp, #12]
 800fcae:	ab0a      	add	r3, sp, #40	@ 0x28
 800fcb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fcb4:	ab09      	add	r3, sp, #36	@ 0x24
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	6861      	ldr	r1, [r4, #4]
 800fcba:	ec49 8b10 	vmov	d0, r8, r9
 800fcbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f7ff fed6 	bl	800fa74 <__cvt>
 800fcc8:	9b06      	ldr	r3, [sp, #24]
 800fcca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fccc:	2b47      	cmp	r3, #71	@ 0x47
 800fcce:	4680      	mov	r8, r0
 800fcd0:	d129      	bne.n	800fd26 <_printf_float+0x172>
 800fcd2:	1cc8      	adds	r0, r1, #3
 800fcd4:	db02      	blt.n	800fcdc <_printf_float+0x128>
 800fcd6:	6863      	ldr	r3, [r4, #4]
 800fcd8:	4299      	cmp	r1, r3
 800fcda:	dd41      	ble.n	800fd60 <_printf_float+0x1ac>
 800fcdc:	f1aa 0a02 	sub.w	sl, sl, #2
 800fce0:	fa5f fa8a 	uxtb.w	sl, sl
 800fce4:	3901      	subs	r1, #1
 800fce6:	4652      	mov	r2, sl
 800fce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fcec:	9109      	str	r1, [sp, #36]	@ 0x24
 800fcee:	f7ff ff26 	bl	800fb3e <__exponent>
 800fcf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcf4:	1813      	adds	r3, r2, r0
 800fcf6:	2a01      	cmp	r2, #1
 800fcf8:	4681      	mov	r9, r0
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	dc02      	bgt.n	800fd04 <_printf_float+0x150>
 800fcfe:	6822      	ldr	r2, [r4, #0]
 800fd00:	07d2      	lsls	r2, r2, #31
 800fd02:	d501      	bpl.n	800fd08 <_printf_float+0x154>
 800fd04:	3301      	adds	r3, #1
 800fd06:	6123      	str	r3, [r4, #16]
 800fd08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d0a2      	beq.n	800fc56 <_printf_float+0xa2>
 800fd10:	232d      	movs	r3, #45	@ 0x2d
 800fd12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd16:	e79e      	b.n	800fc56 <_printf_float+0xa2>
 800fd18:	9a06      	ldr	r2, [sp, #24]
 800fd1a:	2a47      	cmp	r2, #71	@ 0x47
 800fd1c:	d1c2      	bne.n	800fca4 <_printf_float+0xf0>
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1c0      	bne.n	800fca4 <_printf_float+0xf0>
 800fd22:	2301      	movs	r3, #1
 800fd24:	e7bd      	b.n	800fca2 <_printf_float+0xee>
 800fd26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd2a:	d9db      	bls.n	800fce4 <_printf_float+0x130>
 800fd2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fd30:	d118      	bne.n	800fd64 <_printf_float+0x1b0>
 800fd32:	2900      	cmp	r1, #0
 800fd34:	6863      	ldr	r3, [r4, #4]
 800fd36:	dd0b      	ble.n	800fd50 <_printf_float+0x19c>
 800fd38:	6121      	str	r1, [r4, #16]
 800fd3a:	b913      	cbnz	r3, 800fd42 <_printf_float+0x18e>
 800fd3c:	6822      	ldr	r2, [r4, #0]
 800fd3e:	07d0      	lsls	r0, r2, #31
 800fd40:	d502      	bpl.n	800fd48 <_printf_float+0x194>
 800fd42:	3301      	adds	r3, #1
 800fd44:	440b      	add	r3, r1
 800fd46:	6123      	str	r3, [r4, #16]
 800fd48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd4a:	f04f 0900 	mov.w	r9, #0
 800fd4e:	e7db      	b.n	800fd08 <_printf_float+0x154>
 800fd50:	b913      	cbnz	r3, 800fd58 <_printf_float+0x1a4>
 800fd52:	6822      	ldr	r2, [r4, #0]
 800fd54:	07d2      	lsls	r2, r2, #31
 800fd56:	d501      	bpl.n	800fd5c <_printf_float+0x1a8>
 800fd58:	3302      	adds	r3, #2
 800fd5a:	e7f4      	b.n	800fd46 <_printf_float+0x192>
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e7f2      	b.n	800fd46 <_printf_float+0x192>
 800fd60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd66:	4299      	cmp	r1, r3
 800fd68:	db05      	blt.n	800fd76 <_printf_float+0x1c2>
 800fd6a:	6823      	ldr	r3, [r4, #0]
 800fd6c:	6121      	str	r1, [r4, #16]
 800fd6e:	07d8      	lsls	r0, r3, #31
 800fd70:	d5ea      	bpl.n	800fd48 <_printf_float+0x194>
 800fd72:	1c4b      	adds	r3, r1, #1
 800fd74:	e7e7      	b.n	800fd46 <_printf_float+0x192>
 800fd76:	2900      	cmp	r1, #0
 800fd78:	bfd4      	ite	le
 800fd7a:	f1c1 0202 	rsble	r2, r1, #2
 800fd7e:	2201      	movgt	r2, #1
 800fd80:	4413      	add	r3, r2
 800fd82:	e7e0      	b.n	800fd46 <_printf_float+0x192>
 800fd84:	6823      	ldr	r3, [r4, #0]
 800fd86:	055a      	lsls	r2, r3, #21
 800fd88:	d407      	bmi.n	800fd9a <_printf_float+0x1e6>
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	4642      	mov	r2, r8
 800fd8e:	4631      	mov	r1, r6
 800fd90:	4628      	mov	r0, r5
 800fd92:	47b8      	blx	r7
 800fd94:	3001      	adds	r0, #1
 800fd96:	d12b      	bne.n	800fdf0 <_printf_float+0x23c>
 800fd98:	e767      	b.n	800fc6a <_printf_float+0xb6>
 800fd9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd9e:	f240 80dd 	bls.w	800ff5c <_printf_float+0x3a8>
 800fda2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fda6:	2200      	movs	r2, #0
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f7f0 fead 	bl	8000b08 <__aeabi_dcmpeq>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d033      	beq.n	800fe1a <_printf_float+0x266>
 800fdb2:	4a37      	ldr	r2, [pc, #220]	@ (800fe90 <_printf_float+0x2dc>)
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	4631      	mov	r1, r6
 800fdb8:	4628      	mov	r0, r5
 800fdba:	47b8      	blx	r7
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	f43f af54 	beq.w	800fc6a <_printf_float+0xb6>
 800fdc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fdc6:	4543      	cmp	r3, r8
 800fdc8:	db02      	blt.n	800fdd0 <_printf_float+0x21c>
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	07d8      	lsls	r0, r3, #31
 800fdce:	d50f      	bpl.n	800fdf0 <_printf_float+0x23c>
 800fdd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	47b8      	blx	r7
 800fdda:	3001      	adds	r0, #1
 800fddc:	f43f af45 	beq.w	800fc6a <_printf_float+0xb6>
 800fde0:	f04f 0900 	mov.w	r9, #0
 800fde4:	f108 38ff 	add.w	r8, r8, #4294967295
 800fde8:	f104 0a1a 	add.w	sl, r4, #26
 800fdec:	45c8      	cmp	r8, r9
 800fdee:	dc09      	bgt.n	800fe04 <_printf_float+0x250>
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	079b      	lsls	r3, r3, #30
 800fdf4:	f100 8103 	bmi.w	800fffe <_printf_float+0x44a>
 800fdf8:	68e0      	ldr	r0, [r4, #12]
 800fdfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdfc:	4298      	cmp	r0, r3
 800fdfe:	bfb8      	it	lt
 800fe00:	4618      	movlt	r0, r3
 800fe02:	e734      	b.n	800fc6e <_printf_float+0xba>
 800fe04:	2301      	movs	r3, #1
 800fe06:	4652      	mov	r2, sl
 800fe08:	4631      	mov	r1, r6
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	47b8      	blx	r7
 800fe0e:	3001      	adds	r0, #1
 800fe10:	f43f af2b 	beq.w	800fc6a <_printf_float+0xb6>
 800fe14:	f109 0901 	add.w	r9, r9, #1
 800fe18:	e7e8      	b.n	800fdec <_printf_float+0x238>
 800fe1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dc39      	bgt.n	800fe94 <_printf_float+0x2e0>
 800fe20:	4a1b      	ldr	r2, [pc, #108]	@ (800fe90 <_printf_float+0x2dc>)
 800fe22:	2301      	movs	r3, #1
 800fe24:	4631      	mov	r1, r6
 800fe26:	4628      	mov	r0, r5
 800fe28:	47b8      	blx	r7
 800fe2a:	3001      	adds	r0, #1
 800fe2c:	f43f af1d 	beq.w	800fc6a <_printf_float+0xb6>
 800fe30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fe34:	ea59 0303 	orrs.w	r3, r9, r3
 800fe38:	d102      	bne.n	800fe40 <_printf_float+0x28c>
 800fe3a:	6823      	ldr	r3, [r4, #0]
 800fe3c:	07d9      	lsls	r1, r3, #31
 800fe3e:	d5d7      	bpl.n	800fdf0 <_printf_float+0x23c>
 800fe40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe44:	4631      	mov	r1, r6
 800fe46:	4628      	mov	r0, r5
 800fe48:	47b8      	blx	r7
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	f43f af0d 	beq.w	800fc6a <_printf_float+0xb6>
 800fe50:	f04f 0a00 	mov.w	sl, #0
 800fe54:	f104 0b1a 	add.w	fp, r4, #26
 800fe58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe5a:	425b      	negs	r3, r3
 800fe5c:	4553      	cmp	r3, sl
 800fe5e:	dc01      	bgt.n	800fe64 <_printf_float+0x2b0>
 800fe60:	464b      	mov	r3, r9
 800fe62:	e793      	b.n	800fd8c <_printf_float+0x1d8>
 800fe64:	2301      	movs	r3, #1
 800fe66:	465a      	mov	r2, fp
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	47b8      	blx	r7
 800fe6e:	3001      	adds	r0, #1
 800fe70:	f43f aefb 	beq.w	800fc6a <_printf_float+0xb6>
 800fe74:	f10a 0a01 	add.w	sl, sl, #1
 800fe78:	e7ee      	b.n	800fe58 <_printf_float+0x2a4>
 800fe7a:	bf00      	nop
 800fe7c:	7fefffff 	.word	0x7fefffff
 800fe80:	080167f0 	.word	0x080167f0
 800fe84:	080167ec 	.word	0x080167ec
 800fe88:	080167f8 	.word	0x080167f8
 800fe8c:	080167f4 	.word	0x080167f4
 800fe90:	08016932 	.word	0x08016932
 800fe94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe9a:	4553      	cmp	r3, sl
 800fe9c:	bfa8      	it	ge
 800fe9e:	4653      	movge	r3, sl
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	4699      	mov	r9, r3
 800fea4:	dc36      	bgt.n	800ff14 <_printf_float+0x360>
 800fea6:	f04f 0b00 	mov.w	fp, #0
 800feaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800feae:	f104 021a 	add.w	r2, r4, #26
 800feb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800feb4:	9306      	str	r3, [sp, #24]
 800feb6:	eba3 0309 	sub.w	r3, r3, r9
 800feba:	455b      	cmp	r3, fp
 800febc:	dc31      	bgt.n	800ff22 <_printf_float+0x36e>
 800febe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec0:	459a      	cmp	sl, r3
 800fec2:	dc3a      	bgt.n	800ff3a <_printf_float+0x386>
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	07da      	lsls	r2, r3, #31
 800fec8:	d437      	bmi.n	800ff3a <_printf_float+0x386>
 800feca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fecc:	ebaa 0903 	sub.w	r9, sl, r3
 800fed0:	9b06      	ldr	r3, [sp, #24]
 800fed2:	ebaa 0303 	sub.w	r3, sl, r3
 800fed6:	4599      	cmp	r9, r3
 800fed8:	bfa8      	it	ge
 800feda:	4699      	movge	r9, r3
 800fedc:	f1b9 0f00 	cmp.w	r9, #0
 800fee0:	dc33      	bgt.n	800ff4a <_printf_float+0x396>
 800fee2:	f04f 0800 	mov.w	r8, #0
 800fee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800feea:	f104 0b1a 	add.w	fp, r4, #26
 800feee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fef0:	ebaa 0303 	sub.w	r3, sl, r3
 800fef4:	eba3 0309 	sub.w	r3, r3, r9
 800fef8:	4543      	cmp	r3, r8
 800fefa:	f77f af79 	ble.w	800fdf0 <_printf_float+0x23c>
 800fefe:	2301      	movs	r3, #1
 800ff00:	465a      	mov	r2, fp
 800ff02:	4631      	mov	r1, r6
 800ff04:	4628      	mov	r0, r5
 800ff06:	47b8      	blx	r7
 800ff08:	3001      	adds	r0, #1
 800ff0a:	f43f aeae 	beq.w	800fc6a <_printf_float+0xb6>
 800ff0e:	f108 0801 	add.w	r8, r8, #1
 800ff12:	e7ec      	b.n	800feee <_printf_float+0x33a>
 800ff14:	4642      	mov	r2, r8
 800ff16:	4631      	mov	r1, r6
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b8      	blx	r7
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	d1c2      	bne.n	800fea6 <_printf_float+0x2f2>
 800ff20:	e6a3      	b.n	800fc6a <_printf_float+0xb6>
 800ff22:	2301      	movs	r3, #1
 800ff24:	4631      	mov	r1, r6
 800ff26:	4628      	mov	r0, r5
 800ff28:	9206      	str	r2, [sp, #24]
 800ff2a:	47b8      	blx	r7
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	f43f ae9c 	beq.w	800fc6a <_printf_float+0xb6>
 800ff32:	9a06      	ldr	r2, [sp, #24]
 800ff34:	f10b 0b01 	add.w	fp, fp, #1
 800ff38:	e7bb      	b.n	800feb2 <_printf_float+0x2fe>
 800ff3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff3e:	4631      	mov	r1, r6
 800ff40:	4628      	mov	r0, r5
 800ff42:	47b8      	blx	r7
 800ff44:	3001      	adds	r0, #1
 800ff46:	d1c0      	bne.n	800feca <_printf_float+0x316>
 800ff48:	e68f      	b.n	800fc6a <_printf_float+0xb6>
 800ff4a:	9a06      	ldr	r2, [sp, #24]
 800ff4c:	464b      	mov	r3, r9
 800ff4e:	4442      	add	r2, r8
 800ff50:	4631      	mov	r1, r6
 800ff52:	4628      	mov	r0, r5
 800ff54:	47b8      	blx	r7
 800ff56:	3001      	adds	r0, #1
 800ff58:	d1c3      	bne.n	800fee2 <_printf_float+0x32e>
 800ff5a:	e686      	b.n	800fc6a <_printf_float+0xb6>
 800ff5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ff60:	f1ba 0f01 	cmp.w	sl, #1
 800ff64:	dc01      	bgt.n	800ff6a <_printf_float+0x3b6>
 800ff66:	07db      	lsls	r3, r3, #31
 800ff68:	d536      	bpl.n	800ffd8 <_printf_float+0x424>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	4642      	mov	r2, r8
 800ff6e:	4631      	mov	r1, r6
 800ff70:	4628      	mov	r0, r5
 800ff72:	47b8      	blx	r7
 800ff74:	3001      	adds	r0, #1
 800ff76:	f43f ae78 	beq.w	800fc6a <_printf_float+0xb6>
 800ff7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff7e:	4631      	mov	r1, r6
 800ff80:	4628      	mov	r0, r5
 800ff82:	47b8      	blx	r7
 800ff84:	3001      	adds	r0, #1
 800ff86:	f43f ae70 	beq.w	800fc6a <_printf_float+0xb6>
 800ff8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff8e:	2200      	movs	r2, #0
 800ff90:	2300      	movs	r3, #0
 800ff92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff96:	f7f0 fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 800ff9a:	b9c0      	cbnz	r0, 800ffce <_printf_float+0x41a>
 800ff9c:	4653      	mov	r3, sl
 800ff9e:	f108 0201 	add.w	r2, r8, #1
 800ffa2:	4631      	mov	r1, r6
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	47b8      	blx	r7
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	d10c      	bne.n	800ffc6 <_printf_float+0x412>
 800ffac:	e65d      	b.n	800fc6a <_printf_float+0xb6>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	465a      	mov	r2, fp
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	47b8      	blx	r7
 800ffb8:	3001      	adds	r0, #1
 800ffba:	f43f ae56 	beq.w	800fc6a <_printf_float+0xb6>
 800ffbe:	f108 0801 	add.w	r8, r8, #1
 800ffc2:	45d0      	cmp	r8, sl
 800ffc4:	dbf3      	blt.n	800ffae <_printf_float+0x3fa>
 800ffc6:	464b      	mov	r3, r9
 800ffc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ffcc:	e6df      	b.n	800fd8e <_printf_float+0x1da>
 800ffce:	f04f 0800 	mov.w	r8, #0
 800ffd2:	f104 0b1a 	add.w	fp, r4, #26
 800ffd6:	e7f4      	b.n	800ffc2 <_printf_float+0x40e>
 800ffd8:	2301      	movs	r3, #1
 800ffda:	4642      	mov	r2, r8
 800ffdc:	e7e1      	b.n	800ffa2 <_printf_float+0x3ee>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	464a      	mov	r2, r9
 800ffe2:	4631      	mov	r1, r6
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	47b8      	blx	r7
 800ffe8:	3001      	adds	r0, #1
 800ffea:	f43f ae3e 	beq.w	800fc6a <_printf_float+0xb6>
 800ffee:	f108 0801 	add.w	r8, r8, #1
 800fff2:	68e3      	ldr	r3, [r4, #12]
 800fff4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fff6:	1a5b      	subs	r3, r3, r1
 800fff8:	4543      	cmp	r3, r8
 800fffa:	dcf0      	bgt.n	800ffde <_printf_float+0x42a>
 800fffc:	e6fc      	b.n	800fdf8 <_printf_float+0x244>
 800fffe:	f04f 0800 	mov.w	r8, #0
 8010002:	f104 0919 	add.w	r9, r4, #25
 8010006:	e7f4      	b.n	800fff2 <_printf_float+0x43e>

08010008 <__sfputc_r>:
 8010008:	6893      	ldr	r3, [r2, #8]
 801000a:	3b01      	subs	r3, #1
 801000c:	2b00      	cmp	r3, #0
 801000e:	b410      	push	{r4}
 8010010:	6093      	str	r3, [r2, #8]
 8010012:	da08      	bge.n	8010026 <__sfputc_r+0x1e>
 8010014:	6994      	ldr	r4, [r2, #24]
 8010016:	42a3      	cmp	r3, r4
 8010018:	db01      	blt.n	801001e <__sfputc_r+0x16>
 801001a:	290a      	cmp	r1, #10
 801001c:	d103      	bne.n	8010026 <__sfputc_r+0x1e>
 801001e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010022:	f000 bf86 	b.w	8010f32 <__swbuf_r>
 8010026:	6813      	ldr	r3, [r2, #0]
 8010028:	1c58      	adds	r0, r3, #1
 801002a:	6010      	str	r0, [r2, #0]
 801002c:	7019      	strb	r1, [r3, #0]
 801002e:	4608      	mov	r0, r1
 8010030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010034:	4770      	bx	lr

08010036 <__sfputs_r>:
 8010036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010038:	4606      	mov	r6, r0
 801003a:	460f      	mov	r7, r1
 801003c:	4614      	mov	r4, r2
 801003e:	18d5      	adds	r5, r2, r3
 8010040:	42ac      	cmp	r4, r5
 8010042:	d101      	bne.n	8010048 <__sfputs_r+0x12>
 8010044:	2000      	movs	r0, #0
 8010046:	e007      	b.n	8010058 <__sfputs_r+0x22>
 8010048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004c:	463a      	mov	r2, r7
 801004e:	4630      	mov	r0, r6
 8010050:	f7ff ffda 	bl	8010008 <__sfputc_r>
 8010054:	1c43      	adds	r3, r0, #1
 8010056:	d1f3      	bne.n	8010040 <__sfputs_r+0xa>
 8010058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801005c <_vfiprintf_r>:
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	460d      	mov	r5, r1
 8010062:	b09d      	sub	sp, #116	@ 0x74
 8010064:	4614      	mov	r4, r2
 8010066:	4698      	mov	r8, r3
 8010068:	4606      	mov	r6, r0
 801006a:	b118      	cbz	r0, 8010074 <_vfiprintf_r+0x18>
 801006c:	6a03      	ldr	r3, [r0, #32]
 801006e:	b90b      	cbnz	r3, 8010074 <_vfiprintf_r+0x18>
 8010070:	f000 fdde 	bl	8010c30 <__sinit>
 8010074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010076:	07d9      	lsls	r1, r3, #31
 8010078:	d405      	bmi.n	8010086 <_vfiprintf_r+0x2a>
 801007a:	89ab      	ldrh	r3, [r5, #12]
 801007c:	059a      	lsls	r2, r3, #22
 801007e:	d402      	bmi.n	8010086 <_vfiprintf_r+0x2a>
 8010080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010082:	f001 f8fc 	bl	801127e <__retarget_lock_acquire_recursive>
 8010086:	89ab      	ldrh	r3, [r5, #12]
 8010088:	071b      	lsls	r3, r3, #28
 801008a:	d501      	bpl.n	8010090 <_vfiprintf_r+0x34>
 801008c:	692b      	ldr	r3, [r5, #16]
 801008e:	b99b      	cbnz	r3, 80100b8 <_vfiprintf_r+0x5c>
 8010090:	4629      	mov	r1, r5
 8010092:	4630      	mov	r0, r6
 8010094:	f000 ff8c 	bl	8010fb0 <__swsetup_r>
 8010098:	b170      	cbz	r0, 80100b8 <_vfiprintf_r+0x5c>
 801009a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801009c:	07dc      	lsls	r4, r3, #31
 801009e:	d504      	bpl.n	80100aa <_vfiprintf_r+0x4e>
 80100a0:	f04f 30ff 	mov.w	r0, #4294967295
 80100a4:	b01d      	add	sp, #116	@ 0x74
 80100a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100aa:	89ab      	ldrh	r3, [r5, #12]
 80100ac:	0598      	lsls	r0, r3, #22
 80100ae:	d4f7      	bmi.n	80100a0 <_vfiprintf_r+0x44>
 80100b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100b2:	f001 f8e5 	bl	8011280 <__retarget_lock_release_recursive>
 80100b6:	e7f3      	b.n	80100a0 <_vfiprintf_r+0x44>
 80100b8:	2300      	movs	r3, #0
 80100ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80100bc:	2320      	movs	r3, #32
 80100be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80100c6:	2330      	movs	r3, #48	@ 0x30
 80100c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010278 <_vfiprintf_r+0x21c>
 80100cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100d0:	f04f 0901 	mov.w	r9, #1
 80100d4:	4623      	mov	r3, r4
 80100d6:	469a      	mov	sl, r3
 80100d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100dc:	b10a      	cbz	r2, 80100e2 <_vfiprintf_r+0x86>
 80100de:	2a25      	cmp	r2, #37	@ 0x25
 80100e0:	d1f9      	bne.n	80100d6 <_vfiprintf_r+0x7a>
 80100e2:	ebba 0b04 	subs.w	fp, sl, r4
 80100e6:	d00b      	beq.n	8010100 <_vfiprintf_r+0xa4>
 80100e8:	465b      	mov	r3, fp
 80100ea:	4622      	mov	r2, r4
 80100ec:	4629      	mov	r1, r5
 80100ee:	4630      	mov	r0, r6
 80100f0:	f7ff ffa1 	bl	8010036 <__sfputs_r>
 80100f4:	3001      	adds	r0, #1
 80100f6:	f000 80a7 	beq.w	8010248 <_vfiprintf_r+0x1ec>
 80100fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100fc:	445a      	add	r2, fp
 80100fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8010100:	f89a 3000 	ldrb.w	r3, [sl]
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 809f 	beq.w	8010248 <_vfiprintf_r+0x1ec>
 801010a:	2300      	movs	r3, #0
 801010c:	f04f 32ff 	mov.w	r2, #4294967295
 8010110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010114:	f10a 0a01 	add.w	sl, sl, #1
 8010118:	9304      	str	r3, [sp, #16]
 801011a:	9307      	str	r3, [sp, #28]
 801011c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010120:	931a      	str	r3, [sp, #104]	@ 0x68
 8010122:	4654      	mov	r4, sl
 8010124:	2205      	movs	r2, #5
 8010126:	f814 1b01 	ldrb.w	r1, [r4], #1
 801012a:	4853      	ldr	r0, [pc, #332]	@ (8010278 <_vfiprintf_r+0x21c>)
 801012c:	f7f0 f870 	bl	8000210 <memchr>
 8010130:	9a04      	ldr	r2, [sp, #16]
 8010132:	b9d8      	cbnz	r0, 801016c <_vfiprintf_r+0x110>
 8010134:	06d1      	lsls	r1, r2, #27
 8010136:	bf44      	itt	mi
 8010138:	2320      	movmi	r3, #32
 801013a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801013e:	0713      	lsls	r3, r2, #28
 8010140:	bf44      	itt	mi
 8010142:	232b      	movmi	r3, #43	@ 0x2b
 8010144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010148:	f89a 3000 	ldrb.w	r3, [sl]
 801014c:	2b2a      	cmp	r3, #42	@ 0x2a
 801014e:	d015      	beq.n	801017c <_vfiprintf_r+0x120>
 8010150:	9a07      	ldr	r2, [sp, #28]
 8010152:	4654      	mov	r4, sl
 8010154:	2000      	movs	r0, #0
 8010156:	f04f 0c0a 	mov.w	ip, #10
 801015a:	4621      	mov	r1, r4
 801015c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010160:	3b30      	subs	r3, #48	@ 0x30
 8010162:	2b09      	cmp	r3, #9
 8010164:	d94b      	bls.n	80101fe <_vfiprintf_r+0x1a2>
 8010166:	b1b0      	cbz	r0, 8010196 <_vfiprintf_r+0x13a>
 8010168:	9207      	str	r2, [sp, #28]
 801016a:	e014      	b.n	8010196 <_vfiprintf_r+0x13a>
 801016c:	eba0 0308 	sub.w	r3, r0, r8
 8010170:	fa09 f303 	lsl.w	r3, r9, r3
 8010174:	4313      	orrs	r3, r2
 8010176:	9304      	str	r3, [sp, #16]
 8010178:	46a2      	mov	sl, r4
 801017a:	e7d2      	b.n	8010122 <_vfiprintf_r+0xc6>
 801017c:	9b03      	ldr	r3, [sp, #12]
 801017e:	1d19      	adds	r1, r3, #4
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	9103      	str	r1, [sp, #12]
 8010184:	2b00      	cmp	r3, #0
 8010186:	bfbb      	ittet	lt
 8010188:	425b      	neglt	r3, r3
 801018a:	f042 0202 	orrlt.w	r2, r2, #2
 801018e:	9307      	strge	r3, [sp, #28]
 8010190:	9307      	strlt	r3, [sp, #28]
 8010192:	bfb8      	it	lt
 8010194:	9204      	strlt	r2, [sp, #16]
 8010196:	7823      	ldrb	r3, [r4, #0]
 8010198:	2b2e      	cmp	r3, #46	@ 0x2e
 801019a:	d10a      	bne.n	80101b2 <_vfiprintf_r+0x156>
 801019c:	7863      	ldrb	r3, [r4, #1]
 801019e:	2b2a      	cmp	r3, #42	@ 0x2a
 80101a0:	d132      	bne.n	8010208 <_vfiprintf_r+0x1ac>
 80101a2:	9b03      	ldr	r3, [sp, #12]
 80101a4:	1d1a      	adds	r2, r3, #4
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	9203      	str	r2, [sp, #12]
 80101aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101ae:	3402      	adds	r4, #2
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010288 <_vfiprintf_r+0x22c>
 80101b6:	7821      	ldrb	r1, [r4, #0]
 80101b8:	2203      	movs	r2, #3
 80101ba:	4650      	mov	r0, sl
 80101bc:	f7f0 f828 	bl	8000210 <memchr>
 80101c0:	b138      	cbz	r0, 80101d2 <_vfiprintf_r+0x176>
 80101c2:	9b04      	ldr	r3, [sp, #16]
 80101c4:	eba0 000a 	sub.w	r0, r0, sl
 80101c8:	2240      	movs	r2, #64	@ 0x40
 80101ca:	4082      	lsls	r2, r0
 80101cc:	4313      	orrs	r3, r2
 80101ce:	3401      	adds	r4, #1
 80101d0:	9304      	str	r3, [sp, #16]
 80101d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d6:	4829      	ldr	r0, [pc, #164]	@ (801027c <_vfiprintf_r+0x220>)
 80101d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101dc:	2206      	movs	r2, #6
 80101de:	f7f0 f817 	bl	8000210 <memchr>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d03f      	beq.n	8010266 <_vfiprintf_r+0x20a>
 80101e6:	4b26      	ldr	r3, [pc, #152]	@ (8010280 <_vfiprintf_r+0x224>)
 80101e8:	bb1b      	cbnz	r3, 8010232 <_vfiprintf_r+0x1d6>
 80101ea:	9b03      	ldr	r3, [sp, #12]
 80101ec:	3307      	adds	r3, #7
 80101ee:	f023 0307 	bic.w	r3, r3, #7
 80101f2:	3308      	adds	r3, #8
 80101f4:	9303      	str	r3, [sp, #12]
 80101f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101f8:	443b      	add	r3, r7
 80101fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80101fc:	e76a      	b.n	80100d4 <_vfiprintf_r+0x78>
 80101fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010202:	460c      	mov	r4, r1
 8010204:	2001      	movs	r0, #1
 8010206:	e7a8      	b.n	801015a <_vfiprintf_r+0xfe>
 8010208:	2300      	movs	r3, #0
 801020a:	3401      	adds	r4, #1
 801020c:	9305      	str	r3, [sp, #20]
 801020e:	4619      	mov	r1, r3
 8010210:	f04f 0c0a 	mov.w	ip, #10
 8010214:	4620      	mov	r0, r4
 8010216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801021a:	3a30      	subs	r2, #48	@ 0x30
 801021c:	2a09      	cmp	r2, #9
 801021e:	d903      	bls.n	8010228 <_vfiprintf_r+0x1cc>
 8010220:	2b00      	cmp	r3, #0
 8010222:	d0c6      	beq.n	80101b2 <_vfiprintf_r+0x156>
 8010224:	9105      	str	r1, [sp, #20]
 8010226:	e7c4      	b.n	80101b2 <_vfiprintf_r+0x156>
 8010228:	fb0c 2101 	mla	r1, ip, r1, r2
 801022c:	4604      	mov	r4, r0
 801022e:	2301      	movs	r3, #1
 8010230:	e7f0      	b.n	8010214 <_vfiprintf_r+0x1b8>
 8010232:	ab03      	add	r3, sp, #12
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	462a      	mov	r2, r5
 8010238:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <_vfiprintf_r+0x228>)
 801023a:	a904      	add	r1, sp, #16
 801023c:	4630      	mov	r0, r6
 801023e:	f7ff fcb9 	bl	800fbb4 <_printf_float>
 8010242:	4607      	mov	r7, r0
 8010244:	1c78      	adds	r0, r7, #1
 8010246:	d1d6      	bne.n	80101f6 <_vfiprintf_r+0x19a>
 8010248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801024a:	07d9      	lsls	r1, r3, #31
 801024c:	d405      	bmi.n	801025a <_vfiprintf_r+0x1fe>
 801024e:	89ab      	ldrh	r3, [r5, #12]
 8010250:	059a      	lsls	r2, r3, #22
 8010252:	d402      	bmi.n	801025a <_vfiprintf_r+0x1fe>
 8010254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010256:	f001 f813 	bl	8011280 <__retarget_lock_release_recursive>
 801025a:	89ab      	ldrh	r3, [r5, #12]
 801025c:	065b      	lsls	r3, r3, #25
 801025e:	f53f af1f 	bmi.w	80100a0 <_vfiprintf_r+0x44>
 8010262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010264:	e71e      	b.n	80100a4 <_vfiprintf_r+0x48>
 8010266:	ab03      	add	r3, sp, #12
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	462a      	mov	r2, r5
 801026c:	4b05      	ldr	r3, [pc, #20]	@ (8010284 <_vfiprintf_r+0x228>)
 801026e:	a904      	add	r1, sp, #16
 8010270:	4630      	mov	r0, r6
 8010272:	f000 f879 	bl	8010368 <_printf_i>
 8010276:	e7e4      	b.n	8010242 <_vfiprintf_r+0x1e6>
 8010278:	080167fc 	.word	0x080167fc
 801027c:	08016806 	.word	0x08016806
 8010280:	0800fbb5 	.word	0x0800fbb5
 8010284:	08010037 	.word	0x08010037
 8010288:	08016802 	.word	0x08016802

0801028c <_printf_common>:
 801028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010290:	4616      	mov	r6, r2
 8010292:	4698      	mov	r8, r3
 8010294:	688a      	ldr	r2, [r1, #8]
 8010296:	690b      	ldr	r3, [r1, #16]
 8010298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801029c:	4293      	cmp	r3, r2
 801029e:	bfb8      	it	lt
 80102a0:	4613      	movlt	r3, r2
 80102a2:	6033      	str	r3, [r6, #0]
 80102a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80102a8:	4607      	mov	r7, r0
 80102aa:	460c      	mov	r4, r1
 80102ac:	b10a      	cbz	r2, 80102b2 <_printf_common+0x26>
 80102ae:	3301      	adds	r3, #1
 80102b0:	6033      	str	r3, [r6, #0]
 80102b2:	6823      	ldr	r3, [r4, #0]
 80102b4:	0699      	lsls	r1, r3, #26
 80102b6:	bf42      	ittt	mi
 80102b8:	6833      	ldrmi	r3, [r6, #0]
 80102ba:	3302      	addmi	r3, #2
 80102bc:	6033      	strmi	r3, [r6, #0]
 80102be:	6825      	ldr	r5, [r4, #0]
 80102c0:	f015 0506 	ands.w	r5, r5, #6
 80102c4:	d106      	bne.n	80102d4 <_printf_common+0x48>
 80102c6:	f104 0a19 	add.w	sl, r4, #25
 80102ca:	68e3      	ldr	r3, [r4, #12]
 80102cc:	6832      	ldr	r2, [r6, #0]
 80102ce:	1a9b      	subs	r3, r3, r2
 80102d0:	42ab      	cmp	r3, r5
 80102d2:	dc26      	bgt.n	8010322 <_printf_common+0x96>
 80102d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102d8:	6822      	ldr	r2, [r4, #0]
 80102da:	3b00      	subs	r3, #0
 80102dc:	bf18      	it	ne
 80102de:	2301      	movne	r3, #1
 80102e0:	0692      	lsls	r2, r2, #26
 80102e2:	d42b      	bmi.n	801033c <_printf_common+0xb0>
 80102e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102e8:	4641      	mov	r1, r8
 80102ea:	4638      	mov	r0, r7
 80102ec:	47c8      	blx	r9
 80102ee:	3001      	adds	r0, #1
 80102f0:	d01e      	beq.n	8010330 <_printf_common+0xa4>
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	6922      	ldr	r2, [r4, #16]
 80102f6:	f003 0306 	and.w	r3, r3, #6
 80102fa:	2b04      	cmp	r3, #4
 80102fc:	bf02      	ittt	eq
 80102fe:	68e5      	ldreq	r5, [r4, #12]
 8010300:	6833      	ldreq	r3, [r6, #0]
 8010302:	1aed      	subeq	r5, r5, r3
 8010304:	68a3      	ldr	r3, [r4, #8]
 8010306:	bf0c      	ite	eq
 8010308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801030c:	2500      	movne	r5, #0
 801030e:	4293      	cmp	r3, r2
 8010310:	bfc4      	itt	gt
 8010312:	1a9b      	subgt	r3, r3, r2
 8010314:	18ed      	addgt	r5, r5, r3
 8010316:	2600      	movs	r6, #0
 8010318:	341a      	adds	r4, #26
 801031a:	42b5      	cmp	r5, r6
 801031c:	d11a      	bne.n	8010354 <_printf_common+0xc8>
 801031e:	2000      	movs	r0, #0
 8010320:	e008      	b.n	8010334 <_printf_common+0xa8>
 8010322:	2301      	movs	r3, #1
 8010324:	4652      	mov	r2, sl
 8010326:	4641      	mov	r1, r8
 8010328:	4638      	mov	r0, r7
 801032a:	47c8      	blx	r9
 801032c:	3001      	adds	r0, #1
 801032e:	d103      	bne.n	8010338 <_printf_common+0xac>
 8010330:	f04f 30ff 	mov.w	r0, #4294967295
 8010334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010338:	3501      	adds	r5, #1
 801033a:	e7c6      	b.n	80102ca <_printf_common+0x3e>
 801033c:	18e1      	adds	r1, r4, r3
 801033e:	1c5a      	adds	r2, r3, #1
 8010340:	2030      	movs	r0, #48	@ 0x30
 8010342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010346:	4422      	add	r2, r4
 8010348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801034c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010350:	3302      	adds	r3, #2
 8010352:	e7c7      	b.n	80102e4 <_printf_common+0x58>
 8010354:	2301      	movs	r3, #1
 8010356:	4622      	mov	r2, r4
 8010358:	4641      	mov	r1, r8
 801035a:	4638      	mov	r0, r7
 801035c:	47c8      	blx	r9
 801035e:	3001      	adds	r0, #1
 8010360:	d0e6      	beq.n	8010330 <_printf_common+0xa4>
 8010362:	3601      	adds	r6, #1
 8010364:	e7d9      	b.n	801031a <_printf_common+0x8e>
	...

08010368 <_printf_i>:
 8010368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801036c:	7e0f      	ldrb	r7, [r1, #24]
 801036e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010370:	2f78      	cmp	r7, #120	@ 0x78
 8010372:	4691      	mov	r9, r2
 8010374:	4680      	mov	r8, r0
 8010376:	460c      	mov	r4, r1
 8010378:	469a      	mov	sl, r3
 801037a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801037e:	d807      	bhi.n	8010390 <_printf_i+0x28>
 8010380:	2f62      	cmp	r7, #98	@ 0x62
 8010382:	d80a      	bhi.n	801039a <_printf_i+0x32>
 8010384:	2f00      	cmp	r7, #0
 8010386:	f000 80d1 	beq.w	801052c <_printf_i+0x1c4>
 801038a:	2f58      	cmp	r7, #88	@ 0x58
 801038c:	f000 80b8 	beq.w	8010500 <_printf_i+0x198>
 8010390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010398:	e03a      	b.n	8010410 <_printf_i+0xa8>
 801039a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801039e:	2b15      	cmp	r3, #21
 80103a0:	d8f6      	bhi.n	8010390 <_printf_i+0x28>
 80103a2:	a101      	add	r1, pc, #4	@ (adr r1, 80103a8 <_printf_i+0x40>)
 80103a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103a8:	08010401 	.word	0x08010401
 80103ac:	08010415 	.word	0x08010415
 80103b0:	08010391 	.word	0x08010391
 80103b4:	08010391 	.word	0x08010391
 80103b8:	08010391 	.word	0x08010391
 80103bc:	08010391 	.word	0x08010391
 80103c0:	08010415 	.word	0x08010415
 80103c4:	08010391 	.word	0x08010391
 80103c8:	08010391 	.word	0x08010391
 80103cc:	08010391 	.word	0x08010391
 80103d0:	08010391 	.word	0x08010391
 80103d4:	08010513 	.word	0x08010513
 80103d8:	0801043f 	.word	0x0801043f
 80103dc:	080104cd 	.word	0x080104cd
 80103e0:	08010391 	.word	0x08010391
 80103e4:	08010391 	.word	0x08010391
 80103e8:	08010535 	.word	0x08010535
 80103ec:	08010391 	.word	0x08010391
 80103f0:	0801043f 	.word	0x0801043f
 80103f4:	08010391 	.word	0x08010391
 80103f8:	08010391 	.word	0x08010391
 80103fc:	080104d5 	.word	0x080104d5
 8010400:	6833      	ldr	r3, [r6, #0]
 8010402:	1d1a      	adds	r2, r3, #4
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6032      	str	r2, [r6, #0]
 8010408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801040c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010410:	2301      	movs	r3, #1
 8010412:	e09c      	b.n	801054e <_printf_i+0x1e6>
 8010414:	6833      	ldr	r3, [r6, #0]
 8010416:	6820      	ldr	r0, [r4, #0]
 8010418:	1d19      	adds	r1, r3, #4
 801041a:	6031      	str	r1, [r6, #0]
 801041c:	0606      	lsls	r6, r0, #24
 801041e:	d501      	bpl.n	8010424 <_printf_i+0xbc>
 8010420:	681d      	ldr	r5, [r3, #0]
 8010422:	e003      	b.n	801042c <_printf_i+0xc4>
 8010424:	0645      	lsls	r5, r0, #25
 8010426:	d5fb      	bpl.n	8010420 <_printf_i+0xb8>
 8010428:	f9b3 5000 	ldrsh.w	r5, [r3]
 801042c:	2d00      	cmp	r5, #0
 801042e:	da03      	bge.n	8010438 <_printf_i+0xd0>
 8010430:	232d      	movs	r3, #45	@ 0x2d
 8010432:	426d      	negs	r5, r5
 8010434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010438:	4858      	ldr	r0, [pc, #352]	@ (801059c <_printf_i+0x234>)
 801043a:	230a      	movs	r3, #10
 801043c:	e011      	b.n	8010462 <_printf_i+0xfa>
 801043e:	6821      	ldr	r1, [r4, #0]
 8010440:	6833      	ldr	r3, [r6, #0]
 8010442:	0608      	lsls	r0, r1, #24
 8010444:	f853 5b04 	ldr.w	r5, [r3], #4
 8010448:	d402      	bmi.n	8010450 <_printf_i+0xe8>
 801044a:	0649      	lsls	r1, r1, #25
 801044c:	bf48      	it	mi
 801044e:	b2ad      	uxthmi	r5, r5
 8010450:	2f6f      	cmp	r7, #111	@ 0x6f
 8010452:	4852      	ldr	r0, [pc, #328]	@ (801059c <_printf_i+0x234>)
 8010454:	6033      	str	r3, [r6, #0]
 8010456:	bf14      	ite	ne
 8010458:	230a      	movne	r3, #10
 801045a:	2308      	moveq	r3, #8
 801045c:	2100      	movs	r1, #0
 801045e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010462:	6866      	ldr	r6, [r4, #4]
 8010464:	60a6      	str	r6, [r4, #8]
 8010466:	2e00      	cmp	r6, #0
 8010468:	db05      	blt.n	8010476 <_printf_i+0x10e>
 801046a:	6821      	ldr	r1, [r4, #0]
 801046c:	432e      	orrs	r6, r5
 801046e:	f021 0104 	bic.w	r1, r1, #4
 8010472:	6021      	str	r1, [r4, #0]
 8010474:	d04b      	beq.n	801050e <_printf_i+0x1a6>
 8010476:	4616      	mov	r6, r2
 8010478:	fbb5 f1f3 	udiv	r1, r5, r3
 801047c:	fb03 5711 	mls	r7, r3, r1, r5
 8010480:	5dc7      	ldrb	r7, [r0, r7]
 8010482:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010486:	462f      	mov	r7, r5
 8010488:	42bb      	cmp	r3, r7
 801048a:	460d      	mov	r5, r1
 801048c:	d9f4      	bls.n	8010478 <_printf_i+0x110>
 801048e:	2b08      	cmp	r3, #8
 8010490:	d10b      	bne.n	80104aa <_printf_i+0x142>
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	07df      	lsls	r7, r3, #31
 8010496:	d508      	bpl.n	80104aa <_printf_i+0x142>
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	6861      	ldr	r1, [r4, #4]
 801049c:	4299      	cmp	r1, r3
 801049e:	bfde      	ittt	le
 80104a0:	2330      	movle	r3, #48	@ 0x30
 80104a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80104a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80104aa:	1b92      	subs	r2, r2, r6
 80104ac:	6122      	str	r2, [r4, #16]
 80104ae:	f8cd a000 	str.w	sl, [sp]
 80104b2:	464b      	mov	r3, r9
 80104b4:	aa03      	add	r2, sp, #12
 80104b6:	4621      	mov	r1, r4
 80104b8:	4640      	mov	r0, r8
 80104ba:	f7ff fee7 	bl	801028c <_printf_common>
 80104be:	3001      	adds	r0, #1
 80104c0:	d14a      	bne.n	8010558 <_printf_i+0x1f0>
 80104c2:	f04f 30ff 	mov.w	r0, #4294967295
 80104c6:	b004      	add	sp, #16
 80104c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104cc:	6823      	ldr	r3, [r4, #0]
 80104ce:	f043 0320 	orr.w	r3, r3, #32
 80104d2:	6023      	str	r3, [r4, #0]
 80104d4:	4832      	ldr	r0, [pc, #200]	@ (80105a0 <_printf_i+0x238>)
 80104d6:	2778      	movs	r7, #120	@ 0x78
 80104d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	6831      	ldr	r1, [r6, #0]
 80104e0:	061f      	lsls	r7, r3, #24
 80104e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80104e6:	d402      	bmi.n	80104ee <_printf_i+0x186>
 80104e8:	065f      	lsls	r7, r3, #25
 80104ea:	bf48      	it	mi
 80104ec:	b2ad      	uxthmi	r5, r5
 80104ee:	6031      	str	r1, [r6, #0]
 80104f0:	07d9      	lsls	r1, r3, #31
 80104f2:	bf44      	itt	mi
 80104f4:	f043 0320 	orrmi.w	r3, r3, #32
 80104f8:	6023      	strmi	r3, [r4, #0]
 80104fa:	b11d      	cbz	r5, 8010504 <_printf_i+0x19c>
 80104fc:	2310      	movs	r3, #16
 80104fe:	e7ad      	b.n	801045c <_printf_i+0xf4>
 8010500:	4826      	ldr	r0, [pc, #152]	@ (801059c <_printf_i+0x234>)
 8010502:	e7e9      	b.n	80104d8 <_printf_i+0x170>
 8010504:	6823      	ldr	r3, [r4, #0]
 8010506:	f023 0320 	bic.w	r3, r3, #32
 801050a:	6023      	str	r3, [r4, #0]
 801050c:	e7f6      	b.n	80104fc <_printf_i+0x194>
 801050e:	4616      	mov	r6, r2
 8010510:	e7bd      	b.n	801048e <_printf_i+0x126>
 8010512:	6833      	ldr	r3, [r6, #0]
 8010514:	6825      	ldr	r5, [r4, #0]
 8010516:	6961      	ldr	r1, [r4, #20]
 8010518:	1d18      	adds	r0, r3, #4
 801051a:	6030      	str	r0, [r6, #0]
 801051c:	062e      	lsls	r6, r5, #24
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	d501      	bpl.n	8010526 <_printf_i+0x1be>
 8010522:	6019      	str	r1, [r3, #0]
 8010524:	e002      	b.n	801052c <_printf_i+0x1c4>
 8010526:	0668      	lsls	r0, r5, #25
 8010528:	d5fb      	bpl.n	8010522 <_printf_i+0x1ba>
 801052a:	8019      	strh	r1, [r3, #0]
 801052c:	2300      	movs	r3, #0
 801052e:	6123      	str	r3, [r4, #16]
 8010530:	4616      	mov	r6, r2
 8010532:	e7bc      	b.n	80104ae <_printf_i+0x146>
 8010534:	6833      	ldr	r3, [r6, #0]
 8010536:	1d1a      	adds	r2, r3, #4
 8010538:	6032      	str	r2, [r6, #0]
 801053a:	681e      	ldr	r6, [r3, #0]
 801053c:	6862      	ldr	r2, [r4, #4]
 801053e:	2100      	movs	r1, #0
 8010540:	4630      	mov	r0, r6
 8010542:	f7ef fe65 	bl	8000210 <memchr>
 8010546:	b108      	cbz	r0, 801054c <_printf_i+0x1e4>
 8010548:	1b80      	subs	r0, r0, r6
 801054a:	6060      	str	r0, [r4, #4]
 801054c:	6863      	ldr	r3, [r4, #4]
 801054e:	6123      	str	r3, [r4, #16]
 8010550:	2300      	movs	r3, #0
 8010552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010556:	e7aa      	b.n	80104ae <_printf_i+0x146>
 8010558:	6923      	ldr	r3, [r4, #16]
 801055a:	4632      	mov	r2, r6
 801055c:	4649      	mov	r1, r9
 801055e:	4640      	mov	r0, r8
 8010560:	47d0      	blx	sl
 8010562:	3001      	adds	r0, #1
 8010564:	d0ad      	beq.n	80104c2 <_printf_i+0x15a>
 8010566:	6823      	ldr	r3, [r4, #0]
 8010568:	079b      	lsls	r3, r3, #30
 801056a:	d413      	bmi.n	8010594 <_printf_i+0x22c>
 801056c:	68e0      	ldr	r0, [r4, #12]
 801056e:	9b03      	ldr	r3, [sp, #12]
 8010570:	4298      	cmp	r0, r3
 8010572:	bfb8      	it	lt
 8010574:	4618      	movlt	r0, r3
 8010576:	e7a6      	b.n	80104c6 <_printf_i+0x15e>
 8010578:	2301      	movs	r3, #1
 801057a:	4632      	mov	r2, r6
 801057c:	4649      	mov	r1, r9
 801057e:	4640      	mov	r0, r8
 8010580:	47d0      	blx	sl
 8010582:	3001      	adds	r0, #1
 8010584:	d09d      	beq.n	80104c2 <_printf_i+0x15a>
 8010586:	3501      	adds	r5, #1
 8010588:	68e3      	ldr	r3, [r4, #12]
 801058a:	9903      	ldr	r1, [sp, #12]
 801058c:	1a5b      	subs	r3, r3, r1
 801058e:	42ab      	cmp	r3, r5
 8010590:	dcf2      	bgt.n	8010578 <_printf_i+0x210>
 8010592:	e7eb      	b.n	801056c <_printf_i+0x204>
 8010594:	2500      	movs	r5, #0
 8010596:	f104 0619 	add.w	r6, r4, #25
 801059a:	e7f5      	b.n	8010588 <_printf_i+0x220>
 801059c:	0801680d 	.word	0x0801680d
 80105a0:	0801681e 	.word	0x0801681e

080105a4 <_scanf_float>:
 80105a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a8:	b087      	sub	sp, #28
 80105aa:	4691      	mov	r9, r2
 80105ac:	9303      	str	r3, [sp, #12]
 80105ae:	688b      	ldr	r3, [r1, #8]
 80105b0:	1e5a      	subs	r2, r3, #1
 80105b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80105b6:	bf81      	itttt	hi
 80105b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80105bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80105c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80105c4:	608b      	strhi	r3, [r1, #8]
 80105c6:	680b      	ldr	r3, [r1, #0]
 80105c8:	460a      	mov	r2, r1
 80105ca:	f04f 0500 	mov.w	r5, #0
 80105ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80105d2:	f842 3b1c 	str.w	r3, [r2], #28
 80105d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80105da:	4680      	mov	r8, r0
 80105dc:	460c      	mov	r4, r1
 80105de:	bf98      	it	ls
 80105e0:	f04f 0b00 	movls.w	fp, #0
 80105e4:	9201      	str	r2, [sp, #4]
 80105e6:	4616      	mov	r6, r2
 80105e8:	46aa      	mov	sl, r5
 80105ea:	462f      	mov	r7, r5
 80105ec:	9502      	str	r5, [sp, #8]
 80105ee:	68a2      	ldr	r2, [r4, #8]
 80105f0:	b15a      	cbz	r2, 801060a <_scanf_float+0x66>
 80105f2:	f8d9 3000 	ldr.w	r3, [r9]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80105fa:	d863      	bhi.n	80106c4 <_scanf_float+0x120>
 80105fc:	2b40      	cmp	r3, #64	@ 0x40
 80105fe:	d83b      	bhi.n	8010678 <_scanf_float+0xd4>
 8010600:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010604:	b2c8      	uxtb	r0, r1
 8010606:	280e      	cmp	r0, #14
 8010608:	d939      	bls.n	801067e <_scanf_float+0xda>
 801060a:	b11f      	cbz	r7, 8010614 <_scanf_float+0x70>
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010612:	6023      	str	r3, [r4, #0]
 8010614:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010618:	f1ba 0f01 	cmp.w	sl, #1
 801061c:	f200 8114 	bhi.w	8010848 <_scanf_float+0x2a4>
 8010620:	9b01      	ldr	r3, [sp, #4]
 8010622:	429e      	cmp	r6, r3
 8010624:	f200 8105 	bhi.w	8010832 <_scanf_float+0x28e>
 8010628:	2001      	movs	r0, #1
 801062a:	b007      	add	sp, #28
 801062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010630:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010634:	2a0d      	cmp	r2, #13
 8010636:	d8e8      	bhi.n	801060a <_scanf_float+0x66>
 8010638:	a101      	add	r1, pc, #4	@ (adr r1, 8010640 <_scanf_float+0x9c>)
 801063a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801063e:	bf00      	nop
 8010640:	08010789 	.word	0x08010789
 8010644:	0801060b 	.word	0x0801060b
 8010648:	0801060b 	.word	0x0801060b
 801064c:	0801060b 	.word	0x0801060b
 8010650:	080107e5 	.word	0x080107e5
 8010654:	080107bf 	.word	0x080107bf
 8010658:	0801060b 	.word	0x0801060b
 801065c:	0801060b 	.word	0x0801060b
 8010660:	08010797 	.word	0x08010797
 8010664:	0801060b 	.word	0x0801060b
 8010668:	0801060b 	.word	0x0801060b
 801066c:	0801060b 	.word	0x0801060b
 8010670:	0801060b 	.word	0x0801060b
 8010674:	08010753 	.word	0x08010753
 8010678:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801067c:	e7da      	b.n	8010634 <_scanf_float+0x90>
 801067e:	290e      	cmp	r1, #14
 8010680:	d8c3      	bhi.n	801060a <_scanf_float+0x66>
 8010682:	a001      	add	r0, pc, #4	@ (adr r0, 8010688 <_scanf_float+0xe4>)
 8010684:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010688:	08010743 	.word	0x08010743
 801068c:	0801060b 	.word	0x0801060b
 8010690:	08010743 	.word	0x08010743
 8010694:	080107d3 	.word	0x080107d3
 8010698:	0801060b 	.word	0x0801060b
 801069c:	080106e5 	.word	0x080106e5
 80106a0:	08010729 	.word	0x08010729
 80106a4:	08010729 	.word	0x08010729
 80106a8:	08010729 	.word	0x08010729
 80106ac:	08010729 	.word	0x08010729
 80106b0:	08010729 	.word	0x08010729
 80106b4:	08010729 	.word	0x08010729
 80106b8:	08010729 	.word	0x08010729
 80106bc:	08010729 	.word	0x08010729
 80106c0:	08010729 	.word	0x08010729
 80106c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80106c6:	d809      	bhi.n	80106dc <_scanf_float+0x138>
 80106c8:	2b60      	cmp	r3, #96	@ 0x60
 80106ca:	d8b1      	bhi.n	8010630 <_scanf_float+0x8c>
 80106cc:	2b54      	cmp	r3, #84	@ 0x54
 80106ce:	d07b      	beq.n	80107c8 <_scanf_float+0x224>
 80106d0:	2b59      	cmp	r3, #89	@ 0x59
 80106d2:	d19a      	bne.n	801060a <_scanf_float+0x66>
 80106d4:	2d07      	cmp	r5, #7
 80106d6:	d198      	bne.n	801060a <_scanf_float+0x66>
 80106d8:	2508      	movs	r5, #8
 80106da:	e02f      	b.n	801073c <_scanf_float+0x198>
 80106dc:	2b74      	cmp	r3, #116	@ 0x74
 80106de:	d073      	beq.n	80107c8 <_scanf_float+0x224>
 80106e0:	2b79      	cmp	r3, #121	@ 0x79
 80106e2:	e7f6      	b.n	80106d2 <_scanf_float+0x12e>
 80106e4:	6821      	ldr	r1, [r4, #0]
 80106e6:	05c8      	lsls	r0, r1, #23
 80106e8:	d51e      	bpl.n	8010728 <_scanf_float+0x184>
 80106ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80106ee:	6021      	str	r1, [r4, #0]
 80106f0:	3701      	adds	r7, #1
 80106f2:	f1bb 0f00 	cmp.w	fp, #0
 80106f6:	d003      	beq.n	8010700 <_scanf_float+0x15c>
 80106f8:	3201      	adds	r2, #1
 80106fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106fe:	60a2      	str	r2, [r4, #8]
 8010700:	68a3      	ldr	r3, [r4, #8]
 8010702:	3b01      	subs	r3, #1
 8010704:	60a3      	str	r3, [r4, #8]
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	3301      	adds	r3, #1
 801070a:	6123      	str	r3, [r4, #16]
 801070c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010710:	3b01      	subs	r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	f8c9 3004 	str.w	r3, [r9, #4]
 8010718:	f340 8082 	ble.w	8010820 <_scanf_float+0x27c>
 801071c:	f8d9 3000 	ldr.w	r3, [r9]
 8010720:	3301      	adds	r3, #1
 8010722:	f8c9 3000 	str.w	r3, [r9]
 8010726:	e762      	b.n	80105ee <_scanf_float+0x4a>
 8010728:	eb1a 0105 	adds.w	r1, sl, r5
 801072c:	f47f af6d 	bne.w	801060a <_scanf_float+0x66>
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010736:	6022      	str	r2, [r4, #0]
 8010738:	460d      	mov	r5, r1
 801073a:	468a      	mov	sl, r1
 801073c:	f806 3b01 	strb.w	r3, [r6], #1
 8010740:	e7de      	b.n	8010700 <_scanf_float+0x15c>
 8010742:	6822      	ldr	r2, [r4, #0]
 8010744:	0610      	lsls	r0, r2, #24
 8010746:	f57f af60 	bpl.w	801060a <_scanf_float+0x66>
 801074a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801074e:	6022      	str	r2, [r4, #0]
 8010750:	e7f4      	b.n	801073c <_scanf_float+0x198>
 8010752:	f1ba 0f00 	cmp.w	sl, #0
 8010756:	d10c      	bne.n	8010772 <_scanf_float+0x1ce>
 8010758:	b977      	cbnz	r7, 8010778 <_scanf_float+0x1d4>
 801075a:	6822      	ldr	r2, [r4, #0]
 801075c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010760:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010764:	d108      	bne.n	8010778 <_scanf_float+0x1d4>
 8010766:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801076a:	6022      	str	r2, [r4, #0]
 801076c:	f04f 0a01 	mov.w	sl, #1
 8010770:	e7e4      	b.n	801073c <_scanf_float+0x198>
 8010772:	f1ba 0f02 	cmp.w	sl, #2
 8010776:	d050      	beq.n	801081a <_scanf_float+0x276>
 8010778:	2d01      	cmp	r5, #1
 801077a:	d002      	beq.n	8010782 <_scanf_float+0x1de>
 801077c:	2d04      	cmp	r5, #4
 801077e:	f47f af44 	bne.w	801060a <_scanf_float+0x66>
 8010782:	3501      	adds	r5, #1
 8010784:	b2ed      	uxtb	r5, r5
 8010786:	e7d9      	b.n	801073c <_scanf_float+0x198>
 8010788:	f1ba 0f01 	cmp.w	sl, #1
 801078c:	f47f af3d 	bne.w	801060a <_scanf_float+0x66>
 8010790:	f04f 0a02 	mov.w	sl, #2
 8010794:	e7d2      	b.n	801073c <_scanf_float+0x198>
 8010796:	b975      	cbnz	r5, 80107b6 <_scanf_float+0x212>
 8010798:	2f00      	cmp	r7, #0
 801079a:	f47f af37 	bne.w	801060c <_scanf_float+0x68>
 801079e:	6822      	ldr	r2, [r4, #0]
 80107a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80107a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80107a8:	f040 8103 	bne.w	80109b2 <_scanf_float+0x40e>
 80107ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80107b0:	6022      	str	r2, [r4, #0]
 80107b2:	2501      	movs	r5, #1
 80107b4:	e7c2      	b.n	801073c <_scanf_float+0x198>
 80107b6:	2d03      	cmp	r5, #3
 80107b8:	d0e3      	beq.n	8010782 <_scanf_float+0x1de>
 80107ba:	2d05      	cmp	r5, #5
 80107bc:	e7df      	b.n	801077e <_scanf_float+0x1da>
 80107be:	2d02      	cmp	r5, #2
 80107c0:	f47f af23 	bne.w	801060a <_scanf_float+0x66>
 80107c4:	2503      	movs	r5, #3
 80107c6:	e7b9      	b.n	801073c <_scanf_float+0x198>
 80107c8:	2d06      	cmp	r5, #6
 80107ca:	f47f af1e 	bne.w	801060a <_scanf_float+0x66>
 80107ce:	2507      	movs	r5, #7
 80107d0:	e7b4      	b.n	801073c <_scanf_float+0x198>
 80107d2:	6822      	ldr	r2, [r4, #0]
 80107d4:	0591      	lsls	r1, r2, #22
 80107d6:	f57f af18 	bpl.w	801060a <_scanf_float+0x66>
 80107da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80107de:	6022      	str	r2, [r4, #0]
 80107e0:	9702      	str	r7, [sp, #8]
 80107e2:	e7ab      	b.n	801073c <_scanf_float+0x198>
 80107e4:	6822      	ldr	r2, [r4, #0]
 80107e6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80107ea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80107ee:	d005      	beq.n	80107fc <_scanf_float+0x258>
 80107f0:	0550      	lsls	r0, r2, #21
 80107f2:	f57f af0a 	bpl.w	801060a <_scanf_float+0x66>
 80107f6:	2f00      	cmp	r7, #0
 80107f8:	f000 80db 	beq.w	80109b2 <_scanf_float+0x40e>
 80107fc:	0591      	lsls	r1, r2, #22
 80107fe:	bf58      	it	pl
 8010800:	9902      	ldrpl	r1, [sp, #8]
 8010802:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010806:	bf58      	it	pl
 8010808:	1a79      	subpl	r1, r7, r1
 801080a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801080e:	bf58      	it	pl
 8010810:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010814:	6022      	str	r2, [r4, #0]
 8010816:	2700      	movs	r7, #0
 8010818:	e790      	b.n	801073c <_scanf_float+0x198>
 801081a:	f04f 0a03 	mov.w	sl, #3
 801081e:	e78d      	b.n	801073c <_scanf_float+0x198>
 8010820:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010824:	4649      	mov	r1, r9
 8010826:	4640      	mov	r0, r8
 8010828:	4798      	blx	r3
 801082a:	2800      	cmp	r0, #0
 801082c:	f43f aedf 	beq.w	80105ee <_scanf_float+0x4a>
 8010830:	e6eb      	b.n	801060a <_scanf_float+0x66>
 8010832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801083a:	464a      	mov	r2, r9
 801083c:	4640      	mov	r0, r8
 801083e:	4798      	blx	r3
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	3b01      	subs	r3, #1
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	e6eb      	b.n	8010620 <_scanf_float+0x7c>
 8010848:	1e6b      	subs	r3, r5, #1
 801084a:	2b06      	cmp	r3, #6
 801084c:	d824      	bhi.n	8010898 <_scanf_float+0x2f4>
 801084e:	2d02      	cmp	r5, #2
 8010850:	d836      	bhi.n	80108c0 <_scanf_float+0x31c>
 8010852:	9b01      	ldr	r3, [sp, #4]
 8010854:	429e      	cmp	r6, r3
 8010856:	f67f aee7 	bls.w	8010628 <_scanf_float+0x84>
 801085a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801085e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010862:	464a      	mov	r2, r9
 8010864:	4640      	mov	r0, r8
 8010866:	4798      	blx	r3
 8010868:	6923      	ldr	r3, [r4, #16]
 801086a:	3b01      	subs	r3, #1
 801086c:	6123      	str	r3, [r4, #16]
 801086e:	e7f0      	b.n	8010852 <_scanf_float+0x2ae>
 8010870:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010874:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010878:	464a      	mov	r2, r9
 801087a:	4640      	mov	r0, r8
 801087c:	4798      	blx	r3
 801087e:	6923      	ldr	r3, [r4, #16]
 8010880:	3b01      	subs	r3, #1
 8010882:	6123      	str	r3, [r4, #16]
 8010884:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010888:	fa5f fa8a 	uxtb.w	sl, sl
 801088c:	f1ba 0f02 	cmp.w	sl, #2
 8010890:	d1ee      	bne.n	8010870 <_scanf_float+0x2cc>
 8010892:	3d03      	subs	r5, #3
 8010894:	b2ed      	uxtb	r5, r5
 8010896:	1b76      	subs	r6, r6, r5
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	05da      	lsls	r2, r3, #23
 801089c:	d530      	bpl.n	8010900 <_scanf_float+0x35c>
 801089e:	055b      	lsls	r3, r3, #21
 80108a0:	d511      	bpl.n	80108c6 <_scanf_float+0x322>
 80108a2:	9b01      	ldr	r3, [sp, #4]
 80108a4:	429e      	cmp	r6, r3
 80108a6:	f67f aebf 	bls.w	8010628 <_scanf_float+0x84>
 80108aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80108ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80108b2:	464a      	mov	r2, r9
 80108b4:	4640      	mov	r0, r8
 80108b6:	4798      	blx	r3
 80108b8:	6923      	ldr	r3, [r4, #16]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	6123      	str	r3, [r4, #16]
 80108be:	e7f0      	b.n	80108a2 <_scanf_float+0x2fe>
 80108c0:	46aa      	mov	sl, r5
 80108c2:	46b3      	mov	fp, r6
 80108c4:	e7de      	b.n	8010884 <_scanf_float+0x2e0>
 80108c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	2965      	cmp	r1, #101	@ 0x65
 80108ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80108d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80108d6:	6123      	str	r3, [r4, #16]
 80108d8:	d00c      	beq.n	80108f4 <_scanf_float+0x350>
 80108da:	2945      	cmp	r1, #69	@ 0x45
 80108dc:	d00a      	beq.n	80108f4 <_scanf_float+0x350>
 80108de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80108e2:	464a      	mov	r2, r9
 80108e4:	4640      	mov	r0, r8
 80108e6:	4798      	blx	r3
 80108e8:	6923      	ldr	r3, [r4, #16]
 80108ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80108ee:	3b01      	subs	r3, #1
 80108f0:	1eb5      	subs	r5, r6, #2
 80108f2:	6123      	str	r3, [r4, #16]
 80108f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80108f8:	464a      	mov	r2, r9
 80108fa:	4640      	mov	r0, r8
 80108fc:	4798      	blx	r3
 80108fe:	462e      	mov	r6, r5
 8010900:	6822      	ldr	r2, [r4, #0]
 8010902:	f012 0210 	ands.w	r2, r2, #16
 8010906:	d001      	beq.n	801090c <_scanf_float+0x368>
 8010908:	2000      	movs	r0, #0
 801090a:	e68e      	b.n	801062a <_scanf_float+0x86>
 801090c:	7032      	strb	r2, [r6, #0]
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010918:	d125      	bne.n	8010966 <_scanf_float+0x3c2>
 801091a:	9b02      	ldr	r3, [sp, #8]
 801091c:	429f      	cmp	r7, r3
 801091e:	d00a      	beq.n	8010936 <_scanf_float+0x392>
 8010920:	1bda      	subs	r2, r3, r7
 8010922:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010926:	429e      	cmp	r6, r3
 8010928:	bf28      	it	cs
 801092a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801092e:	4922      	ldr	r1, [pc, #136]	@ (80109b8 <_scanf_float+0x414>)
 8010930:	4630      	mov	r0, r6
 8010932:	f000 fa6b 	bl	8010e0c <siprintf>
 8010936:	9901      	ldr	r1, [sp, #4]
 8010938:	2200      	movs	r2, #0
 801093a:	4640      	mov	r0, r8
 801093c:	f002 fe3c 	bl	80135b8 <_strtod_r>
 8010940:	9b03      	ldr	r3, [sp, #12]
 8010942:	6821      	ldr	r1, [r4, #0]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f011 0f02 	tst.w	r1, #2
 801094a:	ec57 6b10 	vmov	r6, r7, d0
 801094e:	f103 0204 	add.w	r2, r3, #4
 8010952:	d015      	beq.n	8010980 <_scanf_float+0x3dc>
 8010954:	9903      	ldr	r1, [sp, #12]
 8010956:	600a      	str	r2, [r1, #0]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	e9c3 6700 	strd	r6, r7, [r3]
 801095e:	68e3      	ldr	r3, [r4, #12]
 8010960:	3301      	adds	r3, #1
 8010962:	60e3      	str	r3, [r4, #12]
 8010964:	e7d0      	b.n	8010908 <_scanf_float+0x364>
 8010966:	9b04      	ldr	r3, [sp, #16]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d0e4      	beq.n	8010936 <_scanf_float+0x392>
 801096c:	9905      	ldr	r1, [sp, #20]
 801096e:	230a      	movs	r3, #10
 8010970:	3101      	adds	r1, #1
 8010972:	4640      	mov	r0, r8
 8010974:	f7ff f872 	bl	800fa5c <_strtol_r>
 8010978:	9b04      	ldr	r3, [sp, #16]
 801097a:	9e05      	ldr	r6, [sp, #20]
 801097c:	1ac2      	subs	r2, r0, r3
 801097e:	e7d0      	b.n	8010922 <_scanf_float+0x37e>
 8010980:	f011 0f04 	tst.w	r1, #4
 8010984:	9903      	ldr	r1, [sp, #12]
 8010986:	600a      	str	r2, [r1, #0]
 8010988:	d1e6      	bne.n	8010958 <_scanf_float+0x3b4>
 801098a:	681d      	ldr	r5, [r3, #0]
 801098c:	4632      	mov	r2, r6
 801098e:	463b      	mov	r3, r7
 8010990:	4630      	mov	r0, r6
 8010992:	4639      	mov	r1, r7
 8010994:	f7f0 f8ea 	bl	8000b6c <__aeabi_dcmpun>
 8010998:	b128      	cbz	r0, 80109a6 <_scanf_float+0x402>
 801099a:	4808      	ldr	r0, [pc, #32]	@ (80109bc <_scanf_float+0x418>)
 801099c:	f000 fc80 	bl	80112a0 <nanf>
 80109a0:	ed85 0a00 	vstr	s0, [r5]
 80109a4:	e7db      	b.n	801095e <_scanf_float+0x3ba>
 80109a6:	4630      	mov	r0, r6
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7f0 f93d 	bl	8000c28 <__aeabi_d2f>
 80109ae:	6028      	str	r0, [r5, #0]
 80109b0:	e7d5      	b.n	801095e <_scanf_float+0x3ba>
 80109b2:	2700      	movs	r7, #0
 80109b4:	e62e      	b.n	8010614 <_scanf_float+0x70>
 80109b6:	bf00      	nop
 80109b8:	0801682f 	.word	0x0801682f
 80109bc:	080167eb 	.word	0x080167eb

080109c0 <__sflush_r>:
 80109c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	0716      	lsls	r6, r2, #28
 80109ca:	4605      	mov	r5, r0
 80109cc:	460c      	mov	r4, r1
 80109ce:	d454      	bmi.n	8010a7a <__sflush_r+0xba>
 80109d0:	684b      	ldr	r3, [r1, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	dc02      	bgt.n	80109dc <__sflush_r+0x1c>
 80109d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109d8:	2b00      	cmp	r3, #0
 80109da:	dd48      	ble.n	8010a6e <__sflush_r+0xae>
 80109dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109de:	2e00      	cmp	r6, #0
 80109e0:	d045      	beq.n	8010a6e <__sflush_r+0xae>
 80109e2:	2300      	movs	r3, #0
 80109e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109e8:	682f      	ldr	r7, [r5, #0]
 80109ea:	6a21      	ldr	r1, [r4, #32]
 80109ec:	602b      	str	r3, [r5, #0]
 80109ee:	d030      	beq.n	8010a52 <__sflush_r+0x92>
 80109f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	0759      	lsls	r1, r3, #29
 80109f6:	d505      	bpl.n	8010a04 <__sflush_r+0x44>
 80109f8:	6863      	ldr	r3, [r4, #4]
 80109fa:	1ad2      	subs	r2, r2, r3
 80109fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109fe:	b10b      	cbz	r3, 8010a04 <__sflush_r+0x44>
 8010a00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a02:	1ad2      	subs	r2, r2, r3
 8010a04:	2300      	movs	r3, #0
 8010a06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a08:	6a21      	ldr	r1, [r4, #32]
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	47b0      	blx	r6
 8010a0e:	1c43      	adds	r3, r0, #1
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	d106      	bne.n	8010a22 <__sflush_r+0x62>
 8010a14:	6829      	ldr	r1, [r5, #0]
 8010a16:	291d      	cmp	r1, #29
 8010a18:	d82b      	bhi.n	8010a72 <__sflush_r+0xb2>
 8010a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8010ac4 <__sflush_r+0x104>)
 8010a1c:	40ca      	lsrs	r2, r1
 8010a1e:	07d6      	lsls	r6, r2, #31
 8010a20:	d527      	bpl.n	8010a72 <__sflush_r+0xb2>
 8010a22:	2200      	movs	r2, #0
 8010a24:	6062      	str	r2, [r4, #4]
 8010a26:	04d9      	lsls	r1, r3, #19
 8010a28:	6922      	ldr	r2, [r4, #16]
 8010a2a:	6022      	str	r2, [r4, #0]
 8010a2c:	d504      	bpl.n	8010a38 <__sflush_r+0x78>
 8010a2e:	1c42      	adds	r2, r0, #1
 8010a30:	d101      	bne.n	8010a36 <__sflush_r+0x76>
 8010a32:	682b      	ldr	r3, [r5, #0]
 8010a34:	b903      	cbnz	r3, 8010a38 <__sflush_r+0x78>
 8010a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a3a:	602f      	str	r7, [r5, #0]
 8010a3c:	b1b9      	cbz	r1, 8010a6e <__sflush_r+0xae>
 8010a3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a42:	4299      	cmp	r1, r3
 8010a44:	d002      	beq.n	8010a4c <__sflush_r+0x8c>
 8010a46:	4628      	mov	r0, r5
 8010a48:	f001 fa92 	bl	8011f70 <_free_r>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a50:	e00d      	b.n	8010a6e <__sflush_r+0xae>
 8010a52:	2301      	movs	r3, #1
 8010a54:	4628      	mov	r0, r5
 8010a56:	47b0      	blx	r6
 8010a58:	4602      	mov	r2, r0
 8010a5a:	1c50      	adds	r0, r2, #1
 8010a5c:	d1c9      	bne.n	80109f2 <__sflush_r+0x32>
 8010a5e:	682b      	ldr	r3, [r5, #0]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d0c6      	beq.n	80109f2 <__sflush_r+0x32>
 8010a64:	2b1d      	cmp	r3, #29
 8010a66:	d001      	beq.n	8010a6c <__sflush_r+0xac>
 8010a68:	2b16      	cmp	r3, #22
 8010a6a:	d11e      	bne.n	8010aaa <__sflush_r+0xea>
 8010a6c:	602f      	str	r7, [r5, #0]
 8010a6e:	2000      	movs	r0, #0
 8010a70:	e022      	b.n	8010ab8 <__sflush_r+0xf8>
 8010a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a76:	b21b      	sxth	r3, r3
 8010a78:	e01b      	b.n	8010ab2 <__sflush_r+0xf2>
 8010a7a:	690f      	ldr	r7, [r1, #16]
 8010a7c:	2f00      	cmp	r7, #0
 8010a7e:	d0f6      	beq.n	8010a6e <__sflush_r+0xae>
 8010a80:	0793      	lsls	r3, r2, #30
 8010a82:	680e      	ldr	r6, [r1, #0]
 8010a84:	bf08      	it	eq
 8010a86:	694b      	ldreq	r3, [r1, #20]
 8010a88:	600f      	str	r7, [r1, #0]
 8010a8a:	bf18      	it	ne
 8010a8c:	2300      	movne	r3, #0
 8010a8e:	eba6 0807 	sub.w	r8, r6, r7
 8010a92:	608b      	str	r3, [r1, #8]
 8010a94:	f1b8 0f00 	cmp.w	r8, #0
 8010a98:	dde9      	ble.n	8010a6e <__sflush_r+0xae>
 8010a9a:	6a21      	ldr	r1, [r4, #32]
 8010a9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a9e:	4643      	mov	r3, r8
 8010aa0:	463a      	mov	r2, r7
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	47b0      	blx	r6
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	dc08      	bgt.n	8010abc <__sflush_r+0xfc>
 8010aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ab2:	81a3      	strh	r3, [r4, #12]
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010abc:	4407      	add	r7, r0
 8010abe:	eba8 0800 	sub.w	r8, r8, r0
 8010ac2:	e7e7      	b.n	8010a94 <__sflush_r+0xd4>
 8010ac4:	20400001 	.word	0x20400001

08010ac8 <_fflush_r>:
 8010ac8:	b538      	push	{r3, r4, r5, lr}
 8010aca:	690b      	ldr	r3, [r1, #16]
 8010acc:	4605      	mov	r5, r0
 8010ace:	460c      	mov	r4, r1
 8010ad0:	b913      	cbnz	r3, 8010ad8 <_fflush_r+0x10>
 8010ad2:	2500      	movs	r5, #0
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	bd38      	pop	{r3, r4, r5, pc}
 8010ad8:	b118      	cbz	r0, 8010ae2 <_fflush_r+0x1a>
 8010ada:	6a03      	ldr	r3, [r0, #32]
 8010adc:	b90b      	cbnz	r3, 8010ae2 <_fflush_r+0x1a>
 8010ade:	f000 f8a7 	bl	8010c30 <__sinit>
 8010ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d0f3      	beq.n	8010ad2 <_fflush_r+0xa>
 8010aea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010aec:	07d0      	lsls	r0, r2, #31
 8010aee:	d404      	bmi.n	8010afa <_fflush_r+0x32>
 8010af0:	0599      	lsls	r1, r3, #22
 8010af2:	d402      	bmi.n	8010afa <_fflush_r+0x32>
 8010af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010af6:	f000 fbc2 	bl	801127e <__retarget_lock_acquire_recursive>
 8010afa:	4628      	mov	r0, r5
 8010afc:	4621      	mov	r1, r4
 8010afe:	f7ff ff5f 	bl	80109c0 <__sflush_r>
 8010b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b04:	07da      	lsls	r2, r3, #31
 8010b06:	4605      	mov	r5, r0
 8010b08:	d4e4      	bmi.n	8010ad4 <_fflush_r+0xc>
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	059b      	lsls	r3, r3, #22
 8010b0e:	d4e1      	bmi.n	8010ad4 <_fflush_r+0xc>
 8010b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b12:	f000 fbb5 	bl	8011280 <__retarget_lock_release_recursive>
 8010b16:	e7dd      	b.n	8010ad4 <_fflush_r+0xc>

08010b18 <std>:
 8010b18:	2300      	movs	r3, #0
 8010b1a:	b510      	push	{r4, lr}
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8010b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b26:	6083      	str	r3, [r0, #8]
 8010b28:	8181      	strh	r1, [r0, #12]
 8010b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010b2c:	81c2      	strh	r2, [r0, #14]
 8010b2e:	6183      	str	r3, [r0, #24]
 8010b30:	4619      	mov	r1, r3
 8010b32:	2208      	movs	r2, #8
 8010b34:	305c      	adds	r0, #92	@ 0x5c
 8010b36:	f000 fabb 	bl	80110b0 <memset>
 8010b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b70 <std+0x58>)
 8010b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b74 <std+0x5c>)
 8010b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b42:	4b0d      	ldr	r3, [pc, #52]	@ (8010b78 <std+0x60>)
 8010b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b46:	4b0d      	ldr	r3, [pc, #52]	@ (8010b7c <std+0x64>)
 8010b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b80 <std+0x68>)
 8010b4c:	6224      	str	r4, [r4, #32]
 8010b4e:	429c      	cmp	r4, r3
 8010b50:	d006      	beq.n	8010b60 <std+0x48>
 8010b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b56:	4294      	cmp	r4, r2
 8010b58:	d002      	beq.n	8010b60 <std+0x48>
 8010b5a:	33d0      	adds	r3, #208	@ 0xd0
 8010b5c:	429c      	cmp	r4, r3
 8010b5e:	d105      	bne.n	8010b6c <std+0x54>
 8010b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b68:	f000 bb88 	b.w	801127c <__retarget_lock_init_recursive>
 8010b6c:	bd10      	pop	{r4, pc}
 8010b6e:	bf00      	nop
 8010b70:	08010ea9 	.word	0x08010ea9
 8010b74:	08010ecf 	.word	0x08010ecf
 8010b78:	08010f07 	.word	0x08010f07
 8010b7c:	08010f2b 	.word	0x08010f2b
 8010b80:	2001081c 	.word	0x2001081c

08010b84 <stdio_exit_handler>:
 8010b84:	4a02      	ldr	r2, [pc, #8]	@ (8010b90 <stdio_exit_handler+0xc>)
 8010b86:	4903      	ldr	r1, [pc, #12]	@ (8010b94 <stdio_exit_handler+0x10>)
 8010b88:	4803      	ldr	r0, [pc, #12]	@ (8010b98 <stdio_exit_handler+0x14>)
 8010b8a:	f000 b87b 	b.w	8010c84 <_fwalk_sglue>
 8010b8e:	bf00      	nop
 8010b90:	20000014 	.word	0x20000014
 8010b94:	08010ac9 	.word	0x08010ac9
 8010b98:	20000024 	.word	0x20000024

08010b9c <cleanup_stdio>:
 8010b9c:	6841      	ldr	r1, [r0, #4]
 8010b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8010bd0 <cleanup_stdio+0x34>)
 8010ba0:	4299      	cmp	r1, r3
 8010ba2:	b510      	push	{r4, lr}
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	d001      	beq.n	8010bac <cleanup_stdio+0x10>
 8010ba8:	f7ff ff8e 	bl	8010ac8 <_fflush_r>
 8010bac:	68a1      	ldr	r1, [r4, #8]
 8010bae:	4b09      	ldr	r3, [pc, #36]	@ (8010bd4 <cleanup_stdio+0x38>)
 8010bb0:	4299      	cmp	r1, r3
 8010bb2:	d002      	beq.n	8010bba <cleanup_stdio+0x1e>
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f7ff ff87 	bl	8010ac8 <_fflush_r>
 8010bba:	68e1      	ldr	r1, [r4, #12]
 8010bbc:	4b06      	ldr	r3, [pc, #24]	@ (8010bd8 <cleanup_stdio+0x3c>)
 8010bbe:	4299      	cmp	r1, r3
 8010bc0:	d004      	beq.n	8010bcc <cleanup_stdio+0x30>
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc8:	f7ff bf7e 	b.w	8010ac8 <_fflush_r>
 8010bcc:	bd10      	pop	{r4, pc}
 8010bce:	bf00      	nop
 8010bd0:	2001081c 	.word	0x2001081c
 8010bd4:	20010884 	.word	0x20010884
 8010bd8:	200108ec 	.word	0x200108ec

08010bdc <global_stdio_init.part.0>:
 8010bdc:	b510      	push	{r4, lr}
 8010bde:	4b0b      	ldr	r3, [pc, #44]	@ (8010c0c <global_stdio_init.part.0+0x30>)
 8010be0:	4c0b      	ldr	r4, [pc, #44]	@ (8010c10 <global_stdio_init.part.0+0x34>)
 8010be2:	4a0c      	ldr	r2, [pc, #48]	@ (8010c14 <global_stdio_init.part.0+0x38>)
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	4620      	mov	r0, r4
 8010be8:	2200      	movs	r2, #0
 8010bea:	2104      	movs	r1, #4
 8010bec:	f7ff ff94 	bl	8010b18 <std>
 8010bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	2109      	movs	r1, #9
 8010bf8:	f7ff ff8e 	bl	8010b18 <std>
 8010bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c00:	2202      	movs	r2, #2
 8010c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c06:	2112      	movs	r1, #18
 8010c08:	f7ff bf86 	b.w	8010b18 <std>
 8010c0c:	20010954 	.word	0x20010954
 8010c10:	2001081c 	.word	0x2001081c
 8010c14:	08010b85 	.word	0x08010b85

08010c18 <__sfp_lock_acquire>:
 8010c18:	4801      	ldr	r0, [pc, #4]	@ (8010c20 <__sfp_lock_acquire+0x8>)
 8010c1a:	f000 bb30 	b.w	801127e <__retarget_lock_acquire_recursive>
 8010c1e:	bf00      	nop
 8010c20:	2001095d 	.word	0x2001095d

08010c24 <__sfp_lock_release>:
 8010c24:	4801      	ldr	r0, [pc, #4]	@ (8010c2c <__sfp_lock_release+0x8>)
 8010c26:	f000 bb2b 	b.w	8011280 <__retarget_lock_release_recursive>
 8010c2a:	bf00      	nop
 8010c2c:	2001095d 	.word	0x2001095d

08010c30 <__sinit>:
 8010c30:	b510      	push	{r4, lr}
 8010c32:	4604      	mov	r4, r0
 8010c34:	f7ff fff0 	bl	8010c18 <__sfp_lock_acquire>
 8010c38:	6a23      	ldr	r3, [r4, #32]
 8010c3a:	b11b      	cbz	r3, 8010c44 <__sinit+0x14>
 8010c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c40:	f7ff bff0 	b.w	8010c24 <__sfp_lock_release>
 8010c44:	4b04      	ldr	r3, [pc, #16]	@ (8010c58 <__sinit+0x28>)
 8010c46:	6223      	str	r3, [r4, #32]
 8010c48:	4b04      	ldr	r3, [pc, #16]	@ (8010c5c <__sinit+0x2c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1f5      	bne.n	8010c3c <__sinit+0xc>
 8010c50:	f7ff ffc4 	bl	8010bdc <global_stdio_init.part.0>
 8010c54:	e7f2      	b.n	8010c3c <__sinit+0xc>
 8010c56:	bf00      	nop
 8010c58:	08010b9d 	.word	0x08010b9d
 8010c5c:	20010954 	.word	0x20010954

08010c60 <fiprintf>:
 8010c60:	b40e      	push	{r1, r2, r3}
 8010c62:	b503      	push	{r0, r1, lr}
 8010c64:	4601      	mov	r1, r0
 8010c66:	ab03      	add	r3, sp, #12
 8010c68:	4805      	ldr	r0, [pc, #20]	@ (8010c80 <fiprintf+0x20>)
 8010c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c6e:	6800      	ldr	r0, [r0, #0]
 8010c70:	9301      	str	r3, [sp, #4]
 8010c72:	f7ff f9f3 	bl	801005c <_vfiprintf_r>
 8010c76:	b002      	add	sp, #8
 8010c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c7c:	b003      	add	sp, #12
 8010c7e:	4770      	bx	lr
 8010c80:	20000020 	.word	0x20000020

08010c84 <_fwalk_sglue>:
 8010c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c88:	4607      	mov	r7, r0
 8010c8a:	4688      	mov	r8, r1
 8010c8c:	4614      	mov	r4, r2
 8010c8e:	2600      	movs	r6, #0
 8010c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c94:	f1b9 0901 	subs.w	r9, r9, #1
 8010c98:	d505      	bpl.n	8010ca6 <_fwalk_sglue+0x22>
 8010c9a:	6824      	ldr	r4, [r4, #0]
 8010c9c:	2c00      	cmp	r4, #0
 8010c9e:	d1f7      	bne.n	8010c90 <_fwalk_sglue+0xc>
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ca6:	89ab      	ldrh	r3, [r5, #12]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d907      	bls.n	8010cbc <_fwalk_sglue+0x38>
 8010cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	d003      	beq.n	8010cbc <_fwalk_sglue+0x38>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	47c0      	blx	r8
 8010cba:	4306      	orrs	r6, r0
 8010cbc:	3568      	adds	r5, #104	@ 0x68
 8010cbe:	e7e9      	b.n	8010c94 <_fwalk_sglue+0x10>

08010cc0 <iprintf>:
 8010cc0:	b40f      	push	{r0, r1, r2, r3}
 8010cc2:	b507      	push	{r0, r1, r2, lr}
 8010cc4:	4906      	ldr	r1, [pc, #24]	@ (8010ce0 <iprintf+0x20>)
 8010cc6:	ab04      	add	r3, sp, #16
 8010cc8:	6808      	ldr	r0, [r1, #0]
 8010cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cce:	6881      	ldr	r1, [r0, #8]
 8010cd0:	9301      	str	r3, [sp, #4]
 8010cd2:	f7ff f9c3 	bl	801005c <_vfiprintf_r>
 8010cd6:	b003      	add	sp, #12
 8010cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cdc:	b004      	add	sp, #16
 8010cde:	4770      	bx	lr
 8010ce0:	20000020 	.word	0x20000020

08010ce4 <_puts_r>:
 8010ce4:	6a03      	ldr	r3, [r0, #32]
 8010ce6:	b570      	push	{r4, r5, r6, lr}
 8010ce8:	6884      	ldr	r4, [r0, #8]
 8010cea:	4605      	mov	r5, r0
 8010cec:	460e      	mov	r6, r1
 8010cee:	b90b      	cbnz	r3, 8010cf4 <_puts_r+0x10>
 8010cf0:	f7ff ff9e 	bl	8010c30 <__sinit>
 8010cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cf6:	07db      	lsls	r3, r3, #31
 8010cf8:	d405      	bmi.n	8010d06 <_puts_r+0x22>
 8010cfa:	89a3      	ldrh	r3, [r4, #12]
 8010cfc:	0598      	lsls	r0, r3, #22
 8010cfe:	d402      	bmi.n	8010d06 <_puts_r+0x22>
 8010d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d02:	f000 fabc 	bl	801127e <__retarget_lock_acquire_recursive>
 8010d06:	89a3      	ldrh	r3, [r4, #12]
 8010d08:	0719      	lsls	r1, r3, #28
 8010d0a:	d502      	bpl.n	8010d12 <_puts_r+0x2e>
 8010d0c:	6923      	ldr	r3, [r4, #16]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d135      	bne.n	8010d7e <_puts_r+0x9a>
 8010d12:	4621      	mov	r1, r4
 8010d14:	4628      	mov	r0, r5
 8010d16:	f000 f94b 	bl	8010fb0 <__swsetup_r>
 8010d1a:	b380      	cbz	r0, 8010d7e <_puts_r+0x9a>
 8010d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8010d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d22:	07da      	lsls	r2, r3, #31
 8010d24:	d405      	bmi.n	8010d32 <_puts_r+0x4e>
 8010d26:	89a3      	ldrh	r3, [r4, #12]
 8010d28:	059b      	lsls	r3, r3, #22
 8010d2a:	d402      	bmi.n	8010d32 <_puts_r+0x4e>
 8010d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d2e:	f000 faa7 	bl	8011280 <__retarget_lock_release_recursive>
 8010d32:	4628      	mov	r0, r5
 8010d34:	bd70      	pop	{r4, r5, r6, pc}
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	da04      	bge.n	8010d44 <_puts_r+0x60>
 8010d3a:	69a2      	ldr	r2, [r4, #24]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	dc17      	bgt.n	8010d70 <_puts_r+0x8c>
 8010d40:	290a      	cmp	r1, #10
 8010d42:	d015      	beq.n	8010d70 <_puts_r+0x8c>
 8010d44:	6823      	ldr	r3, [r4, #0]
 8010d46:	1c5a      	adds	r2, r3, #1
 8010d48:	6022      	str	r2, [r4, #0]
 8010d4a:	7019      	strb	r1, [r3, #0]
 8010d4c:	68a3      	ldr	r3, [r4, #8]
 8010d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d52:	3b01      	subs	r3, #1
 8010d54:	60a3      	str	r3, [r4, #8]
 8010d56:	2900      	cmp	r1, #0
 8010d58:	d1ed      	bne.n	8010d36 <_puts_r+0x52>
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	da11      	bge.n	8010d82 <_puts_r+0x9e>
 8010d5e:	4622      	mov	r2, r4
 8010d60:	210a      	movs	r1, #10
 8010d62:	4628      	mov	r0, r5
 8010d64:	f000 f8e5 	bl	8010f32 <__swbuf_r>
 8010d68:	3001      	adds	r0, #1
 8010d6a:	d0d7      	beq.n	8010d1c <_puts_r+0x38>
 8010d6c:	250a      	movs	r5, #10
 8010d6e:	e7d7      	b.n	8010d20 <_puts_r+0x3c>
 8010d70:	4622      	mov	r2, r4
 8010d72:	4628      	mov	r0, r5
 8010d74:	f000 f8dd 	bl	8010f32 <__swbuf_r>
 8010d78:	3001      	adds	r0, #1
 8010d7a:	d1e7      	bne.n	8010d4c <_puts_r+0x68>
 8010d7c:	e7ce      	b.n	8010d1c <_puts_r+0x38>
 8010d7e:	3e01      	subs	r6, #1
 8010d80:	e7e4      	b.n	8010d4c <_puts_r+0x68>
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	1c5a      	adds	r2, r3, #1
 8010d86:	6022      	str	r2, [r4, #0]
 8010d88:	220a      	movs	r2, #10
 8010d8a:	701a      	strb	r2, [r3, #0]
 8010d8c:	e7ee      	b.n	8010d6c <_puts_r+0x88>
	...

08010d90 <puts>:
 8010d90:	4b02      	ldr	r3, [pc, #8]	@ (8010d9c <puts+0xc>)
 8010d92:	4601      	mov	r1, r0
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	f7ff bfa5 	b.w	8010ce4 <_puts_r>
 8010d9a:	bf00      	nop
 8010d9c:	20000020 	.word	0x20000020

08010da0 <sniprintf>:
 8010da0:	b40c      	push	{r2, r3}
 8010da2:	b530      	push	{r4, r5, lr}
 8010da4:	4b18      	ldr	r3, [pc, #96]	@ (8010e08 <sniprintf+0x68>)
 8010da6:	1e0c      	subs	r4, r1, #0
 8010da8:	681d      	ldr	r5, [r3, #0]
 8010daa:	b09d      	sub	sp, #116	@ 0x74
 8010dac:	da08      	bge.n	8010dc0 <sniprintf+0x20>
 8010dae:	238b      	movs	r3, #139	@ 0x8b
 8010db0:	602b      	str	r3, [r5, #0]
 8010db2:	f04f 30ff 	mov.w	r0, #4294967295
 8010db6:	b01d      	add	sp, #116	@ 0x74
 8010db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dbc:	b002      	add	sp, #8
 8010dbe:	4770      	bx	lr
 8010dc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010dc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010dc8:	f04f 0300 	mov.w	r3, #0
 8010dcc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010dce:	bf14      	ite	ne
 8010dd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010dd4:	4623      	moveq	r3, r4
 8010dd6:	9304      	str	r3, [sp, #16]
 8010dd8:	9307      	str	r3, [sp, #28]
 8010dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010dde:	9002      	str	r0, [sp, #8]
 8010de0:	9006      	str	r0, [sp, #24]
 8010de2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010de6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010de8:	ab21      	add	r3, sp, #132	@ 0x84
 8010dea:	a902      	add	r1, sp, #8
 8010dec:	4628      	mov	r0, r5
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	f002 fc44 	bl	801367c <_svfiprintf_r>
 8010df4:	1c43      	adds	r3, r0, #1
 8010df6:	bfbc      	itt	lt
 8010df8:	238b      	movlt	r3, #139	@ 0x8b
 8010dfa:	602b      	strlt	r3, [r5, #0]
 8010dfc:	2c00      	cmp	r4, #0
 8010dfe:	d0da      	beq.n	8010db6 <sniprintf+0x16>
 8010e00:	9b02      	ldr	r3, [sp, #8]
 8010e02:	2200      	movs	r2, #0
 8010e04:	701a      	strb	r2, [r3, #0]
 8010e06:	e7d6      	b.n	8010db6 <sniprintf+0x16>
 8010e08:	20000020 	.word	0x20000020

08010e0c <siprintf>:
 8010e0c:	b40e      	push	{r1, r2, r3}
 8010e0e:	b510      	push	{r4, lr}
 8010e10:	b09d      	sub	sp, #116	@ 0x74
 8010e12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010e14:	9002      	str	r0, [sp, #8]
 8010e16:	9006      	str	r0, [sp, #24]
 8010e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010e1c:	480a      	ldr	r0, [pc, #40]	@ (8010e48 <siprintf+0x3c>)
 8010e1e:	9107      	str	r1, [sp, #28]
 8010e20:	9104      	str	r1, [sp, #16]
 8010e22:	490a      	ldr	r1, [pc, #40]	@ (8010e4c <siprintf+0x40>)
 8010e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e28:	9105      	str	r1, [sp, #20]
 8010e2a:	2400      	movs	r4, #0
 8010e2c:	a902      	add	r1, sp, #8
 8010e2e:	6800      	ldr	r0, [r0, #0]
 8010e30:	9301      	str	r3, [sp, #4]
 8010e32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010e34:	f002 fc22 	bl	801367c <_svfiprintf_r>
 8010e38:	9b02      	ldr	r3, [sp, #8]
 8010e3a:	701c      	strb	r4, [r3, #0]
 8010e3c:	b01d      	add	sp, #116	@ 0x74
 8010e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e42:	b003      	add	sp, #12
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	20000020 	.word	0x20000020
 8010e4c:	ffff0208 	.word	0xffff0208

08010e50 <siscanf>:
 8010e50:	b40e      	push	{r1, r2, r3}
 8010e52:	b570      	push	{r4, r5, r6, lr}
 8010e54:	b09d      	sub	sp, #116	@ 0x74
 8010e56:	ac21      	add	r4, sp, #132	@ 0x84
 8010e58:	2500      	movs	r5, #0
 8010e5a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010e5e:	f854 6b04 	ldr.w	r6, [r4], #4
 8010e62:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010e66:	951b      	str	r5, [sp, #108]	@ 0x6c
 8010e68:	9002      	str	r0, [sp, #8]
 8010e6a:	9006      	str	r0, [sp, #24]
 8010e6c:	f7ef fa20 	bl	80002b0 <strlen>
 8010e70:	4b0b      	ldr	r3, [pc, #44]	@ (8010ea0 <siscanf+0x50>)
 8010e72:	9003      	str	r0, [sp, #12]
 8010e74:	9007      	str	r0, [sp, #28]
 8010e76:	480b      	ldr	r0, [pc, #44]	@ (8010ea4 <siscanf+0x54>)
 8010e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010e7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e82:	4632      	mov	r2, r6
 8010e84:	4623      	mov	r3, r4
 8010e86:	a902      	add	r1, sp, #8
 8010e88:	6800      	ldr	r0, [r0, #0]
 8010e8a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010e8c:	9514      	str	r5, [sp, #80]	@ 0x50
 8010e8e:	9401      	str	r4, [sp, #4]
 8010e90:	f002 fd4a 	bl	8013928 <__ssvfiscanf_r>
 8010e94:	b01d      	add	sp, #116	@ 0x74
 8010e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e9a:	b003      	add	sp, #12
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	08010ecb 	.word	0x08010ecb
 8010ea4:	20000020 	.word	0x20000020

08010ea8 <__sread>:
 8010ea8:	b510      	push	{r4, lr}
 8010eaa:	460c      	mov	r4, r1
 8010eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb0:	f000 f986 	bl	80111c0 <_read_r>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	bfab      	itete	ge
 8010eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010eba:	89a3      	ldrhlt	r3, [r4, #12]
 8010ebc:	181b      	addge	r3, r3, r0
 8010ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ec2:	bfac      	ite	ge
 8010ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010ec6:	81a3      	strhlt	r3, [r4, #12]
 8010ec8:	bd10      	pop	{r4, pc}

08010eca <__seofread>:
 8010eca:	2000      	movs	r0, #0
 8010ecc:	4770      	bx	lr

08010ece <__swrite>:
 8010ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed2:	461f      	mov	r7, r3
 8010ed4:	898b      	ldrh	r3, [r1, #12]
 8010ed6:	05db      	lsls	r3, r3, #23
 8010ed8:	4605      	mov	r5, r0
 8010eda:	460c      	mov	r4, r1
 8010edc:	4616      	mov	r6, r2
 8010ede:	d505      	bpl.n	8010eec <__swrite+0x1e>
 8010ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ee4:	2302      	movs	r3, #2
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f000 f958 	bl	801119c <_lseek_r>
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ef6:	81a3      	strh	r3, [r4, #12]
 8010ef8:	4632      	mov	r2, r6
 8010efa:	463b      	mov	r3, r7
 8010efc:	4628      	mov	r0, r5
 8010efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f02:	f000 b97f 	b.w	8011204 <_write_r>

08010f06 <__sseek>:
 8010f06:	b510      	push	{r4, lr}
 8010f08:	460c      	mov	r4, r1
 8010f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f0e:	f000 f945 	bl	801119c <_lseek_r>
 8010f12:	1c43      	adds	r3, r0, #1
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	bf15      	itete	ne
 8010f18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010f22:	81a3      	strheq	r3, [r4, #12]
 8010f24:	bf18      	it	ne
 8010f26:	81a3      	strhne	r3, [r4, #12]
 8010f28:	bd10      	pop	{r4, pc}

08010f2a <__sclose>:
 8010f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f2e:	f000 b925 	b.w	801117c <_close_r>

08010f32 <__swbuf_r>:
 8010f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f34:	460e      	mov	r6, r1
 8010f36:	4614      	mov	r4, r2
 8010f38:	4605      	mov	r5, r0
 8010f3a:	b118      	cbz	r0, 8010f44 <__swbuf_r+0x12>
 8010f3c:	6a03      	ldr	r3, [r0, #32]
 8010f3e:	b90b      	cbnz	r3, 8010f44 <__swbuf_r+0x12>
 8010f40:	f7ff fe76 	bl	8010c30 <__sinit>
 8010f44:	69a3      	ldr	r3, [r4, #24]
 8010f46:	60a3      	str	r3, [r4, #8]
 8010f48:	89a3      	ldrh	r3, [r4, #12]
 8010f4a:	071a      	lsls	r2, r3, #28
 8010f4c:	d501      	bpl.n	8010f52 <__swbuf_r+0x20>
 8010f4e:	6923      	ldr	r3, [r4, #16]
 8010f50:	b943      	cbnz	r3, 8010f64 <__swbuf_r+0x32>
 8010f52:	4621      	mov	r1, r4
 8010f54:	4628      	mov	r0, r5
 8010f56:	f000 f82b 	bl	8010fb0 <__swsetup_r>
 8010f5a:	b118      	cbz	r0, 8010f64 <__swbuf_r+0x32>
 8010f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8010f60:	4638      	mov	r0, r7
 8010f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	6922      	ldr	r2, [r4, #16]
 8010f68:	1a98      	subs	r0, r3, r2
 8010f6a:	6963      	ldr	r3, [r4, #20]
 8010f6c:	b2f6      	uxtb	r6, r6
 8010f6e:	4283      	cmp	r3, r0
 8010f70:	4637      	mov	r7, r6
 8010f72:	dc05      	bgt.n	8010f80 <__swbuf_r+0x4e>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4628      	mov	r0, r5
 8010f78:	f7ff fda6 	bl	8010ac8 <_fflush_r>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d1ed      	bne.n	8010f5c <__swbuf_r+0x2a>
 8010f80:	68a3      	ldr	r3, [r4, #8]
 8010f82:	3b01      	subs	r3, #1
 8010f84:	60a3      	str	r3, [r4, #8]
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	1c5a      	adds	r2, r3, #1
 8010f8a:	6022      	str	r2, [r4, #0]
 8010f8c:	701e      	strb	r6, [r3, #0]
 8010f8e:	6962      	ldr	r2, [r4, #20]
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d004      	beq.n	8010fa0 <__swbuf_r+0x6e>
 8010f96:	89a3      	ldrh	r3, [r4, #12]
 8010f98:	07db      	lsls	r3, r3, #31
 8010f9a:	d5e1      	bpl.n	8010f60 <__swbuf_r+0x2e>
 8010f9c:	2e0a      	cmp	r6, #10
 8010f9e:	d1df      	bne.n	8010f60 <__swbuf_r+0x2e>
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f7ff fd90 	bl	8010ac8 <_fflush_r>
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	d0d9      	beq.n	8010f60 <__swbuf_r+0x2e>
 8010fac:	e7d6      	b.n	8010f5c <__swbuf_r+0x2a>
	...

08010fb0 <__swsetup_r>:
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	4b29      	ldr	r3, [pc, #164]	@ (8011058 <__swsetup_r+0xa8>)
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	6818      	ldr	r0, [r3, #0]
 8010fb8:	460c      	mov	r4, r1
 8010fba:	b118      	cbz	r0, 8010fc4 <__swsetup_r+0x14>
 8010fbc:	6a03      	ldr	r3, [r0, #32]
 8010fbe:	b90b      	cbnz	r3, 8010fc4 <__swsetup_r+0x14>
 8010fc0:	f7ff fe36 	bl	8010c30 <__sinit>
 8010fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fc8:	0719      	lsls	r1, r3, #28
 8010fca:	d422      	bmi.n	8011012 <__swsetup_r+0x62>
 8010fcc:	06da      	lsls	r2, r3, #27
 8010fce:	d407      	bmi.n	8010fe0 <__swsetup_r+0x30>
 8010fd0:	2209      	movs	r2, #9
 8010fd2:	602a      	str	r2, [r5, #0]
 8010fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fd8:	81a3      	strh	r3, [r4, #12]
 8010fda:	f04f 30ff 	mov.w	r0, #4294967295
 8010fde:	e033      	b.n	8011048 <__swsetup_r+0x98>
 8010fe0:	0758      	lsls	r0, r3, #29
 8010fe2:	d512      	bpl.n	801100a <__swsetup_r+0x5a>
 8010fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010fe6:	b141      	cbz	r1, 8010ffa <__swsetup_r+0x4a>
 8010fe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010fec:	4299      	cmp	r1, r3
 8010fee:	d002      	beq.n	8010ff6 <__swsetup_r+0x46>
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	f000 ffbd 	bl	8011f70 <_free_r>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ffa:	89a3      	ldrh	r3, [r4, #12]
 8010ffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011000:	81a3      	strh	r3, [r4, #12]
 8011002:	2300      	movs	r3, #0
 8011004:	6063      	str	r3, [r4, #4]
 8011006:	6923      	ldr	r3, [r4, #16]
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	f043 0308 	orr.w	r3, r3, #8
 8011010:	81a3      	strh	r3, [r4, #12]
 8011012:	6923      	ldr	r3, [r4, #16]
 8011014:	b94b      	cbnz	r3, 801102a <__swsetup_r+0x7a>
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801101c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011020:	d003      	beq.n	801102a <__swsetup_r+0x7a>
 8011022:	4621      	mov	r1, r4
 8011024:	4628      	mov	r0, r5
 8011026:	f002 ff69 	bl	8013efc <__smakebuf_r>
 801102a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801102e:	f013 0201 	ands.w	r2, r3, #1
 8011032:	d00a      	beq.n	801104a <__swsetup_r+0x9a>
 8011034:	2200      	movs	r2, #0
 8011036:	60a2      	str	r2, [r4, #8]
 8011038:	6962      	ldr	r2, [r4, #20]
 801103a:	4252      	negs	r2, r2
 801103c:	61a2      	str	r2, [r4, #24]
 801103e:	6922      	ldr	r2, [r4, #16]
 8011040:	b942      	cbnz	r2, 8011054 <__swsetup_r+0xa4>
 8011042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011046:	d1c5      	bne.n	8010fd4 <__swsetup_r+0x24>
 8011048:	bd38      	pop	{r3, r4, r5, pc}
 801104a:	0799      	lsls	r1, r3, #30
 801104c:	bf58      	it	pl
 801104e:	6962      	ldrpl	r2, [r4, #20]
 8011050:	60a2      	str	r2, [r4, #8]
 8011052:	e7f4      	b.n	801103e <__swsetup_r+0x8e>
 8011054:	2000      	movs	r0, #0
 8011056:	e7f7      	b.n	8011048 <__swsetup_r+0x98>
 8011058:	20000020 	.word	0x20000020

0801105c <memcmp>:
 801105c:	b510      	push	{r4, lr}
 801105e:	3901      	subs	r1, #1
 8011060:	4402      	add	r2, r0
 8011062:	4290      	cmp	r0, r2
 8011064:	d101      	bne.n	801106a <memcmp+0xe>
 8011066:	2000      	movs	r0, #0
 8011068:	e005      	b.n	8011076 <memcmp+0x1a>
 801106a:	7803      	ldrb	r3, [r0, #0]
 801106c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011070:	42a3      	cmp	r3, r4
 8011072:	d001      	beq.n	8011078 <memcmp+0x1c>
 8011074:	1b18      	subs	r0, r3, r4
 8011076:	bd10      	pop	{r4, pc}
 8011078:	3001      	adds	r0, #1
 801107a:	e7f2      	b.n	8011062 <memcmp+0x6>

0801107c <memmove>:
 801107c:	4288      	cmp	r0, r1
 801107e:	b510      	push	{r4, lr}
 8011080:	eb01 0402 	add.w	r4, r1, r2
 8011084:	d902      	bls.n	801108c <memmove+0x10>
 8011086:	4284      	cmp	r4, r0
 8011088:	4623      	mov	r3, r4
 801108a:	d807      	bhi.n	801109c <memmove+0x20>
 801108c:	1e43      	subs	r3, r0, #1
 801108e:	42a1      	cmp	r1, r4
 8011090:	d008      	beq.n	80110a4 <memmove+0x28>
 8011092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011096:	f803 2f01 	strb.w	r2, [r3, #1]!
 801109a:	e7f8      	b.n	801108e <memmove+0x12>
 801109c:	4402      	add	r2, r0
 801109e:	4601      	mov	r1, r0
 80110a0:	428a      	cmp	r2, r1
 80110a2:	d100      	bne.n	80110a6 <memmove+0x2a>
 80110a4:	bd10      	pop	{r4, pc}
 80110a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110ae:	e7f7      	b.n	80110a0 <memmove+0x24>

080110b0 <memset>:
 80110b0:	4402      	add	r2, r0
 80110b2:	4603      	mov	r3, r0
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d100      	bne.n	80110ba <memset+0xa>
 80110b8:	4770      	bx	lr
 80110ba:	f803 1b01 	strb.w	r1, [r3], #1
 80110be:	e7f9      	b.n	80110b4 <memset+0x4>

080110c0 <strncat>:
 80110c0:	b530      	push	{r4, r5, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	7825      	ldrb	r5, [r4, #0]
 80110c6:	4623      	mov	r3, r4
 80110c8:	3401      	adds	r4, #1
 80110ca:	2d00      	cmp	r5, #0
 80110cc:	d1fa      	bne.n	80110c4 <strncat+0x4>
 80110ce:	3a01      	subs	r2, #1
 80110d0:	d304      	bcc.n	80110dc <strncat+0x1c>
 80110d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110d6:	f803 4b01 	strb.w	r4, [r3], #1
 80110da:	b904      	cbnz	r4, 80110de <strncat+0x1e>
 80110dc:	bd30      	pop	{r4, r5, pc}
 80110de:	2a00      	cmp	r2, #0
 80110e0:	d1f5      	bne.n	80110ce <strncat+0xe>
 80110e2:	701a      	strb	r2, [r3, #0]
 80110e4:	e7f3      	b.n	80110ce <strncat+0xe>

080110e6 <strncmp>:
 80110e6:	b510      	push	{r4, lr}
 80110e8:	b16a      	cbz	r2, 8011106 <strncmp+0x20>
 80110ea:	3901      	subs	r1, #1
 80110ec:	1884      	adds	r4, r0, r2
 80110ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d103      	bne.n	8011102 <strncmp+0x1c>
 80110fa:	42a0      	cmp	r0, r4
 80110fc:	d001      	beq.n	8011102 <strncmp+0x1c>
 80110fe:	2a00      	cmp	r2, #0
 8011100:	d1f5      	bne.n	80110ee <strncmp+0x8>
 8011102:	1ad0      	subs	r0, r2, r3
 8011104:	bd10      	pop	{r4, pc}
 8011106:	4610      	mov	r0, r2
 8011108:	e7fc      	b.n	8011104 <strncmp+0x1e>

0801110a <strncpy>:
 801110a:	b510      	push	{r4, lr}
 801110c:	3901      	subs	r1, #1
 801110e:	4603      	mov	r3, r0
 8011110:	b132      	cbz	r2, 8011120 <strncpy+0x16>
 8011112:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011116:	f803 4b01 	strb.w	r4, [r3], #1
 801111a:	3a01      	subs	r2, #1
 801111c:	2c00      	cmp	r4, #0
 801111e:	d1f7      	bne.n	8011110 <strncpy+0x6>
 8011120:	441a      	add	r2, r3
 8011122:	2100      	movs	r1, #0
 8011124:	4293      	cmp	r3, r2
 8011126:	d100      	bne.n	801112a <strncpy+0x20>
 8011128:	bd10      	pop	{r4, pc}
 801112a:	f803 1b01 	strb.w	r1, [r3], #1
 801112e:	e7f9      	b.n	8011124 <strncpy+0x1a>

08011130 <strnlen>:
 8011130:	b510      	push	{r4, lr}
 8011132:	4602      	mov	r2, r0
 8011134:	4401      	add	r1, r0
 8011136:	428a      	cmp	r2, r1
 8011138:	4613      	mov	r3, r2
 801113a:	d003      	beq.n	8011144 <strnlen+0x14>
 801113c:	781c      	ldrb	r4, [r3, #0]
 801113e:	3201      	adds	r2, #1
 8011140:	2c00      	cmp	r4, #0
 8011142:	d1f8      	bne.n	8011136 <strnlen+0x6>
 8011144:	1a18      	subs	r0, r3, r0
 8011146:	bd10      	pop	{r4, pc}

08011148 <strstr>:
 8011148:	780a      	ldrb	r2, [r1, #0]
 801114a:	b570      	push	{r4, r5, r6, lr}
 801114c:	b96a      	cbnz	r2, 801116a <strstr+0x22>
 801114e:	bd70      	pop	{r4, r5, r6, pc}
 8011150:	429a      	cmp	r2, r3
 8011152:	d109      	bne.n	8011168 <strstr+0x20>
 8011154:	460c      	mov	r4, r1
 8011156:	4605      	mov	r5, r0
 8011158:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801115c:	2b00      	cmp	r3, #0
 801115e:	d0f6      	beq.n	801114e <strstr+0x6>
 8011160:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011164:	429e      	cmp	r6, r3
 8011166:	d0f7      	beq.n	8011158 <strstr+0x10>
 8011168:	3001      	adds	r0, #1
 801116a:	7803      	ldrb	r3, [r0, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1ef      	bne.n	8011150 <strstr+0x8>
 8011170:	4618      	mov	r0, r3
 8011172:	e7ec      	b.n	801114e <strstr+0x6>

08011174 <_localeconv_r>:
 8011174:	4800      	ldr	r0, [pc, #0]	@ (8011178 <_localeconv_r+0x4>)
 8011176:	4770      	bx	lr
 8011178:	20000160 	.word	0x20000160

0801117c <_close_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4d06      	ldr	r5, [pc, #24]	@ (8011198 <_close_r+0x1c>)
 8011180:	2300      	movs	r3, #0
 8011182:	4604      	mov	r4, r0
 8011184:	4608      	mov	r0, r1
 8011186:	602b      	str	r3, [r5, #0]
 8011188:	f7f1 ff3a 	bl	8003000 <_close>
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	d102      	bne.n	8011196 <_close_r+0x1a>
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	b103      	cbz	r3, 8011196 <_close_r+0x1a>
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	bd38      	pop	{r3, r4, r5, pc}
 8011198:	20010958 	.word	0x20010958

0801119c <_lseek_r>:
 801119c:	b538      	push	{r3, r4, r5, lr}
 801119e:	4d07      	ldr	r5, [pc, #28]	@ (80111bc <_lseek_r+0x20>)
 80111a0:	4604      	mov	r4, r0
 80111a2:	4608      	mov	r0, r1
 80111a4:	4611      	mov	r1, r2
 80111a6:	2200      	movs	r2, #0
 80111a8:	602a      	str	r2, [r5, #0]
 80111aa:	461a      	mov	r2, r3
 80111ac:	f7f1 ff4f 	bl	800304e <_lseek>
 80111b0:	1c43      	adds	r3, r0, #1
 80111b2:	d102      	bne.n	80111ba <_lseek_r+0x1e>
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	b103      	cbz	r3, 80111ba <_lseek_r+0x1e>
 80111b8:	6023      	str	r3, [r4, #0]
 80111ba:	bd38      	pop	{r3, r4, r5, pc}
 80111bc:	20010958 	.word	0x20010958

080111c0 <_read_r>:
 80111c0:	b538      	push	{r3, r4, r5, lr}
 80111c2:	4d07      	ldr	r5, [pc, #28]	@ (80111e0 <_read_r+0x20>)
 80111c4:	4604      	mov	r4, r0
 80111c6:	4608      	mov	r0, r1
 80111c8:	4611      	mov	r1, r2
 80111ca:	2200      	movs	r2, #0
 80111cc:	602a      	str	r2, [r5, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	f7f1 fef9 	bl	8002fc6 <_read>
 80111d4:	1c43      	adds	r3, r0, #1
 80111d6:	d102      	bne.n	80111de <_read_r+0x1e>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	b103      	cbz	r3, 80111de <_read_r+0x1e>
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	20010958 	.word	0x20010958

080111e4 <_sbrk_r>:
 80111e4:	b538      	push	{r3, r4, r5, lr}
 80111e6:	4d06      	ldr	r5, [pc, #24]	@ (8011200 <_sbrk_r+0x1c>)
 80111e8:	2300      	movs	r3, #0
 80111ea:	4604      	mov	r4, r0
 80111ec:	4608      	mov	r0, r1
 80111ee:	602b      	str	r3, [r5, #0]
 80111f0:	f7f1 ff3a 	bl	8003068 <_sbrk>
 80111f4:	1c43      	adds	r3, r0, #1
 80111f6:	d102      	bne.n	80111fe <_sbrk_r+0x1a>
 80111f8:	682b      	ldr	r3, [r5, #0]
 80111fa:	b103      	cbz	r3, 80111fe <_sbrk_r+0x1a>
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	bd38      	pop	{r3, r4, r5, pc}
 8011200:	20010958 	.word	0x20010958

08011204 <_write_r>:
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4d07      	ldr	r5, [pc, #28]	@ (8011224 <_write_r+0x20>)
 8011208:	4604      	mov	r4, r0
 801120a:	4608      	mov	r0, r1
 801120c:	4611      	mov	r1, r2
 801120e:	2200      	movs	r2, #0
 8011210:	602a      	str	r2, [r5, #0]
 8011212:	461a      	mov	r2, r3
 8011214:	f7ef ff8e 	bl	8001134 <_write>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_write_r+0x1e>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_write_r+0x1e>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	20010958 	.word	0x20010958

08011228 <__errno>:
 8011228:	4b01      	ldr	r3, [pc, #4]	@ (8011230 <__errno+0x8>)
 801122a:	6818      	ldr	r0, [r3, #0]
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop
 8011230:	20000020 	.word	0x20000020

08011234 <__libc_init_array>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	4d0d      	ldr	r5, [pc, #52]	@ (801126c <__libc_init_array+0x38>)
 8011238:	4c0d      	ldr	r4, [pc, #52]	@ (8011270 <__libc_init_array+0x3c>)
 801123a:	1b64      	subs	r4, r4, r5
 801123c:	10a4      	asrs	r4, r4, #2
 801123e:	2600      	movs	r6, #0
 8011240:	42a6      	cmp	r6, r4
 8011242:	d109      	bne.n	8011258 <__libc_init_array+0x24>
 8011244:	4d0b      	ldr	r5, [pc, #44]	@ (8011274 <__libc_init_array+0x40>)
 8011246:	4c0c      	ldr	r4, [pc, #48]	@ (8011278 <__libc_init_array+0x44>)
 8011248:	f003 fb5c 	bl	8014904 <_init>
 801124c:	1b64      	subs	r4, r4, r5
 801124e:	10a4      	asrs	r4, r4, #2
 8011250:	2600      	movs	r6, #0
 8011252:	42a6      	cmp	r6, r4
 8011254:	d105      	bne.n	8011262 <__libc_init_array+0x2e>
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	f855 3b04 	ldr.w	r3, [r5], #4
 801125c:	4798      	blx	r3
 801125e:	3601      	adds	r6, #1
 8011260:	e7ee      	b.n	8011240 <__libc_init_array+0xc>
 8011262:	f855 3b04 	ldr.w	r3, [r5], #4
 8011266:	4798      	blx	r3
 8011268:	3601      	adds	r6, #1
 801126a:	e7f2      	b.n	8011252 <__libc_init_array+0x1e>
 801126c:	08016bf8 	.word	0x08016bf8
 8011270:	08016bf8 	.word	0x08016bf8
 8011274:	08016bf8 	.word	0x08016bf8
 8011278:	08016bfc 	.word	0x08016bfc

0801127c <__retarget_lock_init_recursive>:
 801127c:	4770      	bx	lr

0801127e <__retarget_lock_acquire_recursive>:
 801127e:	4770      	bx	lr

08011280 <__retarget_lock_release_recursive>:
 8011280:	4770      	bx	lr

08011282 <memcpy>:
 8011282:	440a      	add	r2, r1
 8011284:	4291      	cmp	r1, r2
 8011286:	f100 33ff 	add.w	r3, r0, #4294967295
 801128a:	d100      	bne.n	801128e <memcpy+0xc>
 801128c:	4770      	bx	lr
 801128e:	b510      	push	{r4, lr}
 8011290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011298:	4291      	cmp	r1, r2
 801129a:	d1f9      	bne.n	8011290 <memcpy+0xe>
 801129c:	bd10      	pop	{r4, pc}
	...

080112a0 <nanf>:
 80112a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80112a8 <nanf+0x8>
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	7fc00000 	.word	0x7fc00000

080112ac <abort>:
 80112ac:	b508      	push	{r3, lr}
 80112ae:	2006      	movs	r0, #6
 80112b0:	f002 fefc 	bl	80140ac <raise>
 80112b4:	2001      	movs	r0, #1
 80112b6:	f7f1 fe7b 	bl	8002fb0 <_exit>

080112ba <quorem>:
 80112ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112be:	6903      	ldr	r3, [r0, #16]
 80112c0:	690c      	ldr	r4, [r1, #16]
 80112c2:	42a3      	cmp	r3, r4
 80112c4:	4607      	mov	r7, r0
 80112c6:	db7e      	blt.n	80113c6 <quorem+0x10c>
 80112c8:	3c01      	subs	r4, #1
 80112ca:	f101 0814 	add.w	r8, r1, #20
 80112ce:	00a3      	lsls	r3, r4, #2
 80112d0:	f100 0514 	add.w	r5, r0, #20
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112da:	9301      	str	r3, [sp, #4]
 80112dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80112e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112e4:	3301      	adds	r3, #1
 80112e6:	429a      	cmp	r2, r3
 80112e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80112ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80112f0:	d32e      	bcc.n	8011350 <quorem+0x96>
 80112f2:	f04f 0a00 	mov.w	sl, #0
 80112f6:	46c4      	mov	ip, r8
 80112f8:	46ae      	mov	lr, r5
 80112fa:	46d3      	mov	fp, sl
 80112fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011300:	b298      	uxth	r0, r3
 8011302:	fb06 a000 	mla	r0, r6, r0, sl
 8011306:	0c02      	lsrs	r2, r0, #16
 8011308:	0c1b      	lsrs	r3, r3, #16
 801130a:	fb06 2303 	mla	r3, r6, r3, r2
 801130e:	f8de 2000 	ldr.w	r2, [lr]
 8011312:	b280      	uxth	r0, r0
 8011314:	b292      	uxth	r2, r2
 8011316:	1a12      	subs	r2, r2, r0
 8011318:	445a      	add	r2, fp
 801131a:	f8de 0000 	ldr.w	r0, [lr]
 801131e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011322:	b29b      	uxth	r3, r3
 8011324:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011328:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801132c:	b292      	uxth	r2, r2
 801132e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011332:	45e1      	cmp	r9, ip
 8011334:	f84e 2b04 	str.w	r2, [lr], #4
 8011338:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801133c:	d2de      	bcs.n	80112fc <quorem+0x42>
 801133e:	9b00      	ldr	r3, [sp, #0]
 8011340:	58eb      	ldr	r3, [r5, r3]
 8011342:	b92b      	cbnz	r3, 8011350 <quorem+0x96>
 8011344:	9b01      	ldr	r3, [sp, #4]
 8011346:	3b04      	subs	r3, #4
 8011348:	429d      	cmp	r5, r3
 801134a:	461a      	mov	r2, r3
 801134c:	d32f      	bcc.n	80113ae <quorem+0xf4>
 801134e:	613c      	str	r4, [r7, #16]
 8011350:	4638      	mov	r0, r7
 8011352:	f001 f913 	bl	801257c <__mcmp>
 8011356:	2800      	cmp	r0, #0
 8011358:	db25      	blt.n	80113a6 <quorem+0xec>
 801135a:	4629      	mov	r1, r5
 801135c:	2000      	movs	r0, #0
 801135e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011362:	f8d1 c000 	ldr.w	ip, [r1]
 8011366:	fa1f fe82 	uxth.w	lr, r2
 801136a:	fa1f f38c 	uxth.w	r3, ip
 801136e:	eba3 030e 	sub.w	r3, r3, lr
 8011372:	4403      	add	r3, r0
 8011374:	0c12      	lsrs	r2, r2, #16
 8011376:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801137a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801137e:	b29b      	uxth	r3, r3
 8011380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011384:	45c1      	cmp	r9, r8
 8011386:	f841 3b04 	str.w	r3, [r1], #4
 801138a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801138e:	d2e6      	bcs.n	801135e <quorem+0xa4>
 8011390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011398:	b922      	cbnz	r2, 80113a4 <quorem+0xea>
 801139a:	3b04      	subs	r3, #4
 801139c:	429d      	cmp	r5, r3
 801139e:	461a      	mov	r2, r3
 80113a0:	d30b      	bcc.n	80113ba <quorem+0x100>
 80113a2:	613c      	str	r4, [r7, #16]
 80113a4:	3601      	adds	r6, #1
 80113a6:	4630      	mov	r0, r6
 80113a8:	b003      	add	sp, #12
 80113aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ae:	6812      	ldr	r2, [r2, #0]
 80113b0:	3b04      	subs	r3, #4
 80113b2:	2a00      	cmp	r2, #0
 80113b4:	d1cb      	bne.n	801134e <quorem+0x94>
 80113b6:	3c01      	subs	r4, #1
 80113b8:	e7c6      	b.n	8011348 <quorem+0x8e>
 80113ba:	6812      	ldr	r2, [r2, #0]
 80113bc:	3b04      	subs	r3, #4
 80113be:	2a00      	cmp	r2, #0
 80113c0:	d1ef      	bne.n	80113a2 <quorem+0xe8>
 80113c2:	3c01      	subs	r4, #1
 80113c4:	e7ea      	b.n	801139c <quorem+0xe2>
 80113c6:	2000      	movs	r0, #0
 80113c8:	e7ee      	b.n	80113a8 <quorem+0xee>
 80113ca:	0000      	movs	r0, r0
 80113cc:	0000      	movs	r0, r0
	...

080113d0 <_dtoa_r>:
 80113d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d4:	69c7      	ldr	r7, [r0, #28]
 80113d6:	b097      	sub	sp, #92	@ 0x5c
 80113d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80113dc:	ec55 4b10 	vmov	r4, r5, d0
 80113e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80113e2:	9107      	str	r1, [sp, #28]
 80113e4:	4681      	mov	r9, r0
 80113e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80113e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80113ea:	b97f      	cbnz	r7, 801140c <_dtoa_r+0x3c>
 80113ec:	2010      	movs	r0, #16
 80113ee:	f7fe fa05 	bl	800f7fc <malloc>
 80113f2:	4602      	mov	r2, r0
 80113f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80113f8:	b920      	cbnz	r0, 8011404 <_dtoa_r+0x34>
 80113fa:	4ba9      	ldr	r3, [pc, #676]	@ (80116a0 <_dtoa_r+0x2d0>)
 80113fc:	21ef      	movs	r1, #239	@ 0xef
 80113fe:	48a9      	ldr	r0, [pc, #676]	@ (80116a4 <_dtoa_r+0x2d4>)
 8011400:	f7fe f9da 	bl	800f7b8 <__assert_func>
 8011404:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011408:	6007      	str	r7, [r0, #0]
 801140a:	60c7      	str	r7, [r0, #12]
 801140c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011410:	6819      	ldr	r1, [r3, #0]
 8011412:	b159      	cbz	r1, 801142c <_dtoa_r+0x5c>
 8011414:	685a      	ldr	r2, [r3, #4]
 8011416:	604a      	str	r2, [r1, #4]
 8011418:	2301      	movs	r3, #1
 801141a:	4093      	lsls	r3, r2
 801141c:	608b      	str	r3, [r1, #8]
 801141e:	4648      	mov	r0, r9
 8011420:	f000 fe30 	bl	8012084 <_Bfree>
 8011424:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011428:	2200      	movs	r2, #0
 801142a:	601a      	str	r2, [r3, #0]
 801142c:	1e2b      	subs	r3, r5, #0
 801142e:	bfb9      	ittee	lt
 8011430:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011434:	9305      	strlt	r3, [sp, #20]
 8011436:	2300      	movge	r3, #0
 8011438:	6033      	strge	r3, [r6, #0]
 801143a:	9f05      	ldr	r7, [sp, #20]
 801143c:	4b9a      	ldr	r3, [pc, #616]	@ (80116a8 <_dtoa_r+0x2d8>)
 801143e:	bfbc      	itt	lt
 8011440:	2201      	movlt	r2, #1
 8011442:	6032      	strlt	r2, [r6, #0]
 8011444:	43bb      	bics	r3, r7
 8011446:	d112      	bne.n	801146e <_dtoa_r+0x9e>
 8011448:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801144a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801144e:	6013      	str	r3, [r2, #0]
 8011450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011454:	4323      	orrs	r3, r4
 8011456:	f000 855a 	beq.w	8011f0e <_dtoa_r+0xb3e>
 801145a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801145c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80116bc <_dtoa_r+0x2ec>
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 855c 	beq.w	8011f1e <_dtoa_r+0xb4e>
 8011466:	f10a 0303 	add.w	r3, sl, #3
 801146a:	f000 bd56 	b.w	8011f1a <_dtoa_r+0xb4a>
 801146e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011472:	2200      	movs	r2, #0
 8011474:	ec51 0b17 	vmov	r0, r1, d7
 8011478:	2300      	movs	r3, #0
 801147a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801147e:	f7ef fb43 	bl	8000b08 <__aeabi_dcmpeq>
 8011482:	4680      	mov	r8, r0
 8011484:	b158      	cbz	r0, 801149e <_dtoa_r+0xce>
 8011486:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011488:	2301      	movs	r3, #1
 801148a:	6013      	str	r3, [r2, #0]
 801148c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801148e:	b113      	cbz	r3, 8011496 <_dtoa_r+0xc6>
 8011490:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011492:	4b86      	ldr	r3, [pc, #536]	@ (80116ac <_dtoa_r+0x2dc>)
 8011494:	6013      	str	r3, [r2, #0]
 8011496:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80116c0 <_dtoa_r+0x2f0>
 801149a:	f000 bd40 	b.w	8011f1e <_dtoa_r+0xb4e>
 801149e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80114a2:	aa14      	add	r2, sp, #80	@ 0x50
 80114a4:	a915      	add	r1, sp, #84	@ 0x54
 80114a6:	4648      	mov	r0, r9
 80114a8:	f001 f988 	bl	80127bc <__d2b>
 80114ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80114b0:	9002      	str	r0, [sp, #8]
 80114b2:	2e00      	cmp	r6, #0
 80114b4:	d078      	beq.n	80115a8 <_dtoa_r+0x1d8>
 80114b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80114bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80114c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80114c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80114cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80114d0:	4619      	mov	r1, r3
 80114d2:	2200      	movs	r2, #0
 80114d4:	4b76      	ldr	r3, [pc, #472]	@ (80116b0 <_dtoa_r+0x2e0>)
 80114d6:	f7ee fef7 	bl	80002c8 <__aeabi_dsub>
 80114da:	a36b      	add	r3, pc, #428	@ (adr r3, 8011688 <_dtoa_r+0x2b8>)
 80114dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e0:	f7ef f8aa 	bl	8000638 <__aeabi_dmul>
 80114e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011690 <_dtoa_r+0x2c0>)
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	f7ee feef 	bl	80002cc <__adddf3>
 80114ee:	4604      	mov	r4, r0
 80114f0:	4630      	mov	r0, r6
 80114f2:	460d      	mov	r5, r1
 80114f4:	f7ef f836 	bl	8000564 <__aeabi_i2d>
 80114f8:	a367      	add	r3, pc, #412	@ (adr r3, 8011698 <_dtoa_r+0x2c8>)
 80114fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fe:	f7ef f89b 	bl	8000638 <__aeabi_dmul>
 8011502:	4602      	mov	r2, r0
 8011504:	460b      	mov	r3, r1
 8011506:	4620      	mov	r0, r4
 8011508:	4629      	mov	r1, r5
 801150a:	f7ee fedf 	bl	80002cc <__adddf3>
 801150e:	4604      	mov	r4, r0
 8011510:	460d      	mov	r5, r1
 8011512:	f7ef fb41 	bl	8000b98 <__aeabi_d2iz>
 8011516:	2200      	movs	r2, #0
 8011518:	4607      	mov	r7, r0
 801151a:	2300      	movs	r3, #0
 801151c:	4620      	mov	r0, r4
 801151e:	4629      	mov	r1, r5
 8011520:	f7ef fafc 	bl	8000b1c <__aeabi_dcmplt>
 8011524:	b140      	cbz	r0, 8011538 <_dtoa_r+0x168>
 8011526:	4638      	mov	r0, r7
 8011528:	f7ef f81c 	bl	8000564 <__aeabi_i2d>
 801152c:	4622      	mov	r2, r4
 801152e:	462b      	mov	r3, r5
 8011530:	f7ef faea 	bl	8000b08 <__aeabi_dcmpeq>
 8011534:	b900      	cbnz	r0, 8011538 <_dtoa_r+0x168>
 8011536:	3f01      	subs	r7, #1
 8011538:	2f16      	cmp	r7, #22
 801153a:	d852      	bhi.n	80115e2 <_dtoa_r+0x212>
 801153c:	4b5d      	ldr	r3, [pc, #372]	@ (80116b4 <_dtoa_r+0x2e4>)
 801153e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801154a:	f7ef fae7 	bl	8000b1c <__aeabi_dcmplt>
 801154e:	2800      	cmp	r0, #0
 8011550:	d049      	beq.n	80115e6 <_dtoa_r+0x216>
 8011552:	3f01      	subs	r7, #1
 8011554:	2300      	movs	r3, #0
 8011556:	9310      	str	r3, [sp, #64]	@ 0x40
 8011558:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801155a:	1b9b      	subs	r3, r3, r6
 801155c:	1e5a      	subs	r2, r3, #1
 801155e:	bf45      	ittet	mi
 8011560:	f1c3 0301 	rsbmi	r3, r3, #1
 8011564:	9300      	strmi	r3, [sp, #0]
 8011566:	2300      	movpl	r3, #0
 8011568:	2300      	movmi	r3, #0
 801156a:	9206      	str	r2, [sp, #24]
 801156c:	bf54      	ite	pl
 801156e:	9300      	strpl	r3, [sp, #0]
 8011570:	9306      	strmi	r3, [sp, #24]
 8011572:	2f00      	cmp	r7, #0
 8011574:	db39      	blt.n	80115ea <_dtoa_r+0x21a>
 8011576:	9b06      	ldr	r3, [sp, #24]
 8011578:	970d      	str	r7, [sp, #52]	@ 0x34
 801157a:	443b      	add	r3, r7
 801157c:	9306      	str	r3, [sp, #24]
 801157e:	2300      	movs	r3, #0
 8011580:	9308      	str	r3, [sp, #32]
 8011582:	9b07      	ldr	r3, [sp, #28]
 8011584:	2b09      	cmp	r3, #9
 8011586:	d863      	bhi.n	8011650 <_dtoa_r+0x280>
 8011588:	2b05      	cmp	r3, #5
 801158a:	bfc4      	itt	gt
 801158c:	3b04      	subgt	r3, #4
 801158e:	9307      	strgt	r3, [sp, #28]
 8011590:	9b07      	ldr	r3, [sp, #28]
 8011592:	f1a3 0302 	sub.w	r3, r3, #2
 8011596:	bfcc      	ite	gt
 8011598:	2400      	movgt	r4, #0
 801159a:	2401      	movle	r4, #1
 801159c:	2b03      	cmp	r3, #3
 801159e:	d863      	bhi.n	8011668 <_dtoa_r+0x298>
 80115a0:	e8df f003 	tbb	[pc, r3]
 80115a4:	2b375452 	.word	0x2b375452
 80115a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80115ac:	441e      	add	r6, r3
 80115ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80115b2:	2b20      	cmp	r3, #32
 80115b4:	bfc1      	itttt	gt
 80115b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80115ba:	409f      	lslgt	r7, r3
 80115bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80115c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80115c4:	bfd6      	itet	le
 80115c6:	f1c3 0320 	rsble	r3, r3, #32
 80115ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80115ce:	fa04 f003 	lslle.w	r0, r4, r3
 80115d2:	f7ee ffb7 	bl	8000544 <__aeabi_ui2d>
 80115d6:	2201      	movs	r2, #1
 80115d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80115dc:	3e01      	subs	r6, #1
 80115de:	9212      	str	r2, [sp, #72]	@ 0x48
 80115e0:	e776      	b.n	80114d0 <_dtoa_r+0x100>
 80115e2:	2301      	movs	r3, #1
 80115e4:	e7b7      	b.n	8011556 <_dtoa_r+0x186>
 80115e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80115e8:	e7b6      	b.n	8011558 <_dtoa_r+0x188>
 80115ea:	9b00      	ldr	r3, [sp, #0]
 80115ec:	1bdb      	subs	r3, r3, r7
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	427b      	negs	r3, r7
 80115f2:	9308      	str	r3, [sp, #32]
 80115f4:	2300      	movs	r3, #0
 80115f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80115f8:	e7c3      	b.n	8011582 <_dtoa_r+0x1b2>
 80115fa:	2301      	movs	r3, #1
 80115fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80115fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011600:	eb07 0b03 	add.w	fp, r7, r3
 8011604:	f10b 0301 	add.w	r3, fp, #1
 8011608:	2b01      	cmp	r3, #1
 801160a:	9303      	str	r3, [sp, #12]
 801160c:	bfb8      	it	lt
 801160e:	2301      	movlt	r3, #1
 8011610:	e006      	b.n	8011620 <_dtoa_r+0x250>
 8011612:	2301      	movs	r3, #1
 8011614:	9309      	str	r3, [sp, #36]	@ 0x24
 8011616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011618:	2b00      	cmp	r3, #0
 801161a:	dd28      	ble.n	801166e <_dtoa_r+0x29e>
 801161c:	469b      	mov	fp, r3
 801161e:	9303      	str	r3, [sp, #12]
 8011620:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011624:	2100      	movs	r1, #0
 8011626:	2204      	movs	r2, #4
 8011628:	f102 0514 	add.w	r5, r2, #20
 801162c:	429d      	cmp	r5, r3
 801162e:	d926      	bls.n	801167e <_dtoa_r+0x2ae>
 8011630:	6041      	str	r1, [r0, #4]
 8011632:	4648      	mov	r0, r9
 8011634:	f000 fce6 	bl	8012004 <_Balloc>
 8011638:	4682      	mov	sl, r0
 801163a:	2800      	cmp	r0, #0
 801163c:	d142      	bne.n	80116c4 <_dtoa_r+0x2f4>
 801163e:	4b1e      	ldr	r3, [pc, #120]	@ (80116b8 <_dtoa_r+0x2e8>)
 8011640:	4602      	mov	r2, r0
 8011642:	f240 11af 	movw	r1, #431	@ 0x1af
 8011646:	e6da      	b.n	80113fe <_dtoa_r+0x2e>
 8011648:	2300      	movs	r3, #0
 801164a:	e7e3      	b.n	8011614 <_dtoa_r+0x244>
 801164c:	2300      	movs	r3, #0
 801164e:	e7d5      	b.n	80115fc <_dtoa_r+0x22c>
 8011650:	2401      	movs	r4, #1
 8011652:	2300      	movs	r3, #0
 8011654:	9307      	str	r3, [sp, #28]
 8011656:	9409      	str	r4, [sp, #36]	@ 0x24
 8011658:	f04f 3bff 	mov.w	fp, #4294967295
 801165c:	2200      	movs	r2, #0
 801165e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011662:	2312      	movs	r3, #18
 8011664:	920c      	str	r2, [sp, #48]	@ 0x30
 8011666:	e7db      	b.n	8011620 <_dtoa_r+0x250>
 8011668:	2301      	movs	r3, #1
 801166a:	9309      	str	r3, [sp, #36]	@ 0x24
 801166c:	e7f4      	b.n	8011658 <_dtoa_r+0x288>
 801166e:	f04f 0b01 	mov.w	fp, #1
 8011672:	f8cd b00c 	str.w	fp, [sp, #12]
 8011676:	465b      	mov	r3, fp
 8011678:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801167c:	e7d0      	b.n	8011620 <_dtoa_r+0x250>
 801167e:	3101      	adds	r1, #1
 8011680:	0052      	lsls	r2, r2, #1
 8011682:	e7d1      	b.n	8011628 <_dtoa_r+0x258>
 8011684:	f3af 8000 	nop.w
 8011688:	636f4361 	.word	0x636f4361
 801168c:	3fd287a7 	.word	0x3fd287a7
 8011690:	8b60c8b3 	.word	0x8b60c8b3
 8011694:	3fc68a28 	.word	0x3fc68a28
 8011698:	509f79fb 	.word	0x509f79fb
 801169c:	3fd34413 	.word	0x3fd34413
 80116a0:	08016841 	.word	0x08016841
 80116a4:	08016858 	.word	0x08016858
 80116a8:	7ff00000 	.word	0x7ff00000
 80116ac:	08016933 	.word	0x08016933
 80116b0:	3ff80000 	.word	0x3ff80000
 80116b4:	08016ad8 	.word	0x08016ad8
 80116b8:	080168b0 	.word	0x080168b0
 80116bc:	0801683d 	.word	0x0801683d
 80116c0:	08016932 	.word	0x08016932
 80116c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80116c8:	6018      	str	r0, [r3, #0]
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	2b0e      	cmp	r3, #14
 80116ce:	f200 80a1 	bhi.w	8011814 <_dtoa_r+0x444>
 80116d2:	2c00      	cmp	r4, #0
 80116d4:	f000 809e 	beq.w	8011814 <_dtoa_r+0x444>
 80116d8:	2f00      	cmp	r7, #0
 80116da:	dd33      	ble.n	8011744 <_dtoa_r+0x374>
 80116dc:	4b9c      	ldr	r3, [pc, #624]	@ (8011950 <_dtoa_r+0x580>)
 80116de:	f007 020f 	and.w	r2, r7, #15
 80116e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116e6:	ed93 7b00 	vldr	d7, [r3]
 80116ea:	05f8      	lsls	r0, r7, #23
 80116ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80116f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80116f4:	d516      	bpl.n	8011724 <_dtoa_r+0x354>
 80116f6:	4b97      	ldr	r3, [pc, #604]	@ (8011954 <_dtoa_r+0x584>)
 80116f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80116fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011700:	f7ef f8c4 	bl	800088c <__aeabi_ddiv>
 8011704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011708:	f004 040f 	and.w	r4, r4, #15
 801170c:	2603      	movs	r6, #3
 801170e:	4d91      	ldr	r5, [pc, #580]	@ (8011954 <_dtoa_r+0x584>)
 8011710:	b954      	cbnz	r4, 8011728 <_dtoa_r+0x358>
 8011712:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801171a:	f7ef f8b7 	bl	800088c <__aeabi_ddiv>
 801171e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011722:	e028      	b.n	8011776 <_dtoa_r+0x3a6>
 8011724:	2602      	movs	r6, #2
 8011726:	e7f2      	b.n	801170e <_dtoa_r+0x33e>
 8011728:	07e1      	lsls	r1, r4, #31
 801172a:	d508      	bpl.n	801173e <_dtoa_r+0x36e>
 801172c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011734:	f7ee ff80 	bl	8000638 <__aeabi_dmul>
 8011738:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801173c:	3601      	adds	r6, #1
 801173e:	1064      	asrs	r4, r4, #1
 8011740:	3508      	adds	r5, #8
 8011742:	e7e5      	b.n	8011710 <_dtoa_r+0x340>
 8011744:	f000 80af 	beq.w	80118a6 <_dtoa_r+0x4d6>
 8011748:	427c      	negs	r4, r7
 801174a:	4b81      	ldr	r3, [pc, #516]	@ (8011950 <_dtoa_r+0x580>)
 801174c:	4d81      	ldr	r5, [pc, #516]	@ (8011954 <_dtoa_r+0x584>)
 801174e:	f004 020f 	and.w	r2, r4, #15
 8011752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801175e:	f7ee ff6b 	bl	8000638 <__aeabi_dmul>
 8011762:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011766:	1124      	asrs	r4, r4, #4
 8011768:	2300      	movs	r3, #0
 801176a:	2602      	movs	r6, #2
 801176c:	2c00      	cmp	r4, #0
 801176e:	f040 808f 	bne.w	8011890 <_dtoa_r+0x4c0>
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1d3      	bne.n	801171e <_dtoa_r+0x34e>
 8011776:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011778:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	f000 8094 	beq.w	80118aa <_dtoa_r+0x4da>
 8011782:	4b75      	ldr	r3, [pc, #468]	@ (8011958 <_dtoa_r+0x588>)
 8011784:	2200      	movs	r2, #0
 8011786:	4620      	mov	r0, r4
 8011788:	4629      	mov	r1, r5
 801178a:	f7ef f9c7 	bl	8000b1c <__aeabi_dcmplt>
 801178e:	2800      	cmp	r0, #0
 8011790:	f000 808b 	beq.w	80118aa <_dtoa_r+0x4da>
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	2b00      	cmp	r3, #0
 8011798:	f000 8087 	beq.w	80118aa <_dtoa_r+0x4da>
 801179c:	f1bb 0f00 	cmp.w	fp, #0
 80117a0:	dd34      	ble.n	801180c <_dtoa_r+0x43c>
 80117a2:	4620      	mov	r0, r4
 80117a4:	4b6d      	ldr	r3, [pc, #436]	@ (801195c <_dtoa_r+0x58c>)
 80117a6:	2200      	movs	r2, #0
 80117a8:	4629      	mov	r1, r5
 80117aa:	f7ee ff45 	bl	8000638 <__aeabi_dmul>
 80117ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80117b6:	3601      	adds	r6, #1
 80117b8:	465c      	mov	r4, fp
 80117ba:	4630      	mov	r0, r6
 80117bc:	f7ee fed2 	bl	8000564 <__aeabi_i2d>
 80117c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117c4:	f7ee ff38 	bl	8000638 <__aeabi_dmul>
 80117c8:	4b65      	ldr	r3, [pc, #404]	@ (8011960 <_dtoa_r+0x590>)
 80117ca:	2200      	movs	r2, #0
 80117cc:	f7ee fd7e 	bl	80002cc <__adddf3>
 80117d0:	4605      	mov	r5, r0
 80117d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80117d6:	2c00      	cmp	r4, #0
 80117d8:	d16a      	bne.n	80118b0 <_dtoa_r+0x4e0>
 80117da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117de:	4b61      	ldr	r3, [pc, #388]	@ (8011964 <_dtoa_r+0x594>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	f7ee fd71 	bl	80002c8 <__aeabi_dsub>
 80117e6:	4602      	mov	r2, r0
 80117e8:	460b      	mov	r3, r1
 80117ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80117ee:	462a      	mov	r2, r5
 80117f0:	4633      	mov	r3, r6
 80117f2:	f7ef f9b1 	bl	8000b58 <__aeabi_dcmpgt>
 80117f6:	2800      	cmp	r0, #0
 80117f8:	f040 8298 	bne.w	8011d2c <_dtoa_r+0x95c>
 80117fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011800:	462a      	mov	r2, r5
 8011802:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011806:	f7ef f989 	bl	8000b1c <__aeabi_dcmplt>
 801180a:	bb38      	cbnz	r0, 801185c <_dtoa_r+0x48c>
 801180c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011810:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011814:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011816:	2b00      	cmp	r3, #0
 8011818:	f2c0 8157 	blt.w	8011aca <_dtoa_r+0x6fa>
 801181c:	2f0e      	cmp	r7, #14
 801181e:	f300 8154 	bgt.w	8011aca <_dtoa_r+0x6fa>
 8011822:	4b4b      	ldr	r3, [pc, #300]	@ (8011950 <_dtoa_r+0x580>)
 8011824:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011828:	ed93 7b00 	vldr	d7, [r3]
 801182c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801182e:	2b00      	cmp	r3, #0
 8011830:	ed8d 7b00 	vstr	d7, [sp]
 8011834:	f280 80e5 	bge.w	8011a02 <_dtoa_r+0x632>
 8011838:	9b03      	ldr	r3, [sp, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	f300 80e1 	bgt.w	8011a02 <_dtoa_r+0x632>
 8011840:	d10c      	bne.n	801185c <_dtoa_r+0x48c>
 8011842:	4b48      	ldr	r3, [pc, #288]	@ (8011964 <_dtoa_r+0x594>)
 8011844:	2200      	movs	r2, #0
 8011846:	ec51 0b17 	vmov	r0, r1, d7
 801184a:	f7ee fef5 	bl	8000638 <__aeabi_dmul>
 801184e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011852:	f7ef f977 	bl	8000b44 <__aeabi_dcmpge>
 8011856:	2800      	cmp	r0, #0
 8011858:	f000 8266 	beq.w	8011d28 <_dtoa_r+0x958>
 801185c:	2400      	movs	r4, #0
 801185e:	4625      	mov	r5, r4
 8011860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011862:	4656      	mov	r6, sl
 8011864:	ea6f 0803 	mvn.w	r8, r3
 8011868:	2700      	movs	r7, #0
 801186a:	4621      	mov	r1, r4
 801186c:	4648      	mov	r0, r9
 801186e:	f000 fc09 	bl	8012084 <_Bfree>
 8011872:	2d00      	cmp	r5, #0
 8011874:	f000 80bd 	beq.w	80119f2 <_dtoa_r+0x622>
 8011878:	b12f      	cbz	r7, 8011886 <_dtoa_r+0x4b6>
 801187a:	42af      	cmp	r7, r5
 801187c:	d003      	beq.n	8011886 <_dtoa_r+0x4b6>
 801187e:	4639      	mov	r1, r7
 8011880:	4648      	mov	r0, r9
 8011882:	f000 fbff 	bl	8012084 <_Bfree>
 8011886:	4629      	mov	r1, r5
 8011888:	4648      	mov	r0, r9
 801188a:	f000 fbfb 	bl	8012084 <_Bfree>
 801188e:	e0b0      	b.n	80119f2 <_dtoa_r+0x622>
 8011890:	07e2      	lsls	r2, r4, #31
 8011892:	d505      	bpl.n	80118a0 <_dtoa_r+0x4d0>
 8011894:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011898:	f7ee fece 	bl	8000638 <__aeabi_dmul>
 801189c:	3601      	adds	r6, #1
 801189e:	2301      	movs	r3, #1
 80118a0:	1064      	asrs	r4, r4, #1
 80118a2:	3508      	adds	r5, #8
 80118a4:	e762      	b.n	801176c <_dtoa_r+0x39c>
 80118a6:	2602      	movs	r6, #2
 80118a8:	e765      	b.n	8011776 <_dtoa_r+0x3a6>
 80118aa:	9c03      	ldr	r4, [sp, #12]
 80118ac:	46b8      	mov	r8, r7
 80118ae:	e784      	b.n	80117ba <_dtoa_r+0x3ea>
 80118b0:	4b27      	ldr	r3, [pc, #156]	@ (8011950 <_dtoa_r+0x580>)
 80118b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80118bc:	4454      	add	r4, sl
 80118be:	2900      	cmp	r1, #0
 80118c0:	d054      	beq.n	801196c <_dtoa_r+0x59c>
 80118c2:	4929      	ldr	r1, [pc, #164]	@ (8011968 <_dtoa_r+0x598>)
 80118c4:	2000      	movs	r0, #0
 80118c6:	f7ee ffe1 	bl	800088c <__aeabi_ddiv>
 80118ca:	4633      	mov	r3, r6
 80118cc:	462a      	mov	r2, r5
 80118ce:	f7ee fcfb 	bl	80002c8 <__aeabi_dsub>
 80118d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80118d6:	4656      	mov	r6, sl
 80118d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118dc:	f7ef f95c 	bl	8000b98 <__aeabi_d2iz>
 80118e0:	4605      	mov	r5, r0
 80118e2:	f7ee fe3f 	bl	8000564 <__aeabi_i2d>
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118ee:	f7ee fceb 	bl	80002c8 <__aeabi_dsub>
 80118f2:	3530      	adds	r5, #48	@ 0x30
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80118fc:	f806 5b01 	strb.w	r5, [r6], #1
 8011900:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011904:	f7ef f90a 	bl	8000b1c <__aeabi_dcmplt>
 8011908:	2800      	cmp	r0, #0
 801190a:	d172      	bne.n	80119f2 <_dtoa_r+0x622>
 801190c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011910:	4911      	ldr	r1, [pc, #68]	@ (8011958 <_dtoa_r+0x588>)
 8011912:	2000      	movs	r0, #0
 8011914:	f7ee fcd8 	bl	80002c8 <__aeabi_dsub>
 8011918:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801191c:	f7ef f8fe 	bl	8000b1c <__aeabi_dcmplt>
 8011920:	2800      	cmp	r0, #0
 8011922:	f040 80b4 	bne.w	8011a8e <_dtoa_r+0x6be>
 8011926:	42a6      	cmp	r6, r4
 8011928:	f43f af70 	beq.w	801180c <_dtoa_r+0x43c>
 801192c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011930:	4b0a      	ldr	r3, [pc, #40]	@ (801195c <_dtoa_r+0x58c>)
 8011932:	2200      	movs	r2, #0
 8011934:	f7ee fe80 	bl	8000638 <__aeabi_dmul>
 8011938:	4b08      	ldr	r3, [pc, #32]	@ (801195c <_dtoa_r+0x58c>)
 801193a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801193e:	2200      	movs	r2, #0
 8011940:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011944:	f7ee fe78 	bl	8000638 <__aeabi_dmul>
 8011948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801194c:	e7c4      	b.n	80118d8 <_dtoa_r+0x508>
 801194e:	bf00      	nop
 8011950:	08016ad8 	.word	0x08016ad8
 8011954:	08016ab0 	.word	0x08016ab0
 8011958:	3ff00000 	.word	0x3ff00000
 801195c:	40240000 	.word	0x40240000
 8011960:	401c0000 	.word	0x401c0000
 8011964:	40140000 	.word	0x40140000
 8011968:	3fe00000 	.word	0x3fe00000
 801196c:	4631      	mov	r1, r6
 801196e:	4628      	mov	r0, r5
 8011970:	f7ee fe62 	bl	8000638 <__aeabi_dmul>
 8011974:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011978:	9413      	str	r4, [sp, #76]	@ 0x4c
 801197a:	4656      	mov	r6, sl
 801197c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011980:	f7ef f90a 	bl	8000b98 <__aeabi_d2iz>
 8011984:	4605      	mov	r5, r0
 8011986:	f7ee fded 	bl	8000564 <__aeabi_i2d>
 801198a:	4602      	mov	r2, r0
 801198c:	460b      	mov	r3, r1
 801198e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011992:	f7ee fc99 	bl	80002c8 <__aeabi_dsub>
 8011996:	3530      	adds	r5, #48	@ 0x30
 8011998:	f806 5b01 	strb.w	r5, [r6], #1
 801199c:	4602      	mov	r2, r0
 801199e:	460b      	mov	r3, r1
 80119a0:	42a6      	cmp	r6, r4
 80119a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80119a6:	f04f 0200 	mov.w	r2, #0
 80119aa:	d124      	bne.n	80119f6 <_dtoa_r+0x626>
 80119ac:	4baf      	ldr	r3, [pc, #700]	@ (8011c6c <_dtoa_r+0x89c>)
 80119ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80119b2:	f7ee fc8b 	bl	80002cc <__adddf3>
 80119b6:	4602      	mov	r2, r0
 80119b8:	460b      	mov	r3, r1
 80119ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119be:	f7ef f8cb 	bl	8000b58 <__aeabi_dcmpgt>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d163      	bne.n	8011a8e <_dtoa_r+0x6be>
 80119c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80119ca:	49a8      	ldr	r1, [pc, #672]	@ (8011c6c <_dtoa_r+0x89c>)
 80119cc:	2000      	movs	r0, #0
 80119ce:	f7ee fc7b 	bl	80002c8 <__aeabi_dsub>
 80119d2:	4602      	mov	r2, r0
 80119d4:	460b      	mov	r3, r1
 80119d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119da:	f7ef f89f 	bl	8000b1c <__aeabi_dcmplt>
 80119de:	2800      	cmp	r0, #0
 80119e0:	f43f af14 	beq.w	801180c <_dtoa_r+0x43c>
 80119e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80119e6:	1e73      	subs	r3, r6, #1
 80119e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80119ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80119ee:	2b30      	cmp	r3, #48	@ 0x30
 80119f0:	d0f8      	beq.n	80119e4 <_dtoa_r+0x614>
 80119f2:	4647      	mov	r7, r8
 80119f4:	e03b      	b.n	8011a6e <_dtoa_r+0x69e>
 80119f6:	4b9e      	ldr	r3, [pc, #632]	@ (8011c70 <_dtoa_r+0x8a0>)
 80119f8:	f7ee fe1e 	bl	8000638 <__aeabi_dmul>
 80119fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a00:	e7bc      	b.n	801197c <_dtoa_r+0x5ac>
 8011a02:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011a06:	4656      	mov	r6, sl
 8011a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	4629      	mov	r1, r5
 8011a10:	f7ee ff3c 	bl	800088c <__aeabi_ddiv>
 8011a14:	f7ef f8c0 	bl	8000b98 <__aeabi_d2iz>
 8011a18:	4680      	mov	r8, r0
 8011a1a:	f7ee fda3 	bl	8000564 <__aeabi_i2d>
 8011a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a22:	f7ee fe09 	bl	8000638 <__aeabi_dmul>
 8011a26:	4602      	mov	r2, r0
 8011a28:	460b      	mov	r3, r1
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011a32:	f7ee fc49 	bl	80002c8 <__aeabi_dsub>
 8011a36:	f806 4b01 	strb.w	r4, [r6], #1
 8011a3a:	9d03      	ldr	r5, [sp, #12]
 8011a3c:	eba6 040a 	sub.w	r4, r6, sl
 8011a40:	42a5      	cmp	r5, r4
 8011a42:	4602      	mov	r2, r0
 8011a44:	460b      	mov	r3, r1
 8011a46:	d133      	bne.n	8011ab0 <_dtoa_r+0x6e0>
 8011a48:	f7ee fc40 	bl	80002cc <__adddf3>
 8011a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a50:	4604      	mov	r4, r0
 8011a52:	460d      	mov	r5, r1
 8011a54:	f7ef f880 	bl	8000b58 <__aeabi_dcmpgt>
 8011a58:	b9c0      	cbnz	r0, 8011a8c <_dtoa_r+0x6bc>
 8011a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a5e:	4620      	mov	r0, r4
 8011a60:	4629      	mov	r1, r5
 8011a62:	f7ef f851 	bl	8000b08 <__aeabi_dcmpeq>
 8011a66:	b110      	cbz	r0, 8011a6e <_dtoa_r+0x69e>
 8011a68:	f018 0f01 	tst.w	r8, #1
 8011a6c:	d10e      	bne.n	8011a8c <_dtoa_r+0x6bc>
 8011a6e:	9902      	ldr	r1, [sp, #8]
 8011a70:	4648      	mov	r0, r9
 8011a72:	f000 fb07 	bl	8012084 <_Bfree>
 8011a76:	2300      	movs	r3, #0
 8011a78:	7033      	strb	r3, [r6, #0]
 8011a7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a7c:	3701      	adds	r7, #1
 8011a7e:	601f      	str	r7, [r3, #0]
 8011a80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 824b 	beq.w	8011f1e <_dtoa_r+0xb4e>
 8011a88:	601e      	str	r6, [r3, #0]
 8011a8a:	e248      	b.n	8011f1e <_dtoa_r+0xb4e>
 8011a8c:	46b8      	mov	r8, r7
 8011a8e:	4633      	mov	r3, r6
 8011a90:	461e      	mov	r6, r3
 8011a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a96:	2a39      	cmp	r2, #57	@ 0x39
 8011a98:	d106      	bne.n	8011aa8 <_dtoa_r+0x6d8>
 8011a9a:	459a      	cmp	sl, r3
 8011a9c:	d1f8      	bne.n	8011a90 <_dtoa_r+0x6c0>
 8011a9e:	2230      	movs	r2, #48	@ 0x30
 8011aa0:	f108 0801 	add.w	r8, r8, #1
 8011aa4:	f88a 2000 	strb.w	r2, [sl]
 8011aa8:	781a      	ldrb	r2, [r3, #0]
 8011aaa:	3201      	adds	r2, #1
 8011aac:	701a      	strb	r2, [r3, #0]
 8011aae:	e7a0      	b.n	80119f2 <_dtoa_r+0x622>
 8011ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8011c70 <_dtoa_r+0x8a0>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f7ee fdc0 	bl	8000638 <__aeabi_dmul>
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2300      	movs	r3, #0
 8011abc:	4604      	mov	r4, r0
 8011abe:	460d      	mov	r5, r1
 8011ac0:	f7ef f822 	bl	8000b08 <__aeabi_dcmpeq>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d09f      	beq.n	8011a08 <_dtoa_r+0x638>
 8011ac8:	e7d1      	b.n	8011a6e <_dtoa_r+0x69e>
 8011aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011acc:	2a00      	cmp	r2, #0
 8011ace:	f000 80ea 	beq.w	8011ca6 <_dtoa_r+0x8d6>
 8011ad2:	9a07      	ldr	r2, [sp, #28]
 8011ad4:	2a01      	cmp	r2, #1
 8011ad6:	f300 80cd 	bgt.w	8011c74 <_dtoa_r+0x8a4>
 8011ada:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011adc:	2a00      	cmp	r2, #0
 8011ade:	f000 80c1 	beq.w	8011c64 <_dtoa_r+0x894>
 8011ae2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011ae6:	9c08      	ldr	r4, [sp, #32]
 8011ae8:	9e00      	ldr	r6, [sp, #0]
 8011aea:	9a00      	ldr	r2, [sp, #0]
 8011aec:	441a      	add	r2, r3
 8011aee:	9200      	str	r2, [sp, #0]
 8011af0:	9a06      	ldr	r2, [sp, #24]
 8011af2:	2101      	movs	r1, #1
 8011af4:	441a      	add	r2, r3
 8011af6:	4648      	mov	r0, r9
 8011af8:	9206      	str	r2, [sp, #24]
 8011afa:	f000 fbc1 	bl	8012280 <__i2b>
 8011afe:	4605      	mov	r5, r0
 8011b00:	b166      	cbz	r6, 8011b1c <_dtoa_r+0x74c>
 8011b02:	9b06      	ldr	r3, [sp, #24]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	dd09      	ble.n	8011b1c <_dtoa_r+0x74c>
 8011b08:	42b3      	cmp	r3, r6
 8011b0a:	9a00      	ldr	r2, [sp, #0]
 8011b0c:	bfa8      	it	ge
 8011b0e:	4633      	movge	r3, r6
 8011b10:	1ad2      	subs	r2, r2, r3
 8011b12:	9200      	str	r2, [sp, #0]
 8011b14:	9a06      	ldr	r2, [sp, #24]
 8011b16:	1af6      	subs	r6, r6, r3
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	9306      	str	r3, [sp, #24]
 8011b1c:	9b08      	ldr	r3, [sp, #32]
 8011b1e:	b30b      	cbz	r3, 8011b64 <_dtoa_r+0x794>
 8011b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f000 80c6 	beq.w	8011cb4 <_dtoa_r+0x8e4>
 8011b28:	2c00      	cmp	r4, #0
 8011b2a:	f000 80c0 	beq.w	8011cae <_dtoa_r+0x8de>
 8011b2e:	4629      	mov	r1, r5
 8011b30:	4622      	mov	r2, r4
 8011b32:	4648      	mov	r0, r9
 8011b34:	f000 fc5c 	bl	80123f0 <__pow5mult>
 8011b38:	9a02      	ldr	r2, [sp, #8]
 8011b3a:	4601      	mov	r1, r0
 8011b3c:	4605      	mov	r5, r0
 8011b3e:	4648      	mov	r0, r9
 8011b40:	f000 fbb4 	bl	80122ac <__multiply>
 8011b44:	9902      	ldr	r1, [sp, #8]
 8011b46:	4680      	mov	r8, r0
 8011b48:	4648      	mov	r0, r9
 8011b4a:	f000 fa9b 	bl	8012084 <_Bfree>
 8011b4e:	9b08      	ldr	r3, [sp, #32]
 8011b50:	1b1b      	subs	r3, r3, r4
 8011b52:	9308      	str	r3, [sp, #32]
 8011b54:	f000 80b1 	beq.w	8011cba <_dtoa_r+0x8ea>
 8011b58:	9a08      	ldr	r2, [sp, #32]
 8011b5a:	4641      	mov	r1, r8
 8011b5c:	4648      	mov	r0, r9
 8011b5e:	f000 fc47 	bl	80123f0 <__pow5mult>
 8011b62:	9002      	str	r0, [sp, #8]
 8011b64:	2101      	movs	r1, #1
 8011b66:	4648      	mov	r0, r9
 8011b68:	f000 fb8a 	bl	8012280 <__i2b>
 8011b6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b6e:	4604      	mov	r4, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f000 81d8 	beq.w	8011f26 <_dtoa_r+0xb56>
 8011b76:	461a      	mov	r2, r3
 8011b78:	4601      	mov	r1, r0
 8011b7a:	4648      	mov	r0, r9
 8011b7c:	f000 fc38 	bl	80123f0 <__pow5mult>
 8011b80:	9b07      	ldr	r3, [sp, #28]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	4604      	mov	r4, r0
 8011b86:	f300 809f 	bgt.w	8011cc8 <_dtoa_r+0x8f8>
 8011b8a:	9b04      	ldr	r3, [sp, #16]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f040 8097 	bne.w	8011cc0 <_dtoa_r+0x8f0>
 8011b92:	9b05      	ldr	r3, [sp, #20]
 8011b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f040 8093 	bne.w	8011cc4 <_dtoa_r+0x8f4>
 8011b9e:	9b05      	ldr	r3, [sp, #20]
 8011ba0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011ba4:	0d1b      	lsrs	r3, r3, #20
 8011ba6:	051b      	lsls	r3, r3, #20
 8011ba8:	b133      	cbz	r3, 8011bb8 <_dtoa_r+0x7e8>
 8011baa:	9b00      	ldr	r3, [sp, #0]
 8011bac:	3301      	adds	r3, #1
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	9b06      	ldr	r3, [sp, #24]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	9306      	str	r3, [sp, #24]
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	9308      	str	r3, [sp, #32]
 8011bba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f000 81b8 	beq.w	8011f32 <_dtoa_r+0xb62>
 8011bc2:	6923      	ldr	r3, [r4, #16]
 8011bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011bc8:	6918      	ldr	r0, [r3, #16]
 8011bca:	f000 fb0d 	bl	80121e8 <__hi0bits>
 8011bce:	f1c0 0020 	rsb	r0, r0, #32
 8011bd2:	9b06      	ldr	r3, [sp, #24]
 8011bd4:	4418      	add	r0, r3
 8011bd6:	f010 001f 	ands.w	r0, r0, #31
 8011bda:	f000 8082 	beq.w	8011ce2 <_dtoa_r+0x912>
 8011bde:	f1c0 0320 	rsb	r3, r0, #32
 8011be2:	2b04      	cmp	r3, #4
 8011be4:	dd73      	ble.n	8011cce <_dtoa_r+0x8fe>
 8011be6:	9b00      	ldr	r3, [sp, #0]
 8011be8:	f1c0 001c 	rsb	r0, r0, #28
 8011bec:	4403      	add	r3, r0
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	9b06      	ldr	r3, [sp, #24]
 8011bf2:	4403      	add	r3, r0
 8011bf4:	4406      	add	r6, r0
 8011bf6:	9306      	str	r3, [sp, #24]
 8011bf8:	9b00      	ldr	r3, [sp, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	dd05      	ble.n	8011c0a <_dtoa_r+0x83a>
 8011bfe:	9902      	ldr	r1, [sp, #8]
 8011c00:	461a      	mov	r2, r3
 8011c02:	4648      	mov	r0, r9
 8011c04:	f000 fc4e 	bl	80124a4 <__lshift>
 8011c08:	9002      	str	r0, [sp, #8]
 8011c0a:	9b06      	ldr	r3, [sp, #24]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	dd05      	ble.n	8011c1c <_dtoa_r+0x84c>
 8011c10:	4621      	mov	r1, r4
 8011c12:	461a      	mov	r2, r3
 8011c14:	4648      	mov	r0, r9
 8011c16:	f000 fc45 	bl	80124a4 <__lshift>
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d061      	beq.n	8011ce6 <_dtoa_r+0x916>
 8011c22:	9802      	ldr	r0, [sp, #8]
 8011c24:	4621      	mov	r1, r4
 8011c26:	f000 fca9 	bl	801257c <__mcmp>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	da5b      	bge.n	8011ce6 <_dtoa_r+0x916>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	9902      	ldr	r1, [sp, #8]
 8011c32:	220a      	movs	r2, #10
 8011c34:	4648      	mov	r0, r9
 8011c36:	f000 fa47 	bl	80120c8 <__multadd>
 8011c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c3c:	9002      	str	r0, [sp, #8]
 8011c3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f000 8177 	beq.w	8011f36 <_dtoa_r+0xb66>
 8011c48:	4629      	mov	r1, r5
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	4648      	mov	r0, r9
 8011c50:	f000 fa3a 	bl	80120c8 <__multadd>
 8011c54:	f1bb 0f00 	cmp.w	fp, #0
 8011c58:	4605      	mov	r5, r0
 8011c5a:	dc6f      	bgt.n	8011d3c <_dtoa_r+0x96c>
 8011c5c:	9b07      	ldr	r3, [sp, #28]
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	dc49      	bgt.n	8011cf6 <_dtoa_r+0x926>
 8011c62:	e06b      	b.n	8011d3c <_dtoa_r+0x96c>
 8011c64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011c6a:	e73c      	b.n	8011ae6 <_dtoa_r+0x716>
 8011c6c:	3fe00000 	.word	0x3fe00000
 8011c70:	40240000 	.word	0x40240000
 8011c74:	9b03      	ldr	r3, [sp, #12]
 8011c76:	1e5c      	subs	r4, r3, #1
 8011c78:	9b08      	ldr	r3, [sp, #32]
 8011c7a:	42a3      	cmp	r3, r4
 8011c7c:	db09      	blt.n	8011c92 <_dtoa_r+0x8c2>
 8011c7e:	1b1c      	subs	r4, r3, r4
 8011c80:	9b03      	ldr	r3, [sp, #12]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f6bf af30 	bge.w	8011ae8 <_dtoa_r+0x718>
 8011c88:	9b00      	ldr	r3, [sp, #0]
 8011c8a:	9a03      	ldr	r2, [sp, #12]
 8011c8c:	1a9e      	subs	r6, r3, r2
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e72b      	b.n	8011aea <_dtoa_r+0x71a>
 8011c92:	9b08      	ldr	r3, [sp, #32]
 8011c94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c96:	9408      	str	r4, [sp, #32]
 8011c98:	1ae3      	subs	r3, r4, r3
 8011c9a:	441a      	add	r2, r3
 8011c9c:	9e00      	ldr	r6, [sp, #0]
 8011c9e:	9b03      	ldr	r3, [sp, #12]
 8011ca0:	920d      	str	r2, [sp, #52]	@ 0x34
 8011ca2:	2400      	movs	r4, #0
 8011ca4:	e721      	b.n	8011aea <_dtoa_r+0x71a>
 8011ca6:	9c08      	ldr	r4, [sp, #32]
 8011ca8:	9e00      	ldr	r6, [sp, #0]
 8011caa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011cac:	e728      	b.n	8011b00 <_dtoa_r+0x730>
 8011cae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011cb2:	e751      	b.n	8011b58 <_dtoa_r+0x788>
 8011cb4:	9a08      	ldr	r2, [sp, #32]
 8011cb6:	9902      	ldr	r1, [sp, #8]
 8011cb8:	e750      	b.n	8011b5c <_dtoa_r+0x78c>
 8011cba:	f8cd 8008 	str.w	r8, [sp, #8]
 8011cbe:	e751      	b.n	8011b64 <_dtoa_r+0x794>
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	e779      	b.n	8011bb8 <_dtoa_r+0x7e8>
 8011cc4:	9b04      	ldr	r3, [sp, #16]
 8011cc6:	e777      	b.n	8011bb8 <_dtoa_r+0x7e8>
 8011cc8:	2300      	movs	r3, #0
 8011cca:	9308      	str	r3, [sp, #32]
 8011ccc:	e779      	b.n	8011bc2 <_dtoa_r+0x7f2>
 8011cce:	d093      	beq.n	8011bf8 <_dtoa_r+0x828>
 8011cd0:	9a00      	ldr	r2, [sp, #0]
 8011cd2:	331c      	adds	r3, #28
 8011cd4:	441a      	add	r2, r3
 8011cd6:	9200      	str	r2, [sp, #0]
 8011cd8:	9a06      	ldr	r2, [sp, #24]
 8011cda:	441a      	add	r2, r3
 8011cdc:	441e      	add	r6, r3
 8011cde:	9206      	str	r2, [sp, #24]
 8011ce0:	e78a      	b.n	8011bf8 <_dtoa_r+0x828>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	e7f4      	b.n	8011cd0 <_dtoa_r+0x900>
 8011ce6:	9b03      	ldr	r3, [sp, #12]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	46b8      	mov	r8, r7
 8011cec:	dc20      	bgt.n	8011d30 <_dtoa_r+0x960>
 8011cee:	469b      	mov	fp, r3
 8011cf0:	9b07      	ldr	r3, [sp, #28]
 8011cf2:	2b02      	cmp	r3, #2
 8011cf4:	dd1e      	ble.n	8011d34 <_dtoa_r+0x964>
 8011cf6:	f1bb 0f00 	cmp.w	fp, #0
 8011cfa:	f47f adb1 	bne.w	8011860 <_dtoa_r+0x490>
 8011cfe:	4621      	mov	r1, r4
 8011d00:	465b      	mov	r3, fp
 8011d02:	2205      	movs	r2, #5
 8011d04:	4648      	mov	r0, r9
 8011d06:	f000 f9df 	bl	80120c8 <__multadd>
 8011d0a:	4601      	mov	r1, r0
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	9802      	ldr	r0, [sp, #8]
 8011d10:	f000 fc34 	bl	801257c <__mcmp>
 8011d14:	2800      	cmp	r0, #0
 8011d16:	f77f ada3 	ble.w	8011860 <_dtoa_r+0x490>
 8011d1a:	4656      	mov	r6, sl
 8011d1c:	2331      	movs	r3, #49	@ 0x31
 8011d1e:	f806 3b01 	strb.w	r3, [r6], #1
 8011d22:	f108 0801 	add.w	r8, r8, #1
 8011d26:	e59f      	b.n	8011868 <_dtoa_r+0x498>
 8011d28:	9c03      	ldr	r4, [sp, #12]
 8011d2a:	46b8      	mov	r8, r7
 8011d2c:	4625      	mov	r5, r4
 8011d2e:	e7f4      	b.n	8011d1a <_dtoa_r+0x94a>
 8011d30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 8101 	beq.w	8011f3e <_dtoa_r+0xb6e>
 8011d3c:	2e00      	cmp	r6, #0
 8011d3e:	dd05      	ble.n	8011d4c <_dtoa_r+0x97c>
 8011d40:	4629      	mov	r1, r5
 8011d42:	4632      	mov	r2, r6
 8011d44:	4648      	mov	r0, r9
 8011d46:	f000 fbad 	bl	80124a4 <__lshift>
 8011d4a:	4605      	mov	r5, r0
 8011d4c:	9b08      	ldr	r3, [sp, #32]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d05c      	beq.n	8011e0c <_dtoa_r+0xa3c>
 8011d52:	6869      	ldr	r1, [r5, #4]
 8011d54:	4648      	mov	r0, r9
 8011d56:	f000 f955 	bl	8012004 <_Balloc>
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	b928      	cbnz	r0, 8011d6a <_dtoa_r+0x99a>
 8011d5e:	4b82      	ldr	r3, [pc, #520]	@ (8011f68 <_dtoa_r+0xb98>)
 8011d60:	4602      	mov	r2, r0
 8011d62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011d66:	f7ff bb4a 	b.w	80113fe <_dtoa_r+0x2e>
 8011d6a:	692a      	ldr	r2, [r5, #16]
 8011d6c:	3202      	adds	r2, #2
 8011d6e:	0092      	lsls	r2, r2, #2
 8011d70:	f105 010c 	add.w	r1, r5, #12
 8011d74:	300c      	adds	r0, #12
 8011d76:	f7ff fa84 	bl	8011282 <memcpy>
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	4648      	mov	r0, r9
 8011d80:	f000 fb90 	bl	80124a4 <__lshift>
 8011d84:	f10a 0301 	add.w	r3, sl, #1
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	eb0a 030b 	add.w	r3, sl, fp
 8011d8e:	9308      	str	r3, [sp, #32]
 8011d90:	9b04      	ldr	r3, [sp, #16]
 8011d92:	f003 0301 	and.w	r3, r3, #1
 8011d96:	462f      	mov	r7, r5
 8011d98:	9306      	str	r3, [sp, #24]
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	9b00      	ldr	r3, [sp, #0]
 8011d9e:	9802      	ldr	r0, [sp, #8]
 8011da0:	4621      	mov	r1, r4
 8011da2:	f103 3bff 	add.w	fp, r3, #4294967295
 8011da6:	f7ff fa88 	bl	80112ba <quorem>
 8011daa:	4603      	mov	r3, r0
 8011dac:	3330      	adds	r3, #48	@ 0x30
 8011dae:	9003      	str	r0, [sp, #12]
 8011db0:	4639      	mov	r1, r7
 8011db2:	9802      	ldr	r0, [sp, #8]
 8011db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011db6:	f000 fbe1 	bl	801257c <__mcmp>
 8011dba:	462a      	mov	r2, r5
 8011dbc:	9004      	str	r0, [sp, #16]
 8011dbe:	4621      	mov	r1, r4
 8011dc0:	4648      	mov	r0, r9
 8011dc2:	f000 fbf7 	bl	80125b4 <__mdiff>
 8011dc6:	68c2      	ldr	r2, [r0, #12]
 8011dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dca:	4606      	mov	r6, r0
 8011dcc:	bb02      	cbnz	r2, 8011e10 <_dtoa_r+0xa40>
 8011dce:	4601      	mov	r1, r0
 8011dd0:	9802      	ldr	r0, [sp, #8]
 8011dd2:	f000 fbd3 	bl	801257c <__mcmp>
 8011dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd8:	4602      	mov	r2, r0
 8011dda:	4631      	mov	r1, r6
 8011ddc:	4648      	mov	r0, r9
 8011dde:	920c      	str	r2, [sp, #48]	@ 0x30
 8011de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011de2:	f000 f94f 	bl	8012084 <_Bfree>
 8011de6:	9b07      	ldr	r3, [sp, #28]
 8011de8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011dea:	9e00      	ldr	r6, [sp, #0]
 8011dec:	ea42 0103 	orr.w	r1, r2, r3
 8011df0:	9b06      	ldr	r3, [sp, #24]
 8011df2:	4319      	orrs	r1, r3
 8011df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011df6:	d10d      	bne.n	8011e14 <_dtoa_r+0xa44>
 8011df8:	2b39      	cmp	r3, #57	@ 0x39
 8011dfa:	d027      	beq.n	8011e4c <_dtoa_r+0xa7c>
 8011dfc:	9a04      	ldr	r2, [sp, #16]
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	dd01      	ble.n	8011e06 <_dtoa_r+0xa36>
 8011e02:	9b03      	ldr	r3, [sp, #12]
 8011e04:	3331      	adds	r3, #49	@ 0x31
 8011e06:	f88b 3000 	strb.w	r3, [fp]
 8011e0a:	e52e      	b.n	801186a <_dtoa_r+0x49a>
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	e7b9      	b.n	8011d84 <_dtoa_r+0x9b4>
 8011e10:	2201      	movs	r2, #1
 8011e12:	e7e2      	b.n	8011dda <_dtoa_r+0xa0a>
 8011e14:	9904      	ldr	r1, [sp, #16]
 8011e16:	2900      	cmp	r1, #0
 8011e18:	db04      	blt.n	8011e24 <_dtoa_r+0xa54>
 8011e1a:	9807      	ldr	r0, [sp, #28]
 8011e1c:	4301      	orrs	r1, r0
 8011e1e:	9806      	ldr	r0, [sp, #24]
 8011e20:	4301      	orrs	r1, r0
 8011e22:	d120      	bne.n	8011e66 <_dtoa_r+0xa96>
 8011e24:	2a00      	cmp	r2, #0
 8011e26:	ddee      	ble.n	8011e06 <_dtoa_r+0xa36>
 8011e28:	9902      	ldr	r1, [sp, #8]
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	4648      	mov	r0, r9
 8011e30:	f000 fb38 	bl	80124a4 <__lshift>
 8011e34:	4621      	mov	r1, r4
 8011e36:	9002      	str	r0, [sp, #8]
 8011e38:	f000 fba0 	bl	801257c <__mcmp>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	9b00      	ldr	r3, [sp, #0]
 8011e40:	dc02      	bgt.n	8011e48 <_dtoa_r+0xa78>
 8011e42:	d1e0      	bne.n	8011e06 <_dtoa_r+0xa36>
 8011e44:	07da      	lsls	r2, r3, #31
 8011e46:	d5de      	bpl.n	8011e06 <_dtoa_r+0xa36>
 8011e48:	2b39      	cmp	r3, #57	@ 0x39
 8011e4a:	d1da      	bne.n	8011e02 <_dtoa_r+0xa32>
 8011e4c:	2339      	movs	r3, #57	@ 0x39
 8011e4e:	f88b 3000 	strb.w	r3, [fp]
 8011e52:	4633      	mov	r3, r6
 8011e54:	461e      	mov	r6, r3
 8011e56:	3b01      	subs	r3, #1
 8011e58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011e5c:	2a39      	cmp	r2, #57	@ 0x39
 8011e5e:	d04e      	beq.n	8011efe <_dtoa_r+0xb2e>
 8011e60:	3201      	adds	r2, #1
 8011e62:	701a      	strb	r2, [r3, #0]
 8011e64:	e501      	b.n	801186a <_dtoa_r+0x49a>
 8011e66:	2a00      	cmp	r2, #0
 8011e68:	dd03      	ble.n	8011e72 <_dtoa_r+0xaa2>
 8011e6a:	2b39      	cmp	r3, #57	@ 0x39
 8011e6c:	d0ee      	beq.n	8011e4c <_dtoa_r+0xa7c>
 8011e6e:	3301      	adds	r3, #1
 8011e70:	e7c9      	b.n	8011e06 <_dtoa_r+0xa36>
 8011e72:	9a00      	ldr	r2, [sp, #0]
 8011e74:	9908      	ldr	r1, [sp, #32]
 8011e76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011e7a:	428a      	cmp	r2, r1
 8011e7c:	d028      	beq.n	8011ed0 <_dtoa_r+0xb00>
 8011e7e:	9902      	ldr	r1, [sp, #8]
 8011e80:	2300      	movs	r3, #0
 8011e82:	220a      	movs	r2, #10
 8011e84:	4648      	mov	r0, r9
 8011e86:	f000 f91f 	bl	80120c8 <__multadd>
 8011e8a:	42af      	cmp	r7, r5
 8011e8c:	9002      	str	r0, [sp, #8]
 8011e8e:	f04f 0300 	mov.w	r3, #0
 8011e92:	f04f 020a 	mov.w	r2, #10
 8011e96:	4639      	mov	r1, r7
 8011e98:	4648      	mov	r0, r9
 8011e9a:	d107      	bne.n	8011eac <_dtoa_r+0xadc>
 8011e9c:	f000 f914 	bl	80120c8 <__multadd>
 8011ea0:	4607      	mov	r7, r0
 8011ea2:	4605      	mov	r5, r0
 8011ea4:	9b00      	ldr	r3, [sp, #0]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	e777      	b.n	8011d9c <_dtoa_r+0x9cc>
 8011eac:	f000 f90c 	bl	80120c8 <__multadd>
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	4607      	mov	r7, r0
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	220a      	movs	r2, #10
 8011eb8:	4648      	mov	r0, r9
 8011eba:	f000 f905 	bl	80120c8 <__multadd>
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	e7f0      	b.n	8011ea4 <_dtoa_r+0xad4>
 8011ec2:	f1bb 0f00 	cmp.w	fp, #0
 8011ec6:	bfcc      	ite	gt
 8011ec8:	465e      	movgt	r6, fp
 8011eca:	2601      	movle	r6, #1
 8011ecc:	4456      	add	r6, sl
 8011ece:	2700      	movs	r7, #0
 8011ed0:	9902      	ldr	r1, [sp, #8]
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	4648      	mov	r0, r9
 8011ed8:	f000 fae4 	bl	80124a4 <__lshift>
 8011edc:	4621      	mov	r1, r4
 8011ede:	9002      	str	r0, [sp, #8]
 8011ee0:	f000 fb4c 	bl	801257c <__mcmp>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	dcb4      	bgt.n	8011e52 <_dtoa_r+0xa82>
 8011ee8:	d102      	bne.n	8011ef0 <_dtoa_r+0xb20>
 8011eea:	9b00      	ldr	r3, [sp, #0]
 8011eec:	07db      	lsls	r3, r3, #31
 8011eee:	d4b0      	bmi.n	8011e52 <_dtoa_r+0xa82>
 8011ef0:	4633      	mov	r3, r6
 8011ef2:	461e      	mov	r6, r3
 8011ef4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ef8:	2a30      	cmp	r2, #48	@ 0x30
 8011efa:	d0fa      	beq.n	8011ef2 <_dtoa_r+0xb22>
 8011efc:	e4b5      	b.n	801186a <_dtoa_r+0x49a>
 8011efe:	459a      	cmp	sl, r3
 8011f00:	d1a8      	bne.n	8011e54 <_dtoa_r+0xa84>
 8011f02:	2331      	movs	r3, #49	@ 0x31
 8011f04:	f108 0801 	add.w	r8, r8, #1
 8011f08:	f88a 3000 	strb.w	r3, [sl]
 8011f0c:	e4ad      	b.n	801186a <_dtoa_r+0x49a>
 8011f0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011f10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011f6c <_dtoa_r+0xb9c>
 8011f14:	b11b      	cbz	r3, 8011f1e <_dtoa_r+0xb4e>
 8011f16:	f10a 0308 	add.w	r3, sl, #8
 8011f1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011f1c:	6013      	str	r3, [r2, #0]
 8011f1e:	4650      	mov	r0, sl
 8011f20:	b017      	add	sp, #92	@ 0x5c
 8011f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f26:	9b07      	ldr	r3, [sp, #28]
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	f77f ae2e 	ble.w	8011b8a <_dtoa_r+0x7ba>
 8011f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f30:	9308      	str	r3, [sp, #32]
 8011f32:	2001      	movs	r0, #1
 8011f34:	e64d      	b.n	8011bd2 <_dtoa_r+0x802>
 8011f36:	f1bb 0f00 	cmp.w	fp, #0
 8011f3a:	f77f aed9 	ble.w	8011cf0 <_dtoa_r+0x920>
 8011f3e:	4656      	mov	r6, sl
 8011f40:	9802      	ldr	r0, [sp, #8]
 8011f42:	4621      	mov	r1, r4
 8011f44:	f7ff f9b9 	bl	80112ba <quorem>
 8011f48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011f4c:	f806 3b01 	strb.w	r3, [r6], #1
 8011f50:	eba6 020a 	sub.w	r2, r6, sl
 8011f54:	4593      	cmp	fp, r2
 8011f56:	ddb4      	ble.n	8011ec2 <_dtoa_r+0xaf2>
 8011f58:	9902      	ldr	r1, [sp, #8]
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	220a      	movs	r2, #10
 8011f5e:	4648      	mov	r0, r9
 8011f60:	f000 f8b2 	bl	80120c8 <__multadd>
 8011f64:	9002      	str	r0, [sp, #8]
 8011f66:	e7eb      	b.n	8011f40 <_dtoa_r+0xb70>
 8011f68:	080168b0 	.word	0x080168b0
 8011f6c:	08016834 	.word	0x08016834

08011f70 <_free_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	4605      	mov	r5, r0
 8011f74:	2900      	cmp	r1, #0
 8011f76:	d041      	beq.n	8011ffc <_free_r+0x8c>
 8011f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f7c:	1f0c      	subs	r4, r1, #4
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	bfb8      	it	lt
 8011f82:	18e4      	addlt	r4, r4, r3
 8011f84:	f7fd fce4 	bl	800f950 <__malloc_lock>
 8011f88:	4a1d      	ldr	r2, [pc, #116]	@ (8012000 <_free_r+0x90>)
 8011f8a:	6813      	ldr	r3, [r2, #0]
 8011f8c:	b933      	cbnz	r3, 8011f9c <_free_r+0x2c>
 8011f8e:	6063      	str	r3, [r4, #4]
 8011f90:	6014      	str	r4, [r2, #0]
 8011f92:	4628      	mov	r0, r5
 8011f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f98:	f7fd bce0 	b.w	800f95c <__malloc_unlock>
 8011f9c:	42a3      	cmp	r3, r4
 8011f9e:	d908      	bls.n	8011fb2 <_free_r+0x42>
 8011fa0:	6820      	ldr	r0, [r4, #0]
 8011fa2:	1821      	adds	r1, r4, r0
 8011fa4:	428b      	cmp	r3, r1
 8011fa6:	bf01      	itttt	eq
 8011fa8:	6819      	ldreq	r1, [r3, #0]
 8011faa:	685b      	ldreq	r3, [r3, #4]
 8011fac:	1809      	addeq	r1, r1, r0
 8011fae:	6021      	streq	r1, [r4, #0]
 8011fb0:	e7ed      	b.n	8011f8e <_free_r+0x1e>
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	b10b      	cbz	r3, 8011fbc <_free_r+0x4c>
 8011fb8:	42a3      	cmp	r3, r4
 8011fba:	d9fa      	bls.n	8011fb2 <_free_r+0x42>
 8011fbc:	6811      	ldr	r1, [r2, #0]
 8011fbe:	1850      	adds	r0, r2, r1
 8011fc0:	42a0      	cmp	r0, r4
 8011fc2:	d10b      	bne.n	8011fdc <_free_r+0x6c>
 8011fc4:	6820      	ldr	r0, [r4, #0]
 8011fc6:	4401      	add	r1, r0
 8011fc8:	1850      	adds	r0, r2, r1
 8011fca:	4283      	cmp	r3, r0
 8011fcc:	6011      	str	r1, [r2, #0]
 8011fce:	d1e0      	bne.n	8011f92 <_free_r+0x22>
 8011fd0:	6818      	ldr	r0, [r3, #0]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	6053      	str	r3, [r2, #4]
 8011fd6:	4408      	add	r0, r1
 8011fd8:	6010      	str	r0, [r2, #0]
 8011fda:	e7da      	b.n	8011f92 <_free_r+0x22>
 8011fdc:	d902      	bls.n	8011fe4 <_free_r+0x74>
 8011fde:	230c      	movs	r3, #12
 8011fe0:	602b      	str	r3, [r5, #0]
 8011fe2:	e7d6      	b.n	8011f92 <_free_r+0x22>
 8011fe4:	6820      	ldr	r0, [r4, #0]
 8011fe6:	1821      	adds	r1, r4, r0
 8011fe8:	428b      	cmp	r3, r1
 8011fea:	bf04      	itt	eq
 8011fec:	6819      	ldreq	r1, [r3, #0]
 8011fee:	685b      	ldreq	r3, [r3, #4]
 8011ff0:	6063      	str	r3, [r4, #4]
 8011ff2:	bf04      	itt	eq
 8011ff4:	1809      	addeq	r1, r1, r0
 8011ff6:	6021      	streq	r1, [r4, #0]
 8011ff8:	6054      	str	r4, [r2, #4]
 8011ffa:	e7ca      	b.n	8011f92 <_free_r+0x22>
 8011ffc:	bd38      	pop	{r3, r4, r5, pc}
 8011ffe:	bf00      	nop
 8012000:	20010818 	.word	0x20010818

08012004 <_Balloc>:
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	69c6      	ldr	r6, [r0, #28]
 8012008:	4604      	mov	r4, r0
 801200a:	460d      	mov	r5, r1
 801200c:	b976      	cbnz	r6, 801202c <_Balloc+0x28>
 801200e:	2010      	movs	r0, #16
 8012010:	f7fd fbf4 	bl	800f7fc <malloc>
 8012014:	4602      	mov	r2, r0
 8012016:	61e0      	str	r0, [r4, #28]
 8012018:	b920      	cbnz	r0, 8012024 <_Balloc+0x20>
 801201a:	4b18      	ldr	r3, [pc, #96]	@ (801207c <_Balloc+0x78>)
 801201c:	4818      	ldr	r0, [pc, #96]	@ (8012080 <_Balloc+0x7c>)
 801201e:	216b      	movs	r1, #107	@ 0x6b
 8012020:	f7fd fbca 	bl	800f7b8 <__assert_func>
 8012024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012028:	6006      	str	r6, [r0, #0]
 801202a:	60c6      	str	r6, [r0, #12]
 801202c:	69e6      	ldr	r6, [r4, #28]
 801202e:	68f3      	ldr	r3, [r6, #12]
 8012030:	b183      	cbz	r3, 8012054 <_Balloc+0x50>
 8012032:	69e3      	ldr	r3, [r4, #28]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801203a:	b9b8      	cbnz	r0, 801206c <_Balloc+0x68>
 801203c:	2101      	movs	r1, #1
 801203e:	fa01 f605 	lsl.w	r6, r1, r5
 8012042:	1d72      	adds	r2, r6, #5
 8012044:	0092      	lsls	r2, r2, #2
 8012046:	4620      	mov	r0, r4
 8012048:	f002 f876 	bl	8014138 <_calloc_r>
 801204c:	b160      	cbz	r0, 8012068 <_Balloc+0x64>
 801204e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012052:	e00e      	b.n	8012072 <_Balloc+0x6e>
 8012054:	2221      	movs	r2, #33	@ 0x21
 8012056:	2104      	movs	r1, #4
 8012058:	4620      	mov	r0, r4
 801205a:	f002 f86d 	bl	8014138 <_calloc_r>
 801205e:	69e3      	ldr	r3, [r4, #28]
 8012060:	60f0      	str	r0, [r6, #12]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1e4      	bne.n	8012032 <_Balloc+0x2e>
 8012068:	2000      	movs	r0, #0
 801206a:	bd70      	pop	{r4, r5, r6, pc}
 801206c:	6802      	ldr	r2, [r0, #0]
 801206e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012072:	2300      	movs	r3, #0
 8012074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012078:	e7f7      	b.n	801206a <_Balloc+0x66>
 801207a:	bf00      	nop
 801207c:	08016841 	.word	0x08016841
 8012080:	080168c1 	.word	0x080168c1

08012084 <_Bfree>:
 8012084:	b570      	push	{r4, r5, r6, lr}
 8012086:	69c6      	ldr	r6, [r0, #28]
 8012088:	4605      	mov	r5, r0
 801208a:	460c      	mov	r4, r1
 801208c:	b976      	cbnz	r6, 80120ac <_Bfree+0x28>
 801208e:	2010      	movs	r0, #16
 8012090:	f7fd fbb4 	bl	800f7fc <malloc>
 8012094:	4602      	mov	r2, r0
 8012096:	61e8      	str	r0, [r5, #28]
 8012098:	b920      	cbnz	r0, 80120a4 <_Bfree+0x20>
 801209a:	4b09      	ldr	r3, [pc, #36]	@ (80120c0 <_Bfree+0x3c>)
 801209c:	4809      	ldr	r0, [pc, #36]	@ (80120c4 <_Bfree+0x40>)
 801209e:	218f      	movs	r1, #143	@ 0x8f
 80120a0:	f7fd fb8a 	bl	800f7b8 <__assert_func>
 80120a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120a8:	6006      	str	r6, [r0, #0]
 80120aa:	60c6      	str	r6, [r0, #12]
 80120ac:	b13c      	cbz	r4, 80120be <_Bfree+0x3a>
 80120ae:	69eb      	ldr	r3, [r5, #28]
 80120b0:	6862      	ldr	r2, [r4, #4]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120b8:	6021      	str	r1, [r4, #0]
 80120ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120be:	bd70      	pop	{r4, r5, r6, pc}
 80120c0:	08016841 	.word	0x08016841
 80120c4:	080168c1 	.word	0x080168c1

080120c8 <__multadd>:
 80120c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120cc:	690d      	ldr	r5, [r1, #16]
 80120ce:	4607      	mov	r7, r0
 80120d0:	460c      	mov	r4, r1
 80120d2:	461e      	mov	r6, r3
 80120d4:	f101 0c14 	add.w	ip, r1, #20
 80120d8:	2000      	movs	r0, #0
 80120da:	f8dc 3000 	ldr.w	r3, [ip]
 80120de:	b299      	uxth	r1, r3
 80120e0:	fb02 6101 	mla	r1, r2, r1, r6
 80120e4:	0c1e      	lsrs	r6, r3, #16
 80120e6:	0c0b      	lsrs	r3, r1, #16
 80120e8:	fb02 3306 	mla	r3, r2, r6, r3
 80120ec:	b289      	uxth	r1, r1
 80120ee:	3001      	adds	r0, #1
 80120f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80120f4:	4285      	cmp	r5, r0
 80120f6:	f84c 1b04 	str.w	r1, [ip], #4
 80120fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80120fe:	dcec      	bgt.n	80120da <__multadd+0x12>
 8012100:	b30e      	cbz	r6, 8012146 <__multadd+0x7e>
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	42ab      	cmp	r3, r5
 8012106:	dc19      	bgt.n	801213c <__multadd+0x74>
 8012108:	6861      	ldr	r1, [r4, #4]
 801210a:	4638      	mov	r0, r7
 801210c:	3101      	adds	r1, #1
 801210e:	f7ff ff79 	bl	8012004 <_Balloc>
 8012112:	4680      	mov	r8, r0
 8012114:	b928      	cbnz	r0, 8012122 <__multadd+0x5a>
 8012116:	4602      	mov	r2, r0
 8012118:	4b0c      	ldr	r3, [pc, #48]	@ (801214c <__multadd+0x84>)
 801211a:	480d      	ldr	r0, [pc, #52]	@ (8012150 <__multadd+0x88>)
 801211c:	21ba      	movs	r1, #186	@ 0xba
 801211e:	f7fd fb4b 	bl	800f7b8 <__assert_func>
 8012122:	6922      	ldr	r2, [r4, #16]
 8012124:	3202      	adds	r2, #2
 8012126:	f104 010c 	add.w	r1, r4, #12
 801212a:	0092      	lsls	r2, r2, #2
 801212c:	300c      	adds	r0, #12
 801212e:	f7ff f8a8 	bl	8011282 <memcpy>
 8012132:	4621      	mov	r1, r4
 8012134:	4638      	mov	r0, r7
 8012136:	f7ff ffa5 	bl	8012084 <_Bfree>
 801213a:	4644      	mov	r4, r8
 801213c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012140:	3501      	adds	r5, #1
 8012142:	615e      	str	r6, [r3, #20]
 8012144:	6125      	str	r5, [r4, #16]
 8012146:	4620      	mov	r0, r4
 8012148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801214c:	080168b0 	.word	0x080168b0
 8012150:	080168c1 	.word	0x080168c1

08012154 <__s2b>:
 8012154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012158:	460c      	mov	r4, r1
 801215a:	4615      	mov	r5, r2
 801215c:	461f      	mov	r7, r3
 801215e:	2209      	movs	r2, #9
 8012160:	3308      	adds	r3, #8
 8012162:	4606      	mov	r6, r0
 8012164:	fb93 f3f2 	sdiv	r3, r3, r2
 8012168:	2100      	movs	r1, #0
 801216a:	2201      	movs	r2, #1
 801216c:	429a      	cmp	r2, r3
 801216e:	db09      	blt.n	8012184 <__s2b+0x30>
 8012170:	4630      	mov	r0, r6
 8012172:	f7ff ff47 	bl	8012004 <_Balloc>
 8012176:	b940      	cbnz	r0, 801218a <__s2b+0x36>
 8012178:	4602      	mov	r2, r0
 801217a:	4b19      	ldr	r3, [pc, #100]	@ (80121e0 <__s2b+0x8c>)
 801217c:	4819      	ldr	r0, [pc, #100]	@ (80121e4 <__s2b+0x90>)
 801217e:	21d3      	movs	r1, #211	@ 0xd3
 8012180:	f7fd fb1a 	bl	800f7b8 <__assert_func>
 8012184:	0052      	lsls	r2, r2, #1
 8012186:	3101      	adds	r1, #1
 8012188:	e7f0      	b.n	801216c <__s2b+0x18>
 801218a:	9b08      	ldr	r3, [sp, #32]
 801218c:	6143      	str	r3, [r0, #20]
 801218e:	2d09      	cmp	r5, #9
 8012190:	f04f 0301 	mov.w	r3, #1
 8012194:	6103      	str	r3, [r0, #16]
 8012196:	dd16      	ble.n	80121c6 <__s2b+0x72>
 8012198:	f104 0909 	add.w	r9, r4, #9
 801219c:	46c8      	mov	r8, r9
 801219e:	442c      	add	r4, r5
 80121a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80121a4:	4601      	mov	r1, r0
 80121a6:	3b30      	subs	r3, #48	@ 0x30
 80121a8:	220a      	movs	r2, #10
 80121aa:	4630      	mov	r0, r6
 80121ac:	f7ff ff8c 	bl	80120c8 <__multadd>
 80121b0:	45a0      	cmp	r8, r4
 80121b2:	d1f5      	bne.n	80121a0 <__s2b+0x4c>
 80121b4:	f1a5 0408 	sub.w	r4, r5, #8
 80121b8:	444c      	add	r4, r9
 80121ba:	1b2d      	subs	r5, r5, r4
 80121bc:	1963      	adds	r3, r4, r5
 80121be:	42bb      	cmp	r3, r7
 80121c0:	db04      	blt.n	80121cc <__s2b+0x78>
 80121c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c6:	340a      	adds	r4, #10
 80121c8:	2509      	movs	r5, #9
 80121ca:	e7f6      	b.n	80121ba <__s2b+0x66>
 80121cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80121d0:	4601      	mov	r1, r0
 80121d2:	3b30      	subs	r3, #48	@ 0x30
 80121d4:	220a      	movs	r2, #10
 80121d6:	4630      	mov	r0, r6
 80121d8:	f7ff ff76 	bl	80120c8 <__multadd>
 80121dc:	e7ee      	b.n	80121bc <__s2b+0x68>
 80121de:	bf00      	nop
 80121e0:	080168b0 	.word	0x080168b0
 80121e4:	080168c1 	.word	0x080168c1

080121e8 <__hi0bits>:
 80121e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80121ec:	4603      	mov	r3, r0
 80121ee:	bf36      	itet	cc
 80121f0:	0403      	lslcc	r3, r0, #16
 80121f2:	2000      	movcs	r0, #0
 80121f4:	2010      	movcc	r0, #16
 80121f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80121fa:	bf3c      	itt	cc
 80121fc:	021b      	lslcc	r3, r3, #8
 80121fe:	3008      	addcc	r0, #8
 8012200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012204:	bf3c      	itt	cc
 8012206:	011b      	lslcc	r3, r3, #4
 8012208:	3004      	addcc	r0, #4
 801220a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801220e:	bf3c      	itt	cc
 8012210:	009b      	lslcc	r3, r3, #2
 8012212:	3002      	addcc	r0, #2
 8012214:	2b00      	cmp	r3, #0
 8012216:	db05      	blt.n	8012224 <__hi0bits+0x3c>
 8012218:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801221c:	f100 0001 	add.w	r0, r0, #1
 8012220:	bf08      	it	eq
 8012222:	2020      	moveq	r0, #32
 8012224:	4770      	bx	lr

08012226 <__lo0bits>:
 8012226:	6803      	ldr	r3, [r0, #0]
 8012228:	4602      	mov	r2, r0
 801222a:	f013 0007 	ands.w	r0, r3, #7
 801222e:	d00b      	beq.n	8012248 <__lo0bits+0x22>
 8012230:	07d9      	lsls	r1, r3, #31
 8012232:	d421      	bmi.n	8012278 <__lo0bits+0x52>
 8012234:	0798      	lsls	r0, r3, #30
 8012236:	bf49      	itett	mi
 8012238:	085b      	lsrmi	r3, r3, #1
 801223a:	089b      	lsrpl	r3, r3, #2
 801223c:	2001      	movmi	r0, #1
 801223e:	6013      	strmi	r3, [r2, #0]
 8012240:	bf5c      	itt	pl
 8012242:	6013      	strpl	r3, [r2, #0]
 8012244:	2002      	movpl	r0, #2
 8012246:	4770      	bx	lr
 8012248:	b299      	uxth	r1, r3
 801224a:	b909      	cbnz	r1, 8012250 <__lo0bits+0x2a>
 801224c:	0c1b      	lsrs	r3, r3, #16
 801224e:	2010      	movs	r0, #16
 8012250:	b2d9      	uxtb	r1, r3
 8012252:	b909      	cbnz	r1, 8012258 <__lo0bits+0x32>
 8012254:	3008      	adds	r0, #8
 8012256:	0a1b      	lsrs	r3, r3, #8
 8012258:	0719      	lsls	r1, r3, #28
 801225a:	bf04      	itt	eq
 801225c:	091b      	lsreq	r3, r3, #4
 801225e:	3004      	addeq	r0, #4
 8012260:	0799      	lsls	r1, r3, #30
 8012262:	bf04      	itt	eq
 8012264:	089b      	lsreq	r3, r3, #2
 8012266:	3002      	addeq	r0, #2
 8012268:	07d9      	lsls	r1, r3, #31
 801226a:	d403      	bmi.n	8012274 <__lo0bits+0x4e>
 801226c:	085b      	lsrs	r3, r3, #1
 801226e:	f100 0001 	add.w	r0, r0, #1
 8012272:	d003      	beq.n	801227c <__lo0bits+0x56>
 8012274:	6013      	str	r3, [r2, #0]
 8012276:	4770      	bx	lr
 8012278:	2000      	movs	r0, #0
 801227a:	4770      	bx	lr
 801227c:	2020      	movs	r0, #32
 801227e:	4770      	bx	lr

08012280 <__i2b>:
 8012280:	b510      	push	{r4, lr}
 8012282:	460c      	mov	r4, r1
 8012284:	2101      	movs	r1, #1
 8012286:	f7ff febd 	bl	8012004 <_Balloc>
 801228a:	4602      	mov	r2, r0
 801228c:	b928      	cbnz	r0, 801229a <__i2b+0x1a>
 801228e:	4b05      	ldr	r3, [pc, #20]	@ (80122a4 <__i2b+0x24>)
 8012290:	4805      	ldr	r0, [pc, #20]	@ (80122a8 <__i2b+0x28>)
 8012292:	f240 1145 	movw	r1, #325	@ 0x145
 8012296:	f7fd fa8f 	bl	800f7b8 <__assert_func>
 801229a:	2301      	movs	r3, #1
 801229c:	6144      	str	r4, [r0, #20]
 801229e:	6103      	str	r3, [r0, #16]
 80122a0:	bd10      	pop	{r4, pc}
 80122a2:	bf00      	nop
 80122a4:	080168b0 	.word	0x080168b0
 80122a8:	080168c1 	.word	0x080168c1

080122ac <__multiply>:
 80122ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b0:	4617      	mov	r7, r2
 80122b2:	690a      	ldr	r2, [r1, #16]
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	bfa8      	it	ge
 80122ba:	463b      	movge	r3, r7
 80122bc:	4689      	mov	r9, r1
 80122be:	bfa4      	itt	ge
 80122c0:	460f      	movge	r7, r1
 80122c2:	4699      	movge	r9, r3
 80122c4:	693d      	ldr	r5, [r7, #16]
 80122c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	6879      	ldr	r1, [r7, #4]
 80122ce:	eb05 060a 	add.w	r6, r5, sl
 80122d2:	42b3      	cmp	r3, r6
 80122d4:	b085      	sub	sp, #20
 80122d6:	bfb8      	it	lt
 80122d8:	3101      	addlt	r1, #1
 80122da:	f7ff fe93 	bl	8012004 <_Balloc>
 80122de:	b930      	cbnz	r0, 80122ee <__multiply+0x42>
 80122e0:	4602      	mov	r2, r0
 80122e2:	4b41      	ldr	r3, [pc, #260]	@ (80123e8 <__multiply+0x13c>)
 80122e4:	4841      	ldr	r0, [pc, #260]	@ (80123ec <__multiply+0x140>)
 80122e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80122ea:	f7fd fa65 	bl	800f7b8 <__assert_func>
 80122ee:	f100 0414 	add.w	r4, r0, #20
 80122f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80122f6:	4623      	mov	r3, r4
 80122f8:	2200      	movs	r2, #0
 80122fa:	4573      	cmp	r3, lr
 80122fc:	d320      	bcc.n	8012340 <__multiply+0x94>
 80122fe:	f107 0814 	add.w	r8, r7, #20
 8012302:	f109 0114 	add.w	r1, r9, #20
 8012306:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801230a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801230e:	9302      	str	r3, [sp, #8]
 8012310:	1beb      	subs	r3, r5, r7
 8012312:	3b15      	subs	r3, #21
 8012314:	f023 0303 	bic.w	r3, r3, #3
 8012318:	3304      	adds	r3, #4
 801231a:	3715      	adds	r7, #21
 801231c:	42bd      	cmp	r5, r7
 801231e:	bf38      	it	cc
 8012320:	2304      	movcc	r3, #4
 8012322:	9301      	str	r3, [sp, #4]
 8012324:	9b02      	ldr	r3, [sp, #8]
 8012326:	9103      	str	r1, [sp, #12]
 8012328:	428b      	cmp	r3, r1
 801232a:	d80c      	bhi.n	8012346 <__multiply+0x9a>
 801232c:	2e00      	cmp	r6, #0
 801232e:	dd03      	ble.n	8012338 <__multiply+0x8c>
 8012330:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012334:	2b00      	cmp	r3, #0
 8012336:	d055      	beq.n	80123e4 <__multiply+0x138>
 8012338:	6106      	str	r6, [r0, #16]
 801233a:	b005      	add	sp, #20
 801233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012340:	f843 2b04 	str.w	r2, [r3], #4
 8012344:	e7d9      	b.n	80122fa <__multiply+0x4e>
 8012346:	f8b1 a000 	ldrh.w	sl, [r1]
 801234a:	f1ba 0f00 	cmp.w	sl, #0
 801234e:	d01f      	beq.n	8012390 <__multiply+0xe4>
 8012350:	46c4      	mov	ip, r8
 8012352:	46a1      	mov	r9, r4
 8012354:	2700      	movs	r7, #0
 8012356:	f85c 2b04 	ldr.w	r2, [ip], #4
 801235a:	f8d9 3000 	ldr.w	r3, [r9]
 801235e:	fa1f fb82 	uxth.w	fp, r2
 8012362:	b29b      	uxth	r3, r3
 8012364:	fb0a 330b 	mla	r3, sl, fp, r3
 8012368:	443b      	add	r3, r7
 801236a:	f8d9 7000 	ldr.w	r7, [r9]
 801236e:	0c12      	lsrs	r2, r2, #16
 8012370:	0c3f      	lsrs	r7, r7, #16
 8012372:	fb0a 7202 	mla	r2, sl, r2, r7
 8012376:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801237a:	b29b      	uxth	r3, r3
 801237c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012380:	4565      	cmp	r5, ip
 8012382:	f849 3b04 	str.w	r3, [r9], #4
 8012386:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801238a:	d8e4      	bhi.n	8012356 <__multiply+0xaa>
 801238c:	9b01      	ldr	r3, [sp, #4]
 801238e:	50e7      	str	r7, [r4, r3]
 8012390:	9b03      	ldr	r3, [sp, #12]
 8012392:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012396:	3104      	adds	r1, #4
 8012398:	f1b9 0f00 	cmp.w	r9, #0
 801239c:	d020      	beq.n	80123e0 <__multiply+0x134>
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	4647      	mov	r7, r8
 80123a2:	46a4      	mov	ip, r4
 80123a4:	f04f 0a00 	mov.w	sl, #0
 80123a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80123ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80123b0:	fb09 220b 	mla	r2, r9, fp, r2
 80123b4:	4452      	add	r2, sl
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123bc:	f84c 3b04 	str.w	r3, [ip], #4
 80123c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80123c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80123cc:	fb09 330a 	mla	r3, r9, sl, r3
 80123d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80123d4:	42bd      	cmp	r5, r7
 80123d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123da:	d8e5      	bhi.n	80123a8 <__multiply+0xfc>
 80123dc:	9a01      	ldr	r2, [sp, #4]
 80123de:	50a3      	str	r3, [r4, r2]
 80123e0:	3404      	adds	r4, #4
 80123e2:	e79f      	b.n	8012324 <__multiply+0x78>
 80123e4:	3e01      	subs	r6, #1
 80123e6:	e7a1      	b.n	801232c <__multiply+0x80>
 80123e8:	080168b0 	.word	0x080168b0
 80123ec:	080168c1 	.word	0x080168c1

080123f0 <__pow5mult>:
 80123f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123f4:	4615      	mov	r5, r2
 80123f6:	f012 0203 	ands.w	r2, r2, #3
 80123fa:	4607      	mov	r7, r0
 80123fc:	460e      	mov	r6, r1
 80123fe:	d007      	beq.n	8012410 <__pow5mult+0x20>
 8012400:	4c25      	ldr	r4, [pc, #148]	@ (8012498 <__pow5mult+0xa8>)
 8012402:	3a01      	subs	r2, #1
 8012404:	2300      	movs	r3, #0
 8012406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801240a:	f7ff fe5d 	bl	80120c8 <__multadd>
 801240e:	4606      	mov	r6, r0
 8012410:	10ad      	asrs	r5, r5, #2
 8012412:	d03d      	beq.n	8012490 <__pow5mult+0xa0>
 8012414:	69fc      	ldr	r4, [r7, #28]
 8012416:	b97c      	cbnz	r4, 8012438 <__pow5mult+0x48>
 8012418:	2010      	movs	r0, #16
 801241a:	f7fd f9ef 	bl	800f7fc <malloc>
 801241e:	4602      	mov	r2, r0
 8012420:	61f8      	str	r0, [r7, #28]
 8012422:	b928      	cbnz	r0, 8012430 <__pow5mult+0x40>
 8012424:	4b1d      	ldr	r3, [pc, #116]	@ (801249c <__pow5mult+0xac>)
 8012426:	481e      	ldr	r0, [pc, #120]	@ (80124a0 <__pow5mult+0xb0>)
 8012428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801242c:	f7fd f9c4 	bl	800f7b8 <__assert_func>
 8012430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012434:	6004      	str	r4, [r0, #0]
 8012436:	60c4      	str	r4, [r0, #12]
 8012438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801243c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012440:	b94c      	cbnz	r4, 8012456 <__pow5mult+0x66>
 8012442:	f240 2171 	movw	r1, #625	@ 0x271
 8012446:	4638      	mov	r0, r7
 8012448:	f7ff ff1a 	bl	8012280 <__i2b>
 801244c:	2300      	movs	r3, #0
 801244e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012452:	4604      	mov	r4, r0
 8012454:	6003      	str	r3, [r0, #0]
 8012456:	f04f 0900 	mov.w	r9, #0
 801245a:	07eb      	lsls	r3, r5, #31
 801245c:	d50a      	bpl.n	8012474 <__pow5mult+0x84>
 801245e:	4631      	mov	r1, r6
 8012460:	4622      	mov	r2, r4
 8012462:	4638      	mov	r0, r7
 8012464:	f7ff ff22 	bl	80122ac <__multiply>
 8012468:	4631      	mov	r1, r6
 801246a:	4680      	mov	r8, r0
 801246c:	4638      	mov	r0, r7
 801246e:	f7ff fe09 	bl	8012084 <_Bfree>
 8012472:	4646      	mov	r6, r8
 8012474:	106d      	asrs	r5, r5, #1
 8012476:	d00b      	beq.n	8012490 <__pow5mult+0xa0>
 8012478:	6820      	ldr	r0, [r4, #0]
 801247a:	b938      	cbnz	r0, 801248c <__pow5mult+0x9c>
 801247c:	4622      	mov	r2, r4
 801247e:	4621      	mov	r1, r4
 8012480:	4638      	mov	r0, r7
 8012482:	f7ff ff13 	bl	80122ac <__multiply>
 8012486:	6020      	str	r0, [r4, #0]
 8012488:	f8c0 9000 	str.w	r9, [r0]
 801248c:	4604      	mov	r4, r0
 801248e:	e7e4      	b.n	801245a <__pow5mult+0x6a>
 8012490:	4630      	mov	r0, r6
 8012492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012496:	bf00      	nop
 8012498:	08016aa0 	.word	0x08016aa0
 801249c:	08016841 	.word	0x08016841
 80124a0:	080168c1 	.word	0x080168c1

080124a4 <__lshift>:
 80124a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124a8:	460c      	mov	r4, r1
 80124aa:	6849      	ldr	r1, [r1, #4]
 80124ac:	6923      	ldr	r3, [r4, #16]
 80124ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80124b2:	68a3      	ldr	r3, [r4, #8]
 80124b4:	4607      	mov	r7, r0
 80124b6:	4691      	mov	r9, r2
 80124b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80124bc:	f108 0601 	add.w	r6, r8, #1
 80124c0:	42b3      	cmp	r3, r6
 80124c2:	db0b      	blt.n	80124dc <__lshift+0x38>
 80124c4:	4638      	mov	r0, r7
 80124c6:	f7ff fd9d 	bl	8012004 <_Balloc>
 80124ca:	4605      	mov	r5, r0
 80124cc:	b948      	cbnz	r0, 80124e2 <__lshift+0x3e>
 80124ce:	4602      	mov	r2, r0
 80124d0:	4b28      	ldr	r3, [pc, #160]	@ (8012574 <__lshift+0xd0>)
 80124d2:	4829      	ldr	r0, [pc, #164]	@ (8012578 <__lshift+0xd4>)
 80124d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80124d8:	f7fd f96e 	bl	800f7b8 <__assert_func>
 80124dc:	3101      	adds	r1, #1
 80124de:	005b      	lsls	r3, r3, #1
 80124e0:	e7ee      	b.n	80124c0 <__lshift+0x1c>
 80124e2:	2300      	movs	r3, #0
 80124e4:	f100 0114 	add.w	r1, r0, #20
 80124e8:	f100 0210 	add.w	r2, r0, #16
 80124ec:	4618      	mov	r0, r3
 80124ee:	4553      	cmp	r3, sl
 80124f0:	db33      	blt.n	801255a <__lshift+0xb6>
 80124f2:	6920      	ldr	r0, [r4, #16]
 80124f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80124f8:	f104 0314 	add.w	r3, r4, #20
 80124fc:	f019 091f 	ands.w	r9, r9, #31
 8012500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012508:	d02b      	beq.n	8012562 <__lshift+0xbe>
 801250a:	f1c9 0e20 	rsb	lr, r9, #32
 801250e:	468a      	mov	sl, r1
 8012510:	2200      	movs	r2, #0
 8012512:	6818      	ldr	r0, [r3, #0]
 8012514:	fa00 f009 	lsl.w	r0, r0, r9
 8012518:	4310      	orrs	r0, r2
 801251a:	f84a 0b04 	str.w	r0, [sl], #4
 801251e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012522:	459c      	cmp	ip, r3
 8012524:	fa22 f20e 	lsr.w	r2, r2, lr
 8012528:	d8f3      	bhi.n	8012512 <__lshift+0x6e>
 801252a:	ebac 0304 	sub.w	r3, ip, r4
 801252e:	3b15      	subs	r3, #21
 8012530:	f023 0303 	bic.w	r3, r3, #3
 8012534:	3304      	adds	r3, #4
 8012536:	f104 0015 	add.w	r0, r4, #21
 801253a:	4560      	cmp	r0, ip
 801253c:	bf88      	it	hi
 801253e:	2304      	movhi	r3, #4
 8012540:	50ca      	str	r2, [r1, r3]
 8012542:	b10a      	cbz	r2, 8012548 <__lshift+0xa4>
 8012544:	f108 0602 	add.w	r6, r8, #2
 8012548:	3e01      	subs	r6, #1
 801254a:	4638      	mov	r0, r7
 801254c:	612e      	str	r6, [r5, #16]
 801254e:	4621      	mov	r1, r4
 8012550:	f7ff fd98 	bl	8012084 <_Bfree>
 8012554:	4628      	mov	r0, r5
 8012556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801255a:	f842 0f04 	str.w	r0, [r2, #4]!
 801255e:	3301      	adds	r3, #1
 8012560:	e7c5      	b.n	80124ee <__lshift+0x4a>
 8012562:	3904      	subs	r1, #4
 8012564:	f853 2b04 	ldr.w	r2, [r3], #4
 8012568:	f841 2f04 	str.w	r2, [r1, #4]!
 801256c:	459c      	cmp	ip, r3
 801256e:	d8f9      	bhi.n	8012564 <__lshift+0xc0>
 8012570:	e7ea      	b.n	8012548 <__lshift+0xa4>
 8012572:	bf00      	nop
 8012574:	080168b0 	.word	0x080168b0
 8012578:	080168c1 	.word	0x080168c1

0801257c <__mcmp>:
 801257c:	690a      	ldr	r2, [r1, #16]
 801257e:	4603      	mov	r3, r0
 8012580:	6900      	ldr	r0, [r0, #16]
 8012582:	1a80      	subs	r0, r0, r2
 8012584:	b530      	push	{r4, r5, lr}
 8012586:	d10e      	bne.n	80125a6 <__mcmp+0x2a>
 8012588:	3314      	adds	r3, #20
 801258a:	3114      	adds	r1, #20
 801258c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801259c:	4295      	cmp	r5, r2
 801259e:	d003      	beq.n	80125a8 <__mcmp+0x2c>
 80125a0:	d205      	bcs.n	80125ae <__mcmp+0x32>
 80125a2:	f04f 30ff 	mov.w	r0, #4294967295
 80125a6:	bd30      	pop	{r4, r5, pc}
 80125a8:	42a3      	cmp	r3, r4
 80125aa:	d3f3      	bcc.n	8012594 <__mcmp+0x18>
 80125ac:	e7fb      	b.n	80125a6 <__mcmp+0x2a>
 80125ae:	2001      	movs	r0, #1
 80125b0:	e7f9      	b.n	80125a6 <__mcmp+0x2a>
	...

080125b4 <__mdiff>:
 80125b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	4689      	mov	r9, r1
 80125ba:	4606      	mov	r6, r0
 80125bc:	4611      	mov	r1, r2
 80125be:	4648      	mov	r0, r9
 80125c0:	4614      	mov	r4, r2
 80125c2:	f7ff ffdb 	bl	801257c <__mcmp>
 80125c6:	1e05      	subs	r5, r0, #0
 80125c8:	d112      	bne.n	80125f0 <__mdiff+0x3c>
 80125ca:	4629      	mov	r1, r5
 80125cc:	4630      	mov	r0, r6
 80125ce:	f7ff fd19 	bl	8012004 <_Balloc>
 80125d2:	4602      	mov	r2, r0
 80125d4:	b928      	cbnz	r0, 80125e2 <__mdiff+0x2e>
 80125d6:	4b3f      	ldr	r3, [pc, #252]	@ (80126d4 <__mdiff+0x120>)
 80125d8:	f240 2137 	movw	r1, #567	@ 0x237
 80125dc:	483e      	ldr	r0, [pc, #248]	@ (80126d8 <__mdiff+0x124>)
 80125de:	f7fd f8eb 	bl	800f7b8 <__assert_func>
 80125e2:	2301      	movs	r3, #1
 80125e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80125e8:	4610      	mov	r0, r2
 80125ea:	b003      	add	sp, #12
 80125ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f0:	bfbc      	itt	lt
 80125f2:	464b      	movlt	r3, r9
 80125f4:	46a1      	movlt	r9, r4
 80125f6:	4630      	mov	r0, r6
 80125f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80125fc:	bfba      	itte	lt
 80125fe:	461c      	movlt	r4, r3
 8012600:	2501      	movlt	r5, #1
 8012602:	2500      	movge	r5, #0
 8012604:	f7ff fcfe 	bl	8012004 <_Balloc>
 8012608:	4602      	mov	r2, r0
 801260a:	b918      	cbnz	r0, 8012614 <__mdiff+0x60>
 801260c:	4b31      	ldr	r3, [pc, #196]	@ (80126d4 <__mdiff+0x120>)
 801260e:	f240 2145 	movw	r1, #581	@ 0x245
 8012612:	e7e3      	b.n	80125dc <__mdiff+0x28>
 8012614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012618:	6926      	ldr	r6, [r4, #16]
 801261a:	60c5      	str	r5, [r0, #12]
 801261c:	f109 0310 	add.w	r3, r9, #16
 8012620:	f109 0514 	add.w	r5, r9, #20
 8012624:	f104 0e14 	add.w	lr, r4, #20
 8012628:	f100 0b14 	add.w	fp, r0, #20
 801262c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012634:	9301      	str	r3, [sp, #4]
 8012636:	46d9      	mov	r9, fp
 8012638:	f04f 0c00 	mov.w	ip, #0
 801263c:	9b01      	ldr	r3, [sp, #4]
 801263e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012642:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012646:	9301      	str	r3, [sp, #4]
 8012648:	fa1f f38a 	uxth.w	r3, sl
 801264c:	4619      	mov	r1, r3
 801264e:	b283      	uxth	r3, r0
 8012650:	1acb      	subs	r3, r1, r3
 8012652:	0c00      	lsrs	r0, r0, #16
 8012654:	4463      	add	r3, ip
 8012656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801265a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801265e:	b29b      	uxth	r3, r3
 8012660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012664:	4576      	cmp	r6, lr
 8012666:	f849 3b04 	str.w	r3, [r9], #4
 801266a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801266e:	d8e5      	bhi.n	801263c <__mdiff+0x88>
 8012670:	1b33      	subs	r3, r6, r4
 8012672:	3b15      	subs	r3, #21
 8012674:	f023 0303 	bic.w	r3, r3, #3
 8012678:	3415      	adds	r4, #21
 801267a:	3304      	adds	r3, #4
 801267c:	42a6      	cmp	r6, r4
 801267e:	bf38      	it	cc
 8012680:	2304      	movcc	r3, #4
 8012682:	441d      	add	r5, r3
 8012684:	445b      	add	r3, fp
 8012686:	461e      	mov	r6, r3
 8012688:	462c      	mov	r4, r5
 801268a:	4544      	cmp	r4, r8
 801268c:	d30e      	bcc.n	80126ac <__mdiff+0xf8>
 801268e:	f108 0103 	add.w	r1, r8, #3
 8012692:	1b49      	subs	r1, r1, r5
 8012694:	f021 0103 	bic.w	r1, r1, #3
 8012698:	3d03      	subs	r5, #3
 801269a:	45a8      	cmp	r8, r5
 801269c:	bf38      	it	cc
 801269e:	2100      	movcc	r1, #0
 80126a0:	440b      	add	r3, r1
 80126a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80126a6:	b191      	cbz	r1, 80126ce <__mdiff+0x11a>
 80126a8:	6117      	str	r7, [r2, #16]
 80126aa:	e79d      	b.n	80125e8 <__mdiff+0x34>
 80126ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80126b0:	46e6      	mov	lr, ip
 80126b2:	0c08      	lsrs	r0, r1, #16
 80126b4:	fa1c fc81 	uxtah	ip, ip, r1
 80126b8:	4471      	add	r1, lr
 80126ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80126be:	b289      	uxth	r1, r1
 80126c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80126c4:	f846 1b04 	str.w	r1, [r6], #4
 80126c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80126cc:	e7dd      	b.n	801268a <__mdiff+0xd6>
 80126ce:	3f01      	subs	r7, #1
 80126d0:	e7e7      	b.n	80126a2 <__mdiff+0xee>
 80126d2:	bf00      	nop
 80126d4:	080168b0 	.word	0x080168b0
 80126d8:	080168c1 	.word	0x080168c1

080126dc <__ulp>:
 80126dc:	b082      	sub	sp, #8
 80126de:	ed8d 0b00 	vstr	d0, [sp]
 80126e2:	9a01      	ldr	r2, [sp, #4]
 80126e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012724 <__ulp+0x48>)
 80126e6:	4013      	ands	r3, r2
 80126e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	dc08      	bgt.n	8012702 <__ulp+0x26>
 80126f0:	425b      	negs	r3, r3
 80126f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80126f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80126fa:	da04      	bge.n	8012706 <__ulp+0x2a>
 80126fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012700:	4113      	asrs	r3, r2
 8012702:	2200      	movs	r2, #0
 8012704:	e008      	b.n	8012718 <__ulp+0x3c>
 8012706:	f1a2 0314 	sub.w	r3, r2, #20
 801270a:	2b1e      	cmp	r3, #30
 801270c:	bfda      	itte	le
 801270e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012712:	40da      	lsrle	r2, r3
 8012714:	2201      	movgt	r2, #1
 8012716:	2300      	movs	r3, #0
 8012718:	4619      	mov	r1, r3
 801271a:	4610      	mov	r0, r2
 801271c:	ec41 0b10 	vmov	d0, r0, r1
 8012720:	b002      	add	sp, #8
 8012722:	4770      	bx	lr
 8012724:	7ff00000 	.word	0x7ff00000

08012728 <__b2d>:
 8012728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801272c:	6906      	ldr	r6, [r0, #16]
 801272e:	f100 0814 	add.w	r8, r0, #20
 8012732:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012736:	1f37      	subs	r7, r6, #4
 8012738:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801273c:	4610      	mov	r0, r2
 801273e:	f7ff fd53 	bl	80121e8 <__hi0bits>
 8012742:	f1c0 0320 	rsb	r3, r0, #32
 8012746:	280a      	cmp	r0, #10
 8012748:	600b      	str	r3, [r1, #0]
 801274a:	491b      	ldr	r1, [pc, #108]	@ (80127b8 <__b2d+0x90>)
 801274c:	dc15      	bgt.n	801277a <__b2d+0x52>
 801274e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012752:	fa22 f30c 	lsr.w	r3, r2, ip
 8012756:	45b8      	cmp	r8, r7
 8012758:	ea43 0501 	orr.w	r5, r3, r1
 801275c:	bf34      	ite	cc
 801275e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012762:	2300      	movcs	r3, #0
 8012764:	3015      	adds	r0, #21
 8012766:	fa02 f000 	lsl.w	r0, r2, r0
 801276a:	fa23 f30c 	lsr.w	r3, r3, ip
 801276e:	4303      	orrs	r3, r0
 8012770:	461c      	mov	r4, r3
 8012772:	ec45 4b10 	vmov	d0, r4, r5
 8012776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801277a:	45b8      	cmp	r8, r7
 801277c:	bf3a      	itte	cc
 801277e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012782:	f1a6 0708 	subcc.w	r7, r6, #8
 8012786:	2300      	movcs	r3, #0
 8012788:	380b      	subs	r0, #11
 801278a:	d012      	beq.n	80127b2 <__b2d+0x8a>
 801278c:	f1c0 0120 	rsb	r1, r0, #32
 8012790:	fa23 f401 	lsr.w	r4, r3, r1
 8012794:	4082      	lsls	r2, r0
 8012796:	4322      	orrs	r2, r4
 8012798:	4547      	cmp	r7, r8
 801279a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801279e:	bf8c      	ite	hi
 80127a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80127a4:	2200      	movls	r2, #0
 80127a6:	4083      	lsls	r3, r0
 80127a8:	40ca      	lsrs	r2, r1
 80127aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80127ae:	4313      	orrs	r3, r2
 80127b0:	e7de      	b.n	8012770 <__b2d+0x48>
 80127b2:	ea42 0501 	orr.w	r5, r2, r1
 80127b6:	e7db      	b.n	8012770 <__b2d+0x48>
 80127b8:	3ff00000 	.word	0x3ff00000

080127bc <__d2b>:
 80127bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80127c0:	460f      	mov	r7, r1
 80127c2:	2101      	movs	r1, #1
 80127c4:	ec59 8b10 	vmov	r8, r9, d0
 80127c8:	4616      	mov	r6, r2
 80127ca:	f7ff fc1b 	bl	8012004 <_Balloc>
 80127ce:	4604      	mov	r4, r0
 80127d0:	b930      	cbnz	r0, 80127e0 <__d2b+0x24>
 80127d2:	4602      	mov	r2, r0
 80127d4:	4b23      	ldr	r3, [pc, #140]	@ (8012864 <__d2b+0xa8>)
 80127d6:	4824      	ldr	r0, [pc, #144]	@ (8012868 <__d2b+0xac>)
 80127d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80127dc:	f7fc ffec 	bl	800f7b8 <__assert_func>
 80127e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80127e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127e8:	b10d      	cbz	r5, 80127ee <__d2b+0x32>
 80127ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	f1b8 0300 	subs.w	r3, r8, #0
 80127f4:	d023      	beq.n	801283e <__d2b+0x82>
 80127f6:	4668      	mov	r0, sp
 80127f8:	9300      	str	r3, [sp, #0]
 80127fa:	f7ff fd14 	bl	8012226 <__lo0bits>
 80127fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012802:	b1d0      	cbz	r0, 801283a <__d2b+0x7e>
 8012804:	f1c0 0320 	rsb	r3, r0, #32
 8012808:	fa02 f303 	lsl.w	r3, r2, r3
 801280c:	430b      	orrs	r3, r1
 801280e:	40c2      	lsrs	r2, r0
 8012810:	6163      	str	r3, [r4, #20]
 8012812:	9201      	str	r2, [sp, #4]
 8012814:	9b01      	ldr	r3, [sp, #4]
 8012816:	61a3      	str	r3, [r4, #24]
 8012818:	2b00      	cmp	r3, #0
 801281a:	bf0c      	ite	eq
 801281c:	2201      	moveq	r2, #1
 801281e:	2202      	movne	r2, #2
 8012820:	6122      	str	r2, [r4, #16]
 8012822:	b1a5      	cbz	r5, 801284e <__d2b+0x92>
 8012824:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012828:	4405      	add	r5, r0
 801282a:	603d      	str	r5, [r7, #0]
 801282c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012830:	6030      	str	r0, [r6, #0]
 8012832:	4620      	mov	r0, r4
 8012834:	b003      	add	sp, #12
 8012836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801283a:	6161      	str	r1, [r4, #20]
 801283c:	e7ea      	b.n	8012814 <__d2b+0x58>
 801283e:	a801      	add	r0, sp, #4
 8012840:	f7ff fcf1 	bl	8012226 <__lo0bits>
 8012844:	9b01      	ldr	r3, [sp, #4]
 8012846:	6163      	str	r3, [r4, #20]
 8012848:	3020      	adds	r0, #32
 801284a:	2201      	movs	r2, #1
 801284c:	e7e8      	b.n	8012820 <__d2b+0x64>
 801284e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012852:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012856:	6038      	str	r0, [r7, #0]
 8012858:	6918      	ldr	r0, [r3, #16]
 801285a:	f7ff fcc5 	bl	80121e8 <__hi0bits>
 801285e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012862:	e7e5      	b.n	8012830 <__d2b+0x74>
 8012864:	080168b0 	.word	0x080168b0
 8012868:	080168c1 	.word	0x080168c1

0801286c <__ratio>:
 801286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012870:	b085      	sub	sp, #20
 8012872:	e9cd 1000 	strd	r1, r0, [sp]
 8012876:	a902      	add	r1, sp, #8
 8012878:	f7ff ff56 	bl	8012728 <__b2d>
 801287c:	9800      	ldr	r0, [sp, #0]
 801287e:	a903      	add	r1, sp, #12
 8012880:	ec55 4b10 	vmov	r4, r5, d0
 8012884:	f7ff ff50 	bl	8012728 <__b2d>
 8012888:	9b01      	ldr	r3, [sp, #4]
 801288a:	6919      	ldr	r1, [r3, #16]
 801288c:	9b00      	ldr	r3, [sp, #0]
 801288e:	691b      	ldr	r3, [r3, #16]
 8012890:	1ac9      	subs	r1, r1, r3
 8012892:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012896:	1a9b      	subs	r3, r3, r2
 8012898:	ec5b ab10 	vmov	sl, fp, d0
 801289c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	bfce      	itee	gt
 80128a4:	462a      	movgt	r2, r5
 80128a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80128aa:	465a      	movle	r2, fp
 80128ac:	462f      	mov	r7, r5
 80128ae:	46d9      	mov	r9, fp
 80128b0:	bfcc      	ite	gt
 80128b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80128b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80128ba:	464b      	mov	r3, r9
 80128bc:	4652      	mov	r2, sl
 80128be:	4620      	mov	r0, r4
 80128c0:	4639      	mov	r1, r7
 80128c2:	f7ed ffe3 	bl	800088c <__aeabi_ddiv>
 80128c6:	ec41 0b10 	vmov	d0, r0, r1
 80128ca:	b005      	add	sp, #20
 80128cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128d0 <__copybits>:
 80128d0:	3901      	subs	r1, #1
 80128d2:	b570      	push	{r4, r5, r6, lr}
 80128d4:	1149      	asrs	r1, r1, #5
 80128d6:	6914      	ldr	r4, [r2, #16]
 80128d8:	3101      	adds	r1, #1
 80128da:	f102 0314 	add.w	r3, r2, #20
 80128de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80128e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80128e6:	1f05      	subs	r5, r0, #4
 80128e8:	42a3      	cmp	r3, r4
 80128ea:	d30c      	bcc.n	8012906 <__copybits+0x36>
 80128ec:	1aa3      	subs	r3, r4, r2
 80128ee:	3b11      	subs	r3, #17
 80128f0:	f023 0303 	bic.w	r3, r3, #3
 80128f4:	3211      	adds	r2, #17
 80128f6:	42a2      	cmp	r2, r4
 80128f8:	bf88      	it	hi
 80128fa:	2300      	movhi	r3, #0
 80128fc:	4418      	add	r0, r3
 80128fe:	2300      	movs	r3, #0
 8012900:	4288      	cmp	r0, r1
 8012902:	d305      	bcc.n	8012910 <__copybits+0x40>
 8012904:	bd70      	pop	{r4, r5, r6, pc}
 8012906:	f853 6b04 	ldr.w	r6, [r3], #4
 801290a:	f845 6f04 	str.w	r6, [r5, #4]!
 801290e:	e7eb      	b.n	80128e8 <__copybits+0x18>
 8012910:	f840 3b04 	str.w	r3, [r0], #4
 8012914:	e7f4      	b.n	8012900 <__copybits+0x30>

08012916 <__any_on>:
 8012916:	f100 0214 	add.w	r2, r0, #20
 801291a:	6900      	ldr	r0, [r0, #16]
 801291c:	114b      	asrs	r3, r1, #5
 801291e:	4298      	cmp	r0, r3
 8012920:	b510      	push	{r4, lr}
 8012922:	db11      	blt.n	8012948 <__any_on+0x32>
 8012924:	dd0a      	ble.n	801293c <__any_on+0x26>
 8012926:	f011 011f 	ands.w	r1, r1, #31
 801292a:	d007      	beq.n	801293c <__any_on+0x26>
 801292c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012930:	fa24 f001 	lsr.w	r0, r4, r1
 8012934:	fa00 f101 	lsl.w	r1, r0, r1
 8012938:	428c      	cmp	r4, r1
 801293a:	d10b      	bne.n	8012954 <__any_on+0x3e>
 801293c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012940:	4293      	cmp	r3, r2
 8012942:	d803      	bhi.n	801294c <__any_on+0x36>
 8012944:	2000      	movs	r0, #0
 8012946:	bd10      	pop	{r4, pc}
 8012948:	4603      	mov	r3, r0
 801294a:	e7f7      	b.n	801293c <__any_on+0x26>
 801294c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012950:	2900      	cmp	r1, #0
 8012952:	d0f5      	beq.n	8012940 <__any_on+0x2a>
 8012954:	2001      	movs	r0, #1
 8012956:	e7f6      	b.n	8012946 <__any_on+0x30>

08012958 <_realloc_r>:
 8012958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801295c:	4607      	mov	r7, r0
 801295e:	4614      	mov	r4, r2
 8012960:	460d      	mov	r5, r1
 8012962:	b921      	cbnz	r1, 801296e <_realloc_r+0x16>
 8012964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012968:	4611      	mov	r1, r2
 801296a:	f7fc bf71 	b.w	800f850 <_malloc_r>
 801296e:	b92a      	cbnz	r2, 801297c <_realloc_r+0x24>
 8012970:	f7ff fafe 	bl	8011f70 <_free_r>
 8012974:	4625      	mov	r5, r4
 8012976:	4628      	mov	r0, r5
 8012978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801297c:	f001 ff3b 	bl	80147f6 <_malloc_usable_size_r>
 8012980:	4284      	cmp	r4, r0
 8012982:	4606      	mov	r6, r0
 8012984:	d802      	bhi.n	801298c <_realloc_r+0x34>
 8012986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801298a:	d8f4      	bhi.n	8012976 <_realloc_r+0x1e>
 801298c:	4621      	mov	r1, r4
 801298e:	4638      	mov	r0, r7
 8012990:	f7fc ff5e 	bl	800f850 <_malloc_r>
 8012994:	4680      	mov	r8, r0
 8012996:	b908      	cbnz	r0, 801299c <_realloc_r+0x44>
 8012998:	4645      	mov	r5, r8
 801299a:	e7ec      	b.n	8012976 <_realloc_r+0x1e>
 801299c:	42b4      	cmp	r4, r6
 801299e:	4622      	mov	r2, r4
 80129a0:	4629      	mov	r1, r5
 80129a2:	bf28      	it	cs
 80129a4:	4632      	movcs	r2, r6
 80129a6:	f7fe fc6c 	bl	8011282 <memcpy>
 80129aa:	4629      	mov	r1, r5
 80129ac:	4638      	mov	r0, r7
 80129ae:	f7ff fadf 	bl	8011f70 <_free_r>
 80129b2:	e7f1      	b.n	8012998 <_realloc_r+0x40>

080129b4 <sulp>:
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	4604      	mov	r4, r0
 80129b8:	460d      	mov	r5, r1
 80129ba:	ec45 4b10 	vmov	d0, r4, r5
 80129be:	4616      	mov	r6, r2
 80129c0:	f7ff fe8c 	bl	80126dc <__ulp>
 80129c4:	ec51 0b10 	vmov	r0, r1, d0
 80129c8:	b17e      	cbz	r6, 80129ea <sulp+0x36>
 80129ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80129ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	dd09      	ble.n	80129ea <sulp+0x36>
 80129d6:	051b      	lsls	r3, r3, #20
 80129d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80129dc:	2400      	movs	r4, #0
 80129de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80129e2:	4622      	mov	r2, r4
 80129e4:	462b      	mov	r3, r5
 80129e6:	f7ed fe27 	bl	8000638 <__aeabi_dmul>
 80129ea:	ec41 0b10 	vmov	d0, r0, r1
 80129ee:	bd70      	pop	{r4, r5, r6, pc}

080129f0 <_strtod_l>:
 80129f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	b09f      	sub	sp, #124	@ 0x7c
 80129f6:	460c      	mov	r4, r1
 80129f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80129fa:	2200      	movs	r2, #0
 80129fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80129fe:	9005      	str	r0, [sp, #20]
 8012a00:	f04f 0a00 	mov.w	sl, #0
 8012a04:	f04f 0b00 	mov.w	fp, #0
 8012a08:	460a      	mov	r2, r1
 8012a0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012a0c:	7811      	ldrb	r1, [r2, #0]
 8012a0e:	292b      	cmp	r1, #43	@ 0x2b
 8012a10:	d04a      	beq.n	8012aa8 <_strtod_l+0xb8>
 8012a12:	d838      	bhi.n	8012a86 <_strtod_l+0x96>
 8012a14:	290d      	cmp	r1, #13
 8012a16:	d832      	bhi.n	8012a7e <_strtod_l+0x8e>
 8012a18:	2908      	cmp	r1, #8
 8012a1a:	d832      	bhi.n	8012a82 <_strtod_l+0x92>
 8012a1c:	2900      	cmp	r1, #0
 8012a1e:	d03b      	beq.n	8012a98 <_strtod_l+0xa8>
 8012a20:	2200      	movs	r2, #0
 8012a22:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012a26:	782a      	ldrb	r2, [r5, #0]
 8012a28:	2a30      	cmp	r2, #48	@ 0x30
 8012a2a:	f040 80b2 	bne.w	8012b92 <_strtod_l+0x1a2>
 8012a2e:	786a      	ldrb	r2, [r5, #1]
 8012a30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012a34:	2a58      	cmp	r2, #88	@ 0x58
 8012a36:	d16e      	bne.n	8012b16 <_strtod_l+0x126>
 8012a38:	9302      	str	r3, [sp, #8]
 8012a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a3c:	9301      	str	r3, [sp, #4]
 8012a3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	4a8f      	ldr	r2, [pc, #572]	@ (8012c80 <_strtod_l+0x290>)
 8012a44:	9805      	ldr	r0, [sp, #20]
 8012a46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012a48:	a919      	add	r1, sp, #100	@ 0x64
 8012a4a:	f001 fbf1 	bl	8014230 <__gethex>
 8012a4e:	f010 060f 	ands.w	r6, r0, #15
 8012a52:	4604      	mov	r4, r0
 8012a54:	d005      	beq.n	8012a62 <_strtod_l+0x72>
 8012a56:	2e06      	cmp	r6, #6
 8012a58:	d128      	bne.n	8012aac <_strtod_l+0xbc>
 8012a5a:	3501      	adds	r5, #1
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8012a60:	930e      	str	r3, [sp, #56]	@ 0x38
 8012a62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	f040 858e 	bne.w	8013586 <_strtod_l+0xb96>
 8012a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a6c:	b1cb      	cbz	r3, 8012aa2 <_strtod_l+0xb2>
 8012a6e:	4652      	mov	r2, sl
 8012a70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012a74:	ec43 2b10 	vmov	d0, r2, r3
 8012a78:	b01f      	add	sp, #124	@ 0x7c
 8012a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a7e:	2920      	cmp	r1, #32
 8012a80:	d1ce      	bne.n	8012a20 <_strtod_l+0x30>
 8012a82:	3201      	adds	r2, #1
 8012a84:	e7c1      	b.n	8012a0a <_strtod_l+0x1a>
 8012a86:	292d      	cmp	r1, #45	@ 0x2d
 8012a88:	d1ca      	bne.n	8012a20 <_strtod_l+0x30>
 8012a8a:	2101      	movs	r1, #1
 8012a8c:	910e      	str	r1, [sp, #56]	@ 0x38
 8012a8e:	1c51      	adds	r1, r2, #1
 8012a90:	9119      	str	r1, [sp, #100]	@ 0x64
 8012a92:	7852      	ldrb	r2, [r2, #1]
 8012a94:	2a00      	cmp	r2, #0
 8012a96:	d1c5      	bne.n	8012a24 <_strtod_l+0x34>
 8012a98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012a9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f040 8570 	bne.w	8013582 <_strtod_l+0xb92>
 8012aa2:	4652      	mov	r2, sl
 8012aa4:	465b      	mov	r3, fp
 8012aa6:	e7e5      	b.n	8012a74 <_strtod_l+0x84>
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	e7ef      	b.n	8012a8c <_strtod_l+0x9c>
 8012aac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012aae:	b13a      	cbz	r2, 8012ac0 <_strtod_l+0xd0>
 8012ab0:	2135      	movs	r1, #53	@ 0x35
 8012ab2:	a81c      	add	r0, sp, #112	@ 0x70
 8012ab4:	f7ff ff0c 	bl	80128d0 <__copybits>
 8012ab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012aba:	9805      	ldr	r0, [sp, #20]
 8012abc:	f7ff fae2 	bl	8012084 <_Bfree>
 8012ac0:	3e01      	subs	r6, #1
 8012ac2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012ac4:	2e04      	cmp	r6, #4
 8012ac6:	d806      	bhi.n	8012ad6 <_strtod_l+0xe6>
 8012ac8:	e8df f006 	tbb	[pc, r6]
 8012acc:	201d0314 	.word	0x201d0314
 8012ad0:	14          	.byte	0x14
 8012ad1:	00          	.byte	0x00
 8012ad2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012ad6:	05e1      	lsls	r1, r4, #23
 8012ad8:	bf48      	it	mi
 8012ada:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012ade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012ae2:	0d1b      	lsrs	r3, r3, #20
 8012ae4:	051b      	lsls	r3, r3, #20
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1bb      	bne.n	8012a62 <_strtod_l+0x72>
 8012aea:	f7fe fb9d 	bl	8011228 <__errno>
 8012aee:	2322      	movs	r3, #34	@ 0x22
 8012af0:	6003      	str	r3, [r0, #0]
 8012af2:	e7b6      	b.n	8012a62 <_strtod_l+0x72>
 8012af4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012af8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012afc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012b00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012b04:	e7e7      	b.n	8012ad6 <_strtod_l+0xe6>
 8012b06:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012c88 <_strtod_l+0x298>
 8012b0a:	e7e4      	b.n	8012ad6 <_strtod_l+0xe6>
 8012b0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012b10:	f04f 3aff 	mov.w	sl, #4294967295
 8012b14:	e7df      	b.n	8012ad6 <_strtod_l+0xe6>
 8012b16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012b18:	1c5a      	adds	r2, r3, #1
 8012b1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012b1c:	785b      	ldrb	r3, [r3, #1]
 8012b1e:	2b30      	cmp	r3, #48	@ 0x30
 8012b20:	d0f9      	beq.n	8012b16 <_strtod_l+0x126>
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d09d      	beq.n	8012a62 <_strtod_l+0x72>
 8012b26:	2301      	movs	r3, #1
 8012b28:	2700      	movs	r7, #0
 8012b2a:	9308      	str	r3, [sp, #32]
 8012b2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012b2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012b30:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012b32:	46b9      	mov	r9, r7
 8012b34:	220a      	movs	r2, #10
 8012b36:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012b38:	7805      	ldrb	r5, [r0, #0]
 8012b3a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012b3e:	b2d9      	uxtb	r1, r3
 8012b40:	2909      	cmp	r1, #9
 8012b42:	d928      	bls.n	8012b96 <_strtod_l+0x1a6>
 8012b44:	494f      	ldr	r1, [pc, #316]	@ (8012c84 <_strtod_l+0x294>)
 8012b46:	2201      	movs	r2, #1
 8012b48:	f7fe facd 	bl	80110e6 <strncmp>
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d032      	beq.n	8012bb6 <_strtod_l+0x1c6>
 8012b50:	2000      	movs	r0, #0
 8012b52:	462a      	mov	r2, r5
 8012b54:	900a      	str	r0, [sp, #40]	@ 0x28
 8012b56:	464d      	mov	r5, r9
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2a65      	cmp	r2, #101	@ 0x65
 8012b5c:	d001      	beq.n	8012b62 <_strtod_l+0x172>
 8012b5e:	2a45      	cmp	r2, #69	@ 0x45
 8012b60:	d114      	bne.n	8012b8c <_strtod_l+0x19c>
 8012b62:	b91d      	cbnz	r5, 8012b6c <_strtod_l+0x17c>
 8012b64:	9a08      	ldr	r2, [sp, #32]
 8012b66:	4302      	orrs	r2, r0
 8012b68:	d096      	beq.n	8012a98 <_strtod_l+0xa8>
 8012b6a:	2500      	movs	r5, #0
 8012b6c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012b6e:	1c62      	adds	r2, r4, #1
 8012b70:	9219      	str	r2, [sp, #100]	@ 0x64
 8012b72:	7862      	ldrb	r2, [r4, #1]
 8012b74:	2a2b      	cmp	r2, #43	@ 0x2b
 8012b76:	d07a      	beq.n	8012c6e <_strtod_l+0x27e>
 8012b78:	2a2d      	cmp	r2, #45	@ 0x2d
 8012b7a:	d07e      	beq.n	8012c7a <_strtod_l+0x28a>
 8012b7c:	f04f 0c00 	mov.w	ip, #0
 8012b80:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012b84:	2909      	cmp	r1, #9
 8012b86:	f240 8085 	bls.w	8012c94 <_strtod_l+0x2a4>
 8012b8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8012b8c:	f04f 0800 	mov.w	r8, #0
 8012b90:	e0a5      	b.n	8012cde <_strtod_l+0x2ee>
 8012b92:	2300      	movs	r3, #0
 8012b94:	e7c8      	b.n	8012b28 <_strtod_l+0x138>
 8012b96:	f1b9 0f08 	cmp.w	r9, #8
 8012b9a:	bfd8      	it	le
 8012b9c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012b9e:	f100 0001 	add.w	r0, r0, #1
 8012ba2:	bfda      	itte	le
 8012ba4:	fb02 3301 	mlale	r3, r2, r1, r3
 8012ba8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012baa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012bae:	f109 0901 	add.w	r9, r9, #1
 8012bb2:	9019      	str	r0, [sp, #100]	@ 0x64
 8012bb4:	e7bf      	b.n	8012b36 <_strtod_l+0x146>
 8012bb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012bb8:	1c5a      	adds	r2, r3, #1
 8012bba:	9219      	str	r2, [sp, #100]	@ 0x64
 8012bbc:	785a      	ldrb	r2, [r3, #1]
 8012bbe:	f1b9 0f00 	cmp.w	r9, #0
 8012bc2:	d03b      	beq.n	8012c3c <_strtod_l+0x24c>
 8012bc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8012bc6:	464d      	mov	r5, r9
 8012bc8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012bcc:	2b09      	cmp	r3, #9
 8012bce:	d912      	bls.n	8012bf6 <_strtod_l+0x206>
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	e7c2      	b.n	8012b5a <_strtod_l+0x16a>
 8012bd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8012bda:	785a      	ldrb	r2, [r3, #1]
 8012bdc:	3001      	adds	r0, #1
 8012bde:	2a30      	cmp	r2, #48	@ 0x30
 8012be0:	d0f8      	beq.n	8012bd4 <_strtod_l+0x1e4>
 8012be2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012be6:	2b08      	cmp	r3, #8
 8012be8:	f200 84d2 	bhi.w	8013590 <_strtod_l+0xba0>
 8012bec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012bee:	900a      	str	r0, [sp, #40]	@ 0x28
 8012bf0:	2000      	movs	r0, #0
 8012bf2:	930c      	str	r3, [sp, #48]	@ 0x30
 8012bf4:	4605      	mov	r5, r0
 8012bf6:	3a30      	subs	r2, #48	@ 0x30
 8012bf8:	f100 0301 	add.w	r3, r0, #1
 8012bfc:	d018      	beq.n	8012c30 <_strtod_l+0x240>
 8012bfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c00:	4419      	add	r1, r3
 8012c02:	910a      	str	r1, [sp, #40]	@ 0x28
 8012c04:	462e      	mov	r6, r5
 8012c06:	f04f 0e0a 	mov.w	lr, #10
 8012c0a:	1c71      	adds	r1, r6, #1
 8012c0c:	eba1 0c05 	sub.w	ip, r1, r5
 8012c10:	4563      	cmp	r3, ip
 8012c12:	dc15      	bgt.n	8012c40 <_strtod_l+0x250>
 8012c14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012c18:	182b      	adds	r3, r5, r0
 8012c1a:	2b08      	cmp	r3, #8
 8012c1c:	f105 0501 	add.w	r5, r5, #1
 8012c20:	4405      	add	r5, r0
 8012c22:	dc1a      	bgt.n	8012c5a <_strtod_l+0x26a>
 8012c24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012c26:	230a      	movs	r3, #10
 8012c28:	fb03 2301 	mla	r3, r3, r1, r2
 8012c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c2e:	2300      	movs	r3, #0
 8012c30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012c32:	1c51      	adds	r1, r2, #1
 8012c34:	9119      	str	r1, [sp, #100]	@ 0x64
 8012c36:	7852      	ldrb	r2, [r2, #1]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	e7c5      	b.n	8012bc8 <_strtod_l+0x1d8>
 8012c3c:	4648      	mov	r0, r9
 8012c3e:	e7ce      	b.n	8012bde <_strtod_l+0x1ee>
 8012c40:	2e08      	cmp	r6, #8
 8012c42:	dc05      	bgt.n	8012c50 <_strtod_l+0x260>
 8012c44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012c46:	fb0e f606 	mul.w	r6, lr, r6
 8012c4a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8012c4c:	460e      	mov	r6, r1
 8012c4e:	e7dc      	b.n	8012c0a <_strtod_l+0x21a>
 8012c50:	2910      	cmp	r1, #16
 8012c52:	bfd8      	it	le
 8012c54:	fb0e f707 	mulle.w	r7, lr, r7
 8012c58:	e7f8      	b.n	8012c4c <_strtod_l+0x25c>
 8012c5a:	2b0f      	cmp	r3, #15
 8012c5c:	bfdc      	itt	le
 8012c5e:	230a      	movle	r3, #10
 8012c60:	fb03 2707 	mlale	r7, r3, r7, r2
 8012c64:	e7e3      	b.n	8012c2e <_strtod_l+0x23e>
 8012c66:	2300      	movs	r3, #0
 8012c68:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	e77a      	b.n	8012b64 <_strtod_l+0x174>
 8012c6e:	f04f 0c00 	mov.w	ip, #0
 8012c72:	1ca2      	adds	r2, r4, #2
 8012c74:	9219      	str	r2, [sp, #100]	@ 0x64
 8012c76:	78a2      	ldrb	r2, [r4, #2]
 8012c78:	e782      	b.n	8012b80 <_strtod_l+0x190>
 8012c7a:	f04f 0c01 	mov.w	ip, #1
 8012c7e:	e7f8      	b.n	8012c72 <_strtod_l+0x282>
 8012c80:	08016bb4 	.word	0x08016bb4
 8012c84:	0801691a 	.word	0x0801691a
 8012c88:	7ff00000 	.word	0x7ff00000
 8012c8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012c8e:	1c51      	adds	r1, r2, #1
 8012c90:	9119      	str	r1, [sp, #100]	@ 0x64
 8012c92:	7852      	ldrb	r2, [r2, #1]
 8012c94:	2a30      	cmp	r2, #48	@ 0x30
 8012c96:	d0f9      	beq.n	8012c8c <_strtod_l+0x29c>
 8012c98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012c9c:	2908      	cmp	r1, #8
 8012c9e:	f63f af75 	bhi.w	8012b8c <_strtod_l+0x19c>
 8012ca2:	3a30      	subs	r2, #48	@ 0x30
 8012ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ca6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012ca8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012caa:	f04f 080a 	mov.w	r8, #10
 8012cae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012cb0:	1c56      	adds	r6, r2, #1
 8012cb2:	9619      	str	r6, [sp, #100]	@ 0x64
 8012cb4:	7852      	ldrb	r2, [r2, #1]
 8012cb6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012cba:	f1be 0f09 	cmp.w	lr, #9
 8012cbe:	d939      	bls.n	8012d34 <_strtod_l+0x344>
 8012cc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012cc2:	1a76      	subs	r6, r6, r1
 8012cc4:	2e08      	cmp	r6, #8
 8012cc6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012cca:	dc03      	bgt.n	8012cd4 <_strtod_l+0x2e4>
 8012ccc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012cce:	4588      	cmp	r8, r1
 8012cd0:	bfa8      	it	ge
 8012cd2:	4688      	movge	r8, r1
 8012cd4:	f1bc 0f00 	cmp.w	ip, #0
 8012cd8:	d001      	beq.n	8012cde <_strtod_l+0x2ee>
 8012cda:	f1c8 0800 	rsb	r8, r8, #0
 8012cde:	2d00      	cmp	r5, #0
 8012ce0:	d14e      	bne.n	8012d80 <_strtod_l+0x390>
 8012ce2:	9908      	ldr	r1, [sp, #32]
 8012ce4:	4308      	orrs	r0, r1
 8012ce6:	f47f aebc 	bne.w	8012a62 <_strtod_l+0x72>
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	f47f aed4 	bne.w	8012a98 <_strtod_l+0xa8>
 8012cf0:	2a69      	cmp	r2, #105	@ 0x69
 8012cf2:	d028      	beq.n	8012d46 <_strtod_l+0x356>
 8012cf4:	dc25      	bgt.n	8012d42 <_strtod_l+0x352>
 8012cf6:	2a49      	cmp	r2, #73	@ 0x49
 8012cf8:	d025      	beq.n	8012d46 <_strtod_l+0x356>
 8012cfa:	2a4e      	cmp	r2, #78	@ 0x4e
 8012cfc:	f47f aecc 	bne.w	8012a98 <_strtod_l+0xa8>
 8012d00:	499a      	ldr	r1, [pc, #616]	@ (8012f6c <_strtod_l+0x57c>)
 8012d02:	a819      	add	r0, sp, #100	@ 0x64
 8012d04:	f001 fcb6 	bl	8014674 <__match>
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	f43f aec5 	beq.w	8012a98 <_strtod_l+0xa8>
 8012d0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	2b28      	cmp	r3, #40	@ 0x28
 8012d14:	d12e      	bne.n	8012d74 <_strtod_l+0x384>
 8012d16:	4996      	ldr	r1, [pc, #600]	@ (8012f70 <_strtod_l+0x580>)
 8012d18:	aa1c      	add	r2, sp, #112	@ 0x70
 8012d1a:	a819      	add	r0, sp, #100	@ 0x64
 8012d1c:	f001 fcbe 	bl	801469c <__hexnan>
 8012d20:	2805      	cmp	r0, #5
 8012d22:	d127      	bne.n	8012d74 <_strtod_l+0x384>
 8012d24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012d26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012d2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012d2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012d32:	e696      	b.n	8012a62 <_strtod_l+0x72>
 8012d34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d36:	fb08 2101 	mla	r1, r8, r1, r2
 8012d3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012d3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d40:	e7b5      	b.n	8012cae <_strtod_l+0x2be>
 8012d42:	2a6e      	cmp	r2, #110	@ 0x6e
 8012d44:	e7da      	b.n	8012cfc <_strtod_l+0x30c>
 8012d46:	498b      	ldr	r1, [pc, #556]	@ (8012f74 <_strtod_l+0x584>)
 8012d48:	a819      	add	r0, sp, #100	@ 0x64
 8012d4a:	f001 fc93 	bl	8014674 <__match>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	f43f aea2 	beq.w	8012a98 <_strtod_l+0xa8>
 8012d54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d56:	4988      	ldr	r1, [pc, #544]	@ (8012f78 <_strtod_l+0x588>)
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	a819      	add	r0, sp, #100	@ 0x64
 8012d5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8012d5e:	f001 fc89 	bl	8014674 <__match>
 8012d62:	b910      	cbnz	r0, 8012d6a <_strtod_l+0x37a>
 8012d64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d66:	3301      	adds	r3, #1
 8012d68:	9319      	str	r3, [sp, #100]	@ 0x64
 8012d6a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012f88 <_strtod_l+0x598>
 8012d6e:	f04f 0a00 	mov.w	sl, #0
 8012d72:	e676      	b.n	8012a62 <_strtod_l+0x72>
 8012d74:	4881      	ldr	r0, [pc, #516]	@ (8012f7c <_strtod_l+0x58c>)
 8012d76:	f001 f9d7 	bl	8014128 <nan>
 8012d7a:	ec5b ab10 	vmov	sl, fp, d0
 8012d7e:	e670      	b.n	8012a62 <_strtod_l+0x72>
 8012d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d82:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012d84:	eba8 0303 	sub.w	r3, r8, r3
 8012d88:	f1b9 0f00 	cmp.w	r9, #0
 8012d8c:	bf08      	it	eq
 8012d8e:	46a9      	moveq	r9, r5
 8012d90:	2d10      	cmp	r5, #16
 8012d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d94:	462c      	mov	r4, r5
 8012d96:	bfa8      	it	ge
 8012d98:	2410      	movge	r4, #16
 8012d9a:	f7ed fbd3 	bl	8000544 <__aeabi_ui2d>
 8012d9e:	2d09      	cmp	r5, #9
 8012da0:	4682      	mov	sl, r0
 8012da2:	468b      	mov	fp, r1
 8012da4:	dc13      	bgt.n	8012dce <_strtod_l+0x3de>
 8012da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f43f ae5a 	beq.w	8012a62 <_strtod_l+0x72>
 8012dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012db0:	dd78      	ble.n	8012ea4 <_strtod_l+0x4b4>
 8012db2:	2b16      	cmp	r3, #22
 8012db4:	dc5f      	bgt.n	8012e76 <_strtod_l+0x486>
 8012db6:	4972      	ldr	r1, [pc, #456]	@ (8012f80 <_strtod_l+0x590>)
 8012db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dc0:	4652      	mov	r2, sl
 8012dc2:	465b      	mov	r3, fp
 8012dc4:	f7ed fc38 	bl	8000638 <__aeabi_dmul>
 8012dc8:	4682      	mov	sl, r0
 8012dca:	468b      	mov	fp, r1
 8012dcc:	e649      	b.n	8012a62 <_strtod_l+0x72>
 8012dce:	4b6c      	ldr	r3, [pc, #432]	@ (8012f80 <_strtod_l+0x590>)
 8012dd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012dd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012dd8:	f7ed fc2e 	bl	8000638 <__aeabi_dmul>
 8012ddc:	4682      	mov	sl, r0
 8012dde:	4638      	mov	r0, r7
 8012de0:	468b      	mov	fp, r1
 8012de2:	f7ed fbaf 	bl	8000544 <__aeabi_ui2d>
 8012de6:	4602      	mov	r2, r0
 8012de8:	460b      	mov	r3, r1
 8012dea:	4650      	mov	r0, sl
 8012dec:	4659      	mov	r1, fp
 8012dee:	f7ed fa6d 	bl	80002cc <__adddf3>
 8012df2:	2d0f      	cmp	r5, #15
 8012df4:	4682      	mov	sl, r0
 8012df6:	468b      	mov	fp, r1
 8012df8:	ddd5      	ble.n	8012da6 <_strtod_l+0x3b6>
 8012dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dfc:	1b2c      	subs	r4, r5, r4
 8012dfe:	441c      	add	r4, r3
 8012e00:	2c00      	cmp	r4, #0
 8012e02:	f340 8093 	ble.w	8012f2c <_strtod_l+0x53c>
 8012e06:	f014 030f 	ands.w	r3, r4, #15
 8012e0a:	d00a      	beq.n	8012e22 <_strtod_l+0x432>
 8012e0c:	495c      	ldr	r1, [pc, #368]	@ (8012f80 <_strtod_l+0x590>)
 8012e0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e12:	4652      	mov	r2, sl
 8012e14:	465b      	mov	r3, fp
 8012e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e1a:	f7ed fc0d 	bl	8000638 <__aeabi_dmul>
 8012e1e:	4682      	mov	sl, r0
 8012e20:	468b      	mov	fp, r1
 8012e22:	f034 040f 	bics.w	r4, r4, #15
 8012e26:	d073      	beq.n	8012f10 <_strtod_l+0x520>
 8012e28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012e2c:	dd49      	ble.n	8012ec2 <_strtod_l+0x4d2>
 8012e2e:	2400      	movs	r4, #0
 8012e30:	46a0      	mov	r8, r4
 8012e32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012e34:	46a1      	mov	r9, r4
 8012e36:	9a05      	ldr	r2, [sp, #20]
 8012e38:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012f88 <_strtod_l+0x598>
 8012e3c:	2322      	movs	r3, #34	@ 0x22
 8012e3e:	6013      	str	r3, [r2, #0]
 8012e40:	f04f 0a00 	mov.w	sl, #0
 8012e44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f43f ae0b 	beq.w	8012a62 <_strtod_l+0x72>
 8012e4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e4e:	9805      	ldr	r0, [sp, #20]
 8012e50:	f7ff f918 	bl	8012084 <_Bfree>
 8012e54:	9805      	ldr	r0, [sp, #20]
 8012e56:	4649      	mov	r1, r9
 8012e58:	f7ff f914 	bl	8012084 <_Bfree>
 8012e5c:	9805      	ldr	r0, [sp, #20]
 8012e5e:	4641      	mov	r1, r8
 8012e60:	f7ff f910 	bl	8012084 <_Bfree>
 8012e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e66:	9805      	ldr	r0, [sp, #20]
 8012e68:	f7ff f90c 	bl	8012084 <_Bfree>
 8012e6c:	9805      	ldr	r0, [sp, #20]
 8012e6e:	4621      	mov	r1, r4
 8012e70:	f7ff f908 	bl	8012084 <_Bfree>
 8012e74:	e5f5      	b.n	8012a62 <_strtod_l+0x72>
 8012e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	dbbc      	blt.n	8012dfa <_strtod_l+0x40a>
 8012e80:	4c3f      	ldr	r4, [pc, #252]	@ (8012f80 <_strtod_l+0x590>)
 8012e82:	f1c5 050f 	rsb	r5, r5, #15
 8012e86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012e8a:	4652      	mov	r2, sl
 8012e8c:	465b      	mov	r3, fp
 8012e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e92:	f7ed fbd1 	bl	8000638 <__aeabi_dmul>
 8012e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e98:	1b5d      	subs	r5, r3, r5
 8012e9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012e9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012ea2:	e78f      	b.n	8012dc4 <_strtod_l+0x3d4>
 8012ea4:	3316      	adds	r3, #22
 8012ea6:	dba8      	blt.n	8012dfa <_strtod_l+0x40a>
 8012ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012eaa:	eba3 0808 	sub.w	r8, r3, r8
 8012eae:	4b34      	ldr	r3, [pc, #208]	@ (8012f80 <_strtod_l+0x590>)
 8012eb0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012eb4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012eb8:	4650      	mov	r0, sl
 8012eba:	4659      	mov	r1, fp
 8012ebc:	f7ed fce6 	bl	800088c <__aeabi_ddiv>
 8012ec0:	e782      	b.n	8012dc8 <_strtod_l+0x3d8>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	4f2f      	ldr	r7, [pc, #188]	@ (8012f84 <_strtod_l+0x594>)
 8012ec6:	1124      	asrs	r4, r4, #4
 8012ec8:	4650      	mov	r0, sl
 8012eca:	4659      	mov	r1, fp
 8012ecc:	461e      	mov	r6, r3
 8012ece:	2c01      	cmp	r4, #1
 8012ed0:	dc21      	bgt.n	8012f16 <_strtod_l+0x526>
 8012ed2:	b10b      	cbz	r3, 8012ed8 <_strtod_l+0x4e8>
 8012ed4:	4682      	mov	sl, r0
 8012ed6:	468b      	mov	fp, r1
 8012ed8:	492a      	ldr	r1, [pc, #168]	@ (8012f84 <_strtod_l+0x594>)
 8012eda:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012ede:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012ee2:	4652      	mov	r2, sl
 8012ee4:	465b      	mov	r3, fp
 8012ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eea:	f7ed fba5 	bl	8000638 <__aeabi_dmul>
 8012eee:	4b26      	ldr	r3, [pc, #152]	@ (8012f88 <_strtod_l+0x598>)
 8012ef0:	460a      	mov	r2, r1
 8012ef2:	400b      	ands	r3, r1
 8012ef4:	4925      	ldr	r1, [pc, #148]	@ (8012f8c <_strtod_l+0x59c>)
 8012ef6:	428b      	cmp	r3, r1
 8012ef8:	4682      	mov	sl, r0
 8012efa:	d898      	bhi.n	8012e2e <_strtod_l+0x43e>
 8012efc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012f00:	428b      	cmp	r3, r1
 8012f02:	bf86      	itte	hi
 8012f04:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012f90 <_strtod_l+0x5a0>
 8012f08:	f04f 3aff 	movhi.w	sl, #4294967295
 8012f0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012f10:	2300      	movs	r3, #0
 8012f12:	9308      	str	r3, [sp, #32]
 8012f14:	e076      	b.n	8013004 <_strtod_l+0x614>
 8012f16:	07e2      	lsls	r2, r4, #31
 8012f18:	d504      	bpl.n	8012f24 <_strtod_l+0x534>
 8012f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f1e:	f7ed fb8b 	bl	8000638 <__aeabi_dmul>
 8012f22:	2301      	movs	r3, #1
 8012f24:	3601      	adds	r6, #1
 8012f26:	1064      	asrs	r4, r4, #1
 8012f28:	3708      	adds	r7, #8
 8012f2a:	e7d0      	b.n	8012ece <_strtod_l+0x4de>
 8012f2c:	d0f0      	beq.n	8012f10 <_strtod_l+0x520>
 8012f2e:	4264      	negs	r4, r4
 8012f30:	f014 020f 	ands.w	r2, r4, #15
 8012f34:	d00a      	beq.n	8012f4c <_strtod_l+0x55c>
 8012f36:	4b12      	ldr	r3, [pc, #72]	@ (8012f80 <_strtod_l+0x590>)
 8012f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	4659      	mov	r1, fp
 8012f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f44:	f7ed fca2 	bl	800088c <__aeabi_ddiv>
 8012f48:	4682      	mov	sl, r0
 8012f4a:	468b      	mov	fp, r1
 8012f4c:	1124      	asrs	r4, r4, #4
 8012f4e:	d0df      	beq.n	8012f10 <_strtod_l+0x520>
 8012f50:	2c1f      	cmp	r4, #31
 8012f52:	dd1f      	ble.n	8012f94 <_strtod_l+0x5a4>
 8012f54:	2400      	movs	r4, #0
 8012f56:	46a0      	mov	r8, r4
 8012f58:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012f5a:	46a1      	mov	r9, r4
 8012f5c:	9a05      	ldr	r2, [sp, #20]
 8012f5e:	2322      	movs	r3, #34	@ 0x22
 8012f60:	f04f 0a00 	mov.w	sl, #0
 8012f64:	f04f 0b00 	mov.w	fp, #0
 8012f68:	6013      	str	r3, [r2, #0]
 8012f6a:	e76b      	b.n	8012e44 <_strtod_l+0x454>
 8012f6c:	080167f9 	.word	0x080167f9
 8012f70:	08016ba0 	.word	0x08016ba0
 8012f74:	080167f1 	.word	0x080167f1
 8012f78:	08016837 	.word	0x08016837
 8012f7c:	080167eb 	.word	0x080167eb
 8012f80:	08016ad8 	.word	0x08016ad8
 8012f84:	08016ab0 	.word	0x08016ab0
 8012f88:	7ff00000 	.word	0x7ff00000
 8012f8c:	7ca00000 	.word	0x7ca00000
 8012f90:	7fefffff 	.word	0x7fefffff
 8012f94:	f014 0310 	ands.w	r3, r4, #16
 8012f98:	bf18      	it	ne
 8012f9a:	236a      	movne	r3, #106	@ 0x6a
 8012f9c:	4ea9      	ldr	r6, [pc, #676]	@ (8013244 <_strtod_l+0x854>)
 8012f9e:	9308      	str	r3, [sp, #32]
 8012fa0:	4650      	mov	r0, sl
 8012fa2:	4659      	mov	r1, fp
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	07e7      	lsls	r7, r4, #31
 8012fa8:	d504      	bpl.n	8012fb4 <_strtod_l+0x5c4>
 8012faa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012fae:	f7ed fb43 	bl	8000638 <__aeabi_dmul>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	1064      	asrs	r4, r4, #1
 8012fb6:	f106 0608 	add.w	r6, r6, #8
 8012fba:	d1f4      	bne.n	8012fa6 <_strtod_l+0x5b6>
 8012fbc:	b10b      	cbz	r3, 8012fc2 <_strtod_l+0x5d2>
 8012fbe:	4682      	mov	sl, r0
 8012fc0:	468b      	mov	fp, r1
 8012fc2:	9b08      	ldr	r3, [sp, #32]
 8012fc4:	b1b3      	cbz	r3, 8012ff4 <_strtod_l+0x604>
 8012fc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012fca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	4659      	mov	r1, fp
 8012fd2:	dd0f      	ble.n	8012ff4 <_strtod_l+0x604>
 8012fd4:	2b1f      	cmp	r3, #31
 8012fd6:	dd56      	ble.n	8013086 <_strtod_l+0x696>
 8012fd8:	2b34      	cmp	r3, #52	@ 0x34
 8012fda:	bfde      	ittt	le
 8012fdc:	f04f 33ff 	movle.w	r3, #4294967295
 8012fe0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012fe4:	4093      	lslle	r3, r2
 8012fe6:	f04f 0a00 	mov.w	sl, #0
 8012fea:	bfcc      	ite	gt
 8012fec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012ff0:	ea03 0b01 	andle.w	fp, r3, r1
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	4650      	mov	r0, sl
 8012ffa:	4659      	mov	r1, fp
 8012ffc:	f7ed fd84 	bl	8000b08 <__aeabi_dcmpeq>
 8013000:	2800      	cmp	r0, #0
 8013002:	d1a7      	bne.n	8012f54 <_strtod_l+0x564>
 8013004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801300a:	9805      	ldr	r0, [sp, #20]
 801300c:	462b      	mov	r3, r5
 801300e:	464a      	mov	r2, r9
 8013010:	f7ff f8a0 	bl	8012154 <__s2b>
 8013014:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013016:	2800      	cmp	r0, #0
 8013018:	f43f af09 	beq.w	8012e2e <_strtod_l+0x43e>
 801301c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801301e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013020:	2a00      	cmp	r2, #0
 8013022:	eba3 0308 	sub.w	r3, r3, r8
 8013026:	bfa8      	it	ge
 8013028:	2300      	movge	r3, #0
 801302a:	9312      	str	r3, [sp, #72]	@ 0x48
 801302c:	2400      	movs	r4, #0
 801302e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013032:	9316      	str	r3, [sp, #88]	@ 0x58
 8013034:	46a0      	mov	r8, r4
 8013036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013038:	9805      	ldr	r0, [sp, #20]
 801303a:	6859      	ldr	r1, [r3, #4]
 801303c:	f7fe ffe2 	bl	8012004 <_Balloc>
 8013040:	4681      	mov	r9, r0
 8013042:	2800      	cmp	r0, #0
 8013044:	f43f aef7 	beq.w	8012e36 <_strtod_l+0x446>
 8013048:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801304a:	691a      	ldr	r2, [r3, #16]
 801304c:	3202      	adds	r2, #2
 801304e:	f103 010c 	add.w	r1, r3, #12
 8013052:	0092      	lsls	r2, r2, #2
 8013054:	300c      	adds	r0, #12
 8013056:	f7fe f914 	bl	8011282 <memcpy>
 801305a:	ec4b ab10 	vmov	d0, sl, fp
 801305e:	9805      	ldr	r0, [sp, #20]
 8013060:	aa1c      	add	r2, sp, #112	@ 0x70
 8013062:	a91b      	add	r1, sp, #108	@ 0x6c
 8013064:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013068:	f7ff fba8 	bl	80127bc <__d2b>
 801306c:	901a      	str	r0, [sp, #104]	@ 0x68
 801306e:	2800      	cmp	r0, #0
 8013070:	f43f aee1 	beq.w	8012e36 <_strtod_l+0x446>
 8013074:	9805      	ldr	r0, [sp, #20]
 8013076:	2101      	movs	r1, #1
 8013078:	f7ff f902 	bl	8012280 <__i2b>
 801307c:	4680      	mov	r8, r0
 801307e:	b948      	cbnz	r0, 8013094 <_strtod_l+0x6a4>
 8013080:	f04f 0800 	mov.w	r8, #0
 8013084:	e6d7      	b.n	8012e36 <_strtod_l+0x446>
 8013086:	f04f 32ff 	mov.w	r2, #4294967295
 801308a:	fa02 f303 	lsl.w	r3, r2, r3
 801308e:	ea03 0a0a 	and.w	sl, r3, sl
 8013092:	e7af      	b.n	8012ff4 <_strtod_l+0x604>
 8013094:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013096:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013098:	2d00      	cmp	r5, #0
 801309a:	bfab      	itete	ge
 801309c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801309e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80130a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80130a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80130a4:	bfac      	ite	ge
 80130a6:	18ef      	addge	r7, r5, r3
 80130a8:	1b5e      	sublt	r6, r3, r5
 80130aa:	9b08      	ldr	r3, [sp, #32]
 80130ac:	1aed      	subs	r5, r5, r3
 80130ae:	4415      	add	r5, r2
 80130b0:	4b65      	ldr	r3, [pc, #404]	@ (8013248 <_strtod_l+0x858>)
 80130b2:	3d01      	subs	r5, #1
 80130b4:	429d      	cmp	r5, r3
 80130b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80130ba:	da50      	bge.n	801315e <_strtod_l+0x76e>
 80130bc:	1b5b      	subs	r3, r3, r5
 80130be:	2b1f      	cmp	r3, #31
 80130c0:	eba2 0203 	sub.w	r2, r2, r3
 80130c4:	f04f 0101 	mov.w	r1, #1
 80130c8:	dc3d      	bgt.n	8013146 <_strtod_l+0x756>
 80130ca:	fa01 f303 	lsl.w	r3, r1, r3
 80130ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80130d0:	2300      	movs	r3, #0
 80130d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80130d4:	18bd      	adds	r5, r7, r2
 80130d6:	9b08      	ldr	r3, [sp, #32]
 80130d8:	42af      	cmp	r7, r5
 80130da:	4416      	add	r6, r2
 80130dc:	441e      	add	r6, r3
 80130de:	463b      	mov	r3, r7
 80130e0:	bfa8      	it	ge
 80130e2:	462b      	movge	r3, r5
 80130e4:	42b3      	cmp	r3, r6
 80130e6:	bfa8      	it	ge
 80130e8:	4633      	movge	r3, r6
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	bfc2      	ittt	gt
 80130ee:	1aed      	subgt	r5, r5, r3
 80130f0:	1af6      	subgt	r6, r6, r3
 80130f2:	1aff      	subgt	r7, r7, r3
 80130f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	dd16      	ble.n	8013128 <_strtod_l+0x738>
 80130fa:	4641      	mov	r1, r8
 80130fc:	9805      	ldr	r0, [sp, #20]
 80130fe:	461a      	mov	r2, r3
 8013100:	f7ff f976 	bl	80123f0 <__pow5mult>
 8013104:	4680      	mov	r8, r0
 8013106:	2800      	cmp	r0, #0
 8013108:	d0ba      	beq.n	8013080 <_strtod_l+0x690>
 801310a:	4601      	mov	r1, r0
 801310c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801310e:	9805      	ldr	r0, [sp, #20]
 8013110:	f7ff f8cc 	bl	80122ac <__multiply>
 8013114:	900a      	str	r0, [sp, #40]	@ 0x28
 8013116:	2800      	cmp	r0, #0
 8013118:	f43f ae8d 	beq.w	8012e36 <_strtod_l+0x446>
 801311c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801311e:	9805      	ldr	r0, [sp, #20]
 8013120:	f7fe ffb0 	bl	8012084 <_Bfree>
 8013124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013126:	931a      	str	r3, [sp, #104]	@ 0x68
 8013128:	2d00      	cmp	r5, #0
 801312a:	dc1d      	bgt.n	8013168 <_strtod_l+0x778>
 801312c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801312e:	2b00      	cmp	r3, #0
 8013130:	dd23      	ble.n	801317a <_strtod_l+0x78a>
 8013132:	4649      	mov	r1, r9
 8013134:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013136:	9805      	ldr	r0, [sp, #20]
 8013138:	f7ff f95a 	bl	80123f0 <__pow5mult>
 801313c:	4681      	mov	r9, r0
 801313e:	b9e0      	cbnz	r0, 801317a <_strtod_l+0x78a>
 8013140:	f04f 0900 	mov.w	r9, #0
 8013144:	e677      	b.n	8012e36 <_strtod_l+0x446>
 8013146:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801314a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801314e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013152:	35e2      	adds	r5, #226	@ 0xe2
 8013154:	fa01 f305 	lsl.w	r3, r1, r5
 8013158:	9310      	str	r3, [sp, #64]	@ 0x40
 801315a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801315c:	e7ba      	b.n	80130d4 <_strtod_l+0x6e4>
 801315e:	2300      	movs	r3, #0
 8013160:	9310      	str	r3, [sp, #64]	@ 0x40
 8013162:	2301      	movs	r3, #1
 8013164:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013166:	e7b5      	b.n	80130d4 <_strtod_l+0x6e4>
 8013168:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801316a:	9805      	ldr	r0, [sp, #20]
 801316c:	462a      	mov	r2, r5
 801316e:	f7ff f999 	bl	80124a4 <__lshift>
 8013172:	901a      	str	r0, [sp, #104]	@ 0x68
 8013174:	2800      	cmp	r0, #0
 8013176:	d1d9      	bne.n	801312c <_strtod_l+0x73c>
 8013178:	e65d      	b.n	8012e36 <_strtod_l+0x446>
 801317a:	2e00      	cmp	r6, #0
 801317c:	dd07      	ble.n	801318e <_strtod_l+0x79e>
 801317e:	4649      	mov	r1, r9
 8013180:	9805      	ldr	r0, [sp, #20]
 8013182:	4632      	mov	r2, r6
 8013184:	f7ff f98e 	bl	80124a4 <__lshift>
 8013188:	4681      	mov	r9, r0
 801318a:	2800      	cmp	r0, #0
 801318c:	d0d8      	beq.n	8013140 <_strtod_l+0x750>
 801318e:	2f00      	cmp	r7, #0
 8013190:	dd08      	ble.n	80131a4 <_strtod_l+0x7b4>
 8013192:	4641      	mov	r1, r8
 8013194:	9805      	ldr	r0, [sp, #20]
 8013196:	463a      	mov	r2, r7
 8013198:	f7ff f984 	bl	80124a4 <__lshift>
 801319c:	4680      	mov	r8, r0
 801319e:	2800      	cmp	r0, #0
 80131a0:	f43f ae49 	beq.w	8012e36 <_strtod_l+0x446>
 80131a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80131a6:	9805      	ldr	r0, [sp, #20]
 80131a8:	464a      	mov	r2, r9
 80131aa:	f7ff fa03 	bl	80125b4 <__mdiff>
 80131ae:	4604      	mov	r4, r0
 80131b0:	2800      	cmp	r0, #0
 80131b2:	f43f ae40 	beq.w	8012e36 <_strtod_l+0x446>
 80131b6:	68c3      	ldr	r3, [r0, #12]
 80131b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80131ba:	2300      	movs	r3, #0
 80131bc:	60c3      	str	r3, [r0, #12]
 80131be:	4641      	mov	r1, r8
 80131c0:	f7ff f9dc 	bl	801257c <__mcmp>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	da45      	bge.n	8013254 <_strtod_l+0x864>
 80131c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131ca:	ea53 030a 	orrs.w	r3, r3, sl
 80131ce:	d16b      	bne.n	80132a8 <_strtod_l+0x8b8>
 80131d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d167      	bne.n	80132a8 <_strtod_l+0x8b8>
 80131d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80131dc:	0d1b      	lsrs	r3, r3, #20
 80131de:	051b      	lsls	r3, r3, #20
 80131e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80131e4:	d960      	bls.n	80132a8 <_strtod_l+0x8b8>
 80131e6:	6963      	ldr	r3, [r4, #20]
 80131e8:	b913      	cbnz	r3, 80131f0 <_strtod_l+0x800>
 80131ea:	6923      	ldr	r3, [r4, #16]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	dd5b      	ble.n	80132a8 <_strtod_l+0x8b8>
 80131f0:	4621      	mov	r1, r4
 80131f2:	2201      	movs	r2, #1
 80131f4:	9805      	ldr	r0, [sp, #20]
 80131f6:	f7ff f955 	bl	80124a4 <__lshift>
 80131fa:	4641      	mov	r1, r8
 80131fc:	4604      	mov	r4, r0
 80131fe:	f7ff f9bd 	bl	801257c <__mcmp>
 8013202:	2800      	cmp	r0, #0
 8013204:	dd50      	ble.n	80132a8 <_strtod_l+0x8b8>
 8013206:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801320a:	9a08      	ldr	r2, [sp, #32]
 801320c:	0d1b      	lsrs	r3, r3, #20
 801320e:	051b      	lsls	r3, r3, #20
 8013210:	2a00      	cmp	r2, #0
 8013212:	d06a      	beq.n	80132ea <_strtod_l+0x8fa>
 8013214:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013218:	d867      	bhi.n	80132ea <_strtod_l+0x8fa>
 801321a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801321e:	f67f ae9d 	bls.w	8012f5c <_strtod_l+0x56c>
 8013222:	4b0a      	ldr	r3, [pc, #40]	@ (801324c <_strtod_l+0x85c>)
 8013224:	4650      	mov	r0, sl
 8013226:	4659      	mov	r1, fp
 8013228:	2200      	movs	r2, #0
 801322a:	f7ed fa05 	bl	8000638 <__aeabi_dmul>
 801322e:	4b08      	ldr	r3, [pc, #32]	@ (8013250 <_strtod_l+0x860>)
 8013230:	400b      	ands	r3, r1
 8013232:	4682      	mov	sl, r0
 8013234:	468b      	mov	fp, r1
 8013236:	2b00      	cmp	r3, #0
 8013238:	f47f ae08 	bne.w	8012e4c <_strtod_l+0x45c>
 801323c:	9a05      	ldr	r2, [sp, #20]
 801323e:	2322      	movs	r3, #34	@ 0x22
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	e603      	b.n	8012e4c <_strtod_l+0x45c>
 8013244:	08016bc8 	.word	0x08016bc8
 8013248:	fffffc02 	.word	0xfffffc02
 801324c:	39500000 	.word	0x39500000
 8013250:	7ff00000 	.word	0x7ff00000
 8013254:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013258:	d165      	bne.n	8013326 <_strtod_l+0x936>
 801325a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801325c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013260:	b35a      	cbz	r2, 80132ba <_strtod_l+0x8ca>
 8013262:	4a9f      	ldr	r2, [pc, #636]	@ (80134e0 <_strtod_l+0xaf0>)
 8013264:	4293      	cmp	r3, r2
 8013266:	d12b      	bne.n	80132c0 <_strtod_l+0x8d0>
 8013268:	9b08      	ldr	r3, [sp, #32]
 801326a:	4651      	mov	r1, sl
 801326c:	b303      	cbz	r3, 80132b0 <_strtod_l+0x8c0>
 801326e:	4b9d      	ldr	r3, [pc, #628]	@ (80134e4 <_strtod_l+0xaf4>)
 8013270:	465a      	mov	r2, fp
 8013272:	4013      	ands	r3, r2
 8013274:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013278:	f04f 32ff 	mov.w	r2, #4294967295
 801327c:	d81b      	bhi.n	80132b6 <_strtod_l+0x8c6>
 801327e:	0d1b      	lsrs	r3, r3, #20
 8013280:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013284:	fa02 f303 	lsl.w	r3, r2, r3
 8013288:	4299      	cmp	r1, r3
 801328a:	d119      	bne.n	80132c0 <_strtod_l+0x8d0>
 801328c:	4b96      	ldr	r3, [pc, #600]	@ (80134e8 <_strtod_l+0xaf8>)
 801328e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013290:	429a      	cmp	r2, r3
 8013292:	d102      	bne.n	801329a <_strtod_l+0x8aa>
 8013294:	3101      	adds	r1, #1
 8013296:	f43f adce 	beq.w	8012e36 <_strtod_l+0x446>
 801329a:	4b92      	ldr	r3, [pc, #584]	@ (80134e4 <_strtod_l+0xaf4>)
 801329c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801329e:	401a      	ands	r2, r3
 80132a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80132a4:	f04f 0a00 	mov.w	sl, #0
 80132a8:	9b08      	ldr	r3, [sp, #32]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d1b9      	bne.n	8013222 <_strtod_l+0x832>
 80132ae:	e5cd      	b.n	8012e4c <_strtod_l+0x45c>
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295
 80132b4:	e7e8      	b.n	8013288 <_strtod_l+0x898>
 80132b6:	4613      	mov	r3, r2
 80132b8:	e7e6      	b.n	8013288 <_strtod_l+0x898>
 80132ba:	ea53 030a 	orrs.w	r3, r3, sl
 80132be:	d0a2      	beq.n	8013206 <_strtod_l+0x816>
 80132c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80132c2:	b1db      	cbz	r3, 80132fc <_strtod_l+0x90c>
 80132c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132c6:	4213      	tst	r3, r2
 80132c8:	d0ee      	beq.n	80132a8 <_strtod_l+0x8b8>
 80132ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132cc:	9a08      	ldr	r2, [sp, #32]
 80132ce:	4650      	mov	r0, sl
 80132d0:	4659      	mov	r1, fp
 80132d2:	b1bb      	cbz	r3, 8013304 <_strtod_l+0x914>
 80132d4:	f7ff fb6e 	bl	80129b4 <sulp>
 80132d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80132dc:	ec53 2b10 	vmov	r2, r3, d0
 80132e0:	f7ec fff4 	bl	80002cc <__adddf3>
 80132e4:	4682      	mov	sl, r0
 80132e6:	468b      	mov	fp, r1
 80132e8:	e7de      	b.n	80132a8 <_strtod_l+0x8b8>
 80132ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80132ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80132f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80132f6:	f04f 3aff 	mov.w	sl, #4294967295
 80132fa:	e7d5      	b.n	80132a8 <_strtod_l+0x8b8>
 80132fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80132fe:	ea13 0f0a 	tst.w	r3, sl
 8013302:	e7e1      	b.n	80132c8 <_strtod_l+0x8d8>
 8013304:	f7ff fb56 	bl	80129b4 <sulp>
 8013308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801330c:	ec53 2b10 	vmov	r2, r3, d0
 8013310:	f7ec ffda 	bl	80002c8 <__aeabi_dsub>
 8013314:	2200      	movs	r2, #0
 8013316:	2300      	movs	r3, #0
 8013318:	4682      	mov	sl, r0
 801331a:	468b      	mov	fp, r1
 801331c:	f7ed fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 8013320:	2800      	cmp	r0, #0
 8013322:	d0c1      	beq.n	80132a8 <_strtod_l+0x8b8>
 8013324:	e61a      	b.n	8012f5c <_strtod_l+0x56c>
 8013326:	4641      	mov	r1, r8
 8013328:	4620      	mov	r0, r4
 801332a:	f7ff fa9f 	bl	801286c <__ratio>
 801332e:	ec57 6b10 	vmov	r6, r7, d0
 8013332:	2200      	movs	r2, #0
 8013334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013338:	4630      	mov	r0, r6
 801333a:	4639      	mov	r1, r7
 801333c:	f7ed fbf8 	bl	8000b30 <__aeabi_dcmple>
 8013340:	2800      	cmp	r0, #0
 8013342:	d06f      	beq.n	8013424 <_strtod_l+0xa34>
 8013344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013346:	2b00      	cmp	r3, #0
 8013348:	d17a      	bne.n	8013440 <_strtod_l+0xa50>
 801334a:	f1ba 0f00 	cmp.w	sl, #0
 801334e:	d158      	bne.n	8013402 <_strtod_l+0xa12>
 8013350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013356:	2b00      	cmp	r3, #0
 8013358:	d15a      	bne.n	8013410 <_strtod_l+0xa20>
 801335a:	4b64      	ldr	r3, [pc, #400]	@ (80134ec <_strtod_l+0xafc>)
 801335c:	2200      	movs	r2, #0
 801335e:	4630      	mov	r0, r6
 8013360:	4639      	mov	r1, r7
 8013362:	f7ed fbdb 	bl	8000b1c <__aeabi_dcmplt>
 8013366:	2800      	cmp	r0, #0
 8013368:	d159      	bne.n	801341e <_strtod_l+0xa2e>
 801336a:	4630      	mov	r0, r6
 801336c:	4639      	mov	r1, r7
 801336e:	4b60      	ldr	r3, [pc, #384]	@ (80134f0 <_strtod_l+0xb00>)
 8013370:	2200      	movs	r2, #0
 8013372:	f7ed f961 	bl	8000638 <__aeabi_dmul>
 8013376:	4606      	mov	r6, r0
 8013378:	460f      	mov	r7, r1
 801337a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801337e:	9606      	str	r6, [sp, #24]
 8013380:	9307      	str	r3, [sp, #28]
 8013382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013386:	4d57      	ldr	r5, [pc, #348]	@ (80134e4 <_strtod_l+0xaf4>)
 8013388:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801338c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801338e:	401d      	ands	r5, r3
 8013390:	4b58      	ldr	r3, [pc, #352]	@ (80134f4 <_strtod_l+0xb04>)
 8013392:	429d      	cmp	r5, r3
 8013394:	f040 80b2 	bne.w	80134fc <_strtod_l+0xb0c>
 8013398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801339a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801339e:	ec4b ab10 	vmov	d0, sl, fp
 80133a2:	f7ff f99b 	bl	80126dc <__ulp>
 80133a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80133aa:	ec51 0b10 	vmov	r0, r1, d0
 80133ae:	f7ed f943 	bl	8000638 <__aeabi_dmul>
 80133b2:	4652      	mov	r2, sl
 80133b4:	465b      	mov	r3, fp
 80133b6:	f7ec ff89 	bl	80002cc <__adddf3>
 80133ba:	460b      	mov	r3, r1
 80133bc:	4949      	ldr	r1, [pc, #292]	@ (80134e4 <_strtod_l+0xaf4>)
 80133be:	4a4e      	ldr	r2, [pc, #312]	@ (80134f8 <_strtod_l+0xb08>)
 80133c0:	4019      	ands	r1, r3
 80133c2:	4291      	cmp	r1, r2
 80133c4:	4682      	mov	sl, r0
 80133c6:	d942      	bls.n	801344e <_strtod_l+0xa5e>
 80133c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80133ca:	4b47      	ldr	r3, [pc, #284]	@ (80134e8 <_strtod_l+0xaf8>)
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d103      	bne.n	80133d8 <_strtod_l+0x9e8>
 80133d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133d2:	3301      	adds	r3, #1
 80133d4:	f43f ad2f 	beq.w	8012e36 <_strtod_l+0x446>
 80133d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80134e8 <_strtod_l+0xaf8>
 80133dc:	f04f 3aff 	mov.w	sl, #4294967295
 80133e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80133e2:	9805      	ldr	r0, [sp, #20]
 80133e4:	f7fe fe4e 	bl	8012084 <_Bfree>
 80133e8:	9805      	ldr	r0, [sp, #20]
 80133ea:	4649      	mov	r1, r9
 80133ec:	f7fe fe4a 	bl	8012084 <_Bfree>
 80133f0:	9805      	ldr	r0, [sp, #20]
 80133f2:	4641      	mov	r1, r8
 80133f4:	f7fe fe46 	bl	8012084 <_Bfree>
 80133f8:	9805      	ldr	r0, [sp, #20]
 80133fa:	4621      	mov	r1, r4
 80133fc:	f7fe fe42 	bl	8012084 <_Bfree>
 8013400:	e619      	b.n	8013036 <_strtod_l+0x646>
 8013402:	f1ba 0f01 	cmp.w	sl, #1
 8013406:	d103      	bne.n	8013410 <_strtod_l+0xa20>
 8013408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801340a:	2b00      	cmp	r3, #0
 801340c:	f43f ada6 	beq.w	8012f5c <_strtod_l+0x56c>
 8013410:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80134c0 <_strtod_l+0xad0>
 8013414:	4f35      	ldr	r7, [pc, #212]	@ (80134ec <_strtod_l+0xafc>)
 8013416:	ed8d 7b06 	vstr	d7, [sp, #24]
 801341a:	2600      	movs	r6, #0
 801341c:	e7b1      	b.n	8013382 <_strtod_l+0x992>
 801341e:	4f34      	ldr	r7, [pc, #208]	@ (80134f0 <_strtod_l+0xb00>)
 8013420:	2600      	movs	r6, #0
 8013422:	e7aa      	b.n	801337a <_strtod_l+0x98a>
 8013424:	4b32      	ldr	r3, [pc, #200]	@ (80134f0 <_strtod_l+0xb00>)
 8013426:	4630      	mov	r0, r6
 8013428:	4639      	mov	r1, r7
 801342a:	2200      	movs	r2, #0
 801342c:	f7ed f904 	bl	8000638 <__aeabi_dmul>
 8013430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013432:	4606      	mov	r6, r0
 8013434:	460f      	mov	r7, r1
 8013436:	2b00      	cmp	r3, #0
 8013438:	d09f      	beq.n	801337a <_strtod_l+0x98a>
 801343a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801343e:	e7a0      	b.n	8013382 <_strtod_l+0x992>
 8013440:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80134c8 <_strtod_l+0xad8>
 8013444:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013448:	ec57 6b17 	vmov	r6, r7, d7
 801344c:	e799      	b.n	8013382 <_strtod_l+0x992>
 801344e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013452:	9b08      	ldr	r3, [sp, #32]
 8013454:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1c1      	bne.n	80133e0 <_strtod_l+0x9f0>
 801345c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013460:	0d1b      	lsrs	r3, r3, #20
 8013462:	051b      	lsls	r3, r3, #20
 8013464:	429d      	cmp	r5, r3
 8013466:	d1bb      	bne.n	80133e0 <_strtod_l+0x9f0>
 8013468:	4630      	mov	r0, r6
 801346a:	4639      	mov	r1, r7
 801346c:	f7ed fc44 	bl	8000cf8 <__aeabi_d2lz>
 8013470:	f7ed f8b4 	bl	80005dc <__aeabi_l2d>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	4630      	mov	r0, r6
 801347a:	4639      	mov	r1, r7
 801347c:	f7ec ff24 	bl	80002c8 <__aeabi_dsub>
 8013480:	460b      	mov	r3, r1
 8013482:	4602      	mov	r2, r0
 8013484:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013488:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801348c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801348e:	ea46 060a 	orr.w	r6, r6, sl
 8013492:	431e      	orrs	r6, r3
 8013494:	d06f      	beq.n	8013576 <_strtod_l+0xb86>
 8013496:	a30e      	add	r3, pc, #56	@ (adr r3, 80134d0 <_strtod_l+0xae0>)
 8013498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349c:	f7ed fb3e 	bl	8000b1c <__aeabi_dcmplt>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	f47f acd3 	bne.w	8012e4c <_strtod_l+0x45c>
 80134a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80134d8 <_strtod_l+0xae8>)
 80134a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80134b0:	f7ed fb52 	bl	8000b58 <__aeabi_dcmpgt>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d093      	beq.n	80133e0 <_strtod_l+0x9f0>
 80134b8:	e4c8      	b.n	8012e4c <_strtod_l+0x45c>
 80134ba:	bf00      	nop
 80134bc:	f3af 8000 	nop.w
 80134c0:	00000000 	.word	0x00000000
 80134c4:	bff00000 	.word	0xbff00000
 80134c8:	00000000 	.word	0x00000000
 80134cc:	3ff00000 	.word	0x3ff00000
 80134d0:	94a03595 	.word	0x94a03595
 80134d4:	3fdfffff 	.word	0x3fdfffff
 80134d8:	35afe535 	.word	0x35afe535
 80134dc:	3fe00000 	.word	0x3fe00000
 80134e0:	000fffff 	.word	0x000fffff
 80134e4:	7ff00000 	.word	0x7ff00000
 80134e8:	7fefffff 	.word	0x7fefffff
 80134ec:	3ff00000 	.word	0x3ff00000
 80134f0:	3fe00000 	.word	0x3fe00000
 80134f4:	7fe00000 	.word	0x7fe00000
 80134f8:	7c9fffff 	.word	0x7c9fffff
 80134fc:	9b08      	ldr	r3, [sp, #32]
 80134fe:	b323      	cbz	r3, 801354a <_strtod_l+0xb5a>
 8013500:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013504:	d821      	bhi.n	801354a <_strtod_l+0xb5a>
 8013506:	a328      	add	r3, pc, #160	@ (adr r3, 80135a8 <_strtod_l+0xbb8>)
 8013508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350c:	4630      	mov	r0, r6
 801350e:	4639      	mov	r1, r7
 8013510:	f7ed fb0e 	bl	8000b30 <__aeabi_dcmple>
 8013514:	b1a0      	cbz	r0, 8013540 <_strtod_l+0xb50>
 8013516:	4639      	mov	r1, r7
 8013518:	4630      	mov	r0, r6
 801351a:	f7ed fb65 	bl	8000be8 <__aeabi_d2uiz>
 801351e:	2801      	cmp	r0, #1
 8013520:	bf38      	it	cc
 8013522:	2001      	movcc	r0, #1
 8013524:	f7ed f80e 	bl	8000544 <__aeabi_ui2d>
 8013528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801352a:	4606      	mov	r6, r0
 801352c:	460f      	mov	r7, r1
 801352e:	b9fb      	cbnz	r3, 8013570 <_strtod_l+0xb80>
 8013530:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013534:	9014      	str	r0, [sp, #80]	@ 0x50
 8013536:	9315      	str	r3, [sp, #84]	@ 0x54
 8013538:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801353c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013542:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013546:	1b5b      	subs	r3, r3, r5
 8013548:	9311      	str	r3, [sp, #68]	@ 0x44
 801354a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801354e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013552:	f7ff f8c3 	bl	80126dc <__ulp>
 8013556:	4650      	mov	r0, sl
 8013558:	ec53 2b10 	vmov	r2, r3, d0
 801355c:	4659      	mov	r1, fp
 801355e:	f7ed f86b 	bl	8000638 <__aeabi_dmul>
 8013562:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013566:	f7ec feb1 	bl	80002cc <__adddf3>
 801356a:	4682      	mov	sl, r0
 801356c:	468b      	mov	fp, r1
 801356e:	e770      	b.n	8013452 <_strtod_l+0xa62>
 8013570:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013574:	e7e0      	b.n	8013538 <_strtod_l+0xb48>
 8013576:	a30e      	add	r3, pc, #56	@ (adr r3, 80135b0 <_strtod_l+0xbc0>)
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	f7ed face 	bl	8000b1c <__aeabi_dcmplt>
 8013580:	e798      	b.n	80134b4 <_strtod_l+0xac4>
 8013582:	2300      	movs	r3, #0
 8013584:	930e      	str	r3, [sp, #56]	@ 0x38
 8013586:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801358a:	6013      	str	r3, [r2, #0]
 801358c:	f7ff ba6d 	b.w	8012a6a <_strtod_l+0x7a>
 8013590:	2a65      	cmp	r2, #101	@ 0x65
 8013592:	f43f ab68 	beq.w	8012c66 <_strtod_l+0x276>
 8013596:	2a45      	cmp	r2, #69	@ 0x45
 8013598:	f43f ab65 	beq.w	8012c66 <_strtod_l+0x276>
 801359c:	2301      	movs	r3, #1
 801359e:	f7ff bba0 	b.w	8012ce2 <_strtod_l+0x2f2>
 80135a2:	bf00      	nop
 80135a4:	f3af 8000 	nop.w
 80135a8:	ffc00000 	.word	0xffc00000
 80135ac:	41dfffff 	.word	0x41dfffff
 80135b0:	94a03595 	.word	0x94a03595
 80135b4:	3fcfffff 	.word	0x3fcfffff

080135b8 <_strtod_r>:
 80135b8:	4b01      	ldr	r3, [pc, #4]	@ (80135c0 <_strtod_r+0x8>)
 80135ba:	f7ff ba19 	b.w	80129f0 <_strtod_l>
 80135be:	bf00      	nop
 80135c0:	20000070 	.word	0x20000070

080135c4 <__ssputs_r>:
 80135c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135c8:	688e      	ldr	r6, [r1, #8]
 80135ca:	461f      	mov	r7, r3
 80135cc:	42be      	cmp	r6, r7
 80135ce:	680b      	ldr	r3, [r1, #0]
 80135d0:	4682      	mov	sl, r0
 80135d2:	460c      	mov	r4, r1
 80135d4:	4690      	mov	r8, r2
 80135d6:	d82d      	bhi.n	8013634 <__ssputs_r+0x70>
 80135d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80135e0:	d026      	beq.n	8013630 <__ssputs_r+0x6c>
 80135e2:	6965      	ldr	r5, [r4, #20]
 80135e4:	6909      	ldr	r1, [r1, #16]
 80135e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135ea:	eba3 0901 	sub.w	r9, r3, r1
 80135ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135f2:	1c7b      	adds	r3, r7, #1
 80135f4:	444b      	add	r3, r9
 80135f6:	106d      	asrs	r5, r5, #1
 80135f8:	429d      	cmp	r5, r3
 80135fa:	bf38      	it	cc
 80135fc:	461d      	movcc	r5, r3
 80135fe:	0553      	lsls	r3, r2, #21
 8013600:	d527      	bpl.n	8013652 <__ssputs_r+0x8e>
 8013602:	4629      	mov	r1, r5
 8013604:	f7fc f924 	bl	800f850 <_malloc_r>
 8013608:	4606      	mov	r6, r0
 801360a:	b360      	cbz	r0, 8013666 <__ssputs_r+0xa2>
 801360c:	6921      	ldr	r1, [r4, #16]
 801360e:	464a      	mov	r2, r9
 8013610:	f7fd fe37 	bl	8011282 <memcpy>
 8013614:	89a3      	ldrh	r3, [r4, #12]
 8013616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801361a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801361e:	81a3      	strh	r3, [r4, #12]
 8013620:	6126      	str	r6, [r4, #16]
 8013622:	6165      	str	r5, [r4, #20]
 8013624:	444e      	add	r6, r9
 8013626:	eba5 0509 	sub.w	r5, r5, r9
 801362a:	6026      	str	r6, [r4, #0]
 801362c:	60a5      	str	r5, [r4, #8]
 801362e:	463e      	mov	r6, r7
 8013630:	42be      	cmp	r6, r7
 8013632:	d900      	bls.n	8013636 <__ssputs_r+0x72>
 8013634:	463e      	mov	r6, r7
 8013636:	6820      	ldr	r0, [r4, #0]
 8013638:	4632      	mov	r2, r6
 801363a:	4641      	mov	r1, r8
 801363c:	f7fd fd1e 	bl	801107c <memmove>
 8013640:	68a3      	ldr	r3, [r4, #8]
 8013642:	1b9b      	subs	r3, r3, r6
 8013644:	60a3      	str	r3, [r4, #8]
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	4433      	add	r3, r6
 801364a:	6023      	str	r3, [r4, #0]
 801364c:	2000      	movs	r0, #0
 801364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013652:	462a      	mov	r2, r5
 8013654:	f7ff f980 	bl	8012958 <_realloc_r>
 8013658:	4606      	mov	r6, r0
 801365a:	2800      	cmp	r0, #0
 801365c:	d1e0      	bne.n	8013620 <__ssputs_r+0x5c>
 801365e:	6921      	ldr	r1, [r4, #16]
 8013660:	4650      	mov	r0, sl
 8013662:	f7fe fc85 	bl	8011f70 <_free_r>
 8013666:	230c      	movs	r3, #12
 8013668:	f8ca 3000 	str.w	r3, [sl]
 801366c:	89a3      	ldrh	r3, [r4, #12]
 801366e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013672:	81a3      	strh	r3, [r4, #12]
 8013674:	f04f 30ff 	mov.w	r0, #4294967295
 8013678:	e7e9      	b.n	801364e <__ssputs_r+0x8a>
	...

0801367c <_svfiprintf_r>:
 801367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013680:	4698      	mov	r8, r3
 8013682:	898b      	ldrh	r3, [r1, #12]
 8013684:	061b      	lsls	r3, r3, #24
 8013686:	b09d      	sub	sp, #116	@ 0x74
 8013688:	4607      	mov	r7, r0
 801368a:	460d      	mov	r5, r1
 801368c:	4614      	mov	r4, r2
 801368e:	d510      	bpl.n	80136b2 <_svfiprintf_r+0x36>
 8013690:	690b      	ldr	r3, [r1, #16]
 8013692:	b973      	cbnz	r3, 80136b2 <_svfiprintf_r+0x36>
 8013694:	2140      	movs	r1, #64	@ 0x40
 8013696:	f7fc f8db 	bl	800f850 <_malloc_r>
 801369a:	6028      	str	r0, [r5, #0]
 801369c:	6128      	str	r0, [r5, #16]
 801369e:	b930      	cbnz	r0, 80136ae <_svfiprintf_r+0x32>
 80136a0:	230c      	movs	r3, #12
 80136a2:	603b      	str	r3, [r7, #0]
 80136a4:	f04f 30ff 	mov.w	r0, #4294967295
 80136a8:	b01d      	add	sp, #116	@ 0x74
 80136aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ae:	2340      	movs	r3, #64	@ 0x40
 80136b0:	616b      	str	r3, [r5, #20]
 80136b2:	2300      	movs	r3, #0
 80136b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80136b6:	2320      	movs	r3, #32
 80136b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80136c0:	2330      	movs	r3, #48	@ 0x30
 80136c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013860 <_svfiprintf_r+0x1e4>
 80136c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136ca:	f04f 0901 	mov.w	r9, #1
 80136ce:	4623      	mov	r3, r4
 80136d0:	469a      	mov	sl, r3
 80136d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136d6:	b10a      	cbz	r2, 80136dc <_svfiprintf_r+0x60>
 80136d8:	2a25      	cmp	r2, #37	@ 0x25
 80136da:	d1f9      	bne.n	80136d0 <_svfiprintf_r+0x54>
 80136dc:	ebba 0b04 	subs.w	fp, sl, r4
 80136e0:	d00b      	beq.n	80136fa <_svfiprintf_r+0x7e>
 80136e2:	465b      	mov	r3, fp
 80136e4:	4622      	mov	r2, r4
 80136e6:	4629      	mov	r1, r5
 80136e8:	4638      	mov	r0, r7
 80136ea:	f7ff ff6b 	bl	80135c4 <__ssputs_r>
 80136ee:	3001      	adds	r0, #1
 80136f0:	f000 80a7 	beq.w	8013842 <_svfiprintf_r+0x1c6>
 80136f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136f6:	445a      	add	r2, fp
 80136f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80136fa:	f89a 3000 	ldrb.w	r3, [sl]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	f000 809f 	beq.w	8013842 <_svfiprintf_r+0x1c6>
 8013704:	2300      	movs	r3, #0
 8013706:	f04f 32ff 	mov.w	r2, #4294967295
 801370a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801370e:	f10a 0a01 	add.w	sl, sl, #1
 8013712:	9304      	str	r3, [sp, #16]
 8013714:	9307      	str	r3, [sp, #28]
 8013716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801371a:	931a      	str	r3, [sp, #104]	@ 0x68
 801371c:	4654      	mov	r4, sl
 801371e:	2205      	movs	r2, #5
 8013720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013724:	484e      	ldr	r0, [pc, #312]	@ (8013860 <_svfiprintf_r+0x1e4>)
 8013726:	f7ec fd73 	bl	8000210 <memchr>
 801372a:	9a04      	ldr	r2, [sp, #16]
 801372c:	b9d8      	cbnz	r0, 8013766 <_svfiprintf_r+0xea>
 801372e:	06d0      	lsls	r0, r2, #27
 8013730:	bf44      	itt	mi
 8013732:	2320      	movmi	r3, #32
 8013734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013738:	0711      	lsls	r1, r2, #28
 801373a:	bf44      	itt	mi
 801373c:	232b      	movmi	r3, #43	@ 0x2b
 801373e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013742:	f89a 3000 	ldrb.w	r3, [sl]
 8013746:	2b2a      	cmp	r3, #42	@ 0x2a
 8013748:	d015      	beq.n	8013776 <_svfiprintf_r+0xfa>
 801374a:	9a07      	ldr	r2, [sp, #28]
 801374c:	4654      	mov	r4, sl
 801374e:	2000      	movs	r0, #0
 8013750:	f04f 0c0a 	mov.w	ip, #10
 8013754:	4621      	mov	r1, r4
 8013756:	f811 3b01 	ldrb.w	r3, [r1], #1
 801375a:	3b30      	subs	r3, #48	@ 0x30
 801375c:	2b09      	cmp	r3, #9
 801375e:	d94b      	bls.n	80137f8 <_svfiprintf_r+0x17c>
 8013760:	b1b0      	cbz	r0, 8013790 <_svfiprintf_r+0x114>
 8013762:	9207      	str	r2, [sp, #28]
 8013764:	e014      	b.n	8013790 <_svfiprintf_r+0x114>
 8013766:	eba0 0308 	sub.w	r3, r0, r8
 801376a:	fa09 f303 	lsl.w	r3, r9, r3
 801376e:	4313      	orrs	r3, r2
 8013770:	9304      	str	r3, [sp, #16]
 8013772:	46a2      	mov	sl, r4
 8013774:	e7d2      	b.n	801371c <_svfiprintf_r+0xa0>
 8013776:	9b03      	ldr	r3, [sp, #12]
 8013778:	1d19      	adds	r1, r3, #4
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	9103      	str	r1, [sp, #12]
 801377e:	2b00      	cmp	r3, #0
 8013780:	bfbb      	ittet	lt
 8013782:	425b      	neglt	r3, r3
 8013784:	f042 0202 	orrlt.w	r2, r2, #2
 8013788:	9307      	strge	r3, [sp, #28]
 801378a:	9307      	strlt	r3, [sp, #28]
 801378c:	bfb8      	it	lt
 801378e:	9204      	strlt	r2, [sp, #16]
 8013790:	7823      	ldrb	r3, [r4, #0]
 8013792:	2b2e      	cmp	r3, #46	@ 0x2e
 8013794:	d10a      	bne.n	80137ac <_svfiprintf_r+0x130>
 8013796:	7863      	ldrb	r3, [r4, #1]
 8013798:	2b2a      	cmp	r3, #42	@ 0x2a
 801379a:	d132      	bne.n	8013802 <_svfiprintf_r+0x186>
 801379c:	9b03      	ldr	r3, [sp, #12]
 801379e:	1d1a      	adds	r2, r3, #4
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	9203      	str	r2, [sp, #12]
 80137a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137a8:	3402      	adds	r4, #2
 80137aa:	9305      	str	r3, [sp, #20]
 80137ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013870 <_svfiprintf_r+0x1f4>
 80137b0:	7821      	ldrb	r1, [r4, #0]
 80137b2:	2203      	movs	r2, #3
 80137b4:	4650      	mov	r0, sl
 80137b6:	f7ec fd2b 	bl	8000210 <memchr>
 80137ba:	b138      	cbz	r0, 80137cc <_svfiprintf_r+0x150>
 80137bc:	9b04      	ldr	r3, [sp, #16]
 80137be:	eba0 000a 	sub.w	r0, r0, sl
 80137c2:	2240      	movs	r2, #64	@ 0x40
 80137c4:	4082      	lsls	r2, r0
 80137c6:	4313      	orrs	r3, r2
 80137c8:	3401      	adds	r4, #1
 80137ca:	9304      	str	r3, [sp, #16]
 80137cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137d0:	4824      	ldr	r0, [pc, #144]	@ (8013864 <_svfiprintf_r+0x1e8>)
 80137d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137d6:	2206      	movs	r2, #6
 80137d8:	f7ec fd1a 	bl	8000210 <memchr>
 80137dc:	2800      	cmp	r0, #0
 80137de:	d036      	beq.n	801384e <_svfiprintf_r+0x1d2>
 80137e0:	4b21      	ldr	r3, [pc, #132]	@ (8013868 <_svfiprintf_r+0x1ec>)
 80137e2:	bb1b      	cbnz	r3, 801382c <_svfiprintf_r+0x1b0>
 80137e4:	9b03      	ldr	r3, [sp, #12]
 80137e6:	3307      	adds	r3, #7
 80137e8:	f023 0307 	bic.w	r3, r3, #7
 80137ec:	3308      	adds	r3, #8
 80137ee:	9303      	str	r3, [sp, #12]
 80137f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137f2:	4433      	add	r3, r6
 80137f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80137f6:	e76a      	b.n	80136ce <_svfiprintf_r+0x52>
 80137f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80137fc:	460c      	mov	r4, r1
 80137fe:	2001      	movs	r0, #1
 8013800:	e7a8      	b.n	8013754 <_svfiprintf_r+0xd8>
 8013802:	2300      	movs	r3, #0
 8013804:	3401      	adds	r4, #1
 8013806:	9305      	str	r3, [sp, #20]
 8013808:	4619      	mov	r1, r3
 801380a:	f04f 0c0a 	mov.w	ip, #10
 801380e:	4620      	mov	r0, r4
 8013810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013814:	3a30      	subs	r2, #48	@ 0x30
 8013816:	2a09      	cmp	r2, #9
 8013818:	d903      	bls.n	8013822 <_svfiprintf_r+0x1a6>
 801381a:	2b00      	cmp	r3, #0
 801381c:	d0c6      	beq.n	80137ac <_svfiprintf_r+0x130>
 801381e:	9105      	str	r1, [sp, #20]
 8013820:	e7c4      	b.n	80137ac <_svfiprintf_r+0x130>
 8013822:	fb0c 2101 	mla	r1, ip, r1, r2
 8013826:	4604      	mov	r4, r0
 8013828:	2301      	movs	r3, #1
 801382a:	e7f0      	b.n	801380e <_svfiprintf_r+0x192>
 801382c:	ab03      	add	r3, sp, #12
 801382e:	9300      	str	r3, [sp, #0]
 8013830:	462a      	mov	r2, r5
 8013832:	4b0e      	ldr	r3, [pc, #56]	@ (801386c <_svfiprintf_r+0x1f0>)
 8013834:	a904      	add	r1, sp, #16
 8013836:	4638      	mov	r0, r7
 8013838:	f7fc f9bc 	bl	800fbb4 <_printf_float>
 801383c:	1c42      	adds	r2, r0, #1
 801383e:	4606      	mov	r6, r0
 8013840:	d1d6      	bne.n	80137f0 <_svfiprintf_r+0x174>
 8013842:	89ab      	ldrh	r3, [r5, #12]
 8013844:	065b      	lsls	r3, r3, #25
 8013846:	f53f af2d 	bmi.w	80136a4 <_svfiprintf_r+0x28>
 801384a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801384c:	e72c      	b.n	80136a8 <_svfiprintf_r+0x2c>
 801384e:	ab03      	add	r3, sp, #12
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	462a      	mov	r2, r5
 8013854:	4b05      	ldr	r3, [pc, #20]	@ (801386c <_svfiprintf_r+0x1f0>)
 8013856:	a904      	add	r1, sp, #16
 8013858:	4638      	mov	r0, r7
 801385a:	f7fc fd85 	bl	8010368 <_printf_i>
 801385e:	e7ed      	b.n	801383c <_svfiprintf_r+0x1c0>
 8013860:	080167fc 	.word	0x080167fc
 8013864:	08016806 	.word	0x08016806
 8013868:	0800fbb5 	.word	0x0800fbb5
 801386c:	080135c5 	.word	0x080135c5
 8013870:	08016802 	.word	0x08016802

08013874 <_sungetc_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	1c4b      	adds	r3, r1, #1
 8013878:	4614      	mov	r4, r2
 801387a:	d103      	bne.n	8013884 <_sungetc_r+0x10>
 801387c:	f04f 35ff 	mov.w	r5, #4294967295
 8013880:	4628      	mov	r0, r5
 8013882:	bd38      	pop	{r3, r4, r5, pc}
 8013884:	8993      	ldrh	r3, [r2, #12]
 8013886:	f023 0320 	bic.w	r3, r3, #32
 801388a:	8193      	strh	r3, [r2, #12]
 801388c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801388e:	6852      	ldr	r2, [r2, #4]
 8013890:	b2cd      	uxtb	r5, r1
 8013892:	b18b      	cbz	r3, 80138b8 <_sungetc_r+0x44>
 8013894:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8013896:	4293      	cmp	r3, r2
 8013898:	dd08      	ble.n	80138ac <_sungetc_r+0x38>
 801389a:	6823      	ldr	r3, [r4, #0]
 801389c:	1e5a      	subs	r2, r3, #1
 801389e:	6022      	str	r2, [r4, #0]
 80138a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80138a4:	6863      	ldr	r3, [r4, #4]
 80138a6:	3301      	adds	r3, #1
 80138a8:	6063      	str	r3, [r4, #4]
 80138aa:	e7e9      	b.n	8013880 <_sungetc_r+0xc>
 80138ac:	4621      	mov	r1, r4
 80138ae:	f000 fb9a 	bl	8013fe6 <__submore>
 80138b2:	2800      	cmp	r0, #0
 80138b4:	d0f1      	beq.n	801389a <_sungetc_r+0x26>
 80138b6:	e7e1      	b.n	801387c <_sungetc_r+0x8>
 80138b8:	6921      	ldr	r1, [r4, #16]
 80138ba:	6823      	ldr	r3, [r4, #0]
 80138bc:	b151      	cbz	r1, 80138d4 <_sungetc_r+0x60>
 80138be:	4299      	cmp	r1, r3
 80138c0:	d208      	bcs.n	80138d4 <_sungetc_r+0x60>
 80138c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80138c6:	42a9      	cmp	r1, r5
 80138c8:	d104      	bne.n	80138d4 <_sungetc_r+0x60>
 80138ca:	3b01      	subs	r3, #1
 80138cc:	3201      	adds	r2, #1
 80138ce:	6023      	str	r3, [r4, #0]
 80138d0:	6062      	str	r2, [r4, #4]
 80138d2:	e7d5      	b.n	8013880 <_sungetc_r+0xc>
 80138d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80138d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80138de:	2303      	movs	r3, #3
 80138e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80138e2:	4623      	mov	r3, r4
 80138e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	2301      	movs	r3, #1
 80138ec:	e7dc      	b.n	80138a8 <_sungetc_r+0x34>

080138ee <__ssrefill_r>:
 80138ee:	b510      	push	{r4, lr}
 80138f0:	460c      	mov	r4, r1
 80138f2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80138f4:	b169      	cbz	r1, 8013912 <__ssrefill_r+0x24>
 80138f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138fa:	4299      	cmp	r1, r3
 80138fc:	d001      	beq.n	8013902 <__ssrefill_r+0x14>
 80138fe:	f7fe fb37 	bl	8011f70 <_free_r>
 8013902:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013904:	6063      	str	r3, [r4, #4]
 8013906:	2000      	movs	r0, #0
 8013908:	6360      	str	r0, [r4, #52]	@ 0x34
 801390a:	b113      	cbz	r3, 8013912 <__ssrefill_r+0x24>
 801390c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801390e:	6023      	str	r3, [r4, #0]
 8013910:	bd10      	pop	{r4, pc}
 8013912:	6923      	ldr	r3, [r4, #16]
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	2300      	movs	r3, #0
 8013918:	6063      	str	r3, [r4, #4]
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	f043 0320 	orr.w	r3, r3, #32
 8013920:	81a3      	strh	r3, [r4, #12]
 8013922:	f04f 30ff 	mov.w	r0, #4294967295
 8013926:	e7f3      	b.n	8013910 <__ssrefill_r+0x22>

08013928 <__ssvfiscanf_r>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	460c      	mov	r4, r1
 801392e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8013932:	2100      	movs	r1, #0
 8013934:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013938:	49a6      	ldr	r1, [pc, #664]	@ (8013bd4 <__ssvfiscanf_r+0x2ac>)
 801393a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801393c:	f10d 0804 	add.w	r8, sp, #4
 8013940:	49a5      	ldr	r1, [pc, #660]	@ (8013bd8 <__ssvfiscanf_r+0x2b0>)
 8013942:	4fa6      	ldr	r7, [pc, #664]	@ (8013bdc <__ssvfiscanf_r+0x2b4>)
 8013944:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013948:	4606      	mov	r6, r0
 801394a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801394c:	9300      	str	r3, [sp, #0]
 801394e:	f892 9000 	ldrb.w	r9, [r2]
 8013952:	f1b9 0f00 	cmp.w	r9, #0
 8013956:	f000 8158 	beq.w	8013c0a <__ssvfiscanf_r+0x2e2>
 801395a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801395e:	f013 0308 	ands.w	r3, r3, #8
 8013962:	f102 0501 	add.w	r5, r2, #1
 8013966:	d019      	beq.n	801399c <__ssvfiscanf_r+0x74>
 8013968:	6863      	ldr	r3, [r4, #4]
 801396a:	2b00      	cmp	r3, #0
 801396c:	dd0f      	ble.n	801398e <__ssvfiscanf_r+0x66>
 801396e:	6823      	ldr	r3, [r4, #0]
 8013970:	781a      	ldrb	r2, [r3, #0]
 8013972:	5cba      	ldrb	r2, [r7, r2]
 8013974:	0712      	lsls	r2, r2, #28
 8013976:	d401      	bmi.n	801397c <__ssvfiscanf_r+0x54>
 8013978:	462a      	mov	r2, r5
 801397a:	e7e8      	b.n	801394e <__ssvfiscanf_r+0x26>
 801397c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801397e:	3201      	adds	r2, #1
 8013980:	9245      	str	r2, [sp, #276]	@ 0x114
 8013982:	6862      	ldr	r2, [r4, #4]
 8013984:	3301      	adds	r3, #1
 8013986:	3a01      	subs	r2, #1
 8013988:	6062      	str	r2, [r4, #4]
 801398a:	6023      	str	r3, [r4, #0]
 801398c:	e7ec      	b.n	8013968 <__ssvfiscanf_r+0x40>
 801398e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013990:	4621      	mov	r1, r4
 8013992:	4630      	mov	r0, r6
 8013994:	4798      	blx	r3
 8013996:	2800      	cmp	r0, #0
 8013998:	d0e9      	beq.n	801396e <__ssvfiscanf_r+0x46>
 801399a:	e7ed      	b.n	8013978 <__ssvfiscanf_r+0x50>
 801399c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80139a0:	f040 8085 	bne.w	8013aae <__ssvfiscanf_r+0x186>
 80139a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80139a6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80139a8:	7853      	ldrb	r3, [r2, #1]
 80139aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80139ac:	bf02      	ittt	eq
 80139ae:	2310      	moveq	r3, #16
 80139b0:	1c95      	addeq	r5, r2, #2
 80139b2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80139b4:	220a      	movs	r2, #10
 80139b6:	46aa      	mov	sl, r5
 80139b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80139bc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80139c0:	2b09      	cmp	r3, #9
 80139c2:	d91e      	bls.n	8013a02 <__ssvfiscanf_r+0xda>
 80139c4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8013be0 <__ssvfiscanf_r+0x2b8>
 80139c8:	2203      	movs	r2, #3
 80139ca:	4658      	mov	r0, fp
 80139cc:	f7ec fc20 	bl	8000210 <memchr>
 80139d0:	b138      	cbz	r0, 80139e2 <__ssvfiscanf_r+0xba>
 80139d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80139d4:	eba0 000b 	sub.w	r0, r0, fp
 80139d8:	2301      	movs	r3, #1
 80139da:	4083      	lsls	r3, r0
 80139dc:	4313      	orrs	r3, r2
 80139de:	9341      	str	r3, [sp, #260]	@ 0x104
 80139e0:	4655      	mov	r5, sl
 80139e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80139e6:	2b78      	cmp	r3, #120	@ 0x78
 80139e8:	d806      	bhi.n	80139f8 <__ssvfiscanf_r+0xd0>
 80139ea:	2b57      	cmp	r3, #87	@ 0x57
 80139ec:	d810      	bhi.n	8013a10 <__ssvfiscanf_r+0xe8>
 80139ee:	2b25      	cmp	r3, #37	@ 0x25
 80139f0:	d05d      	beq.n	8013aae <__ssvfiscanf_r+0x186>
 80139f2:	d857      	bhi.n	8013aa4 <__ssvfiscanf_r+0x17c>
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d075      	beq.n	8013ae4 <__ssvfiscanf_r+0x1bc>
 80139f8:	2303      	movs	r3, #3
 80139fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80139fc:	230a      	movs	r3, #10
 80139fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8013a00:	e088      	b.n	8013b14 <__ssvfiscanf_r+0x1ec>
 8013a02:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013a04:	fb02 1103 	mla	r1, r2, r3, r1
 8013a08:	3930      	subs	r1, #48	@ 0x30
 8013a0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013a0c:	4655      	mov	r5, sl
 8013a0e:	e7d2      	b.n	80139b6 <__ssvfiscanf_r+0x8e>
 8013a10:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8013a14:	2a20      	cmp	r2, #32
 8013a16:	d8ef      	bhi.n	80139f8 <__ssvfiscanf_r+0xd0>
 8013a18:	a101      	add	r1, pc, #4	@ (adr r1, 8013a20 <__ssvfiscanf_r+0xf8>)
 8013a1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013a1e:	bf00      	nop
 8013a20:	08013af3 	.word	0x08013af3
 8013a24:	080139f9 	.word	0x080139f9
 8013a28:	080139f9 	.word	0x080139f9
 8013a2c:	08013b4d 	.word	0x08013b4d
 8013a30:	080139f9 	.word	0x080139f9
 8013a34:	080139f9 	.word	0x080139f9
 8013a38:	080139f9 	.word	0x080139f9
 8013a3c:	080139f9 	.word	0x080139f9
 8013a40:	080139f9 	.word	0x080139f9
 8013a44:	080139f9 	.word	0x080139f9
 8013a48:	080139f9 	.word	0x080139f9
 8013a4c:	08013b63 	.word	0x08013b63
 8013a50:	08013b49 	.word	0x08013b49
 8013a54:	08013aab 	.word	0x08013aab
 8013a58:	08013aab 	.word	0x08013aab
 8013a5c:	08013aab 	.word	0x08013aab
 8013a60:	080139f9 	.word	0x080139f9
 8013a64:	08013b05 	.word	0x08013b05
 8013a68:	080139f9 	.word	0x080139f9
 8013a6c:	080139f9 	.word	0x080139f9
 8013a70:	080139f9 	.word	0x080139f9
 8013a74:	080139f9 	.word	0x080139f9
 8013a78:	08013b73 	.word	0x08013b73
 8013a7c:	08013b0d 	.word	0x08013b0d
 8013a80:	08013aeb 	.word	0x08013aeb
 8013a84:	080139f9 	.word	0x080139f9
 8013a88:	080139f9 	.word	0x080139f9
 8013a8c:	08013b6f 	.word	0x08013b6f
 8013a90:	080139f9 	.word	0x080139f9
 8013a94:	08013b49 	.word	0x08013b49
 8013a98:	080139f9 	.word	0x080139f9
 8013a9c:	080139f9 	.word	0x080139f9
 8013aa0:	08013af3 	.word	0x08013af3
 8013aa4:	3b45      	subs	r3, #69	@ 0x45
 8013aa6:	2b02      	cmp	r3, #2
 8013aa8:	d8a6      	bhi.n	80139f8 <__ssvfiscanf_r+0xd0>
 8013aaa:	2305      	movs	r3, #5
 8013aac:	e031      	b.n	8013b12 <__ssvfiscanf_r+0x1ea>
 8013aae:	6863      	ldr	r3, [r4, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	dd0d      	ble.n	8013ad0 <__ssvfiscanf_r+0x1a8>
 8013ab4:	6823      	ldr	r3, [r4, #0]
 8013ab6:	781a      	ldrb	r2, [r3, #0]
 8013ab8:	454a      	cmp	r2, r9
 8013aba:	f040 80a6 	bne.w	8013c0a <__ssvfiscanf_r+0x2e2>
 8013abe:	3301      	adds	r3, #1
 8013ac0:	6862      	ldr	r2, [r4, #4]
 8013ac2:	6023      	str	r3, [r4, #0]
 8013ac4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013ac6:	3a01      	subs	r2, #1
 8013ac8:	3301      	adds	r3, #1
 8013aca:	6062      	str	r2, [r4, #4]
 8013acc:	9345      	str	r3, [sp, #276]	@ 0x114
 8013ace:	e753      	b.n	8013978 <__ssvfiscanf_r+0x50>
 8013ad0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013ad2:	4621      	mov	r1, r4
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	4798      	blx	r3
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d0eb      	beq.n	8013ab4 <__ssvfiscanf_r+0x18c>
 8013adc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	f040 808b 	bne.w	8013bfa <__ssvfiscanf_r+0x2d2>
 8013ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae8:	e08b      	b.n	8013c02 <__ssvfiscanf_r+0x2da>
 8013aea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013aec:	f042 0220 	orr.w	r2, r2, #32
 8013af0:	9241      	str	r2, [sp, #260]	@ 0x104
 8013af2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013af8:	9241      	str	r2, [sp, #260]	@ 0x104
 8013afa:	2210      	movs	r2, #16
 8013afc:	2b6e      	cmp	r3, #110	@ 0x6e
 8013afe:	9242      	str	r2, [sp, #264]	@ 0x108
 8013b00:	d902      	bls.n	8013b08 <__ssvfiscanf_r+0x1e0>
 8013b02:	e005      	b.n	8013b10 <__ssvfiscanf_r+0x1e8>
 8013b04:	2300      	movs	r3, #0
 8013b06:	9342      	str	r3, [sp, #264]	@ 0x108
 8013b08:	2303      	movs	r3, #3
 8013b0a:	e002      	b.n	8013b12 <__ssvfiscanf_r+0x1ea>
 8013b0c:	2308      	movs	r3, #8
 8013b0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8013b10:	2304      	movs	r3, #4
 8013b12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013b14:	6863      	ldr	r3, [r4, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	dd39      	ble.n	8013b8e <__ssvfiscanf_r+0x266>
 8013b1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013b1c:	0659      	lsls	r1, r3, #25
 8013b1e:	d404      	bmi.n	8013b2a <__ssvfiscanf_r+0x202>
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	781a      	ldrb	r2, [r3, #0]
 8013b24:	5cba      	ldrb	r2, [r7, r2]
 8013b26:	0712      	lsls	r2, r2, #28
 8013b28:	d438      	bmi.n	8013b9c <__ssvfiscanf_r+0x274>
 8013b2a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8013b2c:	2b02      	cmp	r3, #2
 8013b2e:	dc47      	bgt.n	8013bc0 <__ssvfiscanf_r+0x298>
 8013b30:	466b      	mov	r3, sp
 8013b32:	4622      	mov	r2, r4
 8013b34:	a941      	add	r1, sp, #260	@ 0x104
 8013b36:	4630      	mov	r0, r6
 8013b38:	f000 f86c 	bl	8013c14 <_scanf_chars>
 8013b3c:	2801      	cmp	r0, #1
 8013b3e:	d064      	beq.n	8013c0a <__ssvfiscanf_r+0x2e2>
 8013b40:	2802      	cmp	r0, #2
 8013b42:	f47f af19 	bne.w	8013978 <__ssvfiscanf_r+0x50>
 8013b46:	e7c9      	b.n	8013adc <__ssvfiscanf_r+0x1b4>
 8013b48:	220a      	movs	r2, #10
 8013b4a:	e7d7      	b.n	8013afc <__ssvfiscanf_r+0x1d4>
 8013b4c:	4629      	mov	r1, r5
 8013b4e:	4640      	mov	r0, r8
 8013b50:	f000 fa10 	bl	8013f74 <__sccl>
 8013b54:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	2301      	movs	r3, #1
 8013b60:	e7d7      	b.n	8013b12 <__ssvfiscanf_r+0x1ea>
 8013b62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b68:	9341      	str	r3, [sp, #260]	@ 0x104
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e7d1      	b.n	8013b12 <__ssvfiscanf_r+0x1ea>
 8013b6e:	2302      	movs	r3, #2
 8013b70:	e7cf      	b.n	8013b12 <__ssvfiscanf_r+0x1ea>
 8013b72:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8013b74:	06c3      	lsls	r3, r0, #27
 8013b76:	f53f aeff 	bmi.w	8013978 <__ssvfiscanf_r+0x50>
 8013b7a:	9b00      	ldr	r3, [sp, #0]
 8013b7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013b7e:	1d19      	adds	r1, r3, #4
 8013b80:	9100      	str	r1, [sp, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	07c0      	lsls	r0, r0, #31
 8013b86:	bf4c      	ite	mi
 8013b88:	801a      	strhmi	r2, [r3, #0]
 8013b8a:	601a      	strpl	r2, [r3, #0]
 8013b8c:	e6f4      	b.n	8013978 <__ssvfiscanf_r+0x50>
 8013b8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013b90:	4621      	mov	r1, r4
 8013b92:	4630      	mov	r0, r6
 8013b94:	4798      	blx	r3
 8013b96:	2800      	cmp	r0, #0
 8013b98:	d0bf      	beq.n	8013b1a <__ssvfiscanf_r+0x1f2>
 8013b9a:	e79f      	b.n	8013adc <__ssvfiscanf_r+0x1b4>
 8013b9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013b9e:	3201      	adds	r2, #1
 8013ba0:	9245      	str	r2, [sp, #276]	@ 0x114
 8013ba2:	6862      	ldr	r2, [r4, #4]
 8013ba4:	3a01      	subs	r2, #1
 8013ba6:	2a00      	cmp	r2, #0
 8013ba8:	6062      	str	r2, [r4, #4]
 8013baa:	dd02      	ble.n	8013bb2 <__ssvfiscanf_r+0x28a>
 8013bac:	3301      	adds	r3, #1
 8013bae:	6023      	str	r3, [r4, #0]
 8013bb0:	e7b6      	b.n	8013b20 <__ssvfiscanf_r+0x1f8>
 8013bb2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013bb4:	4621      	mov	r1, r4
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	4798      	blx	r3
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	d0b0      	beq.n	8013b20 <__ssvfiscanf_r+0x1f8>
 8013bbe:	e78d      	b.n	8013adc <__ssvfiscanf_r+0x1b4>
 8013bc0:	2b04      	cmp	r3, #4
 8013bc2:	dc0f      	bgt.n	8013be4 <__ssvfiscanf_r+0x2bc>
 8013bc4:	466b      	mov	r3, sp
 8013bc6:	4622      	mov	r2, r4
 8013bc8:	a941      	add	r1, sp, #260	@ 0x104
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f000 f87c 	bl	8013cc8 <_scanf_i>
 8013bd0:	e7b4      	b.n	8013b3c <__ssvfiscanf_r+0x214>
 8013bd2:	bf00      	nop
 8013bd4:	08013875 	.word	0x08013875
 8013bd8:	080138ef 	.word	0x080138ef
 8013bdc:	080169a0 	.word	0x080169a0
 8013be0:	08016802 	.word	0x08016802
 8013be4:	4b0a      	ldr	r3, [pc, #40]	@ (8013c10 <__ssvfiscanf_r+0x2e8>)
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f43f aec6 	beq.w	8013978 <__ssvfiscanf_r+0x50>
 8013bec:	466b      	mov	r3, sp
 8013bee:	4622      	mov	r2, r4
 8013bf0:	a941      	add	r1, sp, #260	@ 0x104
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7fc fcd6 	bl	80105a4 <_scanf_float>
 8013bf8:	e7a0      	b.n	8013b3c <__ssvfiscanf_r+0x214>
 8013bfa:	89a3      	ldrh	r3, [r4, #12]
 8013bfc:	065b      	lsls	r3, r3, #25
 8013bfe:	f53f af71 	bmi.w	8013ae4 <__ssvfiscanf_r+0x1bc>
 8013c02:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8013c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013c0c:	e7f9      	b.n	8013c02 <__ssvfiscanf_r+0x2da>
 8013c0e:	bf00      	nop
 8013c10:	080105a5 	.word	0x080105a5

08013c14 <_scanf_chars>:
 8013c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c18:	4615      	mov	r5, r2
 8013c1a:	688a      	ldr	r2, [r1, #8]
 8013c1c:	4680      	mov	r8, r0
 8013c1e:	460c      	mov	r4, r1
 8013c20:	b932      	cbnz	r2, 8013c30 <_scanf_chars+0x1c>
 8013c22:	698a      	ldr	r2, [r1, #24]
 8013c24:	2a00      	cmp	r2, #0
 8013c26:	bf14      	ite	ne
 8013c28:	f04f 32ff 	movne.w	r2, #4294967295
 8013c2c:	2201      	moveq	r2, #1
 8013c2e:	608a      	str	r2, [r1, #8]
 8013c30:	6822      	ldr	r2, [r4, #0]
 8013c32:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013cc4 <_scanf_chars+0xb0>
 8013c36:	06d1      	lsls	r1, r2, #27
 8013c38:	bf5f      	itttt	pl
 8013c3a:	681a      	ldrpl	r2, [r3, #0]
 8013c3c:	1d11      	addpl	r1, r2, #4
 8013c3e:	6019      	strpl	r1, [r3, #0]
 8013c40:	6816      	ldrpl	r6, [r2, #0]
 8013c42:	2700      	movs	r7, #0
 8013c44:	69a0      	ldr	r0, [r4, #24]
 8013c46:	b188      	cbz	r0, 8013c6c <_scanf_chars+0x58>
 8013c48:	2801      	cmp	r0, #1
 8013c4a:	d107      	bne.n	8013c5c <_scanf_chars+0x48>
 8013c4c:	682b      	ldr	r3, [r5, #0]
 8013c4e:	781a      	ldrb	r2, [r3, #0]
 8013c50:	6963      	ldr	r3, [r4, #20]
 8013c52:	5c9b      	ldrb	r3, [r3, r2]
 8013c54:	b953      	cbnz	r3, 8013c6c <_scanf_chars+0x58>
 8013c56:	2f00      	cmp	r7, #0
 8013c58:	d031      	beq.n	8013cbe <_scanf_chars+0xaa>
 8013c5a:	e022      	b.n	8013ca2 <_scanf_chars+0x8e>
 8013c5c:	2802      	cmp	r0, #2
 8013c5e:	d120      	bne.n	8013ca2 <_scanf_chars+0x8e>
 8013c60:	682b      	ldr	r3, [r5, #0]
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013c68:	071b      	lsls	r3, r3, #28
 8013c6a:	d41a      	bmi.n	8013ca2 <_scanf_chars+0x8e>
 8013c6c:	6823      	ldr	r3, [r4, #0]
 8013c6e:	06da      	lsls	r2, r3, #27
 8013c70:	bf5e      	ittt	pl
 8013c72:	682b      	ldrpl	r3, [r5, #0]
 8013c74:	781b      	ldrbpl	r3, [r3, #0]
 8013c76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013c7a:	682a      	ldr	r2, [r5, #0]
 8013c7c:	686b      	ldr	r3, [r5, #4]
 8013c7e:	3201      	adds	r2, #1
 8013c80:	602a      	str	r2, [r5, #0]
 8013c82:	68a2      	ldr	r2, [r4, #8]
 8013c84:	3b01      	subs	r3, #1
 8013c86:	3a01      	subs	r2, #1
 8013c88:	606b      	str	r3, [r5, #4]
 8013c8a:	3701      	adds	r7, #1
 8013c8c:	60a2      	str	r2, [r4, #8]
 8013c8e:	b142      	cbz	r2, 8013ca2 <_scanf_chars+0x8e>
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	dcd7      	bgt.n	8013c44 <_scanf_chars+0x30>
 8013c94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013c98:	4629      	mov	r1, r5
 8013c9a:	4640      	mov	r0, r8
 8013c9c:	4798      	blx	r3
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	d0d0      	beq.n	8013c44 <_scanf_chars+0x30>
 8013ca2:	6823      	ldr	r3, [r4, #0]
 8013ca4:	f013 0310 	ands.w	r3, r3, #16
 8013ca8:	d105      	bne.n	8013cb6 <_scanf_chars+0xa2>
 8013caa:	68e2      	ldr	r2, [r4, #12]
 8013cac:	3201      	adds	r2, #1
 8013cae:	60e2      	str	r2, [r4, #12]
 8013cb0:	69a2      	ldr	r2, [r4, #24]
 8013cb2:	b102      	cbz	r2, 8013cb6 <_scanf_chars+0xa2>
 8013cb4:	7033      	strb	r3, [r6, #0]
 8013cb6:	6923      	ldr	r3, [r4, #16]
 8013cb8:	443b      	add	r3, r7
 8013cba:	6123      	str	r3, [r4, #16]
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cc2:	bf00      	nop
 8013cc4:	080169a0 	.word	0x080169a0

08013cc8 <_scanf_i>:
 8013cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ccc:	4698      	mov	r8, r3
 8013cce:	4b74      	ldr	r3, [pc, #464]	@ (8013ea0 <_scanf_i+0x1d8>)
 8013cd0:	460c      	mov	r4, r1
 8013cd2:	4682      	mov	sl, r0
 8013cd4:	4616      	mov	r6, r2
 8013cd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013cda:	b087      	sub	sp, #28
 8013cdc:	ab03      	add	r3, sp, #12
 8013cde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013ce2:	4b70      	ldr	r3, [pc, #448]	@ (8013ea4 <_scanf_i+0x1dc>)
 8013ce4:	69a1      	ldr	r1, [r4, #24]
 8013ce6:	4a70      	ldr	r2, [pc, #448]	@ (8013ea8 <_scanf_i+0x1e0>)
 8013ce8:	2903      	cmp	r1, #3
 8013cea:	bf08      	it	eq
 8013cec:	461a      	moveq	r2, r3
 8013cee:	68a3      	ldr	r3, [r4, #8]
 8013cf0:	9201      	str	r2, [sp, #4]
 8013cf2:	1e5a      	subs	r2, r3, #1
 8013cf4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013cf8:	bf88      	it	hi
 8013cfa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013cfe:	4627      	mov	r7, r4
 8013d00:	bf82      	ittt	hi
 8013d02:	eb03 0905 	addhi.w	r9, r3, r5
 8013d06:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013d0a:	60a3      	strhi	r3, [r4, #8]
 8013d0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013d10:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8013d14:	bf98      	it	ls
 8013d16:	f04f 0900 	movls.w	r9, #0
 8013d1a:	6023      	str	r3, [r4, #0]
 8013d1c:	463d      	mov	r5, r7
 8013d1e:	f04f 0b00 	mov.w	fp, #0
 8013d22:	6831      	ldr	r1, [r6, #0]
 8013d24:	ab03      	add	r3, sp, #12
 8013d26:	7809      	ldrb	r1, [r1, #0]
 8013d28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	f7ec fa6f 	bl	8000210 <memchr>
 8013d32:	b328      	cbz	r0, 8013d80 <_scanf_i+0xb8>
 8013d34:	f1bb 0f01 	cmp.w	fp, #1
 8013d38:	d159      	bne.n	8013dee <_scanf_i+0x126>
 8013d3a:	6862      	ldr	r2, [r4, #4]
 8013d3c:	b92a      	cbnz	r2, 8013d4a <_scanf_i+0x82>
 8013d3e:	6822      	ldr	r2, [r4, #0]
 8013d40:	2108      	movs	r1, #8
 8013d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013d46:	6061      	str	r1, [r4, #4]
 8013d48:	6022      	str	r2, [r4, #0]
 8013d4a:	6822      	ldr	r2, [r4, #0]
 8013d4c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013d50:	6022      	str	r2, [r4, #0]
 8013d52:	68a2      	ldr	r2, [r4, #8]
 8013d54:	1e51      	subs	r1, r2, #1
 8013d56:	60a1      	str	r1, [r4, #8]
 8013d58:	b192      	cbz	r2, 8013d80 <_scanf_i+0xb8>
 8013d5a:	6832      	ldr	r2, [r6, #0]
 8013d5c:	1c51      	adds	r1, r2, #1
 8013d5e:	6031      	str	r1, [r6, #0]
 8013d60:	7812      	ldrb	r2, [r2, #0]
 8013d62:	f805 2b01 	strb.w	r2, [r5], #1
 8013d66:	6872      	ldr	r2, [r6, #4]
 8013d68:	3a01      	subs	r2, #1
 8013d6a:	2a00      	cmp	r2, #0
 8013d6c:	6072      	str	r2, [r6, #4]
 8013d6e:	dc07      	bgt.n	8013d80 <_scanf_i+0xb8>
 8013d70:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013d74:	4631      	mov	r1, r6
 8013d76:	4650      	mov	r0, sl
 8013d78:	4790      	blx	r2
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	f040 8085 	bne.w	8013e8a <_scanf_i+0x1c2>
 8013d80:	f10b 0b01 	add.w	fp, fp, #1
 8013d84:	f1bb 0f03 	cmp.w	fp, #3
 8013d88:	d1cb      	bne.n	8013d22 <_scanf_i+0x5a>
 8013d8a:	6863      	ldr	r3, [r4, #4]
 8013d8c:	b90b      	cbnz	r3, 8013d92 <_scanf_i+0xca>
 8013d8e:	230a      	movs	r3, #10
 8013d90:	6063      	str	r3, [r4, #4]
 8013d92:	6863      	ldr	r3, [r4, #4]
 8013d94:	4945      	ldr	r1, [pc, #276]	@ (8013eac <_scanf_i+0x1e4>)
 8013d96:	6960      	ldr	r0, [r4, #20]
 8013d98:	1ac9      	subs	r1, r1, r3
 8013d9a:	f000 f8eb 	bl	8013f74 <__sccl>
 8013d9e:	f04f 0b00 	mov.w	fp, #0
 8013da2:	68a3      	ldr	r3, [r4, #8]
 8013da4:	6822      	ldr	r2, [r4, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d03d      	beq.n	8013e26 <_scanf_i+0x15e>
 8013daa:	6831      	ldr	r1, [r6, #0]
 8013dac:	6960      	ldr	r0, [r4, #20]
 8013dae:	f891 c000 	ldrb.w	ip, [r1]
 8013db2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d035      	beq.n	8013e26 <_scanf_i+0x15e>
 8013dba:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8013dbe:	d124      	bne.n	8013e0a <_scanf_i+0x142>
 8013dc0:	0510      	lsls	r0, r2, #20
 8013dc2:	d522      	bpl.n	8013e0a <_scanf_i+0x142>
 8013dc4:	f10b 0b01 	add.w	fp, fp, #1
 8013dc8:	f1b9 0f00 	cmp.w	r9, #0
 8013dcc:	d003      	beq.n	8013dd6 <_scanf_i+0x10e>
 8013dce:	3301      	adds	r3, #1
 8013dd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8013dd4:	60a3      	str	r3, [r4, #8]
 8013dd6:	6873      	ldr	r3, [r6, #4]
 8013dd8:	3b01      	subs	r3, #1
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	6073      	str	r3, [r6, #4]
 8013dde:	dd1b      	ble.n	8013e18 <_scanf_i+0x150>
 8013de0:	6833      	ldr	r3, [r6, #0]
 8013de2:	3301      	adds	r3, #1
 8013de4:	6033      	str	r3, [r6, #0]
 8013de6:	68a3      	ldr	r3, [r4, #8]
 8013de8:	3b01      	subs	r3, #1
 8013dea:	60a3      	str	r3, [r4, #8]
 8013dec:	e7d9      	b.n	8013da2 <_scanf_i+0xda>
 8013dee:	f1bb 0f02 	cmp.w	fp, #2
 8013df2:	d1ae      	bne.n	8013d52 <_scanf_i+0x8a>
 8013df4:	6822      	ldr	r2, [r4, #0]
 8013df6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013dfa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013dfe:	d1c4      	bne.n	8013d8a <_scanf_i+0xc2>
 8013e00:	2110      	movs	r1, #16
 8013e02:	6061      	str	r1, [r4, #4]
 8013e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013e08:	e7a2      	b.n	8013d50 <_scanf_i+0x88>
 8013e0a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013e0e:	6022      	str	r2, [r4, #0]
 8013e10:	780b      	ldrb	r3, [r1, #0]
 8013e12:	f805 3b01 	strb.w	r3, [r5], #1
 8013e16:	e7de      	b.n	8013dd6 <_scanf_i+0x10e>
 8013e18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013e1c:	4631      	mov	r1, r6
 8013e1e:	4650      	mov	r0, sl
 8013e20:	4798      	blx	r3
 8013e22:	2800      	cmp	r0, #0
 8013e24:	d0df      	beq.n	8013de6 <_scanf_i+0x11e>
 8013e26:	6823      	ldr	r3, [r4, #0]
 8013e28:	05d9      	lsls	r1, r3, #23
 8013e2a:	d50d      	bpl.n	8013e48 <_scanf_i+0x180>
 8013e2c:	42bd      	cmp	r5, r7
 8013e2e:	d909      	bls.n	8013e44 <_scanf_i+0x17c>
 8013e30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013e38:	4632      	mov	r2, r6
 8013e3a:	4650      	mov	r0, sl
 8013e3c:	4798      	blx	r3
 8013e3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013e42:	464d      	mov	r5, r9
 8013e44:	42bd      	cmp	r5, r7
 8013e46:	d028      	beq.n	8013e9a <_scanf_i+0x1d2>
 8013e48:	6822      	ldr	r2, [r4, #0]
 8013e4a:	f012 0210 	ands.w	r2, r2, #16
 8013e4e:	d113      	bne.n	8013e78 <_scanf_i+0x1b0>
 8013e50:	702a      	strb	r2, [r5, #0]
 8013e52:	6863      	ldr	r3, [r4, #4]
 8013e54:	9e01      	ldr	r6, [sp, #4]
 8013e56:	4639      	mov	r1, r7
 8013e58:	4650      	mov	r0, sl
 8013e5a:	47b0      	blx	r6
 8013e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8013e60:	6821      	ldr	r1, [r4, #0]
 8013e62:	1d1a      	adds	r2, r3, #4
 8013e64:	f8c8 2000 	str.w	r2, [r8]
 8013e68:	f011 0f20 	tst.w	r1, #32
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	d00f      	beq.n	8013e90 <_scanf_i+0x1c8>
 8013e70:	6018      	str	r0, [r3, #0]
 8013e72:	68e3      	ldr	r3, [r4, #12]
 8013e74:	3301      	adds	r3, #1
 8013e76:	60e3      	str	r3, [r4, #12]
 8013e78:	6923      	ldr	r3, [r4, #16]
 8013e7a:	1bed      	subs	r5, r5, r7
 8013e7c:	445d      	add	r5, fp
 8013e7e:	442b      	add	r3, r5
 8013e80:	6123      	str	r3, [r4, #16]
 8013e82:	2000      	movs	r0, #0
 8013e84:	b007      	add	sp, #28
 8013e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8a:	f04f 0b00 	mov.w	fp, #0
 8013e8e:	e7ca      	b.n	8013e26 <_scanf_i+0x15e>
 8013e90:	07ca      	lsls	r2, r1, #31
 8013e92:	bf4c      	ite	mi
 8013e94:	8018      	strhmi	r0, [r3, #0]
 8013e96:	6018      	strpl	r0, [r3, #0]
 8013e98:	e7eb      	b.n	8013e72 <_scanf_i+0x1aa>
 8013e9a:	2001      	movs	r0, #1
 8013e9c:	e7f2      	b.n	8013e84 <_scanf_i+0x1bc>
 8013e9e:	bf00      	nop
 8013ea0:	080162f0 	.word	0x080162f0
 8013ea4:	0800fa5d 	.word	0x0800fa5d
 8013ea8:	080148e5 	.word	0x080148e5
 8013eac:	0801692c 	.word	0x0801692c

08013eb0 <__swhatbuf_r>:
 8013eb0:	b570      	push	{r4, r5, r6, lr}
 8013eb2:	460c      	mov	r4, r1
 8013eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eb8:	2900      	cmp	r1, #0
 8013eba:	b096      	sub	sp, #88	@ 0x58
 8013ebc:	4615      	mov	r5, r2
 8013ebe:	461e      	mov	r6, r3
 8013ec0:	da0d      	bge.n	8013ede <__swhatbuf_r+0x2e>
 8013ec2:	89a3      	ldrh	r3, [r4, #12]
 8013ec4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013ec8:	f04f 0100 	mov.w	r1, #0
 8013ecc:	bf14      	ite	ne
 8013ece:	2340      	movne	r3, #64	@ 0x40
 8013ed0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013ed4:	2000      	movs	r0, #0
 8013ed6:	6031      	str	r1, [r6, #0]
 8013ed8:	602b      	str	r3, [r5, #0]
 8013eda:	b016      	add	sp, #88	@ 0x58
 8013edc:	bd70      	pop	{r4, r5, r6, pc}
 8013ede:	466a      	mov	r2, sp
 8013ee0:	f000 f8ec 	bl	80140bc <_fstat_r>
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	dbec      	blt.n	8013ec2 <__swhatbuf_r+0x12>
 8013ee8:	9901      	ldr	r1, [sp, #4]
 8013eea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013eee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013ef2:	4259      	negs	r1, r3
 8013ef4:	4159      	adcs	r1, r3
 8013ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013efa:	e7eb      	b.n	8013ed4 <__swhatbuf_r+0x24>

08013efc <__smakebuf_r>:
 8013efc:	898b      	ldrh	r3, [r1, #12]
 8013efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f00:	079d      	lsls	r5, r3, #30
 8013f02:	4606      	mov	r6, r0
 8013f04:	460c      	mov	r4, r1
 8013f06:	d507      	bpl.n	8013f18 <__smakebuf_r+0x1c>
 8013f08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013f0c:	6023      	str	r3, [r4, #0]
 8013f0e:	6123      	str	r3, [r4, #16]
 8013f10:	2301      	movs	r3, #1
 8013f12:	6163      	str	r3, [r4, #20]
 8013f14:	b003      	add	sp, #12
 8013f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f18:	ab01      	add	r3, sp, #4
 8013f1a:	466a      	mov	r2, sp
 8013f1c:	f7ff ffc8 	bl	8013eb0 <__swhatbuf_r>
 8013f20:	9f00      	ldr	r7, [sp, #0]
 8013f22:	4605      	mov	r5, r0
 8013f24:	4639      	mov	r1, r7
 8013f26:	4630      	mov	r0, r6
 8013f28:	f7fb fc92 	bl	800f850 <_malloc_r>
 8013f2c:	b948      	cbnz	r0, 8013f42 <__smakebuf_r+0x46>
 8013f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f32:	059a      	lsls	r2, r3, #22
 8013f34:	d4ee      	bmi.n	8013f14 <__smakebuf_r+0x18>
 8013f36:	f023 0303 	bic.w	r3, r3, #3
 8013f3a:	f043 0302 	orr.w	r3, r3, #2
 8013f3e:	81a3      	strh	r3, [r4, #12]
 8013f40:	e7e2      	b.n	8013f08 <__smakebuf_r+0xc>
 8013f42:	89a3      	ldrh	r3, [r4, #12]
 8013f44:	6020      	str	r0, [r4, #0]
 8013f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f4a:	81a3      	strh	r3, [r4, #12]
 8013f4c:	9b01      	ldr	r3, [sp, #4]
 8013f4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013f52:	b15b      	cbz	r3, 8013f6c <__smakebuf_r+0x70>
 8013f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f58:	4630      	mov	r0, r6
 8013f5a:	f000 f8c1 	bl	80140e0 <_isatty_r>
 8013f5e:	b128      	cbz	r0, 8013f6c <__smakebuf_r+0x70>
 8013f60:	89a3      	ldrh	r3, [r4, #12]
 8013f62:	f023 0303 	bic.w	r3, r3, #3
 8013f66:	f043 0301 	orr.w	r3, r3, #1
 8013f6a:	81a3      	strh	r3, [r4, #12]
 8013f6c:	89a3      	ldrh	r3, [r4, #12]
 8013f6e:	431d      	orrs	r5, r3
 8013f70:	81a5      	strh	r5, [r4, #12]
 8013f72:	e7cf      	b.n	8013f14 <__smakebuf_r+0x18>

08013f74 <__sccl>:
 8013f74:	b570      	push	{r4, r5, r6, lr}
 8013f76:	780b      	ldrb	r3, [r1, #0]
 8013f78:	4604      	mov	r4, r0
 8013f7a:	2b5e      	cmp	r3, #94	@ 0x5e
 8013f7c:	bf0b      	itete	eq
 8013f7e:	784b      	ldrbeq	r3, [r1, #1]
 8013f80:	1c4a      	addne	r2, r1, #1
 8013f82:	1c8a      	addeq	r2, r1, #2
 8013f84:	2100      	movne	r1, #0
 8013f86:	bf08      	it	eq
 8013f88:	2101      	moveq	r1, #1
 8013f8a:	3801      	subs	r0, #1
 8013f8c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013f90:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013f94:	42a8      	cmp	r0, r5
 8013f96:	d1fb      	bne.n	8013f90 <__sccl+0x1c>
 8013f98:	b90b      	cbnz	r3, 8013f9e <__sccl+0x2a>
 8013f9a:	1e50      	subs	r0, r2, #1
 8013f9c:	bd70      	pop	{r4, r5, r6, pc}
 8013f9e:	f081 0101 	eor.w	r1, r1, #1
 8013fa2:	54e1      	strb	r1, [r4, r3]
 8013fa4:	4610      	mov	r0, r2
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013fac:	2d2d      	cmp	r5, #45	@ 0x2d
 8013fae:	d005      	beq.n	8013fbc <__sccl+0x48>
 8013fb0:	2d5d      	cmp	r5, #93	@ 0x5d
 8013fb2:	d016      	beq.n	8013fe2 <__sccl+0x6e>
 8013fb4:	2d00      	cmp	r5, #0
 8013fb6:	d0f1      	beq.n	8013f9c <__sccl+0x28>
 8013fb8:	462b      	mov	r3, r5
 8013fba:	e7f2      	b.n	8013fa2 <__sccl+0x2e>
 8013fbc:	7846      	ldrb	r6, [r0, #1]
 8013fbe:	2e5d      	cmp	r6, #93	@ 0x5d
 8013fc0:	d0fa      	beq.n	8013fb8 <__sccl+0x44>
 8013fc2:	42b3      	cmp	r3, r6
 8013fc4:	dcf8      	bgt.n	8013fb8 <__sccl+0x44>
 8013fc6:	3002      	adds	r0, #2
 8013fc8:	461a      	mov	r2, r3
 8013fca:	3201      	adds	r2, #1
 8013fcc:	4296      	cmp	r6, r2
 8013fce:	54a1      	strb	r1, [r4, r2]
 8013fd0:	dcfb      	bgt.n	8013fca <__sccl+0x56>
 8013fd2:	1af2      	subs	r2, r6, r3
 8013fd4:	3a01      	subs	r2, #1
 8013fd6:	1c5d      	adds	r5, r3, #1
 8013fd8:	42b3      	cmp	r3, r6
 8013fda:	bfa8      	it	ge
 8013fdc:	2200      	movge	r2, #0
 8013fde:	18ab      	adds	r3, r5, r2
 8013fe0:	e7e1      	b.n	8013fa6 <__sccl+0x32>
 8013fe2:	4610      	mov	r0, r2
 8013fe4:	e7da      	b.n	8013f9c <__sccl+0x28>

08013fe6 <__submore>:
 8013fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fea:	460c      	mov	r4, r1
 8013fec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ff2:	4299      	cmp	r1, r3
 8013ff4:	d11d      	bne.n	8014032 <__submore+0x4c>
 8013ff6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013ffa:	f7fb fc29 	bl	800f850 <_malloc_r>
 8013ffe:	b918      	cbnz	r0, 8014008 <__submore+0x22>
 8014000:	f04f 30ff 	mov.w	r0, #4294967295
 8014004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801400c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801400e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014012:	6360      	str	r0, [r4, #52]	@ 0x34
 8014014:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014018:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801401c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014020:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014024:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014028:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801402c:	6020      	str	r0, [r4, #0]
 801402e:	2000      	movs	r0, #0
 8014030:	e7e8      	b.n	8014004 <__submore+0x1e>
 8014032:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014034:	0077      	lsls	r7, r6, #1
 8014036:	463a      	mov	r2, r7
 8014038:	f7fe fc8e 	bl	8012958 <_realloc_r>
 801403c:	4605      	mov	r5, r0
 801403e:	2800      	cmp	r0, #0
 8014040:	d0de      	beq.n	8014000 <__submore+0x1a>
 8014042:	eb00 0806 	add.w	r8, r0, r6
 8014046:	4601      	mov	r1, r0
 8014048:	4632      	mov	r2, r6
 801404a:	4640      	mov	r0, r8
 801404c:	f7fd f919 	bl	8011282 <memcpy>
 8014050:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014054:	f8c4 8000 	str.w	r8, [r4]
 8014058:	e7e9      	b.n	801402e <__submore+0x48>

0801405a <_raise_r>:
 801405a:	291f      	cmp	r1, #31
 801405c:	b538      	push	{r3, r4, r5, lr}
 801405e:	4605      	mov	r5, r0
 8014060:	460c      	mov	r4, r1
 8014062:	d904      	bls.n	801406e <_raise_r+0x14>
 8014064:	2316      	movs	r3, #22
 8014066:	6003      	str	r3, [r0, #0]
 8014068:	f04f 30ff 	mov.w	r0, #4294967295
 801406c:	bd38      	pop	{r3, r4, r5, pc}
 801406e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014070:	b112      	cbz	r2, 8014078 <_raise_r+0x1e>
 8014072:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014076:	b94b      	cbnz	r3, 801408c <_raise_r+0x32>
 8014078:	4628      	mov	r0, r5
 801407a:	f000 f853 	bl	8014124 <_getpid_r>
 801407e:	4622      	mov	r2, r4
 8014080:	4601      	mov	r1, r0
 8014082:	4628      	mov	r0, r5
 8014084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014088:	f000 b83a 	b.w	8014100 <_kill_r>
 801408c:	2b01      	cmp	r3, #1
 801408e:	d00a      	beq.n	80140a6 <_raise_r+0x4c>
 8014090:	1c59      	adds	r1, r3, #1
 8014092:	d103      	bne.n	801409c <_raise_r+0x42>
 8014094:	2316      	movs	r3, #22
 8014096:	6003      	str	r3, [r0, #0]
 8014098:	2001      	movs	r0, #1
 801409a:	e7e7      	b.n	801406c <_raise_r+0x12>
 801409c:	2100      	movs	r1, #0
 801409e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80140a2:	4620      	mov	r0, r4
 80140a4:	4798      	blx	r3
 80140a6:	2000      	movs	r0, #0
 80140a8:	e7e0      	b.n	801406c <_raise_r+0x12>
	...

080140ac <raise>:
 80140ac:	4b02      	ldr	r3, [pc, #8]	@ (80140b8 <raise+0xc>)
 80140ae:	4601      	mov	r1, r0
 80140b0:	6818      	ldr	r0, [r3, #0]
 80140b2:	f7ff bfd2 	b.w	801405a <_raise_r>
 80140b6:	bf00      	nop
 80140b8:	20000020 	.word	0x20000020

080140bc <_fstat_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d07      	ldr	r5, [pc, #28]	@ (80140dc <_fstat_r+0x20>)
 80140c0:	2300      	movs	r3, #0
 80140c2:	4604      	mov	r4, r0
 80140c4:	4608      	mov	r0, r1
 80140c6:	4611      	mov	r1, r2
 80140c8:	602b      	str	r3, [r5, #0]
 80140ca:	f7ee ffa5 	bl	8003018 <_fstat>
 80140ce:	1c43      	adds	r3, r0, #1
 80140d0:	d102      	bne.n	80140d8 <_fstat_r+0x1c>
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	b103      	cbz	r3, 80140d8 <_fstat_r+0x1c>
 80140d6:	6023      	str	r3, [r4, #0]
 80140d8:	bd38      	pop	{r3, r4, r5, pc}
 80140da:	bf00      	nop
 80140dc:	20010958 	.word	0x20010958

080140e0 <_isatty_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4d06      	ldr	r5, [pc, #24]	@ (80140fc <_isatty_r+0x1c>)
 80140e4:	2300      	movs	r3, #0
 80140e6:	4604      	mov	r4, r0
 80140e8:	4608      	mov	r0, r1
 80140ea:	602b      	str	r3, [r5, #0]
 80140ec:	f7ee ffa4 	bl	8003038 <_isatty>
 80140f0:	1c43      	adds	r3, r0, #1
 80140f2:	d102      	bne.n	80140fa <_isatty_r+0x1a>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	b103      	cbz	r3, 80140fa <_isatty_r+0x1a>
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	20010958 	.word	0x20010958

08014100 <_kill_r>:
 8014100:	b538      	push	{r3, r4, r5, lr}
 8014102:	4d07      	ldr	r5, [pc, #28]	@ (8014120 <_kill_r+0x20>)
 8014104:	2300      	movs	r3, #0
 8014106:	4604      	mov	r4, r0
 8014108:	4608      	mov	r0, r1
 801410a:	4611      	mov	r1, r2
 801410c:	602b      	str	r3, [r5, #0]
 801410e:	f7ee ff3f 	bl	8002f90 <_kill>
 8014112:	1c43      	adds	r3, r0, #1
 8014114:	d102      	bne.n	801411c <_kill_r+0x1c>
 8014116:	682b      	ldr	r3, [r5, #0]
 8014118:	b103      	cbz	r3, 801411c <_kill_r+0x1c>
 801411a:	6023      	str	r3, [r4, #0]
 801411c:	bd38      	pop	{r3, r4, r5, pc}
 801411e:	bf00      	nop
 8014120:	20010958 	.word	0x20010958

08014124 <_getpid_r>:
 8014124:	f7ee bf2c 	b.w	8002f80 <_getpid>

08014128 <nan>:
 8014128:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014130 <nan+0x8>
 801412c:	4770      	bx	lr
 801412e:	bf00      	nop
 8014130:	00000000 	.word	0x00000000
 8014134:	7ff80000 	.word	0x7ff80000

08014138 <_calloc_r>:
 8014138:	b570      	push	{r4, r5, r6, lr}
 801413a:	fba1 5402 	umull	r5, r4, r1, r2
 801413e:	b934      	cbnz	r4, 801414e <_calloc_r+0x16>
 8014140:	4629      	mov	r1, r5
 8014142:	f7fb fb85 	bl	800f850 <_malloc_r>
 8014146:	4606      	mov	r6, r0
 8014148:	b928      	cbnz	r0, 8014156 <_calloc_r+0x1e>
 801414a:	4630      	mov	r0, r6
 801414c:	bd70      	pop	{r4, r5, r6, pc}
 801414e:	220c      	movs	r2, #12
 8014150:	6002      	str	r2, [r0, #0]
 8014152:	2600      	movs	r6, #0
 8014154:	e7f9      	b.n	801414a <_calloc_r+0x12>
 8014156:	462a      	mov	r2, r5
 8014158:	4621      	mov	r1, r4
 801415a:	f7fc ffa9 	bl	80110b0 <memset>
 801415e:	e7f4      	b.n	801414a <_calloc_r+0x12>

08014160 <rshift>:
 8014160:	6903      	ldr	r3, [r0, #16]
 8014162:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801416a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801416e:	f100 0414 	add.w	r4, r0, #20
 8014172:	dd45      	ble.n	8014200 <rshift+0xa0>
 8014174:	f011 011f 	ands.w	r1, r1, #31
 8014178:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801417c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014180:	d10c      	bne.n	801419c <rshift+0x3c>
 8014182:	f100 0710 	add.w	r7, r0, #16
 8014186:	4629      	mov	r1, r5
 8014188:	42b1      	cmp	r1, r6
 801418a:	d334      	bcc.n	80141f6 <rshift+0x96>
 801418c:	1a9b      	subs	r3, r3, r2
 801418e:	009b      	lsls	r3, r3, #2
 8014190:	1eea      	subs	r2, r5, #3
 8014192:	4296      	cmp	r6, r2
 8014194:	bf38      	it	cc
 8014196:	2300      	movcc	r3, #0
 8014198:	4423      	add	r3, r4
 801419a:	e015      	b.n	80141c8 <rshift+0x68>
 801419c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80141a0:	f1c1 0820 	rsb	r8, r1, #32
 80141a4:	40cf      	lsrs	r7, r1
 80141a6:	f105 0e04 	add.w	lr, r5, #4
 80141aa:	46a1      	mov	r9, r4
 80141ac:	4576      	cmp	r6, lr
 80141ae:	46f4      	mov	ip, lr
 80141b0:	d815      	bhi.n	80141de <rshift+0x7e>
 80141b2:	1a9a      	subs	r2, r3, r2
 80141b4:	0092      	lsls	r2, r2, #2
 80141b6:	3a04      	subs	r2, #4
 80141b8:	3501      	adds	r5, #1
 80141ba:	42ae      	cmp	r6, r5
 80141bc:	bf38      	it	cc
 80141be:	2200      	movcc	r2, #0
 80141c0:	18a3      	adds	r3, r4, r2
 80141c2:	50a7      	str	r7, [r4, r2]
 80141c4:	b107      	cbz	r7, 80141c8 <rshift+0x68>
 80141c6:	3304      	adds	r3, #4
 80141c8:	1b1a      	subs	r2, r3, r4
 80141ca:	42a3      	cmp	r3, r4
 80141cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141d0:	bf08      	it	eq
 80141d2:	2300      	moveq	r3, #0
 80141d4:	6102      	str	r2, [r0, #16]
 80141d6:	bf08      	it	eq
 80141d8:	6143      	streq	r3, [r0, #20]
 80141da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141de:	f8dc c000 	ldr.w	ip, [ip]
 80141e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80141e6:	ea4c 0707 	orr.w	r7, ip, r7
 80141ea:	f849 7b04 	str.w	r7, [r9], #4
 80141ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80141f2:	40cf      	lsrs	r7, r1
 80141f4:	e7da      	b.n	80141ac <rshift+0x4c>
 80141f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80141fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80141fe:	e7c3      	b.n	8014188 <rshift+0x28>
 8014200:	4623      	mov	r3, r4
 8014202:	e7e1      	b.n	80141c8 <rshift+0x68>

08014204 <__hexdig_fun>:
 8014204:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014208:	2b09      	cmp	r3, #9
 801420a:	d802      	bhi.n	8014212 <__hexdig_fun+0xe>
 801420c:	3820      	subs	r0, #32
 801420e:	b2c0      	uxtb	r0, r0
 8014210:	4770      	bx	lr
 8014212:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014216:	2b05      	cmp	r3, #5
 8014218:	d801      	bhi.n	801421e <__hexdig_fun+0x1a>
 801421a:	3847      	subs	r0, #71	@ 0x47
 801421c:	e7f7      	b.n	801420e <__hexdig_fun+0xa>
 801421e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014222:	2b05      	cmp	r3, #5
 8014224:	d801      	bhi.n	801422a <__hexdig_fun+0x26>
 8014226:	3827      	subs	r0, #39	@ 0x27
 8014228:	e7f1      	b.n	801420e <__hexdig_fun+0xa>
 801422a:	2000      	movs	r0, #0
 801422c:	4770      	bx	lr
	...

08014230 <__gethex>:
 8014230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014234:	b085      	sub	sp, #20
 8014236:	468a      	mov	sl, r1
 8014238:	9302      	str	r3, [sp, #8]
 801423a:	680b      	ldr	r3, [r1, #0]
 801423c:	9001      	str	r0, [sp, #4]
 801423e:	4690      	mov	r8, r2
 8014240:	1c9c      	adds	r4, r3, #2
 8014242:	46a1      	mov	r9, r4
 8014244:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014248:	2830      	cmp	r0, #48	@ 0x30
 801424a:	d0fa      	beq.n	8014242 <__gethex+0x12>
 801424c:	eba9 0303 	sub.w	r3, r9, r3
 8014250:	f1a3 0b02 	sub.w	fp, r3, #2
 8014254:	f7ff ffd6 	bl	8014204 <__hexdig_fun>
 8014258:	4605      	mov	r5, r0
 801425a:	2800      	cmp	r0, #0
 801425c:	d168      	bne.n	8014330 <__gethex+0x100>
 801425e:	49a0      	ldr	r1, [pc, #640]	@ (80144e0 <__gethex+0x2b0>)
 8014260:	2201      	movs	r2, #1
 8014262:	4648      	mov	r0, r9
 8014264:	f7fc ff3f 	bl	80110e6 <strncmp>
 8014268:	4607      	mov	r7, r0
 801426a:	2800      	cmp	r0, #0
 801426c:	d167      	bne.n	801433e <__gethex+0x10e>
 801426e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014272:	4626      	mov	r6, r4
 8014274:	f7ff ffc6 	bl	8014204 <__hexdig_fun>
 8014278:	2800      	cmp	r0, #0
 801427a:	d062      	beq.n	8014342 <__gethex+0x112>
 801427c:	4623      	mov	r3, r4
 801427e:	7818      	ldrb	r0, [r3, #0]
 8014280:	2830      	cmp	r0, #48	@ 0x30
 8014282:	4699      	mov	r9, r3
 8014284:	f103 0301 	add.w	r3, r3, #1
 8014288:	d0f9      	beq.n	801427e <__gethex+0x4e>
 801428a:	f7ff ffbb 	bl	8014204 <__hexdig_fun>
 801428e:	fab0 f580 	clz	r5, r0
 8014292:	096d      	lsrs	r5, r5, #5
 8014294:	f04f 0b01 	mov.w	fp, #1
 8014298:	464a      	mov	r2, r9
 801429a:	4616      	mov	r6, r2
 801429c:	3201      	adds	r2, #1
 801429e:	7830      	ldrb	r0, [r6, #0]
 80142a0:	f7ff ffb0 	bl	8014204 <__hexdig_fun>
 80142a4:	2800      	cmp	r0, #0
 80142a6:	d1f8      	bne.n	801429a <__gethex+0x6a>
 80142a8:	498d      	ldr	r1, [pc, #564]	@ (80144e0 <__gethex+0x2b0>)
 80142aa:	2201      	movs	r2, #1
 80142ac:	4630      	mov	r0, r6
 80142ae:	f7fc ff1a 	bl	80110e6 <strncmp>
 80142b2:	2800      	cmp	r0, #0
 80142b4:	d13f      	bne.n	8014336 <__gethex+0x106>
 80142b6:	b944      	cbnz	r4, 80142ca <__gethex+0x9a>
 80142b8:	1c74      	adds	r4, r6, #1
 80142ba:	4622      	mov	r2, r4
 80142bc:	4616      	mov	r6, r2
 80142be:	3201      	adds	r2, #1
 80142c0:	7830      	ldrb	r0, [r6, #0]
 80142c2:	f7ff ff9f 	bl	8014204 <__hexdig_fun>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d1f8      	bne.n	80142bc <__gethex+0x8c>
 80142ca:	1ba4      	subs	r4, r4, r6
 80142cc:	00a7      	lsls	r7, r4, #2
 80142ce:	7833      	ldrb	r3, [r6, #0]
 80142d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80142d4:	2b50      	cmp	r3, #80	@ 0x50
 80142d6:	d13e      	bne.n	8014356 <__gethex+0x126>
 80142d8:	7873      	ldrb	r3, [r6, #1]
 80142da:	2b2b      	cmp	r3, #43	@ 0x2b
 80142dc:	d033      	beq.n	8014346 <__gethex+0x116>
 80142de:	2b2d      	cmp	r3, #45	@ 0x2d
 80142e0:	d034      	beq.n	801434c <__gethex+0x11c>
 80142e2:	1c71      	adds	r1, r6, #1
 80142e4:	2400      	movs	r4, #0
 80142e6:	7808      	ldrb	r0, [r1, #0]
 80142e8:	f7ff ff8c 	bl	8014204 <__hexdig_fun>
 80142ec:	1e43      	subs	r3, r0, #1
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	2b18      	cmp	r3, #24
 80142f2:	d830      	bhi.n	8014356 <__gethex+0x126>
 80142f4:	f1a0 0210 	sub.w	r2, r0, #16
 80142f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80142fc:	f7ff ff82 	bl	8014204 <__hexdig_fun>
 8014300:	f100 3cff 	add.w	ip, r0, #4294967295
 8014304:	fa5f fc8c 	uxtb.w	ip, ip
 8014308:	f1bc 0f18 	cmp.w	ip, #24
 801430c:	f04f 030a 	mov.w	r3, #10
 8014310:	d91e      	bls.n	8014350 <__gethex+0x120>
 8014312:	b104      	cbz	r4, 8014316 <__gethex+0xe6>
 8014314:	4252      	negs	r2, r2
 8014316:	4417      	add	r7, r2
 8014318:	f8ca 1000 	str.w	r1, [sl]
 801431c:	b1ed      	cbz	r5, 801435a <__gethex+0x12a>
 801431e:	f1bb 0f00 	cmp.w	fp, #0
 8014322:	bf0c      	ite	eq
 8014324:	2506      	moveq	r5, #6
 8014326:	2500      	movne	r5, #0
 8014328:	4628      	mov	r0, r5
 801432a:	b005      	add	sp, #20
 801432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014330:	2500      	movs	r5, #0
 8014332:	462c      	mov	r4, r5
 8014334:	e7b0      	b.n	8014298 <__gethex+0x68>
 8014336:	2c00      	cmp	r4, #0
 8014338:	d1c7      	bne.n	80142ca <__gethex+0x9a>
 801433a:	4627      	mov	r7, r4
 801433c:	e7c7      	b.n	80142ce <__gethex+0x9e>
 801433e:	464e      	mov	r6, r9
 8014340:	462f      	mov	r7, r5
 8014342:	2501      	movs	r5, #1
 8014344:	e7c3      	b.n	80142ce <__gethex+0x9e>
 8014346:	2400      	movs	r4, #0
 8014348:	1cb1      	adds	r1, r6, #2
 801434a:	e7cc      	b.n	80142e6 <__gethex+0xb6>
 801434c:	2401      	movs	r4, #1
 801434e:	e7fb      	b.n	8014348 <__gethex+0x118>
 8014350:	fb03 0002 	mla	r0, r3, r2, r0
 8014354:	e7ce      	b.n	80142f4 <__gethex+0xc4>
 8014356:	4631      	mov	r1, r6
 8014358:	e7de      	b.n	8014318 <__gethex+0xe8>
 801435a:	eba6 0309 	sub.w	r3, r6, r9
 801435e:	3b01      	subs	r3, #1
 8014360:	4629      	mov	r1, r5
 8014362:	2b07      	cmp	r3, #7
 8014364:	dc0a      	bgt.n	801437c <__gethex+0x14c>
 8014366:	9801      	ldr	r0, [sp, #4]
 8014368:	f7fd fe4c 	bl	8012004 <_Balloc>
 801436c:	4604      	mov	r4, r0
 801436e:	b940      	cbnz	r0, 8014382 <__gethex+0x152>
 8014370:	4b5c      	ldr	r3, [pc, #368]	@ (80144e4 <__gethex+0x2b4>)
 8014372:	4602      	mov	r2, r0
 8014374:	21e4      	movs	r1, #228	@ 0xe4
 8014376:	485c      	ldr	r0, [pc, #368]	@ (80144e8 <__gethex+0x2b8>)
 8014378:	f7fb fa1e 	bl	800f7b8 <__assert_func>
 801437c:	3101      	adds	r1, #1
 801437e:	105b      	asrs	r3, r3, #1
 8014380:	e7ef      	b.n	8014362 <__gethex+0x132>
 8014382:	f100 0a14 	add.w	sl, r0, #20
 8014386:	2300      	movs	r3, #0
 8014388:	4655      	mov	r5, sl
 801438a:	469b      	mov	fp, r3
 801438c:	45b1      	cmp	r9, r6
 801438e:	d337      	bcc.n	8014400 <__gethex+0x1d0>
 8014390:	f845 bb04 	str.w	fp, [r5], #4
 8014394:	eba5 050a 	sub.w	r5, r5, sl
 8014398:	10ad      	asrs	r5, r5, #2
 801439a:	6125      	str	r5, [r4, #16]
 801439c:	4658      	mov	r0, fp
 801439e:	f7fd ff23 	bl	80121e8 <__hi0bits>
 80143a2:	016d      	lsls	r5, r5, #5
 80143a4:	f8d8 6000 	ldr.w	r6, [r8]
 80143a8:	1a2d      	subs	r5, r5, r0
 80143aa:	42b5      	cmp	r5, r6
 80143ac:	dd54      	ble.n	8014458 <__gethex+0x228>
 80143ae:	1bad      	subs	r5, r5, r6
 80143b0:	4629      	mov	r1, r5
 80143b2:	4620      	mov	r0, r4
 80143b4:	f7fe faaf 	bl	8012916 <__any_on>
 80143b8:	4681      	mov	r9, r0
 80143ba:	b178      	cbz	r0, 80143dc <__gethex+0x1ac>
 80143bc:	1e6b      	subs	r3, r5, #1
 80143be:	1159      	asrs	r1, r3, #5
 80143c0:	f003 021f 	and.w	r2, r3, #31
 80143c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80143c8:	f04f 0901 	mov.w	r9, #1
 80143cc:	fa09 f202 	lsl.w	r2, r9, r2
 80143d0:	420a      	tst	r2, r1
 80143d2:	d003      	beq.n	80143dc <__gethex+0x1ac>
 80143d4:	454b      	cmp	r3, r9
 80143d6:	dc36      	bgt.n	8014446 <__gethex+0x216>
 80143d8:	f04f 0902 	mov.w	r9, #2
 80143dc:	4629      	mov	r1, r5
 80143de:	4620      	mov	r0, r4
 80143e0:	f7ff febe 	bl	8014160 <rshift>
 80143e4:	442f      	add	r7, r5
 80143e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143ea:	42bb      	cmp	r3, r7
 80143ec:	da42      	bge.n	8014474 <__gethex+0x244>
 80143ee:	9801      	ldr	r0, [sp, #4]
 80143f0:	4621      	mov	r1, r4
 80143f2:	f7fd fe47 	bl	8012084 <_Bfree>
 80143f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80143f8:	2300      	movs	r3, #0
 80143fa:	6013      	str	r3, [r2, #0]
 80143fc:	25a3      	movs	r5, #163	@ 0xa3
 80143fe:	e793      	b.n	8014328 <__gethex+0xf8>
 8014400:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014404:	2a2e      	cmp	r2, #46	@ 0x2e
 8014406:	d012      	beq.n	801442e <__gethex+0x1fe>
 8014408:	2b20      	cmp	r3, #32
 801440a:	d104      	bne.n	8014416 <__gethex+0x1e6>
 801440c:	f845 bb04 	str.w	fp, [r5], #4
 8014410:	f04f 0b00 	mov.w	fp, #0
 8014414:	465b      	mov	r3, fp
 8014416:	7830      	ldrb	r0, [r6, #0]
 8014418:	9303      	str	r3, [sp, #12]
 801441a:	f7ff fef3 	bl	8014204 <__hexdig_fun>
 801441e:	9b03      	ldr	r3, [sp, #12]
 8014420:	f000 000f 	and.w	r0, r0, #15
 8014424:	4098      	lsls	r0, r3
 8014426:	ea4b 0b00 	orr.w	fp, fp, r0
 801442a:	3304      	adds	r3, #4
 801442c:	e7ae      	b.n	801438c <__gethex+0x15c>
 801442e:	45b1      	cmp	r9, r6
 8014430:	d8ea      	bhi.n	8014408 <__gethex+0x1d8>
 8014432:	492b      	ldr	r1, [pc, #172]	@ (80144e0 <__gethex+0x2b0>)
 8014434:	9303      	str	r3, [sp, #12]
 8014436:	2201      	movs	r2, #1
 8014438:	4630      	mov	r0, r6
 801443a:	f7fc fe54 	bl	80110e6 <strncmp>
 801443e:	9b03      	ldr	r3, [sp, #12]
 8014440:	2800      	cmp	r0, #0
 8014442:	d1e1      	bne.n	8014408 <__gethex+0x1d8>
 8014444:	e7a2      	b.n	801438c <__gethex+0x15c>
 8014446:	1ea9      	subs	r1, r5, #2
 8014448:	4620      	mov	r0, r4
 801444a:	f7fe fa64 	bl	8012916 <__any_on>
 801444e:	2800      	cmp	r0, #0
 8014450:	d0c2      	beq.n	80143d8 <__gethex+0x1a8>
 8014452:	f04f 0903 	mov.w	r9, #3
 8014456:	e7c1      	b.n	80143dc <__gethex+0x1ac>
 8014458:	da09      	bge.n	801446e <__gethex+0x23e>
 801445a:	1b75      	subs	r5, r6, r5
 801445c:	4621      	mov	r1, r4
 801445e:	9801      	ldr	r0, [sp, #4]
 8014460:	462a      	mov	r2, r5
 8014462:	f7fe f81f 	bl	80124a4 <__lshift>
 8014466:	1b7f      	subs	r7, r7, r5
 8014468:	4604      	mov	r4, r0
 801446a:	f100 0a14 	add.w	sl, r0, #20
 801446e:	f04f 0900 	mov.w	r9, #0
 8014472:	e7b8      	b.n	80143e6 <__gethex+0x1b6>
 8014474:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014478:	42bd      	cmp	r5, r7
 801447a:	dd6f      	ble.n	801455c <__gethex+0x32c>
 801447c:	1bed      	subs	r5, r5, r7
 801447e:	42ae      	cmp	r6, r5
 8014480:	dc34      	bgt.n	80144ec <__gethex+0x2bc>
 8014482:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014486:	2b02      	cmp	r3, #2
 8014488:	d022      	beq.n	80144d0 <__gethex+0x2a0>
 801448a:	2b03      	cmp	r3, #3
 801448c:	d024      	beq.n	80144d8 <__gethex+0x2a8>
 801448e:	2b01      	cmp	r3, #1
 8014490:	d115      	bne.n	80144be <__gethex+0x28e>
 8014492:	42ae      	cmp	r6, r5
 8014494:	d113      	bne.n	80144be <__gethex+0x28e>
 8014496:	2e01      	cmp	r6, #1
 8014498:	d10b      	bne.n	80144b2 <__gethex+0x282>
 801449a:	9a02      	ldr	r2, [sp, #8]
 801449c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80144a0:	6013      	str	r3, [r2, #0]
 80144a2:	2301      	movs	r3, #1
 80144a4:	6123      	str	r3, [r4, #16]
 80144a6:	f8ca 3000 	str.w	r3, [sl]
 80144aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144ac:	2562      	movs	r5, #98	@ 0x62
 80144ae:	601c      	str	r4, [r3, #0]
 80144b0:	e73a      	b.n	8014328 <__gethex+0xf8>
 80144b2:	1e71      	subs	r1, r6, #1
 80144b4:	4620      	mov	r0, r4
 80144b6:	f7fe fa2e 	bl	8012916 <__any_on>
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d1ed      	bne.n	801449a <__gethex+0x26a>
 80144be:	9801      	ldr	r0, [sp, #4]
 80144c0:	4621      	mov	r1, r4
 80144c2:	f7fd fddf 	bl	8012084 <_Bfree>
 80144c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80144c8:	2300      	movs	r3, #0
 80144ca:	6013      	str	r3, [r2, #0]
 80144cc:	2550      	movs	r5, #80	@ 0x50
 80144ce:	e72b      	b.n	8014328 <__gethex+0xf8>
 80144d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d1f3      	bne.n	80144be <__gethex+0x28e>
 80144d6:	e7e0      	b.n	801449a <__gethex+0x26a>
 80144d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d1dd      	bne.n	801449a <__gethex+0x26a>
 80144de:	e7ee      	b.n	80144be <__gethex+0x28e>
 80144e0:	0801691a 	.word	0x0801691a
 80144e4:	080168b0 	.word	0x080168b0
 80144e8:	0801693f 	.word	0x0801693f
 80144ec:	1e6f      	subs	r7, r5, #1
 80144ee:	f1b9 0f00 	cmp.w	r9, #0
 80144f2:	d130      	bne.n	8014556 <__gethex+0x326>
 80144f4:	b127      	cbz	r7, 8014500 <__gethex+0x2d0>
 80144f6:	4639      	mov	r1, r7
 80144f8:	4620      	mov	r0, r4
 80144fa:	f7fe fa0c 	bl	8012916 <__any_on>
 80144fe:	4681      	mov	r9, r0
 8014500:	117a      	asrs	r2, r7, #5
 8014502:	2301      	movs	r3, #1
 8014504:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014508:	f007 071f 	and.w	r7, r7, #31
 801450c:	40bb      	lsls	r3, r7
 801450e:	4213      	tst	r3, r2
 8014510:	4629      	mov	r1, r5
 8014512:	4620      	mov	r0, r4
 8014514:	bf18      	it	ne
 8014516:	f049 0902 	orrne.w	r9, r9, #2
 801451a:	f7ff fe21 	bl	8014160 <rshift>
 801451e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014522:	1b76      	subs	r6, r6, r5
 8014524:	2502      	movs	r5, #2
 8014526:	f1b9 0f00 	cmp.w	r9, #0
 801452a:	d047      	beq.n	80145bc <__gethex+0x38c>
 801452c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014530:	2b02      	cmp	r3, #2
 8014532:	d015      	beq.n	8014560 <__gethex+0x330>
 8014534:	2b03      	cmp	r3, #3
 8014536:	d017      	beq.n	8014568 <__gethex+0x338>
 8014538:	2b01      	cmp	r3, #1
 801453a:	d109      	bne.n	8014550 <__gethex+0x320>
 801453c:	f019 0f02 	tst.w	r9, #2
 8014540:	d006      	beq.n	8014550 <__gethex+0x320>
 8014542:	f8da 3000 	ldr.w	r3, [sl]
 8014546:	ea49 0903 	orr.w	r9, r9, r3
 801454a:	f019 0f01 	tst.w	r9, #1
 801454e:	d10e      	bne.n	801456e <__gethex+0x33e>
 8014550:	f045 0510 	orr.w	r5, r5, #16
 8014554:	e032      	b.n	80145bc <__gethex+0x38c>
 8014556:	f04f 0901 	mov.w	r9, #1
 801455a:	e7d1      	b.n	8014500 <__gethex+0x2d0>
 801455c:	2501      	movs	r5, #1
 801455e:	e7e2      	b.n	8014526 <__gethex+0x2f6>
 8014560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014562:	f1c3 0301 	rsb	r3, r3, #1
 8014566:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801456a:	2b00      	cmp	r3, #0
 801456c:	d0f0      	beq.n	8014550 <__gethex+0x320>
 801456e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014572:	f104 0314 	add.w	r3, r4, #20
 8014576:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801457a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801457e:	f04f 0c00 	mov.w	ip, #0
 8014582:	4618      	mov	r0, r3
 8014584:	f853 2b04 	ldr.w	r2, [r3], #4
 8014588:	f1b2 3fff 	cmp.w	r2, #4294967295
 801458c:	d01b      	beq.n	80145c6 <__gethex+0x396>
 801458e:	3201      	adds	r2, #1
 8014590:	6002      	str	r2, [r0, #0]
 8014592:	2d02      	cmp	r5, #2
 8014594:	f104 0314 	add.w	r3, r4, #20
 8014598:	d13c      	bne.n	8014614 <__gethex+0x3e4>
 801459a:	f8d8 2000 	ldr.w	r2, [r8]
 801459e:	3a01      	subs	r2, #1
 80145a0:	42b2      	cmp	r2, r6
 80145a2:	d109      	bne.n	80145b8 <__gethex+0x388>
 80145a4:	1171      	asrs	r1, r6, #5
 80145a6:	2201      	movs	r2, #1
 80145a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145ac:	f006 061f 	and.w	r6, r6, #31
 80145b0:	fa02 f606 	lsl.w	r6, r2, r6
 80145b4:	421e      	tst	r6, r3
 80145b6:	d13a      	bne.n	801462e <__gethex+0x3fe>
 80145b8:	f045 0520 	orr.w	r5, r5, #32
 80145bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145be:	601c      	str	r4, [r3, #0]
 80145c0:	9b02      	ldr	r3, [sp, #8]
 80145c2:	601f      	str	r7, [r3, #0]
 80145c4:	e6b0      	b.n	8014328 <__gethex+0xf8>
 80145c6:	4299      	cmp	r1, r3
 80145c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80145cc:	d8d9      	bhi.n	8014582 <__gethex+0x352>
 80145ce:	68a3      	ldr	r3, [r4, #8]
 80145d0:	459b      	cmp	fp, r3
 80145d2:	db17      	blt.n	8014604 <__gethex+0x3d4>
 80145d4:	6861      	ldr	r1, [r4, #4]
 80145d6:	9801      	ldr	r0, [sp, #4]
 80145d8:	3101      	adds	r1, #1
 80145da:	f7fd fd13 	bl	8012004 <_Balloc>
 80145de:	4681      	mov	r9, r0
 80145e0:	b918      	cbnz	r0, 80145ea <__gethex+0x3ba>
 80145e2:	4b1a      	ldr	r3, [pc, #104]	@ (801464c <__gethex+0x41c>)
 80145e4:	4602      	mov	r2, r0
 80145e6:	2184      	movs	r1, #132	@ 0x84
 80145e8:	e6c5      	b.n	8014376 <__gethex+0x146>
 80145ea:	6922      	ldr	r2, [r4, #16]
 80145ec:	3202      	adds	r2, #2
 80145ee:	f104 010c 	add.w	r1, r4, #12
 80145f2:	0092      	lsls	r2, r2, #2
 80145f4:	300c      	adds	r0, #12
 80145f6:	f7fc fe44 	bl	8011282 <memcpy>
 80145fa:	4621      	mov	r1, r4
 80145fc:	9801      	ldr	r0, [sp, #4]
 80145fe:	f7fd fd41 	bl	8012084 <_Bfree>
 8014602:	464c      	mov	r4, r9
 8014604:	6923      	ldr	r3, [r4, #16]
 8014606:	1c5a      	adds	r2, r3, #1
 8014608:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801460c:	6122      	str	r2, [r4, #16]
 801460e:	2201      	movs	r2, #1
 8014610:	615a      	str	r2, [r3, #20]
 8014612:	e7be      	b.n	8014592 <__gethex+0x362>
 8014614:	6922      	ldr	r2, [r4, #16]
 8014616:	455a      	cmp	r2, fp
 8014618:	dd0b      	ble.n	8014632 <__gethex+0x402>
 801461a:	2101      	movs	r1, #1
 801461c:	4620      	mov	r0, r4
 801461e:	f7ff fd9f 	bl	8014160 <rshift>
 8014622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014626:	3701      	adds	r7, #1
 8014628:	42bb      	cmp	r3, r7
 801462a:	f6ff aee0 	blt.w	80143ee <__gethex+0x1be>
 801462e:	2501      	movs	r5, #1
 8014630:	e7c2      	b.n	80145b8 <__gethex+0x388>
 8014632:	f016 061f 	ands.w	r6, r6, #31
 8014636:	d0fa      	beq.n	801462e <__gethex+0x3fe>
 8014638:	4453      	add	r3, sl
 801463a:	f1c6 0620 	rsb	r6, r6, #32
 801463e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014642:	f7fd fdd1 	bl	80121e8 <__hi0bits>
 8014646:	42b0      	cmp	r0, r6
 8014648:	dbe7      	blt.n	801461a <__gethex+0x3ea>
 801464a:	e7f0      	b.n	801462e <__gethex+0x3fe>
 801464c:	080168b0 	.word	0x080168b0

08014650 <L_shift>:
 8014650:	f1c2 0208 	rsb	r2, r2, #8
 8014654:	0092      	lsls	r2, r2, #2
 8014656:	b570      	push	{r4, r5, r6, lr}
 8014658:	f1c2 0620 	rsb	r6, r2, #32
 801465c:	6843      	ldr	r3, [r0, #4]
 801465e:	6804      	ldr	r4, [r0, #0]
 8014660:	fa03 f506 	lsl.w	r5, r3, r6
 8014664:	432c      	orrs	r4, r5
 8014666:	40d3      	lsrs	r3, r2
 8014668:	6004      	str	r4, [r0, #0]
 801466a:	f840 3f04 	str.w	r3, [r0, #4]!
 801466e:	4288      	cmp	r0, r1
 8014670:	d3f4      	bcc.n	801465c <L_shift+0xc>
 8014672:	bd70      	pop	{r4, r5, r6, pc}

08014674 <__match>:
 8014674:	b530      	push	{r4, r5, lr}
 8014676:	6803      	ldr	r3, [r0, #0]
 8014678:	3301      	adds	r3, #1
 801467a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801467e:	b914      	cbnz	r4, 8014686 <__match+0x12>
 8014680:	6003      	str	r3, [r0, #0]
 8014682:	2001      	movs	r0, #1
 8014684:	bd30      	pop	{r4, r5, pc}
 8014686:	f813 2b01 	ldrb.w	r2, [r3], #1
 801468a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801468e:	2d19      	cmp	r5, #25
 8014690:	bf98      	it	ls
 8014692:	3220      	addls	r2, #32
 8014694:	42a2      	cmp	r2, r4
 8014696:	d0f0      	beq.n	801467a <__match+0x6>
 8014698:	2000      	movs	r0, #0
 801469a:	e7f3      	b.n	8014684 <__match+0x10>

0801469c <__hexnan>:
 801469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a0:	680b      	ldr	r3, [r1, #0]
 80146a2:	6801      	ldr	r1, [r0, #0]
 80146a4:	115e      	asrs	r6, r3, #5
 80146a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80146aa:	f013 031f 	ands.w	r3, r3, #31
 80146ae:	b087      	sub	sp, #28
 80146b0:	bf18      	it	ne
 80146b2:	3604      	addne	r6, #4
 80146b4:	2500      	movs	r5, #0
 80146b6:	1f37      	subs	r7, r6, #4
 80146b8:	4682      	mov	sl, r0
 80146ba:	4690      	mov	r8, r2
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	f846 5c04 	str.w	r5, [r6, #-4]
 80146c2:	46b9      	mov	r9, r7
 80146c4:	463c      	mov	r4, r7
 80146c6:	9502      	str	r5, [sp, #8]
 80146c8:	46ab      	mov	fp, r5
 80146ca:	784a      	ldrb	r2, [r1, #1]
 80146cc:	1c4b      	adds	r3, r1, #1
 80146ce:	9303      	str	r3, [sp, #12]
 80146d0:	b342      	cbz	r2, 8014724 <__hexnan+0x88>
 80146d2:	4610      	mov	r0, r2
 80146d4:	9105      	str	r1, [sp, #20]
 80146d6:	9204      	str	r2, [sp, #16]
 80146d8:	f7ff fd94 	bl	8014204 <__hexdig_fun>
 80146dc:	2800      	cmp	r0, #0
 80146de:	d151      	bne.n	8014784 <__hexnan+0xe8>
 80146e0:	9a04      	ldr	r2, [sp, #16]
 80146e2:	9905      	ldr	r1, [sp, #20]
 80146e4:	2a20      	cmp	r2, #32
 80146e6:	d818      	bhi.n	801471a <__hexnan+0x7e>
 80146e8:	9b02      	ldr	r3, [sp, #8]
 80146ea:	459b      	cmp	fp, r3
 80146ec:	dd13      	ble.n	8014716 <__hexnan+0x7a>
 80146ee:	454c      	cmp	r4, r9
 80146f0:	d206      	bcs.n	8014700 <__hexnan+0x64>
 80146f2:	2d07      	cmp	r5, #7
 80146f4:	dc04      	bgt.n	8014700 <__hexnan+0x64>
 80146f6:	462a      	mov	r2, r5
 80146f8:	4649      	mov	r1, r9
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7ff ffa8 	bl	8014650 <L_shift>
 8014700:	4544      	cmp	r4, r8
 8014702:	d952      	bls.n	80147aa <__hexnan+0x10e>
 8014704:	2300      	movs	r3, #0
 8014706:	f1a4 0904 	sub.w	r9, r4, #4
 801470a:	f844 3c04 	str.w	r3, [r4, #-4]
 801470e:	f8cd b008 	str.w	fp, [sp, #8]
 8014712:	464c      	mov	r4, r9
 8014714:	461d      	mov	r5, r3
 8014716:	9903      	ldr	r1, [sp, #12]
 8014718:	e7d7      	b.n	80146ca <__hexnan+0x2e>
 801471a:	2a29      	cmp	r2, #41	@ 0x29
 801471c:	d157      	bne.n	80147ce <__hexnan+0x132>
 801471e:	3102      	adds	r1, #2
 8014720:	f8ca 1000 	str.w	r1, [sl]
 8014724:	f1bb 0f00 	cmp.w	fp, #0
 8014728:	d051      	beq.n	80147ce <__hexnan+0x132>
 801472a:	454c      	cmp	r4, r9
 801472c:	d206      	bcs.n	801473c <__hexnan+0xa0>
 801472e:	2d07      	cmp	r5, #7
 8014730:	dc04      	bgt.n	801473c <__hexnan+0xa0>
 8014732:	462a      	mov	r2, r5
 8014734:	4649      	mov	r1, r9
 8014736:	4620      	mov	r0, r4
 8014738:	f7ff ff8a 	bl	8014650 <L_shift>
 801473c:	4544      	cmp	r4, r8
 801473e:	d936      	bls.n	80147ae <__hexnan+0x112>
 8014740:	f1a8 0204 	sub.w	r2, r8, #4
 8014744:	4623      	mov	r3, r4
 8014746:	f853 1b04 	ldr.w	r1, [r3], #4
 801474a:	f842 1f04 	str.w	r1, [r2, #4]!
 801474e:	429f      	cmp	r7, r3
 8014750:	d2f9      	bcs.n	8014746 <__hexnan+0xaa>
 8014752:	1b3b      	subs	r3, r7, r4
 8014754:	f023 0303 	bic.w	r3, r3, #3
 8014758:	3304      	adds	r3, #4
 801475a:	3401      	adds	r4, #1
 801475c:	3e03      	subs	r6, #3
 801475e:	42b4      	cmp	r4, r6
 8014760:	bf88      	it	hi
 8014762:	2304      	movhi	r3, #4
 8014764:	4443      	add	r3, r8
 8014766:	2200      	movs	r2, #0
 8014768:	f843 2b04 	str.w	r2, [r3], #4
 801476c:	429f      	cmp	r7, r3
 801476e:	d2fb      	bcs.n	8014768 <__hexnan+0xcc>
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	b91b      	cbnz	r3, 801477c <__hexnan+0xe0>
 8014774:	4547      	cmp	r7, r8
 8014776:	d128      	bne.n	80147ca <__hexnan+0x12e>
 8014778:	2301      	movs	r3, #1
 801477a:	603b      	str	r3, [r7, #0]
 801477c:	2005      	movs	r0, #5
 801477e:	b007      	add	sp, #28
 8014780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014784:	3501      	adds	r5, #1
 8014786:	2d08      	cmp	r5, #8
 8014788:	f10b 0b01 	add.w	fp, fp, #1
 801478c:	dd06      	ble.n	801479c <__hexnan+0x100>
 801478e:	4544      	cmp	r4, r8
 8014790:	d9c1      	bls.n	8014716 <__hexnan+0x7a>
 8014792:	2300      	movs	r3, #0
 8014794:	f844 3c04 	str.w	r3, [r4, #-4]
 8014798:	2501      	movs	r5, #1
 801479a:	3c04      	subs	r4, #4
 801479c:	6822      	ldr	r2, [r4, #0]
 801479e:	f000 000f 	and.w	r0, r0, #15
 80147a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80147a6:	6020      	str	r0, [r4, #0]
 80147a8:	e7b5      	b.n	8014716 <__hexnan+0x7a>
 80147aa:	2508      	movs	r5, #8
 80147ac:	e7b3      	b.n	8014716 <__hexnan+0x7a>
 80147ae:	9b01      	ldr	r3, [sp, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d0dd      	beq.n	8014770 <__hexnan+0xd4>
 80147b4:	f1c3 0320 	rsb	r3, r3, #32
 80147b8:	f04f 32ff 	mov.w	r2, #4294967295
 80147bc:	40da      	lsrs	r2, r3
 80147be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80147c2:	4013      	ands	r3, r2
 80147c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80147c8:	e7d2      	b.n	8014770 <__hexnan+0xd4>
 80147ca:	3f04      	subs	r7, #4
 80147cc:	e7d0      	b.n	8014770 <__hexnan+0xd4>
 80147ce:	2004      	movs	r0, #4
 80147d0:	e7d5      	b.n	801477e <__hexnan+0xe2>

080147d2 <__ascii_mbtowc>:
 80147d2:	b082      	sub	sp, #8
 80147d4:	b901      	cbnz	r1, 80147d8 <__ascii_mbtowc+0x6>
 80147d6:	a901      	add	r1, sp, #4
 80147d8:	b142      	cbz	r2, 80147ec <__ascii_mbtowc+0x1a>
 80147da:	b14b      	cbz	r3, 80147f0 <__ascii_mbtowc+0x1e>
 80147dc:	7813      	ldrb	r3, [r2, #0]
 80147de:	600b      	str	r3, [r1, #0]
 80147e0:	7812      	ldrb	r2, [r2, #0]
 80147e2:	1e10      	subs	r0, r2, #0
 80147e4:	bf18      	it	ne
 80147e6:	2001      	movne	r0, #1
 80147e8:	b002      	add	sp, #8
 80147ea:	4770      	bx	lr
 80147ec:	4610      	mov	r0, r2
 80147ee:	e7fb      	b.n	80147e8 <__ascii_mbtowc+0x16>
 80147f0:	f06f 0001 	mvn.w	r0, #1
 80147f4:	e7f8      	b.n	80147e8 <__ascii_mbtowc+0x16>

080147f6 <_malloc_usable_size_r>:
 80147f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147fa:	1f18      	subs	r0, r3, #4
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	bfbc      	itt	lt
 8014800:	580b      	ldrlt	r3, [r1, r0]
 8014802:	18c0      	addlt	r0, r0, r3
 8014804:	4770      	bx	lr
	...

08014808 <_strtoul_l.isra.0>:
 8014808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801480c:	4e34      	ldr	r6, [pc, #208]	@ (80148e0 <_strtoul_l.isra.0+0xd8>)
 801480e:	4686      	mov	lr, r0
 8014810:	460d      	mov	r5, r1
 8014812:	4628      	mov	r0, r5
 8014814:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014818:	5d37      	ldrb	r7, [r6, r4]
 801481a:	f017 0708 	ands.w	r7, r7, #8
 801481e:	d1f8      	bne.n	8014812 <_strtoul_l.isra.0+0xa>
 8014820:	2c2d      	cmp	r4, #45	@ 0x2d
 8014822:	d110      	bne.n	8014846 <_strtoul_l.isra.0+0x3e>
 8014824:	782c      	ldrb	r4, [r5, #0]
 8014826:	2701      	movs	r7, #1
 8014828:	1c85      	adds	r5, r0, #2
 801482a:	f033 0010 	bics.w	r0, r3, #16
 801482e:	d115      	bne.n	801485c <_strtoul_l.isra.0+0x54>
 8014830:	2c30      	cmp	r4, #48	@ 0x30
 8014832:	d10d      	bne.n	8014850 <_strtoul_l.isra.0+0x48>
 8014834:	7828      	ldrb	r0, [r5, #0]
 8014836:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801483a:	2858      	cmp	r0, #88	@ 0x58
 801483c:	d108      	bne.n	8014850 <_strtoul_l.isra.0+0x48>
 801483e:	786c      	ldrb	r4, [r5, #1]
 8014840:	3502      	adds	r5, #2
 8014842:	2310      	movs	r3, #16
 8014844:	e00a      	b.n	801485c <_strtoul_l.isra.0+0x54>
 8014846:	2c2b      	cmp	r4, #43	@ 0x2b
 8014848:	bf04      	itt	eq
 801484a:	782c      	ldrbeq	r4, [r5, #0]
 801484c:	1c85      	addeq	r5, r0, #2
 801484e:	e7ec      	b.n	801482a <_strtoul_l.isra.0+0x22>
 8014850:	2b00      	cmp	r3, #0
 8014852:	d1f6      	bne.n	8014842 <_strtoul_l.isra.0+0x3a>
 8014854:	2c30      	cmp	r4, #48	@ 0x30
 8014856:	bf14      	ite	ne
 8014858:	230a      	movne	r3, #10
 801485a:	2308      	moveq	r3, #8
 801485c:	f04f 38ff 	mov.w	r8, #4294967295
 8014860:	2600      	movs	r6, #0
 8014862:	fbb8 f8f3 	udiv	r8, r8, r3
 8014866:	fb03 f908 	mul.w	r9, r3, r8
 801486a:	ea6f 0909 	mvn.w	r9, r9
 801486e:	4630      	mov	r0, r6
 8014870:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014874:	f1bc 0f09 	cmp.w	ip, #9
 8014878:	d810      	bhi.n	801489c <_strtoul_l.isra.0+0x94>
 801487a:	4664      	mov	r4, ip
 801487c:	42a3      	cmp	r3, r4
 801487e:	dd1e      	ble.n	80148be <_strtoul_l.isra.0+0xb6>
 8014880:	f1b6 3fff 	cmp.w	r6, #4294967295
 8014884:	d007      	beq.n	8014896 <_strtoul_l.isra.0+0x8e>
 8014886:	4580      	cmp	r8, r0
 8014888:	d316      	bcc.n	80148b8 <_strtoul_l.isra.0+0xb0>
 801488a:	d101      	bne.n	8014890 <_strtoul_l.isra.0+0x88>
 801488c:	45a1      	cmp	r9, r4
 801488e:	db13      	blt.n	80148b8 <_strtoul_l.isra.0+0xb0>
 8014890:	fb00 4003 	mla	r0, r0, r3, r4
 8014894:	2601      	movs	r6, #1
 8014896:	f815 4b01 	ldrb.w	r4, [r5], #1
 801489a:	e7e9      	b.n	8014870 <_strtoul_l.isra.0+0x68>
 801489c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80148a0:	f1bc 0f19 	cmp.w	ip, #25
 80148a4:	d801      	bhi.n	80148aa <_strtoul_l.isra.0+0xa2>
 80148a6:	3c37      	subs	r4, #55	@ 0x37
 80148a8:	e7e8      	b.n	801487c <_strtoul_l.isra.0+0x74>
 80148aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80148ae:	f1bc 0f19 	cmp.w	ip, #25
 80148b2:	d804      	bhi.n	80148be <_strtoul_l.isra.0+0xb6>
 80148b4:	3c57      	subs	r4, #87	@ 0x57
 80148b6:	e7e1      	b.n	801487c <_strtoul_l.isra.0+0x74>
 80148b8:	f04f 36ff 	mov.w	r6, #4294967295
 80148bc:	e7eb      	b.n	8014896 <_strtoul_l.isra.0+0x8e>
 80148be:	1c73      	adds	r3, r6, #1
 80148c0:	d106      	bne.n	80148d0 <_strtoul_l.isra.0+0xc8>
 80148c2:	2322      	movs	r3, #34	@ 0x22
 80148c4:	f8ce 3000 	str.w	r3, [lr]
 80148c8:	4630      	mov	r0, r6
 80148ca:	b932      	cbnz	r2, 80148da <_strtoul_l.isra.0+0xd2>
 80148cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148d0:	b107      	cbz	r7, 80148d4 <_strtoul_l.isra.0+0xcc>
 80148d2:	4240      	negs	r0, r0
 80148d4:	2a00      	cmp	r2, #0
 80148d6:	d0f9      	beq.n	80148cc <_strtoul_l.isra.0+0xc4>
 80148d8:	b106      	cbz	r6, 80148dc <_strtoul_l.isra.0+0xd4>
 80148da:	1e69      	subs	r1, r5, #1
 80148dc:	6011      	str	r1, [r2, #0]
 80148de:	e7f5      	b.n	80148cc <_strtoul_l.isra.0+0xc4>
 80148e0:	080169a0 	.word	0x080169a0

080148e4 <_strtoul_r>:
 80148e4:	f7ff bf90 	b.w	8014808 <_strtoul_l.isra.0>

080148e8 <__ascii_wctomb>:
 80148e8:	4603      	mov	r3, r0
 80148ea:	4608      	mov	r0, r1
 80148ec:	b141      	cbz	r1, 8014900 <__ascii_wctomb+0x18>
 80148ee:	2aff      	cmp	r2, #255	@ 0xff
 80148f0:	d904      	bls.n	80148fc <__ascii_wctomb+0x14>
 80148f2:	228a      	movs	r2, #138	@ 0x8a
 80148f4:	601a      	str	r2, [r3, #0]
 80148f6:	f04f 30ff 	mov.w	r0, #4294967295
 80148fa:	4770      	bx	lr
 80148fc:	700a      	strb	r2, [r1, #0]
 80148fe:	2001      	movs	r0, #1
 8014900:	4770      	bx	lr
	...

08014904 <_init>:
 8014904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014906:	bf00      	nop
 8014908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801490a:	bc08      	pop	{r3}
 801490c:	469e      	mov	lr, r3
 801490e:	4770      	bx	lr

08014910 <_fini>:
 8014910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014912:	bf00      	nop
 8014914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014916:	bc08      	pop	{r3}
 8014918:	469e      	mov	lr, r3
 801491a:	4770      	bx	lr
