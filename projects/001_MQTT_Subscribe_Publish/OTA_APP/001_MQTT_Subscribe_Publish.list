
001_MQTT_Subscribe_Publish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e828  080201d0  080201d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  0802e9f8  0802e9f8  0000f9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f690  0802f690  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f690  0802f690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f698  0802f698  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f698  0802f698  00010698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f69c  0802f69c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0802f6a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e604  200001d8  0802f878  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000904  2000e7dc  0802f878  000117dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b331  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb6  00000000  00000000  0002c539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  000304f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c4  00000000  00000000  00031ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273af  00000000  00000000  00032fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002030a  00000000  00000000  0005a35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e651d  00000000  00000000  0007a665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160b82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac0  00000000  00000000  00160bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00168688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201d0 <__do_global_dtors_aux>:
 80201d0:	b510      	push	{r4, lr}
 80201d2:	4c05      	ldr	r4, [pc, #20]	@ (80201e8 <__do_global_dtors_aux+0x18>)
 80201d4:	7823      	ldrb	r3, [r4, #0]
 80201d6:	b933      	cbnz	r3, 80201e6 <__do_global_dtors_aux+0x16>
 80201d8:	4b04      	ldr	r3, [pc, #16]	@ (80201ec <__do_global_dtors_aux+0x1c>)
 80201da:	b113      	cbz	r3, 80201e2 <__do_global_dtors_aux+0x12>
 80201dc:	4804      	ldr	r0, [pc, #16]	@ (80201f0 <__do_global_dtors_aux+0x20>)
 80201de:	f3af 8000 	nop.w
 80201e2:	2301      	movs	r3, #1
 80201e4:	7023      	strb	r3, [r4, #0]
 80201e6:	bd10      	pop	{r4, pc}
 80201e8:	200001d8 	.word	0x200001d8
 80201ec:	00000000 	.word	0x00000000
 80201f0:	0802e9e0 	.word	0x0802e9e0

080201f4 <frame_dummy>:
 80201f4:	b508      	push	{r3, lr}
 80201f6:	4b03      	ldr	r3, [pc, #12]	@ (8020204 <frame_dummy+0x10>)
 80201f8:	b11b      	cbz	r3, 8020202 <frame_dummy+0xe>
 80201fa:	4903      	ldr	r1, [pc, #12]	@ (8020208 <frame_dummy+0x14>)
 80201fc:	4803      	ldr	r0, [pc, #12]	@ (802020c <frame_dummy+0x18>)
 80201fe:	f3af 8000 	nop.w
 8020202:	bd08      	pop	{r3, pc}
 8020204:	00000000 	.word	0x00000000
 8020208:	200001dc 	.word	0x200001dc
 802020c:	0802e9e0 	.word	0x0802e9e0

08020210 <memchr>:
 8020210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020214:	2a10      	cmp	r2, #16
 8020216:	db2b      	blt.n	8020270 <memchr+0x60>
 8020218:	f010 0f07 	tst.w	r0, #7
 802021c:	d008      	beq.n	8020230 <memchr+0x20>
 802021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020222:	3a01      	subs	r2, #1
 8020224:	428b      	cmp	r3, r1
 8020226:	d02d      	beq.n	8020284 <memchr+0x74>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	b342      	cbz	r2, 8020280 <memchr+0x70>
 802022e:	d1f6      	bne.n	802021e <memchr+0xe>
 8020230:	b4f0      	push	{r4, r5, r6, r7}
 8020232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802023a:	f022 0407 	bic.w	r4, r2, #7
 802023e:	f07f 0700 	mvns.w	r7, #0
 8020242:	2300      	movs	r3, #0
 8020244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020248:	3c08      	subs	r4, #8
 802024a:	ea85 0501 	eor.w	r5, r5, r1
 802024e:	ea86 0601 	eor.w	r6, r6, r1
 8020252:	fa85 f547 	uadd8	r5, r5, r7
 8020256:	faa3 f587 	sel	r5, r3, r7
 802025a:	fa86 f647 	uadd8	r6, r6, r7
 802025e:	faa5 f687 	sel	r6, r5, r7
 8020262:	b98e      	cbnz	r6, 8020288 <memchr+0x78>
 8020264:	d1ee      	bne.n	8020244 <memchr+0x34>
 8020266:	bcf0      	pop	{r4, r5, r6, r7}
 8020268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802026c:	f002 0207 	and.w	r2, r2, #7
 8020270:	b132      	cbz	r2, 8020280 <memchr+0x70>
 8020272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020276:	3a01      	subs	r2, #1
 8020278:	ea83 0301 	eor.w	r3, r3, r1
 802027c:	b113      	cbz	r3, 8020284 <memchr+0x74>
 802027e:	d1f8      	bne.n	8020272 <memchr+0x62>
 8020280:	2000      	movs	r0, #0
 8020282:	4770      	bx	lr
 8020284:	3801      	subs	r0, #1
 8020286:	4770      	bx	lr
 8020288:	2d00      	cmp	r5, #0
 802028a:	bf06      	itte	eq
 802028c:	4635      	moveq	r5, r6
 802028e:	3803      	subeq	r0, #3
 8020290:	3807      	subne	r0, #7
 8020292:	f015 0f01 	tst.w	r5, #1
 8020296:	d107      	bne.n	80202a8 <memchr+0x98>
 8020298:	3001      	adds	r0, #1
 802029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802029e:	bf02      	ittt	eq
 80202a0:	3001      	addeq	r0, #1
 80202a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80202a6:	3001      	addeq	r0, #1
 80202a8:	bcf0      	pop	{r4, r5, r6, r7}
 80202aa:	3801      	subs	r0, #1
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop

080202b0 <strlen>:
 80202b0:	4603      	mov	r3, r0
 80202b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80202b6:	2a00      	cmp	r2, #0
 80202b8:	d1fb      	bne.n	80202b2 <strlen+0x2>
 80202ba:	1a18      	subs	r0, r3, r0
 80202bc:	3801      	subs	r0, #1
 80202be:	4770      	bx	lr

080202c0 <__aeabi_drsub>:
 80202c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80202c4:	e002      	b.n	80202cc <__adddf3>
 80202c6:	bf00      	nop

080202c8 <__aeabi_dsub>:
 80202c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080202cc <__adddf3>:
 80202cc:	b530      	push	{r4, r5, lr}
 80202ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202d6:	ea94 0f05 	teq	r4, r5
 80202da:	bf08      	it	eq
 80202dc:	ea90 0f02 	teqeq	r0, r2
 80202e0:	bf1f      	itttt	ne
 80202e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202f2:	f000 80e2 	beq.w	80204ba <__adddf3+0x1ee>
 80202f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202fe:	bfb8      	it	lt
 8020300:	426d      	neglt	r5, r5
 8020302:	dd0c      	ble.n	802031e <__adddf3+0x52>
 8020304:	442c      	add	r4, r5
 8020306:	ea80 0202 	eor.w	r2, r0, r2
 802030a:	ea81 0303 	eor.w	r3, r1, r3
 802030e:	ea82 0000 	eor.w	r0, r2, r0
 8020312:	ea83 0101 	eor.w	r1, r3, r1
 8020316:	ea80 0202 	eor.w	r2, r0, r2
 802031a:	ea81 0303 	eor.w	r3, r1, r3
 802031e:	2d36      	cmp	r5, #54	@ 0x36
 8020320:	bf88      	it	hi
 8020322:	bd30      	pophi	{r4, r5, pc}
 8020324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8020328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8020330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020334:	d002      	beq.n	802033c <__adddf3+0x70>
 8020336:	4240      	negs	r0, r0
 8020338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8020340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020348:	d002      	beq.n	8020350 <__adddf3+0x84>
 802034a:	4252      	negs	r2, r2
 802034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020350:	ea94 0f05 	teq	r4, r5
 8020354:	f000 80a7 	beq.w	80204a6 <__adddf3+0x1da>
 8020358:	f1a4 0401 	sub.w	r4, r4, #1
 802035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020360:	db0d      	blt.n	802037e <__adddf3+0xb2>
 8020362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020366:	fa22 f205 	lsr.w	r2, r2, r5
 802036a:	1880      	adds	r0, r0, r2
 802036c:	f141 0100 	adc.w	r1, r1, #0
 8020370:	fa03 f20e 	lsl.w	r2, r3, lr
 8020374:	1880      	adds	r0, r0, r2
 8020376:	fa43 f305 	asr.w	r3, r3, r5
 802037a:	4159      	adcs	r1, r3
 802037c:	e00e      	b.n	802039c <__adddf3+0xd0>
 802037e:	f1a5 0520 	sub.w	r5, r5, #32
 8020382:	f10e 0e20 	add.w	lr, lr, #32
 8020386:	2a01      	cmp	r2, #1
 8020388:	fa03 fc0e 	lsl.w	ip, r3, lr
 802038c:	bf28      	it	cs
 802038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020392:	fa43 f305 	asr.w	r3, r3, r5
 8020396:	18c0      	adds	r0, r0, r3
 8020398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80203a0:	d507      	bpl.n	80203b2 <__adddf3+0xe6>
 80203a2:	f04f 0e00 	mov.w	lr, #0
 80203a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80203aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80203ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80203b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80203b6:	d31b      	bcc.n	80203f0 <__adddf3+0x124>
 80203b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80203bc:	d30c      	bcc.n	80203d8 <__adddf3+0x10c>
 80203be:	0849      	lsrs	r1, r1, #1
 80203c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203c8:	f104 0401 	add.w	r4, r4, #1
 80203cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80203d4:	f080 809a 	bcs.w	802050c <__adddf3+0x240>
 80203d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80203dc:	bf08      	it	eq
 80203de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203e2:	f150 0000 	adcs.w	r0, r0, #0
 80203e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203ea:	ea41 0105 	orr.w	r1, r1, r5
 80203ee:	bd30      	pop	{r4, r5, pc}
 80203f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203f4:	4140      	adcs	r0, r0
 80203f6:	eb41 0101 	adc.w	r1, r1, r1
 80203fa:	3c01      	subs	r4, #1
 80203fc:	bf28      	it	cs
 80203fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8020402:	d2e9      	bcs.n	80203d8 <__adddf3+0x10c>
 8020404:	f091 0f00 	teq	r1, #0
 8020408:	bf04      	itt	eq
 802040a:	4601      	moveq	r1, r0
 802040c:	2000      	moveq	r0, #0
 802040e:	fab1 f381 	clz	r3, r1
 8020412:	bf08      	it	eq
 8020414:	3320      	addeq	r3, #32
 8020416:	f1a3 030b 	sub.w	r3, r3, #11
 802041a:	f1b3 0220 	subs.w	r2, r3, #32
 802041e:	da0c      	bge.n	802043a <__adddf3+0x16e>
 8020420:	320c      	adds	r2, #12
 8020422:	dd08      	ble.n	8020436 <__adddf3+0x16a>
 8020424:	f102 0c14 	add.w	ip, r2, #20
 8020428:	f1c2 020c 	rsb	r2, r2, #12
 802042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020430:	fa21 f102 	lsr.w	r1, r1, r2
 8020434:	e00c      	b.n	8020450 <__adddf3+0x184>
 8020436:	f102 0214 	add.w	r2, r2, #20
 802043a:	bfd8      	it	le
 802043c:	f1c2 0c20 	rsble	ip, r2, #32
 8020440:	fa01 f102 	lsl.w	r1, r1, r2
 8020444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020448:	bfdc      	itt	le
 802044a:	ea41 010c 	orrle.w	r1, r1, ip
 802044e:	4090      	lslle	r0, r2
 8020450:	1ae4      	subs	r4, r4, r3
 8020452:	bfa2      	ittt	ge
 8020454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020458:	4329      	orrge	r1, r5
 802045a:	bd30      	popge	{r4, r5, pc}
 802045c:	ea6f 0404 	mvn.w	r4, r4
 8020460:	3c1f      	subs	r4, #31
 8020462:	da1c      	bge.n	802049e <__adddf3+0x1d2>
 8020464:	340c      	adds	r4, #12
 8020466:	dc0e      	bgt.n	8020486 <__adddf3+0x1ba>
 8020468:	f104 0414 	add.w	r4, r4, #20
 802046c:	f1c4 0220 	rsb	r2, r4, #32
 8020470:	fa20 f004 	lsr.w	r0, r0, r4
 8020474:	fa01 f302 	lsl.w	r3, r1, r2
 8020478:	ea40 0003 	orr.w	r0, r0, r3
 802047c:	fa21 f304 	lsr.w	r3, r1, r4
 8020480:	ea45 0103 	orr.w	r1, r5, r3
 8020484:	bd30      	pop	{r4, r5, pc}
 8020486:	f1c4 040c 	rsb	r4, r4, #12
 802048a:	f1c4 0220 	rsb	r2, r4, #32
 802048e:	fa20 f002 	lsr.w	r0, r0, r2
 8020492:	fa01 f304 	lsl.w	r3, r1, r4
 8020496:	ea40 0003 	orr.w	r0, r0, r3
 802049a:	4629      	mov	r1, r5
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	fa21 f004 	lsr.w	r0, r1, r4
 80204a2:	4629      	mov	r1, r5
 80204a4:	bd30      	pop	{r4, r5, pc}
 80204a6:	f094 0f00 	teq	r4, #0
 80204aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80204ae:	bf06      	itte	eq
 80204b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80204b4:	3401      	addeq	r4, #1
 80204b6:	3d01      	subne	r5, #1
 80204b8:	e74e      	b.n	8020358 <__adddf3+0x8c>
 80204ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204be:	bf18      	it	ne
 80204c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204c4:	d029      	beq.n	802051a <__adddf3+0x24e>
 80204c6:	ea94 0f05 	teq	r4, r5
 80204ca:	bf08      	it	eq
 80204cc:	ea90 0f02 	teqeq	r0, r2
 80204d0:	d005      	beq.n	80204de <__adddf3+0x212>
 80204d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204d6:	bf04      	itt	eq
 80204d8:	4619      	moveq	r1, r3
 80204da:	4610      	moveq	r0, r2
 80204dc:	bd30      	pop	{r4, r5, pc}
 80204de:	ea91 0f03 	teq	r1, r3
 80204e2:	bf1e      	ittt	ne
 80204e4:	2100      	movne	r1, #0
 80204e6:	2000      	movne	r0, #0
 80204e8:	bd30      	popne	{r4, r5, pc}
 80204ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ee:	d105      	bne.n	80204fc <__adddf3+0x230>
 80204f0:	0040      	lsls	r0, r0, #1
 80204f2:	4149      	adcs	r1, r1
 80204f4:	bf28      	it	cs
 80204f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80204fa:	bd30      	pop	{r4, r5, pc}
 80204fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8020500:	bf3c      	itt	cc
 8020502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8020506:	bd30      	popcc	{r4, r5, pc}
 8020508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 802050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8020510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8020514:	f04f 0000 	mov.w	r0, #0
 8020518:	bd30      	pop	{r4, r5, pc}
 802051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802051e:	bf1a      	itte	ne
 8020520:	4619      	movne	r1, r3
 8020522:	4610      	movne	r0, r2
 8020524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020528:	bf1c      	itt	ne
 802052a:	460b      	movne	r3, r1
 802052c:	4602      	movne	r2, r0
 802052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020532:	bf06      	itte	eq
 8020534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020538:	ea91 0f03 	teqeq	r1, r3
 802053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8020540:	bd30      	pop	{r4, r5, pc}
 8020542:	bf00      	nop

08020544 <__aeabi_ui2d>:
 8020544:	f090 0f00 	teq	r0, #0
 8020548:	bf04      	itt	eq
 802054a:	2100      	moveq	r1, #0
 802054c:	4770      	bxeq	lr
 802054e:	b530      	push	{r4, r5, lr}
 8020550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020558:	f04f 0500 	mov.w	r5, #0
 802055c:	f04f 0100 	mov.w	r1, #0
 8020560:	e750      	b.n	8020404 <__adddf3+0x138>
 8020562:	bf00      	nop

08020564 <__aeabi_i2d>:
 8020564:	f090 0f00 	teq	r0, #0
 8020568:	bf04      	itt	eq
 802056a:	2100      	moveq	r1, #0
 802056c:	4770      	bxeq	lr
 802056e:	b530      	push	{r4, r5, lr}
 8020570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 802057c:	bf48      	it	mi
 802057e:	4240      	negmi	r0, r0
 8020580:	f04f 0100 	mov.w	r1, #0
 8020584:	e73e      	b.n	8020404 <__adddf3+0x138>
 8020586:	bf00      	nop

08020588 <__aeabi_f2d>:
 8020588:	0042      	lsls	r2, r0, #1
 802058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020596:	bf1f      	itttt	ne
 8020598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 802059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80205a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80205a4:	4770      	bxne	lr
 80205a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80205aa:	bf08      	it	eq
 80205ac:	4770      	bxeq	lr
 80205ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80205b2:	bf04      	itt	eq
 80205b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80205b8:	4770      	bxeq	lr
 80205ba:	b530      	push	{r4, r5, lr}
 80205bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80205c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80205c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80205c8:	e71c      	b.n	8020404 <__adddf3+0x138>
 80205ca:	bf00      	nop

080205cc <__aeabi_ul2d>:
 80205cc:	ea50 0201 	orrs.w	r2, r0, r1
 80205d0:	bf08      	it	eq
 80205d2:	4770      	bxeq	lr
 80205d4:	b530      	push	{r4, r5, lr}
 80205d6:	f04f 0500 	mov.w	r5, #0
 80205da:	e00a      	b.n	80205f2 <__aeabi_l2d+0x16>

080205dc <__aeabi_l2d>:
 80205dc:	ea50 0201 	orrs.w	r2, r0, r1
 80205e0:	bf08      	it	eq
 80205e2:	4770      	bxeq	lr
 80205e4:	b530      	push	{r4, r5, lr}
 80205e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80205ea:	d502      	bpl.n	80205f2 <__aeabi_l2d+0x16>
 80205ec:	4240      	negs	r0, r0
 80205ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80205f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80205fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205fe:	f43f aed8 	beq.w	80203b2 <__adddf3+0xe6>
 8020602:	f04f 0203 	mov.w	r2, #3
 8020606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802060a:	bf18      	it	ne
 802060c:	3203      	addne	r2, #3
 802060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020612:	bf18      	it	ne
 8020614:	3203      	addne	r2, #3
 8020616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802061a:	f1c2 0320 	rsb	r3, r2, #32
 802061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020622:	fa20 f002 	lsr.w	r0, r0, r2
 8020626:	fa01 fe03 	lsl.w	lr, r1, r3
 802062a:	ea40 000e 	orr.w	r0, r0, lr
 802062e:	fa21 f102 	lsr.w	r1, r1, r2
 8020632:	4414      	add	r4, r2
 8020634:	e6bd      	b.n	80203b2 <__adddf3+0xe6>
 8020636:	bf00      	nop

08020638 <__aeabi_dmul>:
 8020638:	b570      	push	{r4, r5, r6, lr}
 802063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 802063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020646:	bf1d      	ittte	ne
 8020648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802064c:	ea94 0f0c 	teqne	r4, ip
 8020650:	ea95 0f0c 	teqne	r5, ip
 8020654:	f000 f8de 	bleq	8020814 <__aeabi_dmul+0x1dc>
 8020658:	442c      	add	r4, r5
 802065a:	ea81 0603 	eor.w	r6, r1, r3
 802065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802066a:	bf18      	it	ne
 802066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020678:	d038      	beq.n	80206ec <__aeabi_dmul+0xb4>
 802067a:	fba0 ce02 	umull	ip, lr, r0, r2
 802067e:	f04f 0500 	mov.w	r5, #0
 8020682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 802068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802068e:	f04f 0600 	mov.w	r6, #0
 8020692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020696:	f09c 0f00 	teq	ip, #0
 802069a:	bf18      	it	ne
 802069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80206a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80206a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80206a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80206ac:	d204      	bcs.n	80206b8 <__aeabi_dmul+0x80>
 80206ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206b2:	416d      	adcs	r5, r5
 80206b4:	eb46 0606 	adc.w	r6, r6, r6
 80206b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80206d0:	bf88      	it	hi
 80206d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80206d6:	d81e      	bhi.n	8020716 <__aeabi_dmul+0xde>
 80206d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80206dc:	bf08      	it	eq
 80206de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206e2:	f150 0000 	adcs.w	r0, r0, #0
 80206e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206ea:	bd70      	pop	{r4, r5, r6, pc}
 80206ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80206f0:	ea46 0101 	orr.w	r1, r6, r1
 80206f4:	ea40 0002 	orr.w	r0, r0, r2
 80206f8:	ea81 0103 	eor.w	r1, r1, r3
 80206fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020700:	bfc2      	ittt	gt
 8020702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802070a:	bd70      	popgt	{r4, r5, r6, pc}
 802070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020710:	f04f 0e00 	mov.w	lr, #0
 8020714:	3c01      	subs	r4, #1
 8020716:	f300 80ab 	bgt.w	8020870 <__aeabi_dmul+0x238>
 802071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 802071e:	bfde      	ittt	le
 8020720:	2000      	movle	r0, #0
 8020722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8020726:	bd70      	pople	{r4, r5, r6, pc}
 8020728:	f1c4 0400 	rsb	r4, r4, #0
 802072c:	3c20      	subs	r4, #32
 802072e:	da35      	bge.n	802079c <__aeabi_dmul+0x164>
 8020730:	340c      	adds	r4, #12
 8020732:	dc1b      	bgt.n	802076c <__aeabi_dmul+0x134>
 8020734:	f104 0414 	add.w	r4, r4, #20
 8020738:	f1c4 0520 	rsb	r5, r4, #32
 802073c:	fa00 f305 	lsl.w	r3, r0, r5
 8020740:	fa20 f004 	lsr.w	r0, r0, r4
 8020744:	fa01 f205 	lsl.w	r2, r1, r5
 8020748:	ea40 0002 	orr.w	r0, r0, r2
 802074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8020750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020758:	fa21 f604 	lsr.w	r6, r1, r4
 802075c:	eb42 0106 	adc.w	r1, r2, r6
 8020760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020764:	bf08      	it	eq
 8020766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802076a:	bd70      	pop	{r4, r5, r6, pc}
 802076c:	f1c4 040c 	rsb	r4, r4, #12
 8020770:	f1c4 0520 	rsb	r5, r4, #32
 8020774:	fa00 f304 	lsl.w	r3, r0, r4
 8020778:	fa20 f005 	lsr.w	r0, r0, r5
 802077c:	fa01 f204 	lsl.w	r2, r1, r4
 8020780:	ea40 0002 	orr.w	r0, r0, r2
 8020784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802078c:	f141 0100 	adc.w	r1, r1, #0
 8020790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020794:	bf08      	it	eq
 8020796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802079a:	bd70      	pop	{r4, r5, r6, pc}
 802079c:	f1c4 0520 	rsb	r5, r4, #32
 80207a0:	fa00 f205 	lsl.w	r2, r0, r5
 80207a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80207a8:	fa20 f304 	lsr.w	r3, r0, r4
 80207ac:	fa01 f205 	lsl.w	r2, r1, r5
 80207b0:	ea43 0302 	orr.w	r3, r3, r2
 80207b4:	fa21 f004 	lsr.w	r0, r1, r4
 80207b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80207bc:	fa21 f204 	lsr.w	r2, r1, r4
 80207c0:	ea20 0002 	bic.w	r0, r0, r2
 80207c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207cc:	bf08      	it	eq
 80207ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207d2:	bd70      	pop	{r4, r5, r6, pc}
 80207d4:	f094 0f00 	teq	r4, #0
 80207d8:	d10f      	bne.n	80207fa <__aeabi_dmul+0x1c2>
 80207da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80207de:	0040      	lsls	r0, r0, #1
 80207e0:	eb41 0101 	adc.w	r1, r1, r1
 80207e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80207e8:	bf08      	it	eq
 80207ea:	3c01      	subeq	r4, #1
 80207ec:	d0f7      	beq.n	80207de <__aeabi_dmul+0x1a6>
 80207ee:	ea41 0106 	orr.w	r1, r1, r6
 80207f2:	f095 0f00 	teq	r5, #0
 80207f6:	bf18      	it	ne
 80207f8:	4770      	bxne	lr
 80207fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80207fe:	0052      	lsls	r2, r2, #1
 8020800:	eb43 0303 	adc.w	r3, r3, r3
 8020804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8020808:	bf08      	it	eq
 802080a:	3d01      	subeq	r5, #1
 802080c:	d0f7      	beq.n	80207fe <__aeabi_dmul+0x1c6>
 802080e:	ea43 0306 	orr.w	r3, r3, r6
 8020812:	4770      	bx	lr
 8020814:	ea94 0f0c 	teq	r4, ip
 8020818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802081c:	bf18      	it	ne
 802081e:	ea95 0f0c 	teqne	r5, ip
 8020822:	d00c      	beq.n	802083e <__aeabi_dmul+0x206>
 8020824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020828:	bf18      	it	ne
 802082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802082e:	d1d1      	bne.n	80207d4 <__aeabi_dmul+0x19c>
 8020830:	ea81 0103 	eor.w	r1, r1, r3
 8020834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020838:	f04f 0000 	mov.w	r0, #0
 802083c:	bd70      	pop	{r4, r5, r6, pc}
 802083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020842:	bf06      	itte	eq
 8020844:	4610      	moveq	r0, r2
 8020846:	4619      	moveq	r1, r3
 8020848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802084c:	d019      	beq.n	8020882 <__aeabi_dmul+0x24a>
 802084e:	ea94 0f0c 	teq	r4, ip
 8020852:	d102      	bne.n	802085a <__aeabi_dmul+0x222>
 8020854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020858:	d113      	bne.n	8020882 <__aeabi_dmul+0x24a>
 802085a:	ea95 0f0c 	teq	r5, ip
 802085e:	d105      	bne.n	802086c <__aeabi_dmul+0x234>
 8020860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020864:	bf1c      	itt	ne
 8020866:	4610      	movne	r0, r2
 8020868:	4619      	movne	r1, r3
 802086a:	d10a      	bne.n	8020882 <__aeabi_dmul+0x24a>
 802086c:	ea81 0103 	eor.w	r1, r1, r3
 8020870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802087c:	f04f 0000 	mov.w	r0, #0
 8020880:	bd70      	pop	{r4, r5, r6, pc}
 8020882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 802088a:	bd70      	pop	{r4, r5, r6, pc}

0802088c <__aeabi_ddiv>:
 802088c:	b570      	push	{r4, r5, r6, lr}
 802088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8020892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802089a:	bf1d      	ittte	ne
 802089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80208a0:	ea94 0f0c 	teqne	r4, ip
 80208a4:	ea95 0f0c 	teqne	r5, ip
 80208a8:	f000 f8a7 	bleq	80209fa <__aeabi_ddiv+0x16e>
 80208ac:	eba4 0405 	sub.w	r4, r4, r5
 80208b0:	ea81 0e03 	eor.w	lr, r1, r3
 80208b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208bc:	f000 8088 	beq.w	80209d0 <__aeabi_ddiv+0x144>
 80208c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80208c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80208e4:	429d      	cmp	r5, r3
 80208e6:	bf08      	it	eq
 80208e8:	4296      	cmpeq	r6, r2
 80208ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80208ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80208f2:	d202      	bcs.n	80208fa <__aeabi_ddiv+0x6e>
 80208f4:	085b      	lsrs	r3, r3, #1
 80208f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fa:	1ab6      	subs	r6, r6, r2
 80208fc:	eb65 0503 	sbc.w	r5, r5, r3
 8020900:	085b      	lsrs	r3, r3, #1
 8020902:	ea4f 0232 	mov.w	r2, r2, rrx
 8020906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 802090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 802090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020916:	bf22      	ittt	cs
 8020918:	1ab6      	subcs	r6, r6, r2
 802091a:	4675      	movcs	r5, lr
 802091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020920:	085b      	lsrs	r3, r3, #1
 8020922:	ea4f 0232 	mov.w	r2, r2, rrx
 8020926:	ebb6 0e02 	subs.w	lr, r6, r2
 802092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802092e:	bf22      	ittt	cs
 8020930:	1ab6      	subcs	r6, r6, r2
 8020932:	4675      	movcs	r5, lr
 8020934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020938:	085b      	lsrs	r3, r3, #1
 802093a:	ea4f 0232 	mov.w	r2, r2, rrx
 802093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020946:	bf22      	ittt	cs
 8020948:	1ab6      	subcs	r6, r6, r2
 802094a:	4675      	movcs	r5, lr
 802094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020950:	085b      	lsrs	r3, r3, #1
 8020952:	ea4f 0232 	mov.w	r2, r2, rrx
 8020956:	ebb6 0e02 	subs.w	lr, r6, r2
 802095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802095e:	bf22      	ittt	cs
 8020960:	1ab6      	subcs	r6, r6, r2
 8020962:	4675      	movcs	r5, lr
 8020964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020968:	ea55 0e06 	orrs.w	lr, r5, r6
 802096c:	d018      	beq.n	80209a0 <__aeabi_ddiv+0x114>
 802096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802098a:	d1c0      	bne.n	802090e <__aeabi_ddiv+0x82>
 802098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020990:	d10b      	bne.n	80209aa <__aeabi_ddiv+0x11e>
 8020992:	ea41 0100 	orr.w	r1, r1, r0
 8020996:	f04f 0000 	mov.w	r0, #0
 802099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802099e:	e7b6      	b.n	802090e <__aeabi_ddiv+0x82>
 80209a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80209a4:	bf04      	itt	eq
 80209a6:	4301      	orreq	r1, r0
 80209a8:	2000      	moveq	r0, #0
 80209aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80209ae:	bf88      	it	hi
 80209b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80209b4:	f63f aeaf 	bhi.w	8020716 <__aeabi_dmul+0xde>
 80209b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209bc:	bf04      	itt	eq
 80209be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209c6:	f150 0000 	adcs.w	r0, r0, #0
 80209ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209ce:	bd70      	pop	{r4, r5, r6, pc}
 80209d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80209d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209dc:	bfc2      	ittt	gt
 80209de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209e6:	bd70      	popgt	{r4, r5, r6, pc}
 80209e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80209ec:	f04f 0e00 	mov.w	lr, #0
 80209f0:	3c01      	subs	r4, #1
 80209f2:	e690      	b.n	8020716 <__aeabi_dmul+0xde>
 80209f4:	ea45 0e06 	orr.w	lr, r5, r6
 80209f8:	e68d      	b.n	8020716 <__aeabi_dmul+0xde>
 80209fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209fe:	ea94 0f0c 	teq	r4, ip
 8020a02:	bf08      	it	eq
 8020a04:	ea95 0f0c 	teqeq	r5, ip
 8020a08:	f43f af3b 	beq.w	8020882 <__aeabi_dmul+0x24a>
 8020a0c:	ea94 0f0c 	teq	r4, ip
 8020a10:	d10a      	bne.n	8020a28 <__aeabi_ddiv+0x19c>
 8020a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a16:	f47f af34 	bne.w	8020882 <__aeabi_dmul+0x24a>
 8020a1a:	ea95 0f0c 	teq	r5, ip
 8020a1e:	f47f af25 	bne.w	802086c <__aeabi_dmul+0x234>
 8020a22:	4610      	mov	r0, r2
 8020a24:	4619      	mov	r1, r3
 8020a26:	e72c      	b.n	8020882 <__aeabi_dmul+0x24a>
 8020a28:	ea95 0f0c 	teq	r5, ip
 8020a2c:	d106      	bne.n	8020a3c <__aeabi_ddiv+0x1b0>
 8020a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a32:	f43f aefd 	beq.w	8020830 <__aeabi_dmul+0x1f8>
 8020a36:	4610      	mov	r0, r2
 8020a38:	4619      	mov	r1, r3
 8020a3a:	e722      	b.n	8020882 <__aeabi_dmul+0x24a>
 8020a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a40:	bf18      	it	ne
 8020a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a46:	f47f aec5 	bne.w	80207d4 <__aeabi_dmul+0x19c>
 8020a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a4e:	f47f af0d 	bne.w	802086c <__aeabi_dmul+0x234>
 8020a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a56:	f47f aeeb 	bne.w	8020830 <__aeabi_dmul+0x1f8>
 8020a5a:	e712      	b.n	8020882 <__aeabi_dmul+0x24a>

08020a5c <__gedf2>:
 8020a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a60:	e006      	b.n	8020a70 <__cmpdf2+0x4>
 8020a62:	bf00      	nop

08020a64 <__ledf2>:
 8020a64:	f04f 0c01 	mov.w	ip, #1
 8020a68:	e002      	b.n	8020a70 <__cmpdf2+0x4>
 8020a6a:	bf00      	nop

08020a6c <__cmpdf2>:
 8020a6c:	f04f 0c01 	mov.w	ip, #1
 8020a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a80:	bf18      	it	ne
 8020a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a86:	d01b      	beq.n	8020ac0 <__cmpdf2+0x54>
 8020a88:	b001      	add	sp, #4
 8020a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a8e:	bf0c      	ite	eq
 8020a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a94:	ea91 0f03 	teqne	r1, r3
 8020a98:	bf02      	ittt	eq
 8020a9a:	ea90 0f02 	teqeq	r0, r2
 8020a9e:	2000      	moveq	r0, #0
 8020aa0:	4770      	bxeq	lr
 8020aa2:	f110 0f00 	cmn.w	r0, #0
 8020aa6:	ea91 0f03 	teq	r1, r3
 8020aaa:	bf58      	it	pl
 8020aac:	4299      	cmppl	r1, r3
 8020aae:	bf08      	it	eq
 8020ab0:	4290      	cmpeq	r0, r2
 8020ab2:	bf2c      	ite	cs
 8020ab4:	17d8      	asrcs	r0, r3, #31
 8020ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020aba:	f040 0001 	orr.w	r0, r0, #1
 8020abe:	4770      	bx	lr
 8020ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ac8:	d102      	bne.n	8020ad0 <__cmpdf2+0x64>
 8020aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020ace:	d107      	bne.n	8020ae0 <__cmpdf2+0x74>
 8020ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ad8:	d1d6      	bne.n	8020a88 <__cmpdf2+0x1c>
 8020ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020ade:	d0d3      	beq.n	8020a88 <__cmpdf2+0x1c>
 8020ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020ae4:	4770      	bx	lr
 8020ae6:	bf00      	nop

08020ae8 <__aeabi_cdrcmple>:
 8020ae8:	4684      	mov	ip, r0
 8020aea:	4610      	mov	r0, r2
 8020aec:	4662      	mov	r2, ip
 8020aee:	468c      	mov	ip, r1
 8020af0:	4619      	mov	r1, r3
 8020af2:	4663      	mov	r3, ip
 8020af4:	e000      	b.n	8020af8 <__aeabi_cdcmpeq>
 8020af6:	bf00      	nop

08020af8 <__aeabi_cdcmpeq>:
 8020af8:	b501      	push	{r0, lr}
 8020afa:	f7ff ffb7 	bl	8020a6c <__cmpdf2>
 8020afe:	2800      	cmp	r0, #0
 8020b00:	bf48      	it	mi
 8020b02:	f110 0f00 	cmnmi.w	r0, #0
 8020b06:	bd01      	pop	{r0, pc}

08020b08 <__aeabi_dcmpeq>:
 8020b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b0c:	f7ff fff4 	bl	8020af8 <__aeabi_cdcmpeq>
 8020b10:	bf0c      	ite	eq
 8020b12:	2001      	moveq	r0, #1
 8020b14:	2000      	movne	r0, #0
 8020b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b1a:	bf00      	nop

08020b1c <__aeabi_dcmplt>:
 8020b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b20:	f7ff ffea 	bl	8020af8 <__aeabi_cdcmpeq>
 8020b24:	bf34      	ite	cc
 8020b26:	2001      	movcc	r0, #1
 8020b28:	2000      	movcs	r0, #0
 8020b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2e:	bf00      	nop

08020b30 <__aeabi_dcmple>:
 8020b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b34:	f7ff ffe0 	bl	8020af8 <__aeabi_cdcmpeq>
 8020b38:	bf94      	ite	ls
 8020b3a:	2001      	movls	r0, #1
 8020b3c:	2000      	movhi	r0, #0
 8020b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b42:	bf00      	nop

08020b44 <__aeabi_dcmpge>:
 8020b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b48:	f7ff ffce 	bl	8020ae8 <__aeabi_cdrcmple>
 8020b4c:	bf94      	ite	ls
 8020b4e:	2001      	movls	r0, #1
 8020b50:	2000      	movhi	r0, #0
 8020b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b56:	bf00      	nop

08020b58 <__aeabi_dcmpgt>:
 8020b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b5c:	f7ff ffc4 	bl	8020ae8 <__aeabi_cdrcmple>
 8020b60:	bf34      	ite	cc
 8020b62:	2001      	movcc	r0, #1
 8020b64:	2000      	movcs	r0, #0
 8020b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b6a:	bf00      	nop

08020b6c <__aeabi_dcmpun>:
 8020b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b74:	d102      	bne.n	8020b7c <__aeabi_dcmpun+0x10>
 8020b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b7a:	d10a      	bne.n	8020b92 <__aeabi_dcmpun+0x26>
 8020b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b84:	d102      	bne.n	8020b8c <__aeabi_dcmpun+0x20>
 8020b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b8a:	d102      	bne.n	8020b92 <__aeabi_dcmpun+0x26>
 8020b8c:	f04f 0000 	mov.w	r0, #0
 8020b90:	4770      	bx	lr
 8020b92:	f04f 0001 	mov.w	r0, #1
 8020b96:	4770      	bx	lr

08020b98 <__aeabi_d2iz>:
 8020b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8020ba0:	d215      	bcs.n	8020bce <__aeabi_d2iz+0x36>
 8020ba2:	d511      	bpl.n	8020bc8 <__aeabi_d2iz+0x30>
 8020ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8020ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bac:	d912      	bls.n	8020bd4 <__aeabi_d2iz+0x3c>
 8020bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8020bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8020bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8020bc2:	bf18      	it	ne
 8020bc4:	4240      	negne	r0, r0
 8020bc6:	4770      	bx	lr
 8020bc8:	f04f 0000 	mov.w	r0, #0
 8020bcc:	4770      	bx	lr
 8020bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bd2:	d105      	bne.n	8020be0 <__aeabi_d2iz+0x48>
 8020bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8020bd8:	bf08      	it	eq
 8020bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8020bde:	4770      	bx	lr
 8020be0:	f04f 0000 	mov.w	r0, #0
 8020be4:	4770      	bx	lr
 8020be6:	bf00      	nop

08020be8 <__aeabi_d2uiz>:
 8020be8:	004a      	lsls	r2, r1, #1
 8020bea:	d211      	bcs.n	8020c10 <__aeabi_d2uiz+0x28>
 8020bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8020bf0:	d211      	bcs.n	8020c16 <__aeabi_d2uiz+0x2e>
 8020bf2:	d50d      	bpl.n	8020c10 <__aeabi_d2uiz+0x28>
 8020bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8020bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bfc:	d40e      	bmi.n	8020c1c <__aeabi_d2uiz+0x34>
 8020bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8020c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8020c0e:	4770      	bx	lr
 8020c10:	f04f 0000 	mov.w	r0, #0
 8020c14:	4770      	bx	lr
 8020c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020c1a:	d102      	bne.n	8020c22 <__aeabi_d2uiz+0x3a>
 8020c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c20:	4770      	bx	lr
 8020c22:	f04f 0000 	mov.w	r0, #0
 8020c26:	4770      	bx	lr

08020c28 <__aeabi_d2f>:
 8020c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8020c30:	bf24      	itt	cs
 8020c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8020c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8020c3a:	d90d      	bls.n	8020c58 <__aeabi_d2f+0x30>
 8020c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8020c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8020c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c50:	bf08      	it	eq
 8020c52:	f020 0001 	biceq.w	r0, r0, #1
 8020c56:	4770      	bx	lr
 8020c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8020c5c:	d121      	bne.n	8020ca2 <__aeabi_d2f+0x7a>
 8020c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8020c62:	bfbc      	itt	lt
 8020c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8020c68:	4770      	bxlt	lr
 8020c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c72:	f1c2 0218 	rsb	r2, r2, #24
 8020c76:	f1c2 0c20 	rsb	ip, r2, #32
 8020c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8020c82:	bf18      	it	ne
 8020c84:	f040 0001 	orrne.w	r0, r0, #1
 8020c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020c94:	ea40 000c 	orr.w	r0, r0, ip
 8020c98:	fa23 f302 	lsr.w	r3, r3, r2
 8020c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020ca0:	e7cc      	b.n	8020c3c <__aeabi_d2f+0x14>
 8020ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020ca6:	d107      	bne.n	8020cb8 <__aeabi_d2f+0x90>
 8020ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020cac:	bf1e      	ittt	ne
 8020cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8020cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8020cb6:	4770      	bxne	lr
 8020cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8020cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8020cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8020cc4:	4770      	bx	lr
 8020cc6:	bf00      	nop

08020cc8 <__aeabi_uldivmod>:
 8020cc8:	b953      	cbnz	r3, 8020ce0 <__aeabi_uldivmod+0x18>
 8020cca:	b94a      	cbnz	r2, 8020ce0 <__aeabi_uldivmod+0x18>
 8020ccc:	2900      	cmp	r1, #0
 8020cce:	bf08      	it	eq
 8020cd0:	2800      	cmpeq	r0, #0
 8020cd2:	bf1c      	itt	ne
 8020cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8020cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8020cdc:	f000 b9be 	b.w	802105c <__aeabi_idiv0>
 8020ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ce8:	f000 f83c 	bl	8020d64 <__udivmoddi4>
 8020cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020cf4:	b004      	add	sp, #16
 8020cf6:	4770      	bx	lr

08020cf8 <__aeabi_d2lz>:
 8020cf8:	b538      	push	{r3, r4, r5, lr}
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	4604      	mov	r4, r0
 8020d00:	460d      	mov	r5, r1
 8020d02:	f7ff ff0b 	bl	8020b1c <__aeabi_dcmplt>
 8020d06:	b928      	cbnz	r0, 8020d14 <__aeabi_d2lz+0x1c>
 8020d08:	4620      	mov	r0, r4
 8020d0a:	4629      	mov	r1, r5
 8020d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d10:	f000 b80a 	b.w	8020d28 <__aeabi_d2ulz>
 8020d14:	4620      	mov	r0, r4
 8020d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8020d1a:	f000 f805 	bl	8020d28 <__aeabi_d2ulz>
 8020d1e:	4240      	negs	r0, r0
 8020d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020d24:	bd38      	pop	{r3, r4, r5, pc}
 8020d26:	bf00      	nop

08020d28 <__aeabi_d2ulz>:
 8020d28:	b5d0      	push	{r4, r6, r7, lr}
 8020d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8020d5c <__aeabi_d2ulz+0x34>)
 8020d2c:	2200      	movs	r2, #0
 8020d2e:	4606      	mov	r6, r0
 8020d30:	460f      	mov	r7, r1
 8020d32:	f7ff fc81 	bl	8020638 <__aeabi_dmul>
 8020d36:	f7ff ff57 	bl	8020be8 <__aeabi_d2uiz>
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	f7ff fc02 	bl	8020544 <__aeabi_ui2d>
 8020d40:	4b07      	ldr	r3, [pc, #28]	@ (8020d60 <__aeabi_d2ulz+0x38>)
 8020d42:	2200      	movs	r2, #0
 8020d44:	f7ff fc78 	bl	8020638 <__aeabi_dmul>
 8020d48:	4602      	mov	r2, r0
 8020d4a:	460b      	mov	r3, r1
 8020d4c:	4630      	mov	r0, r6
 8020d4e:	4639      	mov	r1, r7
 8020d50:	f7ff faba 	bl	80202c8 <__aeabi_dsub>
 8020d54:	f7ff ff48 	bl	8020be8 <__aeabi_d2uiz>
 8020d58:	4621      	mov	r1, r4
 8020d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8020d5c:	3df00000 	.word	0x3df00000
 8020d60:	41f00000 	.word	0x41f00000

08020d64 <__udivmoddi4>:
 8020d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d68:	9d08      	ldr	r5, [sp, #32]
 8020d6a:	468e      	mov	lr, r1
 8020d6c:	4604      	mov	r4, r0
 8020d6e:	4688      	mov	r8, r1
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	d14a      	bne.n	8020e0a <__udivmoddi4+0xa6>
 8020d74:	428a      	cmp	r2, r1
 8020d76:	4617      	mov	r7, r2
 8020d78:	d962      	bls.n	8020e40 <__udivmoddi4+0xdc>
 8020d7a:	fab2 f682 	clz	r6, r2
 8020d7e:	b14e      	cbz	r6, 8020d94 <__udivmoddi4+0x30>
 8020d80:	f1c6 0320 	rsb	r3, r6, #32
 8020d84:	fa01 f806 	lsl.w	r8, r1, r6
 8020d88:	fa20 f303 	lsr.w	r3, r0, r3
 8020d8c:	40b7      	lsls	r7, r6
 8020d8e:	ea43 0808 	orr.w	r8, r3, r8
 8020d92:	40b4      	lsls	r4, r6
 8020d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020d98:	fa1f fc87 	uxth.w	ip, r7
 8020d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8020da0:	0c23      	lsrs	r3, r4, #16
 8020da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8020da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020daa:	fb01 f20c 	mul.w	r2, r1, ip
 8020dae:	429a      	cmp	r2, r3
 8020db0:	d909      	bls.n	8020dc6 <__udivmoddi4+0x62>
 8020db2:	18fb      	adds	r3, r7, r3
 8020db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8020db8:	f080 80ea 	bcs.w	8020f90 <__udivmoddi4+0x22c>
 8020dbc:	429a      	cmp	r2, r3
 8020dbe:	f240 80e7 	bls.w	8020f90 <__udivmoddi4+0x22c>
 8020dc2:	3902      	subs	r1, #2
 8020dc4:	443b      	add	r3, r7
 8020dc6:	1a9a      	subs	r2, r3, r2
 8020dc8:	b2a3      	uxth	r3, r4
 8020dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8020dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8020dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8020dda:	459c      	cmp	ip, r3
 8020ddc:	d909      	bls.n	8020df2 <__udivmoddi4+0x8e>
 8020dde:	18fb      	adds	r3, r7, r3
 8020de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8020de4:	f080 80d6 	bcs.w	8020f94 <__udivmoddi4+0x230>
 8020de8:	459c      	cmp	ip, r3
 8020dea:	f240 80d3 	bls.w	8020f94 <__udivmoddi4+0x230>
 8020dee:	443b      	add	r3, r7
 8020df0:	3802      	subs	r0, #2
 8020df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020df6:	eba3 030c 	sub.w	r3, r3, ip
 8020dfa:	2100      	movs	r1, #0
 8020dfc:	b11d      	cbz	r5, 8020e06 <__udivmoddi4+0xa2>
 8020dfe:	40f3      	lsrs	r3, r6
 8020e00:	2200      	movs	r2, #0
 8020e02:	e9c5 3200 	strd	r3, r2, [r5]
 8020e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e0a:	428b      	cmp	r3, r1
 8020e0c:	d905      	bls.n	8020e1a <__udivmoddi4+0xb6>
 8020e0e:	b10d      	cbz	r5, 8020e14 <__udivmoddi4+0xb0>
 8020e10:	e9c5 0100 	strd	r0, r1, [r5]
 8020e14:	2100      	movs	r1, #0
 8020e16:	4608      	mov	r0, r1
 8020e18:	e7f5      	b.n	8020e06 <__udivmoddi4+0xa2>
 8020e1a:	fab3 f183 	clz	r1, r3
 8020e1e:	2900      	cmp	r1, #0
 8020e20:	d146      	bne.n	8020eb0 <__udivmoddi4+0x14c>
 8020e22:	4573      	cmp	r3, lr
 8020e24:	d302      	bcc.n	8020e2c <__udivmoddi4+0xc8>
 8020e26:	4282      	cmp	r2, r0
 8020e28:	f200 8105 	bhi.w	8021036 <__udivmoddi4+0x2d2>
 8020e2c:	1a84      	subs	r4, r0, r2
 8020e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8020e32:	2001      	movs	r0, #1
 8020e34:	4690      	mov	r8, r2
 8020e36:	2d00      	cmp	r5, #0
 8020e38:	d0e5      	beq.n	8020e06 <__udivmoddi4+0xa2>
 8020e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8020e3e:	e7e2      	b.n	8020e06 <__udivmoddi4+0xa2>
 8020e40:	2a00      	cmp	r2, #0
 8020e42:	f000 8090 	beq.w	8020f66 <__udivmoddi4+0x202>
 8020e46:	fab2 f682 	clz	r6, r2
 8020e4a:	2e00      	cmp	r6, #0
 8020e4c:	f040 80a4 	bne.w	8020f98 <__udivmoddi4+0x234>
 8020e50:	1a8a      	subs	r2, r1, r2
 8020e52:	0c03      	lsrs	r3, r0, #16
 8020e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020e58:	b280      	uxth	r0, r0
 8020e5a:	b2bc      	uxth	r4, r7
 8020e5c:	2101      	movs	r1, #1
 8020e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8020e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8020e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8020e6e:	429a      	cmp	r2, r3
 8020e70:	d907      	bls.n	8020e82 <__udivmoddi4+0x11e>
 8020e72:	18fb      	adds	r3, r7, r3
 8020e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8020e78:	d202      	bcs.n	8020e80 <__udivmoddi4+0x11c>
 8020e7a:	429a      	cmp	r2, r3
 8020e7c:	f200 80e0 	bhi.w	8021040 <__udivmoddi4+0x2dc>
 8020e80:	46c4      	mov	ip, r8
 8020e82:	1a9b      	subs	r3, r3, r2
 8020e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8020e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8020e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8020e90:	fb02 f404 	mul.w	r4, r2, r4
 8020e94:	429c      	cmp	r4, r3
 8020e96:	d907      	bls.n	8020ea8 <__udivmoddi4+0x144>
 8020e98:	18fb      	adds	r3, r7, r3
 8020e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8020e9e:	d202      	bcs.n	8020ea6 <__udivmoddi4+0x142>
 8020ea0:	429c      	cmp	r4, r3
 8020ea2:	f200 80ca 	bhi.w	802103a <__udivmoddi4+0x2d6>
 8020ea6:	4602      	mov	r2, r0
 8020ea8:	1b1b      	subs	r3, r3, r4
 8020eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8020eae:	e7a5      	b.n	8020dfc <__udivmoddi4+0x98>
 8020eb0:	f1c1 0620 	rsb	r6, r1, #32
 8020eb4:	408b      	lsls	r3, r1
 8020eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8020eba:	431f      	orrs	r7, r3
 8020ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8020ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8020ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8020ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8020ecc:	4323      	orrs	r3, r4
 8020ece:	fa00 f801 	lsl.w	r8, r0, r1
 8020ed2:	fa1f fc87 	uxth.w	ip, r7
 8020ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8020eda:	0c1c      	lsrs	r4, r3, #16
 8020edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8020ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8020ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8020ee8:	45a6      	cmp	lr, r4
 8020eea:	fa02 f201 	lsl.w	r2, r2, r1
 8020eee:	d909      	bls.n	8020f04 <__udivmoddi4+0x1a0>
 8020ef0:	193c      	adds	r4, r7, r4
 8020ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8020ef6:	f080 809c 	bcs.w	8021032 <__udivmoddi4+0x2ce>
 8020efa:	45a6      	cmp	lr, r4
 8020efc:	f240 8099 	bls.w	8021032 <__udivmoddi4+0x2ce>
 8020f00:	3802      	subs	r0, #2
 8020f02:	443c      	add	r4, r7
 8020f04:	eba4 040e 	sub.w	r4, r4, lr
 8020f08:	fa1f fe83 	uxth.w	lr, r3
 8020f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8020f10:	fb09 4413 	mls	r4, r9, r3, r4
 8020f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8020f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8020f1c:	45a4      	cmp	ip, r4
 8020f1e:	d908      	bls.n	8020f32 <__udivmoddi4+0x1ce>
 8020f20:	193c      	adds	r4, r7, r4
 8020f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8020f26:	f080 8082 	bcs.w	802102e <__udivmoddi4+0x2ca>
 8020f2a:	45a4      	cmp	ip, r4
 8020f2c:	d97f      	bls.n	802102e <__udivmoddi4+0x2ca>
 8020f2e:	3b02      	subs	r3, #2
 8020f30:	443c      	add	r4, r7
 8020f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8020f36:	eba4 040c 	sub.w	r4, r4, ip
 8020f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8020f3e:	4564      	cmp	r4, ip
 8020f40:	4673      	mov	r3, lr
 8020f42:	46e1      	mov	r9, ip
 8020f44:	d362      	bcc.n	802100c <__udivmoddi4+0x2a8>
 8020f46:	d05f      	beq.n	8021008 <__udivmoddi4+0x2a4>
 8020f48:	b15d      	cbz	r5, 8020f62 <__udivmoddi4+0x1fe>
 8020f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8020f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8020f52:	fa04 f606 	lsl.w	r6, r4, r6
 8020f56:	fa22 f301 	lsr.w	r3, r2, r1
 8020f5a:	431e      	orrs	r6, r3
 8020f5c:	40cc      	lsrs	r4, r1
 8020f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8020f62:	2100      	movs	r1, #0
 8020f64:	e74f      	b.n	8020e06 <__udivmoddi4+0xa2>
 8020f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8020f6a:	0c01      	lsrs	r1, r0, #16
 8020f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8020f70:	b280      	uxth	r0, r0
 8020f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8020f76:	463b      	mov	r3, r7
 8020f78:	4638      	mov	r0, r7
 8020f7a:	463c      	mov	r4, r7
 8020f7c:	46b8      	mov	r8, r7
 8020f7e:	46be      	mov	lr, r7
 8020f80:	2620      	movs	r6, #32
 8020f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8020f86:	eba2 0208 	sub.w	r2, r2, r8
 8020f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8020f8e:	e766      	b.n	8020e5e <__udivmoddi4+0xfa>
 8020f90:	4601      	mov	r1, r0
 8020f92:	e718      	b.n	8020dc6 <__udivmoddi4+0x62>
 8020f94:	4610      	mov	r0, r2
 8020f96:	e72c      	b.n	8020df2 <__udivmoddi4+0x8e>
 8020f98:	f1c6 0220 	rsb	r2, r6, #32
 8020f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8020fa0:	40b7      	lsls	r7, r6
 8020fa2:	40b1      	lsls	r1, r6
 8020fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8020fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020fac:	430a      	orrs	r2, r1
 8020fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8020fb2:	b2bc      	uxth	r4, r7
 8020fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8020fb8:	0c11      	lsrs	r1, r2, #16
 8020fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020fbe:	fb08 f904 	mul.w	r9, r8, r4
 8020fc2:	40b0      	lsls	r0, r6
 8020fc4:	4589      	cmp	r9, r1
 8020fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8020fca:	b280      	uxth	r0, r0
 8020fcc:	d93e      	bls.n	802104c <__udivmoddi4+0x2e8>
 8020fce:	1879      	adds	r1, r7, r1
 8020fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8020fd4:	d201      	bcs.n	8020fda <__udivmoddi4+0x276>
 8020fd6:	4589      	cmp	r9, r1
 8020fd8:	d81f      	bhi.n	802101a <__udivmoddi4+0x2b6>
 8020fda:	eba1 0109 	sub.w	r1, r1, r9
 8020fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8020fe2:	fb09 f804 	mul.w	r8, r9, r4
 8020fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8020fea:	b292      	uxth	r2, r2
 8020fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8020ff0:	4542      	cmp	r2, r8
 8020ff2:	d229      	bcs.n	8021048 <__udivmoddi4+0x2e4>
 8020ff4:	18ba      	adds	r2, r7, r2
 8020ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8020ffa:	d2c4      	bcs.n	8020f86 <__udivmoddi4+0x222>
 8020ffc:	4542      	cmp	r2, r8
 8020ffe:	d2c2      	bcs.n	8020f86 <__udivmoddi4+0x222>
 8021000:	f1a9 0102 	sub.w	r1, r9, #2
 8021004:	443a      	add	r2, r7
 8021006:	e7be      	b.n	8020f86 <__udivmoddi4+0x222>
 8021008:	45f0      	cmp	r8, lr
 802100a:	d29d      	bcs.n	8020f48 <__udivmoddi4+0x1e4>
 802100c:	ebbe 0302 	subs.w	r3, lr, r2
 8021010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8021014:	3801      	subs	r0, #1
 8021016:	46e1      	mov	r9, ip
 8021018:	e796      	b.n	8020f48 <__udivmoddi4+0x1e4>
 802101a:	eba7 0909 	sub.w	r9, r7, r9
 802101e:	4449      	add	r1, r9
 8021020:	f1a8 0c02 	sub.w	ip, r8, #2
 8021024:	fbb1 f9fe 	udiv	r9, r1, lr
 8021028:	fb09 f804 	mul.w	r8, r9, r4
 802102c:	e7db      	b.n	8020fe6 <__udivmoddi4+0x282>
 802102e:	4673      	mov	r3, lr
 8021030:	e77f      	b.n	8020f32 <__udivmoddi4+0x1ce>
 8021032:	4650      	mov	r0, sl
 8021034:	e766      	b.n	8020f04 <__udivmoddi4+0x1a0>
 8021036:	4608      	mov	r0, r1
 8021038:	e6fd      	b.n	8020e36 <__udivmoddi4+0xd2>
 802103a:	443b      	add	r3, r7
 802103c:	3a02      	subs	r2, #2
 802103e:	e733      	b.n	8020ea8 <__udivmoddi4+0x144>
 8021040:	f1ac 0c02 	sub.w	ip, ip, #2
 8021044:	443b      	add	r3, r7
 8021046:	e71c      	b.n	8020e82 <__udivmoddi4+0x11e>
 8021048:	4649      	mov	r1, r9
 802104a:	e79c      	b.n	8020f86 <__udivmoddi4+0x222>
 802104c:	eba1 0109 	sub.w	r1, r1, r9
 8021050:	46c4      	mov	ip, r8
 8021052:	fbb1 f9fe 	udiv	r9, r1, lr
 8021056:	fb09 f804 	mul.w	r8, r9, r4
 802105a:	e7c4      	b.n	8020fe6 <__udivmoddi4+0x282>

0802105c <__aeabi_idiv0>:
 802105c:	4770      	bx	lr
 802105e:	bf00      	nop

08021060 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8021060:	b580      	push	{r7, lr}
 8021062:	b084      	sub	sp, #16
 8021064:	af00      	add	r7, sp, #0
 8021066:	60f8      	str	r0, [r7, #12]
 8021068:	60b9      	str	r1, [r7, #8]
 802106a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	b29a      	uxth	r2, r3
 8021070:	f04f 33ff 	mov.w	r3, #4294967295
 8021074:	68b9      	ldr	r1, [r7, #8]
 8021076:	4804      	ldr	r0, [pc, #16]	@ (8021088 <_write+0x28>)
 8021078:	f004 fa8a 	bl	8025590 <HAL_UART_Transmit>
  return len;
 802107c:	687b      	ldr	r3, [r7, #4]
}
 802107e:	4618      	mov	r0, r3
 8021080:	3710      	adds	r7, #16
 8021082:	46bd      	mov	sp, r7
 8021084:	bd80      	pop	{r7, pc}
 8021086:	bf00      	nop
 8021088:	20000290 	.word	0x20000290

0802108c <mqtt_publish_task>:

void mqtt_publish_task(void *parameters) {
 802108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802108e:	f5ad 7d21 	sub.w	sp, sp, #644	@ 0x284
 8021092:	af04      	add	r7, sp, #16
 8021094:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8021098:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 802109c:	6018      	str	r0, [r3, #0]

  uint8_t humidity = 0;
 802109e:	2300      	movs	r3, #0
 80210a0:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
  float temperature = 0.0;
 80210a4:	f04f 0300 	mov.w	r3, #0
 80210a8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

  mqtt_queue_item_t item = {
 80210ac:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80210b0:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80210b4:	4618      	mov	r0, r3
 80210b6:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 80210ba:	461a      	mov	r2, r3
 80210bc:	2100      	movs	r1, #0
 80210be:	f00a fc9b 	bl	802b9f8 <memset>
 80210c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80210c6:	f5a3 751a 	sub.w	r5, r3, #616	@ 0x268
 80210ca:	4a3a      	ldr	r2, [pc, #232]	@ (80211b4 <mqtt_publish_task+0x128>)
 80210cc:	1c6b      	adds	r3, r5, #1
 80210ce:	6814      	ldr	r4, [r2, #0]
 80210d0:	6850      	ldr	r0, [r2, #4]
 80210d2:	6891      	ldr	r1, [r2, #8]
 80210d4:	68d6      	ldr	r6, [r2, #12]
 80210d6:	601c      	str	r4, [r3, #0]
 80210d8:	6058      	str	r0, [r3, #4]
 80210da:	6099      	str	r1, [r3, #8]
 80210dc:	60de      	str	r6, [r3, #12]
 80210de:	6914      	ldr	r4, [r2, #16]
 80210e0:	6950      	ldr	r0, [r2, #20]
 80210e2:	6991      	ldr	r1, [r2, #24]
 80210e4:	611c      	str	r4, [r3, #16]
 80210e6:	6158      	str	r0, [r3, #20]
 80210e8:	6199      	str	r1, [r3, #24]
 80210ea:	f105 031d 	add.w	r3, r5, #29
 80210ee:	2234      	movs	r2, #52	@ 0x34
 80210f0:	2100      	movs	r1, #0
 80210f2:	4618      	mov	r0, r3
 80210f4:	f00a fc80 	bl	802b9f8 <memset>
 80210f8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80210fc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8021100:	221b      	movs	r2, #27
 8021102:	655a      	str	r2, [r3, #84]	@ 0x54
    .topic_length = strlen(SENSOR_DATA_TOPIC),
  };

  while(1) {
    // Read sensor values
    get_temperature_reading(&temperature);
 8021104:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8021108:	4618      	mov	r0, r3
 802110a:	f006 f8d5 	bl	80272b8 <get_temperature_reading>
    get_humidity_reading(&humidity);
 802110e:	f207 236b 	addw	r3, r7, #619	@ 0x26b
 8021112:	4618      	mov	r0, r3
 8021114:	f006 f90e 	bl	8027334 <get_humidity_reading>

    LogDebug(("Sensor readings: Temperature: %.2fC, Humidity: %d %", temperature, humidity));

    //format the sensor values in JSON format
    size_t payload_len = snprintf((char*)item.payload, sizeof(item.payload),
 8021118:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 802111c:	4618      	mov	r0, r3
 802111e:	f7ff fa33 	bl	8020588 <__aeabi_f2d>
 8021122:	4602      	mov	r2, r0
 8021124:	460b      	mov	r3, r1
 8021126:	f897 126b 	ldrb.w	r1, [r7, #619]	@ 0x26b
 802112a:	460c      	mov	r4, r1
 802112c:	f107 0108 	add.w	r1, r7, #8
 8021130:	f101 0058 	add.w	r0, r1, #88	@ 0x58
 8021134:	9402      	str	r4, [sp, #8]
 8021136:	e9cd 2300 	strd	r2, r3, [sp]
 802113a:	4a1f      	ldr	r2, [pc, #124]	@ (80211b8 <mqtt_publish_task+0x12c>)
 802113c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8021140:	f00a fb10 	bl	802b764 <sniprintf>
 8021144:	4603      	mov	r3, r0
 8021146:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
                         "{\"temp\": %.2f, \"humidity\": %d}", temperature, humidity);

    item.payload_length = payload_len;
 802114a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 802114e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8021152:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8021156:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258

    //post an item to the queue
    if (xQueueSend(mqtt_tx_queue, &item, portMAX_DELAY ) == pdPASS) {
 802115a:	4b18      	ldr	r3, [pc, #96]	@ (80211bc <mqtt_publish_task+0x130>)
 802115c:	6818      	ldr	r0, [r3, #0]
 802115e:	f107 0108 	add.w	r1, r7, #8
 8021162:	2300      	movs	r3, #0
 8021164:	f04f 32ff 	mov.w	r2, #4294967295
 8021168:	f006 fb48 	bl	80277fc <xQueueGenericSend>
 802116c:	4603      	mov	r3, r0
 802116e:	2b01      	cmp	r3, #1
 8021170:	d10d      	bne.n	802118e <mqtt_publish_task+0x102>
      LogInfo(("Queued MQTT publish: Topic='%s'", SENSOR_DATA_TOPIC));
 8021172:	4a13      	ldr	r2, [pc, #76]	@ (80211c0 <mqtt_publish_task+0x134>)
 8021174:	236a      	movs	r3, #106	@ 0x6a
 8021176:	4913      	ldr	r1, [pc, #76]	@ (80211c4 <mqtt_publish_task+0x138>)
 8021178:	4813      	ldr	r0, [pc, #76]	@ (80211c8 <mqtt_publish_task+0x13c>)
 802117a:	f00a fa83 	bl	802b684 <iprintf>
 802117e:	490d      	ldr	r1, [pc, #52]	@ (80211b4 <mqtt_publish_task+0x128>)
 8021180:	4812      	ldr	r0, [pc, #72]	@ (80211cc <mqtt_publish_task+0x140>)
 8021182:	f00a fa7f 	bl	802b684 <iprintf>
 8021186:	4812      	ldr	r0, [pc, #72]	@ (80211d0 <mqtt_publish_task+0x144>)
 8021188:	f00a fae4 	bl	802b754 <puts>
 802118c:	e00c      	b.n	80211a8 <mqtt_publish_task+0x11c>
    } else {
      LogError(("Failed to queue MQTT publish: Topic='%s'", SENSOR_DATA_TOPIC));
 802118e:	4a0c      	ldr	r2, [pc, #48]	@ (80211c0 <mqtt_publish_task+0x134>)
 8021190:	236c      	movs	r3, #108	@ 0x6c
 8021192:	490c      	ldr	r1, [pc, #48]	@ (80211c4 <mqtt_publish_task+0x138>)
 8021194:	480f      	ldr	r0, [pc, #60]	@ (80211d4 <mqtt_publish_task+0x148>)
 8021196:	f00a fa75 	bl	802b684 <iprintf>
 802119a:	4906      	ldr	r1, [pc, #24]	@ (80211b4 <mqtt_publish_task+0x128>)
 802119c:	480e      	ldr	r0, [pc, #56]	@ (80211d8 <mqtt_publish_task+0x14c>)
 802119e:	f00a fa71 	bl	802b684 <iprintf>
 80211a2:	480b      	ldr	r0, [pc, #44]	@ (80211d0 <mqtt_publish_task+0x144>)
 80211a4:	f00a fad6 	bl	802b754 <puts>
    }

    vTaskDelay(pdMS_TO_TICKS(MQTT_PUBLISH_TIME_BETWEEN_MS));
 80211a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80211ac:	f007 f85a 	bl	8028264 <vTaskDelay>
  while(1) {
 80211b0:	e7a8      	b.n	8021104 <mqtt_publish_task+0x78>
 80211b2:	bf00      	nop
 80211b4:	0802ea50 	.word	0x0802ea50
 80211b8:	0802e9f8 	.word	0x0802e9f8
 80211bc:	20000338 	.word	0x20000338
 80211c0:	0802ea24 	.word	0x0802ea24
 80211c4:	0802ea2c 	.word	0x0802ea2c
 80211c8:	0802ea38 	.word	0x0802ea38
 80211cc:	0802ea6c 	.word	0x0802ea6c
 80211d0:	0802ea8c 	.word	0x0802ea8c
 80211d4:	0802ea90 	.word	0x0802ea90
 80211d8:	0802eaa8 	.word	0x0802eaa8

080211dc <mqtt_receive_task>:
  }
}


// this task receives unsolicited mqtt messages from the aws server
void mqtt_receive_task(void *parameters) {
 80211dc:	b580      	push	{r7, lr}
 80211de:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80211e2:	af00      	add	r7, sp, #0
 80211e4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80211e8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80211ec:	6018      	str	r0, [r3, #0]

  mqtt_queue_item_t item = { 0 };
 80211ee:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80211f2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80211f6:	4618      	mov	r0, r3
 80211f8:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 80211fc:	461a      	mov	r2, r3
 80211fe:	2100      	movs	r1, #0
 8021200:	f00a fbfa 	bl	802b9f8 <memset>

  while(1) {

    BaseType_t rc = xQueueReceive(mqtt_rx_queue, &item, portMAX_DELAY);
 8021204:	4b47      	ldr	r3, [pc, #284]	@ (8021324 <mqtt_receive_task+0x148>)
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	f107 010c 	add.w	r1, r7, #12
 802120c:	f04f 32ff 	mov.w	r2, #4294967295
 8021210:	4618      	mov	r0, r3
 8021212:	f006 fbf5 	bl	8027a00 <xQueueReceive>
 8021216:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c

    configASSERT(rc == pdPASS);
 802121a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 802121e:	2b01      	cmp	r3, #1
 8021220:	d00c      	beq.n	802123c <mqtt_receive_task+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8021222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021226:	f383 8811 	msr	BASEPRI, r3
 802122a:	f3bf 8f6f 	isb	sy
 802122e:	f3bf 8f4f 	dsb	sy
 8021232:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8021236:	bf00      	nop
 8021238:	bf00      	nop
 802123a:	e7fd      	b.n	8021238 <mqtt_receive_task+0x5c>

    // Check if both topic and payload contain valid data
    if (item.operation == MQTT_OPERATION_RECEIVE &&
 802123c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8021240:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8021244:	781b      	ldrb	r3, [r3, #0]
 8021246:	2b01      	cmp	r3, #1
 8021248:	d1dc      	bne.n	8021204 <mqtt_receive_task+0x28>
        item.topic_length   > 0 &&
 802124a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 802124e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8021252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if (item.operation == MQTT_OPERATION_RECEIVE &&
 8021254:	2b00      	cmp	r3, #0
 8021256:	d0d5      	beq.n	8021204 <mqtt_receive_task+0x28>
        item.payload_length > 0) {
 8021258:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 802125c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8021260:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
        item.topic_length   > 0 &&
 8021264:	2b00      	cmp	r3, #0
 8021266:	d0cd      	beq.n	8021204 <mqtt_receive_task+0x28>

      if (strstr(item.topic, "/jobs/notify-next") != NULL) {
 8021268:	f107 030c 	add.w	r3, r7, #12
 802126c:	3301      	adds	r3, #1
 802126e:	492e      	ldr	r1, [pc, #184]	@ (8021328 <mqtt_receive_task+0x14c>)
 8021270:	4618      	mov	r0, r3
 8021272:	f00a fbdb 	bl	802ba2c <strstr>
 8021276:	4603      	mov	r3, r0
 8021278:	2b00      	cmp	r3, #0
 802127a:	d019      	beq.n	80212b0 <mqtt_receive_task+0xd4>

         LogInfo(("OTA job notification received."));
 802127c:	4a2b      	ldr	r2, [pc, #172]	@ (802132c <mqtt_receive_task+0x150>)
 802127e:	2386      	movs	r3, #134	@ 0x86
 8021280:	492b      	ldr	r1, [pc, #172]	@ (8021330 <mqtt_receive_task+0x154>)
 8021282:	482c      	ldr	r0, [pc, #176]	@ (8021334 <mqtt_receive_task+0x158>)
 8021284:	f00a f9fe 	bl	802b684 <iprintf>
 8021288:	482b      	ldr	r0, [pc, #172]	@ (8021338 <mqtt_receive_task+0x15c>)
 802128a:	f00a f9fb 	bl	802b684 <iprintf>
 802128e:	482b      	ldr	r0, [pc, #172]	@ (802133c <mqtt_receive_task+0x160>)
 8021290:	f00a fa60 	bl	802b754 <puts>
         LogInfo(("Rebooting to bootloader for OTA update..."));
 8021294:	4a25      	ldr	r2, [pc, #148]	@ (802132c <mqtt_receive_task+0x150>)
 8021296:	2387      	movs	r3, #135	@ 0x87
 8021298:	4925      	ldr	r1, [pc, #148]	@ (8021330 <mqtt_receive_task+0x154>)
 802129a:	4826      	ldr	r0, [pc, #152]	@ (8021334 <mqtt_receive_task+0x158>)
 802129c:	f00a f9f2 	bl	802b684 <iprintf>
 80212a0:	4827      	ldr	r0, [pc, #156]	@ (8021340 <mqtt_receive_task+0x164>)
 80212a2:	f00a f9ef 	bl	802b684 <iprintf>
 80212a6:	4825      	ldr	r0, [pc, #148]	@ (802133c <mqtt_receive_task+0x160>)
 80212a8:	f00a fa54 	bl	802b754 <puts>
         HAL_NVIC_SystemReset();
 80212ac:	f001 f937 	bl	802251e <HAL_NVIC_SystemReset>
      }

      // Log the received message
      LogInfo(("\r\nReceived message:"));
 80212b0:	4a1e      	ldr	r2, [pc, #120]	@ (802132c <mqtt_receive_task+0x150>)
 80212b2:	238c      	movs	r3, #140	@ 0x8c
 80212b4:	491e      	ldr	r1, [pc, #120]	@ (8021330 <mqtt_receive_task+0x154>)
 80212b6:	481f      	ldr	r0, [pc, #124]	@ (8021334 <mqtt_receive_task+0x158>)
 80212b8:	f00a f9e4 	bl	802b684 <iprintf>
 80212bc:	4821      	ldr	r0, [pc, #132]	@ (8021344 <mqtt_receive_task+0x168>)
 80212be:	f00a f9e1 	bl	802b684 <iprintf>
 80212c2:	481e      	ldr	r0, [pc, #120]	@ (802133c <mqtt_receive_task+0x160>)
 80212c4:	f00a fa46 	bl	802b754 <puts>
      LogInfo(("Topic: %.*s", (int)item.topic_length, item.topic));
 80212c8:	4a18      	ldr	r2, [pc, #96]	@ (802132c <mqtt_receive_task+0x150>)
 80212ca:	238d      	movs	r3, #141	@ 0x8d
 80212cc:	4918      	ldr	r1, [pc, #96]	@ (8021330 <mqtt_receive_task+0x154>)
 80212ce:	4819      	ldr	r0, [pc, #100]	@ (8021334 <mqtt_receive_task+0x158>)
 80212d0:	f00a f9d8 	bl	802b684 <iprintf>
 80212d4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80212d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80212dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80212de:	4619      	mov	r1, r3
 80212e0:	f107 030c 	add.w	r3, r7, #12
 80212e4:	3301      	adds	r3, #1
 80212e6:	461a      	mov	r2, r3
 80212e8:	4817      	ldr	r0, [pc, #92]	@ (8021348 <mqtt_receive_task+0x16c>)
 80212ea:	f00a f9cb 	bl	802b684 <iprintf>
 80212ee:	4813      	ldr	r0, [pc, #76]	@ (802133c <mqtt_receive_task+0x160>)
 80212f0:	f00a fa30 	bl	802b754 <puts>
      LogInfo(("Message: %.*s", (int)item.payload_length, item.payload));
 80212f4:	4a0d      	ldr	r2, [pc, #52]	@ (802132c <mqtt_receive_task+0x150>)
 80212f6:	238e      	movs	r3, #142	@ 0x8e
 80212f8:	490d      	ldr	r1, [pc, #52]	@ (8021330 <mqtt_receive_task+0x154>)
 80212fa:	480e      	ldr	r0, [pc, #56]	@ (8021334 <mqtt_receive_task+0x158>)
 80212fc:	f00a f9c2 	bl	802b684 <iprintf>
 8021300:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8021304:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8021308:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 802130c:	4619      	mov	r1, r3
 802130e:	f107 030c 	add.w	r3, r7, #12
 8021312:	3358      	adds	r3, #88	@ 0x58
 8021314:	461a      	mov	r2, r3
 8021316:	480d      	ldr	r0, [pc, #52]	@ (802134c <mqtt_receive_task+0x170>)
 8021318:	f00a f9b4 	bl	802b684 <iprintf>
 802131c:	4807      	ldr	r0, [pc, #28]	@ (802133c <mqtt_receive_task+0x160>)
 802131e:	f00a fa19 	bl	802b754 <puts>
  while(1) {
 8021322:	e76f      	b.n	8021204 <mqtt_receive_task+0x28>
 8021324:	2000033c 	.word	0x2000033c
 8021328:	0802ead4 	.word	0x0802ead4
 802132c:	0802ea24 	.word	0x0802ea24
 8021330:	0802ea2c 	.word	0x0802ea2c
 8021334:	0802ea38 	.word	0x0802ea38
 8021338:	0802eae8 	.word	0x0802eae8
 802133c:	0802ea8c 	.word	0x0802ea8c
 8021340:	0802eb08 	.word	0x0802eb08
 8021344:	0802eb34 	.word	0x0802eb34
 8021348:	0802eb48 	.word	0x0802eb48
 802134c:	0802eb54 	.word	0x0802eb54

08021350 <at_cmd_handle_task>:
    }
  }
}


void at_cmd_handle_task(void *parameters) {
 8021350:	b590      	push	{r4, r7, lr}
 8021352:	f2ad 4de4 	subw	sp, sp, #1252	@ 0x4e4
 8021356:	af02      	add	r7, sp, #8
 8021358:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802135c:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 8021360:	6018      	str	r0, [r3, #0]

  (void)parameters;

  mqtt_queue_item_t item, new_message = { 0 };
 8021362:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021366:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 802136a:	4618      	mov	r0, r3
 802136c:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 8021370:	461a      	mov	r2, r3
 8021372:	2100      	movs	r1, #0
 8021374:	f00a fb40 	bl	802b9f8 <memset>
  mqtt_receive_t mqtt_data = { 0 };
 8021378:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802137c:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8021380:	461a      	mov	r2, r3
 8021382:	2300      	movs	r3, #0
 8021384:	6013      	str	r3, [r2, #0]
 8021386:	6053      	str	r3, [r2, #4]
 8021388:	6093      	str	r3, [r2, #8]
 802138a:	60d3      	str	r3, [r2, #12]
  mqtt_status_t status = MQTT_ERROR;
 802138c:	2300      	movs	r3, #0
 802138e:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7

  static char topic_buffer[MAX_MQTT_TOPIC_SIZE];
  static char payload_buffer[MAX_MQTT_PAYLOAD_SIZE];


  mqtt_data.p_payload = payload_buffer;
 8021392:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021396:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 802139a:	4a9b      	ldr	r2, [pc, #620]	@ (8021608 <at_cmd_handle_task+0x2b8>)
 802139c:	609a      	str	r2, [r3, #8]
  mqtt_data.p_topic = topic_buffer;
 802139e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80213a2:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80213a6:	4a99      	ldr	r2, [pc, #612]	@ (802160c <at_cmd_handle_task+0x2bc>)
 80213a8:	601a      	str	r2, [r3, #0]
  mqtt_data.topic_length = sizeof(topic_buffer);
 80213aa:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80213ae:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80213b2:	2250      	movs	r2, #80	@ 0x50
 80213b4:	605a      	str	r2, [r3, #4]
  mqtt_data.payload_length = sizeof(payload_buffer);
 80213b6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80213ba:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80213be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80213c2:	60da      	str	r2, [r3, #12]

  while(1) {

    //1. De-queue MQTT TX queue
    if (xQueueReceive(mqtt_tx_queue, &item, 0) == pdPASS) {
 80213c4:	4b92      	ldr	r3, [pc, #584]	@ (8021610 <at_cmd_handle_task+0x2c0>)
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	f507 711e 	add.w	r1, r7, #632	@ 0x278
 80213cc:	2200      	movs	r2, #0
 80213ce:	4618      	mov	r0, r3
 80213d0:	f006 fb16 	bl	8027a00 <xQueueReceive>
 80213d4:	4603      	mov	r3, r0
 80213d6:	2b01      	cmp	r3, #1
 80213d8:	f040 80a3 	bne.w	8021522 <at_cmd_handle_task+0x1d2>
      if (item.operation == MQTT_OPERATION_PUBLISH) {
 80213dc:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80213e0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80213e4:	781b      	ldrb	r3, [r3, #0]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d154      	bne.n	8021494 <at_cmd_handle_task+0x144>

        //2. Send MQTT publish AT command using mqtt_publish() (check mqtt_helper.c)
        status = mqtt_publish(item.topic, item.topic_length,
 80213ea:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80213ee:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80213f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80213f4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80213f8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80213fc:	f8d3 4258 	ldr.w	r4, [r3, #600]	@ 0x258
 8021400:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8021404:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8021408:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 802140c:	1c58      	adds	r0, r3, #1
 802140e:	4623      	mov	r3, r4
 8021410:	f008 fe48 	bl	802a0a4 <mqtt_publish>
 8021414:	4603      	mov	r3, r0
 8021416:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7
                              item.payload, item.payload_length);

        if (status == MQTT_SUCCESS) {
 802141a:	f897 34d7 	ldrb.w	r3, [r7, #1239]	@ 0x4d7
 802141e:	2b01      	cmp	r3, #1
 8021420:	d121      	bne.n	8021466 <at_cmd_handle_task+0x116>
          LogInfo(("MQTT Publish successful: Topic='%.*s', Payload='%.*s'",
 8021422:	4a7c      	ldr	r2, [pc, #496]	@ (8021614 <at_cmd_handle_task+0x2c4>)
 8021424:	23b0      	movs	r3, #176	@ 0xb0
 8021426:	497c      	ldr	r1, [pc, #496]	@ (8021618 <at_cmd_handle_task+0x2c8>)
 8021428:	487c      	ldr	r0, [pc, #496]	@ (802161c <at_cmd_handle_task+0x2cc>)
 802142a:	f00a f92b 	bl	802b684 <iprintf>
 802142e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021432:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8021436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021438:	4619      	mov	r1, r3
 802143a:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802143e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8021442:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8021446:	4618      	mov	r0, r3
 8021448:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 802144c:	1c5a      	adds	r2, r3, #1
 802144e:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8021452:	3358      	adds	r3, #88	@ 0x58
 8021454:	9300      	str	r3, [sp, #0]
 8021456:	4603      	mov	r3, r0
 8021458:	4871      	ldr	r0, [pc, #452]	@ (8021620 <at_cmd_handle_task+0x2d0>)
 802145a:	f00a f913 	bl	802b684 <iprintf>
 802145e:	4871      	ldr	r0, [pc, #452]	@ (8021624 <at_cmd_handle_task+0x2d4>)
 8021460:	f00a f978 	bl	802b754 <puts>
 8021464:	e05d      	b.n	8021522 <at_cmd_handle_task+0x1d2>
                   (int)item.topic_length, item.topic,
                   (int)item.payload_length, (char *)item.payload));
        } else  {
          LogError(("MQTT Publish failed: Topic='%.*s'",
 8021466:	4a6b      	ldr	r2, [pc, #428]	@ (8021614 <at_cmd_handle_task+0x2c4>)
 8021468:	23b4      	movs	r3, #180	@ 0xb4
 802146a:	496b      	ldr	r1, [pc, #428]	@ (8021618 <at_cmd_handle_task+0x2c8>)
 802146c:	486e      	ldr	r0, [pc, #440]	@ (8021628 <at_cmd_handle_task+0x2d8>)
 802146e:	f00a f909 	bl	802b684 <iprintf>
 8021472:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021476:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 802147a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802147c:	4619      	mov	r1, r3
 802147e:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8021482:	3301      	adds	r3, #1
 8021484:	461a      	mov	r2, r3
 8021486:	4869      	ldr	r0, [pc, #420]	@ (802162c <at_cmd_handle_task+0x2dc>)
 8021488:	f00a f8fc 	bl	802b684 <iprintf>
 802148c:	4865      	ldr	r0, [pc, #404]	@ (8021624 <at_cmd_handle_task+0x2d4>)
 802148e:	f00a f961 	bl	802b754 <puts>
 8021492:	e046      	b.n	8021522 <at_cmd_handle_task+0x1d2>
                    (int)item.topic_length, item.topic));
        }

      } else if (item.operation == MQTT_OPERATION_SUBSCRIBE) {
 8021494:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021498:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 802149c:	781b      	ldrb	r3, [r3, #0]
 802149e:	2b02      	cmp	r3, #2
 80214a0:	d13f      	bne.n	8021522 <at_cmd_handle_task+0x1d2>

        //2. Send MQTT subscribe AT command using mqtt_subscribe() (check mqtt_helper.c)
        status = mqtt_subscribe(item.topic, item.topic_length);
 80214a2:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80214a6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80214aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80214ac:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80214b0:	3301      	adds	r3, #1
 80214b2:	4611      	mov	r1, r2
 80214b4:	4618      	mov	r0, r3
 80214b6:	f008 fe36 	bl	802a126 <mqtt_subscribe>
 80214ba:	4603      	mov	r3, r0
 80214bc:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7
        if (status == MQTT_SUCCESS) {
 80214c0:	f897 34d7 	ldrb.w	r3, [r7, #1239]	@ 0x4d7
 80214c4:	2b01      	cmp	r3, #1
 80214c6:	d116      	bne.n	80214f6 <at_cmd_handle_task+0x1a6>
            LogInfo(("MQTT Subscribe successful: Topic='%.*s'",
 80214c8:	4a52      	ldr	r2, [pc, #328]	@ (8021614 <at_cmd_handle_task+0x2c4>)
 80214ca:	23bd      	movs	r3, #189	@ 0xbd
 80214cc:	4952      	ldr	r1, [pc, #328]	@ (8021618 <at_cmd_handle_task+0x2c8>)
 80214ce:	4853      	ldr	r0, [pc, #332]	@ (802161c <at_cmd_handle_task+0x2cc>)
 80214d0:	f00a f8d8 	bl	802b684 <iprintf>
 80214d4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80214d8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80214dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80214de:	4619      	mov	r1, r3
 80214e0:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80214e4:	3301      	adds	r3, #1
 80214e6:	461a      	mov	r2, r3
 80214e8:	4851      	ldr	r0, [pc, #324]	@ (8021630 <at_cmd_handle_task+0x2e0>)
 80214ea:	f00a f8cb 	bl	802b684 <iprintf>
 80214ee:	484d      	ldr	r0, [pc, #308]	@ (8021624 <at_cmd_handle_task+0x2d4>)
 80214f0:	f00a f930 	bl	802b754 <puts>
 80214f4:	e015      	b.n	8021522 <at_cmd_handle_task+0x1d2>
                     (int)item.topic_length, item.topic));
        } else {
            LogError(("MQTT Subscribe failed: Topic='%.*s'",
 80214f6:	4a47      	ldr	r2, [pc, #284]	@ (8021614 <at_cmd_handle_task+0x2c4>)
 80214f8:	23c0      	movs	r3, #192	@ 0xc0
 80214fa:	4947      	ldr	r1, [pc, #284]	@ (8021618 <at_cmd_handle_task+0x2c8>)
 80214fc:	484a      	ldr	r0, [pc, #296]	@ (8021628 <at_cmd_handle_task+0x2d8>)
 80214fe:	f00a f8c1 	bl	802b684 <iprintf>
 8021502:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021506:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 802150a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802150c:	4619      	mov	r1, r3
 802150e:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8021512:	3301      	adds	r3, #1
 8021514:	461a      	mov	r2, r3
 8021516:	4847      	ldr	r0, [pc, #284]	@ (8021634 <at_cmd_handle_task+0x2e4>)
 8021518:	f00a f8b4 	bl	802b684 <iprintf>
 802151c:	4841      	ldr	r0, [pc, #260]	@ (8021624 <at_cmd_handle_task+0x2d4>)
 802151e:	f00a f919 	bl	802b754 <puts>
      }
    }


    //3. Check for incoming MQTT data (check esp32_recv_mqtt_data() in esp32_at.c)
    esp32_status_t rx_status = esp32_recv_mqtt_data(&mqtt_data);
 8021522:	f107 030c 	add.w	r3, r7, #12
 8021526:	4618      	mov	r0, r3
 8021528:	f005 fb32 	bl	8026b90 <esp32_recv_mqtt_data>
 802152c:	4603      	mov	r3, r0
 802152e:	f887 34d6 	strb.w	r3, [r7, #1238]	@ 0x4d6

    if (rx_status != ESP32_ERROR && mqtt_data.payload_length > 0) {
 8021532:	f897 34d6 	ldrb.w	r3, [r7, #1238]	@ 0x4d6
 8021536:	2b01      	cmp	r3, #1
 8021538:	f43f af44 	beq.w	80213c4 <at_cmd_handle_task+0x74>
 802153c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021540:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8021544:	68db      	ldr	r3, [r3, #12]
 8021546:	2b00      	cmp	r3, #0
 8021548:	f43f af3c 	beq.w	80213c4 <at_cmd_handle_task+0x74>
      new_message.operation = MQTT_OPERATION_RECEIVE;
 802154c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021550:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8021554:	2201      	movs	r2, #1
 8021556:	701a      	strb	r2, [r3, #0]
      new_message.payload_length = mqtt_data.payload_length;
 8021558:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802155c:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8021560:	68da      	ldr	r2, [r3, #12]
 8021562:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021566:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 802156a:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
      new_message.topic_length = mqtt_data.topic_length;
 802156e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021572:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8021576:	685a      	ldr	r2, [r3, #4]
 8021578:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802157c:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8021580:	655a      	str	r2, [r3, #84]	@ 0x54
      memcpy(new_message.payload, mqtt_data.p_payload, mqtt_data.payload_length);
 8021582:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021586:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 802158a:	6899      	ldr	r1, [r3, #8]
 802158c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8021590:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8021594:	68da      	ldr	r2, [r3, #12]
 8021596:	f107 031c 	add.w	r3, r7, #28
 802159a:	3358      	adds	r3, #88	@ 0x58
 802159c:	4618      	mov	r0, r3
 802159e:	f00a fae2 	bl	802bb66 <memcpy>
      memcpy(new_message.topic, mqtt_data.p_topic, mqtt_data.topic_length);
 80215a2:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80215a6:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80215aa:	6819      	ldr	r1, [r3, #0]
 80215ac:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80215b0:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80215b4:	685a      	ldr	r2, [r3, #4]
 80215b6:	f107 031c 	add.w	r3, r7, #28
 80215ba:	3301      	adds	r3, #1
 80215bc:	4618      	mov	r0, r3
 80215be:	f00a fad2 	bl	802bb66 <memcpy>

      if (xQueueSend(mqtt_rx_queue, &new_message, 0) == pdPASS) {
 80215c2:	4b1d      	ldr	r3, [pc, #116]	@ (8021638 <at_cmd_handle_task+0x2e8>)
 80215c4:	6818      	ldr	r0, [r3, #0]
 80215c6:	f107 011c 	add.w	r1, r7, #28
 80215ca:	2300      	movs	r3, #0
 80215cc:	2200      	movs	r2, #0
 80215ce:	f006 f915 	bl	80277fc <xQueueGenericSend>
 80215d2:	4603      	mov	r3, r0
 80215d4:	2b01      	cmp	r3, #1
 80215d6:	f47f aef5 	bne.w	80213c4 <at_cmd_handle_task+0x74>
          LogInfo(("Queued MQTT receive: Topic='%.*s'",
 80215da:	4a0e      	ldr	r2, [pc, #56]	@ (8021614 <at_cmd_handle_task+0x2c4>)
 80215dc:	23d2      	movs	r3, #210	@ 0xd2
 80215de:	490e      	ldr	r1, [pc, #56]	@ (8021618 <at_cmd_handle_task+0x2c8>)
 80215e0:	480e      	ldr	r0, [pc, #56]	@ (802161c <at_cmd_handle_task+0x2cc>)
 80215e2:	f00a f84f 	bl	802b684 <iprintf>
 80215e6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80215ea:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 80215ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215f0:	4619      	mov	r1, r3
 80215f2:	f107 031c 	add.w	r3, r7, #28
 80215f6:	3301      	adds	r3, #1
 80215f8:	461a      	mov	r2, r3
 80215fa:	4810      	ldr	r0, [pc, #64]	@ (802163c <at_cmd_handle_task+0x2ec>)
 80215fc:	f00a f842 	bl	802b684 <iprintf>
 8021600:	4808      	ldr	r0, [pc, #32]	@ (8021624 <at_cmd_handle_task+0x2d4>)
 8021602:	f00a f8a7 	bl	802b754 <puts>
  while(1) {
 8021606:	e6dd      	b.n	80213c4 <at_cmd_handle_task+0x74>
 8021608:	20000340 	.word	0x20000340
 802160c:	20000540 	.word	0x20000540
 8021610:	20000338 	.word	0x20000338
 8021614:	0802ea24 	.word	0x0802ea24
 8021618:	0802ea2c 	.word	0x0802ea2c
 802161c:	0802ea38 	.word	0x0802ea38
 8021620:	0802eb64 	.word	0x0802eb64
 8021624:	0802ea8c 	.word	0x0802ea8c
 8021628:	0802ea90 	.word	0x0802ea90
 802162c:	0802eb9c 	.word	0x0802eb9c
 8021630:	0802ebc0 	.word	0x0802ebc0
 8021634:	0802ebe8 	.word	0x0802ebe8
 8021638:	2000033c 	.word	0x2000033c
 802163c:	0802ec0c 	.word	0x0802ec0c

08021640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021640:	b580      	push	{r7, lr}
 8021642:	b086      	sub	sp, #24
 8021644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8021646:	f000 fdd9 	bl	80221fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802164a:	f000 f935 	bl	80218b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802164e:	f000 fa41 	bl	8021ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 8021652:	f000 fa1f 	bl	8021a94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8021656:	f000 f9f3 	bl	8021a40 <MX_USART2_UART_Init>
  MX_UART4_Init();
 802165a:	f000 f9c7 	bl	80219ec <MX_UART4_Init>
  MX_I2C1_Init();
 802165e:	f000 f997 	bl	8021990 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  /* Step 1:Initialize the ESP32 Wi-Fi module */
  LogInfo(("Initializing Wi-Fi module..."));
 8021662:	4a7d      	ldr	r2, [pc, #500]	@ (8021858 <main+0x218>)
 8021664:	23ff      	movs	r3, #255	@ 0xff
 8021666:	497d      	ldr	r1, [pc, #500]	@ (802185c <main+0x21c>)
 8021668:	487d      	ldr	r0, [pc, #500]	@ (8021860 <main+0x220>)
 802166a:	f00a f80b 	bl	802b684 <iprintf>
 802166e:	487d      	ldr	r0, [pc, #500]	@ (8021864 <main+0x224>)
 8021670:	f00a f808 	bl	802b684 <iprintf>
 8021674:	487c      	ldr	r0, [pc, #496]	@ (8021868 <main+0x228>)
 8021676:	f00a f86d 	bl	802b754 <puts>
  if (esp32_init() != ESP32_OK) {
 802167a:	f005 f9e9 	bl	8026a50 <esp32_init>
 802167e:	4603      	mov	r3, r0
 8021680:	2b00      	cmp	r3, #0
 8021682:	d00e      	beq.n	80216a2 <main+0x62>
    LogError(("Failed to initialize Wi-Fi module."));
 8021684:	4a74      	ldr	r2, [pc, #464]	@ (8021858 <main+0x218>)
 8021686:	f240 1301 	movw	r3, #257	@ 0x101
 802168a:	4974      	ldr	r1, [pc, #464]	@ (802185c <main+0x21c>)
 802168c:	4877      	ldr	r0, [pc, #476]	@ (802186c <main+0x22c>)
 802168e:	f009 fff9 	bl	802b684 <iprintf>
 8021692:	4877      	ldr	r0, [pc, #476]	@ (8021870 <main+0x230>)
 8021694:	f009 fff6 	bl	802b684 <iprintf>
 8021698:	4873      	ldr	r0, [pc, #460]	@ (8021868 <main+0x228>)
 802169a:	f00a f85b 	bl	802b754 <puts>
    Error_Handler();
 802169e:	f000 faad 	bl	8021bfc <Error_Handler>
  }
  LogInfo(("Wi-Fi module initialized successfully.\n"));
 80216a2:	4a6d      	ldr	r2, [pc, #436]	@ (8021858 <main+0x218>)
 80216a4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80216a8:	496c      	ldr	r1, [pc, #432]	@ (802185c <main+0x21c>)
 80216aa:	486d      	ldr	r0, [pc, #436]	@ (8021860 <main+0x220>)
 80216ac:	f009 ffea 	bl	802b684 <iprintf>
 80216b0:	4870      	ldr	r0, [pc, #448]	@ (8021874 <main+0x234>)
 80216b2:	f00a f84f 	bl	802b754 <puts>
 80216b6:	486c      	ldr	r0, [pc, #432]	@ (8021868 <main+0x228>)
 80216b8:	f00a f84c 	bl	802b754 <puts>
    LogError(("MQTT connection failed."));
    Error_Handler();
  }
  LogInfo(("Successfully connected to MQTT broker: %s", MQTT_BROKER));
#else
  LogInfo(("Already connected to MQTT broker %s", MQTT_BROKER));
 80216bc:	4a66      	ldr	r2, [pc, #408]	@ (8021858 <main+0x218>)
 80216be:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80216c2:	4966      	ldr	r1, [pc, #408]	@ (802185c <main+0x21c>)
 80216c4:	4866      	ldr	r0, [pc, #408]	@ (8021860 <main+0x220>)
 80216c6:	f009 ffdd 	bl	802b684 <iprintf>
 80216ca:	496b      	ldr	r1, [pc, #428]	@ (8021878 <main+0x238>)
 80216cc:	486b      	ldr	r0, [pc, #428]	@ (802187c <main+0x23c>)
 80216ce:	f009 ffd9 	bl	802b684 <iprintf>
 80216d2:	4865      	ldr	r0, [pc, #404]	@ (8021868 <main+0x228>)
 80216d4:	f00a f83e 	bl	802b754 <puts>
#endif

  LogInfo(("Subscribing to topic: %s", SENSOR_DATA_TOPIC));
 80216d8:	4a5f      	ldr	r2, [pc, #380]	@ (8021858 <main+0x218>)
 80216da:	f240 132f 	movw	r3, #303	@ 0x12f
 80216de:	495f      	ldr	r1, [pc, #380]	@ (802185c <main+0x21c>)
 80216e0:	485f      	ldr	r0, [pc, #380]	@ (8021860 <main+0x220>)
 80216e2:	f009 ffcf 	bl	802b684 <iprintf>
 80216e6:	4966      	ldr	r1, [pc, #408]	@ (8021880 <main+0x240>)
 80216e8:	4866      	ldr	r0, [pc, #408]	@ (8021884 <main+0x244>)
 80216ea:	f009 ffcb 	bl	802b684 <iprintf>
 80216ee:	485e      	ldr	r0, [pc, #376]	@ (8021868 <main+0x228>)
 80216f0:	f00a f830 	bl	802b754 <puts>
  if (mqtt_subscribe(SENSOR_DATA_TOPIC, strlen(SENSOR_DATA_TOPIC)) != MQTT_SUCCESS) {
 80216f4:	211b      	movs	r1, #27
 80216f6:	4862      	ldr	r0, [pc, #392]	@ (8021880 <main+0x240>)
 80216f8:	f008 fd15 	bl	802a126 <mqtt_subscribe>
 80216fc:	4603      	mov	r3, r0
 80216fe:	2b01      	cmp	r3, #1
 8021700:	d00f      	beq.n	8021722 <main+0xe2>
    LogError(("Subscription to topic '%s' failed.", SENSOR_DATA_TOPIC));
 8021702:	4a55      	ldr	r2, [pc, #340]	@ (8021858 <main+0x218>)
 8021704:	f240 1331 	movw	r3, #305	@ 0x131
 8021708:	4954      	ldr	r1, [pc, #336]	@ (802185c <main+0x21c>)
 802170a:	4858      	ldr	r0, [pc, #352]	@ (802186c <main+0x22c>)
 802170c:	f009 ffba 	bl	802b684 <iprintf>
 8021710:	495b      	ldr	r1, [pc, #364]	@ (8021880 <main+0x240>)
 8021712:	485d      	ldr	r0, [pc, #372]	@ (8021888 <main+0x248>)
 8021714:	f009 ffb6 	bl	802b684 <iprintf>
 8021718:	4853      	ldr	r0, [pc, #332]	@ (8021868 <main+0x228>)
 802171a:	f00a f81b 	bl	802b754 <puts>
    Error_Handler();
 802171e:	f000 fa6d 	bl	8021bfc <Error_Handler>
  }
  LogInfo(("Successfully Subscribed to topic: %s", SENSOR_DATA_TOPIC));
 8021722:	4a4d      	ldr	r2, [pc, #308]	@ (8021858 <main+0x218>)
 8021724:	f44f 739a 	mov.w	r3, #308	@ 0x134
 8021728:	494c      	ldr	r1, [pc, #304]	@ (802185c <main+0x21c>)
 802172a:	484d      	ldr	r0, [pc, #308]	@ (8021860 <main+0x220>)
 802172c:	f009 ffaa 	bl	802b684 <iprintf>
 8021730:	4953      	ldr	r1, [pc, #332]	@ (8021880 <main+0x240>)
 8021732:	4856      	ldr	r0, [pc, #344]	@ (802188c <main+0x24c>)
 8021734:	f009 ffa6 	bl	802b684 <iprintf>
 8021738:	484b      	ldr	r0, [pc, #300]	@ (8021868 <main+0x228>)
 802173a:	f00a f80b 	bl	802b754 <puts>

  /* Create queues */
  mqtt_tx_queue = xQueueCreate(5, sizeof(mqtt_queue_item_t));
 802173e:	2200      	movs	r2, #0
 8021740:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 8021744:	2005      	movs	r0, #5
 8021746:	f005 ffe6 	bl	8027716 <xQueueGenericCreate>
 802174a:	4603      	mov	r3, r0
 802174c:	4a50      	ldr	r2, [pc, #320]	@ (8021890 <main+0x250>)
 802174e:	6013      	str	r3, [r2, #0]
  mqtt_rx_queue = xQueueCreate(5, sizeof(mqtt_queue_item_t));
 8021750:	2200      	movs	r2, #0
 8021752:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 8021756:	2005      	movs	r0, #5
 8021758:	f005 ffdd 	bl	8027716 <xQueueGenericCreate>
 802175c:	4603      	mov	r3, r0
 802175e:	4a4d      	ldr	r2, [pc, #308]	@ (8021894 <main+0x254>)
 8021760:	6013      	str	r3, [r2, #0]
  if (mqtt_tx_queue == NULL || mqtt_rx_queue == NULL) {
 8021762:	4b4b      	ldr	r3, [pc, #300]	@ (8021890 <main+0x250>)
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	2b00      	cmp	r3, #0
 8021768:	d003      	beq.n	8021772 <main+0x132>
 802176a:	4b4a      	ldr	r3, [pc, #296]	@ (8021894 <main+0x254>)
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	2b00      	cmp	r3, #0
 8021770:	d10f      	bne.n	8021792 <main+0x152>
    LogError(("Queue creation failed."));
 8021772:	4a39      	ldr	r2, [pc, #228]	@ (8021858 <main+0x218>)
 8021774:	f44f 739d 	mov.w	r3, #314	@ 0x13a
 8021778:	4938      	ldr	r1, [pc, #224]	@ (802185c <main+0x21c>)
 802177a:	483c      	ldr	r0, [pc, #240]	@ (802186c <main+0x22c>)
 802177c:	f009 ff82 	bl	802b684 <iprintf>
 8021780:	4845      	ldr	r0, [pc, #276]	@ (8021898 <main+0x258>)
 8021782:	f009 ff7f 	bl	802b684 <iprintf>
 8021786:	4838      	ldr	r0, [pc, #224]	@ (8021868 <main+0x228>)
 8021788:	f009 ffe4 	bl	802b754 <puts>
    Error_Handler();
 802178c:	f000 fa36 	bl	8021bfc <Error_Handler>
 8021790:	e00c      	b.n	80217ac <main+0x16c>
  } else {
    LogInfo(("MQTT TX and RX queues created successfully."));
 8021792:	4a31      	ldr	r2, [pc, #196]	@ (8021858 <main+0x218>)
 8021794:	f240 133d 	movw	r3, #317	@ 0x13d
 8021798:	4930      	ldr	r1, [pc, #192]	@ (802185c <main+0x21c>)
 802179a:	4831      	ldr	r0, [pc, #196]	@ (8021860 <main+0x220>)
 802179c:	f009 ff72 	bl	802b684 <iprintf>
 80217a0:	483e      	ldr	r0, [pc, #248]	@ (802189c <main+0x25c>)
 80217a2:	f009 ff6f 	bl	802b684 <iprintf>
 80217a6:	4830      	ldr	r0, [pc, #192]	@ (8021868 <main+0x228>)
 80217a8:	f009 ffd4 	bl	802b754 <puts>

  //create 3 freertos tasks

  BaseType_t status;

  status = xTaskCreate(mqtt_publish_task, "Publish sensor data", 2048, NULL,
 80217ac:	2300      	movs	r3, #0
 80217ae:	9301      	str	r3, [sp, #4]
 80217b0:	2302      	movs	r3, #2
 80217b2:	9300      	str	r3, [sp, #0]
 80217b4:	2300      	movs	r3, #0
 80217b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80217ba:	4939      	ldr	r1, [pc, #228]	@ (80218a0 <main+0x260>)
 80217bc:	4839      	ldr	r0, [pc, #228]	@ (80218a4 <main+0x264>)
 80217be:	f006 fc0a 	bl	8027fd6 <xTaskCreate>
 80217c2:	60f8      	str	r0, [r7, #12]
                       2, NULL);
  configASSERT(status == pdPASS);
 80217c4:	68fb      	ldr	r3, [r7, #12]
 80217c6:	2b01      	cmp	r3, #1
 80217c8:	d00b      	beq.n	80217e2 <main+0x1a2>
    __asm volatile
 80217ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80217ce:	f383 8811 	msr	BASEPRI, r3
 80217d2:	f3bf 8f6f 	isb	sy
 80217d6:	f3bf 8f4f 	dsb	sy
 80217da:	60bb      	str	r3, [r7, #8]
}
 80217dc:	bf00      	nop
 80217de:	bf00      	nop
 80217e0:	e7fd      	b.n	80217de <main+0x19e>

  status = xTaskCreate(mqtt_receive_task, "Receive sensor data", 2048,
 80217e2:	2300      	movs	r3, #0
 80217e4:	9301      	str	r3, [sp, #4]
 80217e6:	2302      	movs	r3, #2
 80217e8:	9300      	str	r3, [sp, #0]
 80217ea:	2300      	movs	r3, #0
 80217ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80217f0:	492d      	ldr	r1, [pc, #180]	@ (80218a8 <main+0x268>)
 80217f2:	482e      	ldr	r0, [pc, #184]	@ (80218ac <main+0x26c>)
 80217f4:	f006 fbef 	bl	8027fd6 <xTaskCreate>
 80217f8:	60f8      	str	r0, [r7, #12]
                       NULL, 2, NULL);
  configASSERT(status == pdPASS);
 80217fa:	68fb      	ldr	r3, [r7, #12]
 80217fc:	2b01      	cmp	r3, #1
 80217fe:	d00b      	beq.n	8021818 <main+0x1d8>
    __asm volatile
 8021800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021804:	f383 8811 	msr	BASEPRI, r3
 8021808:	f3bf 8f6f 	isb	sy
 802180c:	f3bf 8f4f 	dsb	sy
 8021810:	607b      	str	r3, [r7, #4]
}
 8021812:	bf00      	nop
 8021814:	bf00      	nop
 8021816:	e7fd      	b.n	8021814 <main+0x1d4>

  status = xTaskCreate(at_cmd_handle_task, "MQTT send and receive", 2048, NULL,
 8021818:	2300      	movs	r3, #0
 802181a:	9301      	str	r3, [sp, #4]
 802181c:	2301      	movs	r3, #1
 802181e:	9300      	str	r3, [sp, #0]
 8021820:	2300      	movs	r3, #0
 8021822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021826:	4922      	ldr	r1, [pc, #136]	@ (80218b0 <main+0x270>)
 8021828:	4822      	ldr	r0, [pc, #136]	@ (80218b4 <main+0x274>)
 802182a:	f006 fbd4 	bl	8027fd6 <xTaskCreate>
 802182e:	60f8      	str	r0, [r7, #12]
                       1, NULL);
  configASSERT(status == pdPASS);
 8021830:	68fb      	ldr	r3, [r7, #12]
 8021832:	2b01      	cmp	r3, #1
 8021834:	d00b      	beq.n	802184e <main+0x20e>
    __asm volatile
 8021836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802183a:	f383 8811 	msr	BASEPRI, r3
 802183e:	f3bf 8f6f 	isb	sy
 8021842:	f3bf 8f4f 	dsb	sy
 8021846:	603b      	str	r3, [r7, #0]
}
 8021848:	bf00      	nop
 802184a:	bf00      	nop
 802184c:	e7fd      	b.n	802184a <main+0x20a>


  vTaskStartScheduler();
 802184e:	f006 fda7 	bl	80283a0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8021852:	bf00      	nop
 8021854:	e7fd      	b.n	8021852 <main+0x212>
 8021856:	bf00      	nop
 8021858:	0802ea24 	.word	0x0802ea24
 802185c:	0802ea2c 	.word	0x0802ea2c
 8021860:	0802ea38 	.word	0x0802ea38
 8021864:	0802ec30 	.word	0x0802ec30
 8021868:	0802ea8c 	.word	0x0802ea8c
 802186c:	0802ea90 	.word	0x0802ea90
 8021870:	0802ec50 	.word	0x0802ec50
 8021874:	0802ec74 	.word	0x0802ec74
 8021878:	0802ec9c 	.word	0x0802ec9c
 802187c:	0802eccc 	.word	0x0802eccc
 8021880:	0802ea50 	.word	0x0802ea50
 8021884:	0802ecf0 	.word	0x0802ecf0
 8021888:	0802ed0c 	.word	0x0802ed0c
 802188c:	0802ed30 	.word	0x0802ed30
 8021890:	20000338 	.word	0x20000338
 8021894:	2000033c 	.word	0x2000033c
 8021898:	0802ed58 	.word	0x0802ed58
 802189c:	0802ed70 	.word	0x0802ed70
 80218a0:	0802ed9c 	.word	0x0802ed9c
 80218a4:	0802108d 	.word	0x0802108d
 80218a8:	0802edb0 	.word	0x0802edb0
 80218ac:	080211dd 	.word	0x080211dd
 80218b0:	0802edc4 	.word	0x0802edc4
 80218b4:	08021351 	.word	0x08021351

080218b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80218b8:	b580      	push	{r7, lr}
 80218ba:	b094      	sub	sp, #80	@ 0x50
 80218bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80218be:	f107 031c 	add.w	r3, r7, #28
 80218c2:	2234      	movs	r2, #52	@ 0x34
 80218c4:	2100      	movs	r1, #0
 80218c6:	4618      	mov	r0, r3
 80218c8:	f00a f896 	bl	802b9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80218cc:	f107 0308 	add.w	r3, r7, #8
 80218d0:	2200      	movs	r2, #0
 80218d2:	601a      	str	r2, [r3, #0]
 80218d4:	605a      	str	r2, [r3, #4]
 80218d6:	609a      	str	r2, [r3, #8]
 80218d8:	60da      	str	r2, [r3, #12]
 80218da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80218dc:	2300      	movs	r3, #0
 80218de:	607b      	str	r3, [r7, #4]
 80218e0:	4b29      	ldr	r3, [pc, #164]	@ (8021988 <SystemClock_Config+0xd0>)
 80218e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80218e4:	4a28      	ldr	r2, [pc, #160]	@ (8021988 <SystemClock_Config+0xd0>)
 80218e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80218ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80218ec:	4b26      	ldr	r3, [pc, #152]	@ (8021988 <SystemClock_Config+0xd0>)
 80218ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80218f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80218f4:	607b      	str	r3, [r7, #4]
 80218f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80218f8:	2300      	movs	r3, #0
 80218fa:	603b      	str	r3, [r7, #0]
 80218fc:	4b23      	ldr	r3, [pc, #140]	@ (802198c <SystemClock_Config+0xd4>)
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	4a22      	ldr	r2, [pc, #136]	@ (802198c <SystemClock_Config+0xd4>)
 8021902:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8021906:	6013      	str	r3, [r2, #0]
 8021908:	4b20      	ldr	r3, [pc, #128]	@ (802198c <SystemClock_Config+0xd4>)
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8021910:	603b      	str	r3, [r7, #0]
 8021912:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8021914:	2302      	movs	r3, #2
 8021916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8021918:	2301      	movs	r3, #1
 802191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802191c:	2310      	movs	r3, #16
 802191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021920:	2302      	movs	r3, #2
 8021922:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8021924:	2300      	movs	r3, #0
 8021926:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8021928:	2308      	movs	r3, #8
 802192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 802192c:	23a0      	movs	r3, #160	@ 0xa0
 802192e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021930:	2302      	movs	r3, #2
 8021932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8021934:	2302      	movs	r3, #2
 8021936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8021938:	2302      	movs	r3, #2
 802193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802193c:	f107 031c 	add.w	r3, r7, #28
 8021940:	4618      	mov	r0, r3
 8021942:	f003 f869 	bl	8024a18 <HAL_RCC_OscConfig>
 8021946:	4603      	mov	r3, r0
 8021948:	2b00      	cmp	r3, #0
 802194a:	d001      	beq.n	8021950 <SystemClock_Config+0x98>
  {
    Error_Handler();
 802194c:	f000 f956 	bl	8021bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021950:	230f      	movs	r3, #15
 8021952:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021954:	2302      	movs	r3, #2
 8021956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021958:	2300      	movs	r3, #0
 802195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802195c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8021960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8021962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021966:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021968:	f107 0308 	add.w	r3, r7, #8
 802196c:	2105      	movs	r1, #5
 802196e:	4618      	mov	r0, r3
 8021970:	f002 fcd6 	bl	8024320 <HAL_RCC_ClockConfig>
 8021974:	4603      	mov	r3, r0
 8021976:	2b00      	cmp	r3, #0
 8021978:	d001      	beq.n	802197e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 802197a:	f000 f93f 	bl	8021bfc <Error_Handler>
  }
}
 802197e:	bf00      	nop
 8021980:	3750      	adds	r7, #80	@ 0x50
 8021982:	46bd      	mov	sp, r7
 8021984:	bd80      	pop	{r7, pc}
 8021986:	bf00      	nop
 8021988:	40023800 	.word	0x40023800
 802198c:	40007000 	.word	0x40007000

08021990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8021990:	b580      	push	{r7, lr}
 8021992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8021994:	4b12      	ldr	r3, [pc, #72]	@ (80219e0 <MX_I2C1_Init+0x50>)
 8021996:	4a13      	ldr	r2, [pc, #76]	@ (80219e4 <MX_I2C1_Init+0x54>)
 8021998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 802199a:	4b11      	ldr	r3, [pc, #68]	@ (80219e0 <MX_I2C1_Init+0x50>)
 802199c:	4a12      	ldr	r2, [pc, #72]	@ (80219e8 <MX_I2C1_Init+0x58>)
 802199e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80219a0:	4b0f      	ldr	r3, [pc, #60]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219a2:	2200      	movs	r2, #0
 80219a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80219a6:	4b0e      	ldr	r3, [pc, #56]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219a8:	2200      	movs	r2, #0
 80219aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80219ac:	4b0c      	ldr	r3, [pc, #48]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80219b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80219b4:	4b0a      	ldr	r3, [pc, #40]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219b6:	2200      	movs	r2, #0
 80219b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80219ba:	4b09      	ldr	r3, [pc, #36]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219bc:	2200      	movs	r2, #0
 80219be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80219c0:	4b07      	ldr	r3, [pc, #28]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219c2:	2200      	movs	r2, #0
 80219c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80219c6:	4b06      	ldr	r3, [pc, #24]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219c8:	2200      	movs	r2, #0
 80219ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80219cc:	4804      	ldr	r0, [pc, #16]	@ (80219e0 <MX_I2C1_Init+0x50>)
 80219ce:	f001 fcad 	bl	802332c <HAL_I2C_Init>
 80219d2:	4603      	mov	r3, r0
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d001      	beq.n	80219dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80219d8:	f000 f910 	bl	8021bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80219dc:	bf00      	nop
 80219de:	bd80      	pop	{r7, pc}
 80219e0:	200001f4 	.word	0x200001f4
 80219e4:	40005400 	.word	0x40005400
 80219e8:	000186a0 	.word	0x000186a0

080219ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80219f0:	4b11      	ldr	r3, [pc, #68]	@ (8021a38 <MX_UART4_Init+0x4c>)
 80219f2:	4a12      	ldr	r2, [pc, #72]	@ (8021a3c <MX_UART4_Init+0x50>)
 80219f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80219f6:	4b10      	ldr	r3, [pc, #64]	@ (8021a38 <MX_UART4_Init+0x4c>)
 80219f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80219fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80219fe:	4b0e      	ldr	r3, [pc, #56]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a00:	2200      	movs	r2, #0
 8021a02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8021a04:	4b0c      	ldr	r3, [pc, #48]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a06:	2200      	movs	r2, #0
 8021a08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8021a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a0c:	2200      	movs	r2, #0
 8021a0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8021a10:	4b09      	ldr	r3, [pc, #36]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a12:	220c      	movs	r2, #12
 8021a14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021a16:	4b08      	ldr	r3, [pc, #32]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a18:	2200      	movs	r2, #0
 8021a1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8021a1c:	4b06      	ldr	r3, [pc, #24]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a1e:	2200      	movs	r2, #0
 8021a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8021a22:	4805      	ldr	r0, [pc, #20]	@ (8021a38 <MX_UART4_Init+0x4c>)
 8021a24:	f003 fd32 	bl	802548c <HAL_UART_Init>
 8021a28:	4603      	mov	r3, r0
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d001      	beq.n	8021a32 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8021a2e:	f000 f8e5 	bl	8021bfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8021a32:	bf00      	nop
 8021a34:	bd80      	pop	{r7, pc}
 8021a36:	bf00      	nop
 8021a38:	20000248 	.word	0x20000248
 8021a3c:	40004c00 	.word	0x40004c00

08021a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8021a40:	b580      	push	{r7, lr}
 8021a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8021a44:	4b11      	ldr	r3, [pc, #68]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a46:	4a12      	ldr	r2, [pc, #72]	@ (8021a90 <MX_USART2_UART_Init+0x50>)
 8021a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8021a4a:	4b10      	ldr	r3, [pc, #64]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8021a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8021a52:	4b0e      	ldr	r3, [pc, #56]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a54:	2200      	movs	r2, #0
 8021a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8021a58:	4b0c      	ldr	r3, [pc, #48]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a5a:	2200      	movs	r2, #0
 8021a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8021a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a60:	2200      	movs	r2, #0
 8021a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8021a64:	4b09      	ldr	r3, [pc, #36]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a66:	220c      	movs	r2, #12
 8021a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021a6a:	4b08      	ldr	r3, [pc, #32]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a6c:	2200      	movs	r2, #0
 8021a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8021a70:	4b06      	ldr	r3, [pc, #24]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a72:	2200      	movs	r2, #0
 8021a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8021a76:	4805      	ldr	r0, [pc, #20]	@ (8021a8c <MX_USART2_UART_Init+0x4c>)
 8021a78:	f003 fd08 	bl	802548c <HAL_UART_Init>
 8021a7c:	4603      	mov	r3, r0
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d001      	beq.n	8021a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8021a82:	f000 f8bb 	bl	8021bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8021a86:	bf00      	nop
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	20000290 	.word	0x20000290
 8021a90:	40004400 	.word	0x40004400

08021a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8021a94:	b580      	push	{r7, lr}
 8021a96:	b082      	sub	sp, #8
 8021a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8021a9a:	2300      	movs	r3, #0
 8021a9c:	607b      	str	r3, [r7, #4]
 8021a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8021ad0 <MX_DMA_Init+0x3c>)
 8021aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8021ad0 <MX_DMA_Init+0x3c>)
 8021aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8021aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8021aaa:	4b09      	ldr	r3, [pc, #36]	@ (8021ad0 <MX_DMA_Init+0x3c>)
 8021aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8021ab2:	607b      	str	r3, [r7, #4]
 8021ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8021ab6:	2200      	movs	r2, #0
 8021ab8:	2100      	movs	r1, #0
 8021aba:	200d      	movs	r0, #13
 8021abc:	f000 fcf7 	bl	80224ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8021ac0:	200d      	movs	r0, #13
 8021ac2:	f000 fd10 	bl	80224e6 <HAL_NVIC_EnableIRQ>

}
 8021ac6:	bf00      	nop
 8021ac8:	3708      	adds	r7, #8
 8021aca:	46bd      	mov	sp, r7
 8021acc:	bd80      	pop	{r7, pc}
 8021ace:	bf00      	nop
 8021ad0:	40023800 	.word	0x40023800

08021ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b08a      	sub	sp, #40	@ 0x28
 8021ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021ada:	f107 0314 	add.w	r3, r7, #20
 8021ade:	2200      	movs	r2, #0
 8021ae0:	601a      	str	r2, [r3, #0]
 8021ae2:	605a      	str	r2, [r3, #4]
 8021ae4:	609a      	str	r2, [r3, #8]
 8021ae6:	60da      	str	r2, [r3, #12]
 8021ae8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021aea:	2300      	movs	r3, #0
 8021aec:	613b      	str	r3, [r7, #16]
 8021aee:	4b37      	ldr	r3, [pc, #220]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021af2:	4a36      	ldr	r2, [pc, #216]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021af4:	f043 0304 	orr.w	r3, r3, #4
 8021af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8021afa:	4b34      	ldr	r3, [pc, #208]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021afe:	f003 0304 	and.w	r3, r3, #4
 8021b02:	613b      	str	r3, [r7, #16]
 8021b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8021b06:	2300      	movs	r3, #0
 8021b08:	60fb      	str	r3, [r7, #12]
 8021b0a:	4b30      	ldr	r3, [pc, #192]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8021b16:	4b2d      	ldr	r3, [pc, #180]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021b1e:	60fb      	str	r3, [r7, #12]
 8021b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021b22:	2300      	movs	r3, #0
 8021b24:	60bb      	str	r3, [r7, #8]
 8021b26:	4b29      	ldr	r3, [pc, #164]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b2a:	4a28      	ldr	r2, [pc, #160]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b2c:	f043 0301 	orr.w	r3, r3, #1
 8021b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8021b32:	4b26      	ldr	r3, [pc, #152]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b36:	f003 0301 	and.w	r3, r3, #1
 8021b3a:	60bb      	str	r3, [r7, #8]
 8021b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021b3e:	2300      	movs	r3, #0
 8021b40:	607b      	str	r3, [r7, #4]
 8021b42:	4b22      	ldr	r3, [pc, #136]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b46:	4a21      	ldr	r2, [pc, #132]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b48:	f043 0302 	orr.w	r3, r3, #2
 8021b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8021b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8021bcc <MX_GPIO_Init+0xf8>)
 8021b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b52:	f003 0302 	and.w	r3, r3, #2
 8021b56:	607b      	str	r3, [r7, #4]
 8021b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PURPLE_LED_Pin|EMERALD_LED_Pin, GPIO_PIN_RESET);
 8021b5a:	2200      	movs	r2, #0
 8021b5c:	2103      	movs	r1, #3
 8021b5e:	481c      	ldr	r0, [pc, #112]	@ (8021bd0 <MX_GPIO_Init+0xfc>)
 8021b60:	f001 fbca 	bl	80232f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8021b64:	2200      	movs	r2, #0
 8021b66:	2120      	movs	r1, #32
 8021b68:	481a      	ldr	r0, [pc, #104]	@ (8021bd4 <MX_GPIO_Init+0x100>)
 8021b6a:	f001 fbc5 	bl	80232f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8021b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8021b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8021b74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8021b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8021b7e:	f107 0314 	add.w	r3, r7, #20
 8021b82:	4619      	mov	r1, r3
 8021b84:	4812      	ldr	r0, [pc, #72]	@ (8021bd0 <MX_GPIO_Init+0xfc>)
 8021b86:	f001 f92f 	bl	8022de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PURPLE_LED_Pin EMERALD_LED_Pin */
  GPIO_InitStruct.Pin = PURPLE_LED_Pin|EMERALD_LED_Pin;
 8021b8a:	2303      	movs	r3, #3
 8021b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021b8e:	2301      	movs	r3, #1
 8021b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b92:	2300      	movs	r3, #0
 8021b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b96:	2300      	movs	r3, #0
 8021b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021b9a:	f107 0314 	add.w	r3, r7, #20
 8021b9e:	4619      	mov	r1, r3
 8021ba0:	480b      	ldr	r0, [pc, #44]	@ (8021bd0 <MX_GPIO_Init+0xfc>)
 8021ba2:	f001 f921 	bl	8022de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8021ba6:	2320      	movs	r3, #32
 8021ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021baa:	2301      	movs	r3, #1
 8021bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bae:	2300      	movs	r3, #0
 8021bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8021bb6:	f107 0314 	add.w	r3, r7, #20
 8021bba:	4619      	mov	r1, r3
 8021bbc:	4805      	ldr	r0, [pc, #20]	@ (8021bd4 <MX_GPIO_Init+0x100>)
 8021bbe:	f001 f913 	bl	8022de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8021bc2:	bf00      	nop
 8021bc4:	3728      	adds	r7, #40	@ 0x28
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	bd80      	pop	{r7, pc}
 8021bca:	bf00      	nop
 8021bcc:	40023800 	.word	0x40023800
 8021bd0:	40020800 	.word	0x40020800
 8021bd4:	40020000 	.word	0x40020000

08021bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021bd8:	b580      	push	{r7, lr}
 8021bda:	b082      	sub	sp, #8
 8021bdc:	af00      	add	r7, sp, #0
 8021bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	4a04      	ldr	r2, [pc, #16]	@ (8021bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8021be6:	4293      	cmp	r3, r2
 8021be8:	d101      	bne.n	8021bee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8021bea:	f000 fb29 	bl	8022240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8021bee:	bf00      	nop
 8021bf0:	3708      	adds	r7, #8
 8021bf2:	46bd      	mov	sp, r7
 8021bf4:	bd80      	pop	{r7, pc}
 8021bf6:	bf00      	nop
 8021bf8:	40001000 	.word	0x40001000

08021bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021bfc:	b480      	push	{r7}
 8021bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021c00:	b672      	cpsid	i
}
 8021c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8021c04:	bf00      	nop
 8021c06:	e7fd      	b.n	8021c04 <Error_Handler+0x8>

08021c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021c08:	b480      	push	{r7}
 8021c0a:	b083      	sub	sp, #12
 8021c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021c0e:	2300      	movs	r3, #0
 8021c10:	607b      	str	r3, [r7, #4]
 8021c12:	4b10      	ldr	r3, [pc, #64]	@ (8021c54 <HAL_MspInit+0x4c>)
 8021c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021c16:	4a0f      	ldr	r2, [pc, #60]	@ (8021c54 <HAL_MspInit+0x4c>)
 8021c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8021c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8021c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8021c54 <HAL_MspInit+0x4c>)
 8021c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8021c26:	607b      	str	r3, [r7, #4]
 8021c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021c2a:	2300      	movs	r3, #0
 8021c2c:	603b      	str	r3, [r7, #0]
 8021c2e:	4b09      	ldr	r3, [pc, #36]	@ (8021c54 <HAL_MspInit+0x4c>)
 8021c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021c32:	4a08      	ldr	r2, [pc, #32]	@ (8021c54 <HAL_MspInit+0x4c>)
 8021c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8021c3a:	4b06      	ldr	r3, [pc, #24]	@ (8021c54 <HAL_MspInit+0x4c>)
 8021c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021c42:	603b      	str	r3, [r7, #0]
 8021c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021c46:	bf00      	nop
 8021c48:	370c      	adds	r7, #12
 8021c4a:	46bd      	mov	sp, r7
 8021c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c50:	4770      	bx	lr
 8021c52:	bf00      	nop
 8021c54:	40023800 	.word	0x40023800

08021c58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021c58:	b580      	push	{r7, lr}
 8021c5a:	b08a      	sub	sp, #40	@ 0x28
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021c60:	f107 0314 	add.w	r3, r7, #20
 8021c64:	2200      	movs	r2, #0
 8021c66:	601a      	str	r2, [r3, #0]
 8021c68:	605a      	str	r2, [r3, #4]
 8021c6a:	609a      	str	r2, [r3, #8]
 8021c6c:	60da      	str	r2, [r3, #12]
 8021c6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	4a19      	ldr	r2, [pc, #100]	@ (8021cdc <HAL_I2C_MspInit+0x84>)
 8021c76:	4293      	cmp	r3, r2
 8021c78:	d12c      	bne.n	8021cd4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	613b      	str	r3, [r7, #16]
 8021c7e:	4b18      	ldr	r3, [pc, #96]	@ (8021ce0 <HAL_I2C_MspInit+0x88>)
 8021c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021c82:	4a17      	ldr	r2, [pc, #92]	@ (8021ce0 <HAL_I2C_MspInit+0x88>)
 8021c84:	f043 0302 	orr.w	r3, r3, #2
 8021c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8021c8a:	4b15      	ldr	r3, [pc, #84]	@ (8021ce0 <HAL_I2C_MspInit+0x88>)
 8021c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021c8e:	f003 0302 	and.w	r3, r3, #2
 8021c92:	613b      	str	r3, [r7, #16]
 8021c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8021c96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8021c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021c9c:	2312      	movs	r3, #18
 8021c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021ca0:	2301      	movs	r3, #1
 8021ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021ca4:	2303      	movs	r3, #3
 8021ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021ca8:	2304      	movs	r3, #4
 8021caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021cac:	f107 0314 	add.w	r3, r7, #20
 8021cb0:	4619      	mov	r1, r3
 8021cb2:	480c      	ldr	r0, [pc, #48]	@ (8021ce4 <HAL_I2C_MspInit+0x8c>)
 8021cb4:	f001 f898 	bl	8022de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021cb8:	2300      	movs	r3, #0
 8021cba:	60fb      	str	r3, [r7, #12]
 8021cbc:	4b08      	ldr	r3, [pc, #32]	@ (8021ce0 <HAL_I2C_MspInit+0x88>)
 8021cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021cc0:	4a07      	ldr	r2, [pc, #28]	@ (8021ce0 <HAL_I2C_MspInit+0x88>)
 8021cc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8021cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8021cc8:	4b05      	ldr	r3, [pc, #20]	@ (8021ce0 <HAL_I2C_MspInit+0x88>)
 8021cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8021cd0:	60fb      	str	r3, [r7, #12]
 8021cd2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8021cd4:	bf00      	nop
 8021cd6:	3728      	adds	r7, #40	@ 0x28
 8021cd8:	46bd      	mov	sp, r7
 8021cda:	bd80      	pop	{r7, pc}
 8021cdc:	40005400 	.word	0x40005400
 8021ce0:	40023800 	.word	0x40023800
 8021ce4:	40020400 	.word	0x40020400

08021ce8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021ce8:	b580      	push	{r7, lr}
 8021cea:	b08c      	sub	sp, #48	@ 0x30
 8021cec:	af00      	add	r7, sp, #0
 8021cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021cf0:	f107 031c 	add.w	r3, r7, #28
 8021cf4:	2200      	movs	r2, #0
 8021cf6:	601a      	str	r2, [r3, #0]
 8021cf8:	605a      	str	r2, [r3, #4]
 8021cfa:	609a      	str	r2, [r3, #8]
 8021cfc:	60da      	str	r2, [r3, #12]
 8021cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	4a4d      	ldr	r2, [pc, #308]	@ (8021e3c <HAL_UART_MspInit+0x154>)
 8021d06:	4293      	cmp	r3, r2
 8021d08:	d163      	bne.n	8021dd2 <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8021d0a:	2300      	movs	r3, #0
 8021d0c:	61bb      	str	r3, [r7, #24]
 8021d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d12:	4a4b      	ldr	r2, [pc, #300]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8021d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8021d1a:	4b49      	ldr	r3, [pc, #292]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8021d22:	61bb      	str	r3, [r7, #24]
 8021d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d26:	2300      	movs	r3, #0
 8021d28:	617b      	str	r3, [r7, #20]
 8021d2a:	4b45      	ldr	r3, [pc, #276]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021d2e:	4a44      	ldr	r2, [pc, #272]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021d30:	f043 0301 	orr.w	r3, r3, #1
 8021d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8021d36:	4b42      	ldr	r3, [pc, #264]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021d3a:	f003 0301 	and.w	r3, r3, #1
 8021d3e:	617b      	str	r3, [r7, #20]
 8021d40:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021d42:	2303      	movs	r3, #3
 8021d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d46:	2302      	movs	r3, #2
 8021d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d4a:	2300      	movs	r3, #0
 8021d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d4e:	2303      	movs	r3, #3
 8021d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8021d52:	2308      	movs	r3, #8
 8021d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021d56:	f107 031c 	add.w	r3, r7, #28
 8021d5a:	4619      	mov	r1, r3
 8021d5c:	4839      	ldr	r0, [pc, #228]	@ (8021e44 <HAL_UART_MspInit+0x15c>)
 8021d5e:	f001 f843 	bl	8022de8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8021d62:	4b39      	ldr	r3, [pc, #228]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d64:	4a39      	ldr	r2, [pc, #228]	@ (8021e4c <HAL_UART_MspInit+0x164>)
 8021d66:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8021d68:	4b37      	ldr	r3, [pc, #220]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8021d6e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8021d70:	4b35      	ldr	r3, [pc, #212]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d72:	2200      	movs	r2, #0
 8021d74:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021d76:	4b34      	ldr	r3, [pc, #208]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d78:	2200      	movs	r2, #0
 8021d7a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8021d7c:	4b32      	ldr	r3, [pc, #200]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8021d82:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021d84:	4b30      	ldr	r3, [pc, #192]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d86:	2200      	movs	r2, #0
 8021d88:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8021d90:	4b2d      	ldr	r3, [pc, #180]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021d96:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8021d98:	4b2b      	ldr	r3, [pc, #172]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021d9a:	2200      	movs	r2, #0
 8021d9c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021da0:	2200      	movs	r2, #0
 8021da2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8021da4:	4828      	ldr	r0, [pc, #160]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021da6:	f000 fbbf 	bl	8022528 <HAL_DMA_Init>
 8021daa:	4603      	mov	r3, r0
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d001      	beq.n	8021db4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8021db0:	f7ff ff24 	bl	8021bfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	4a24      	ldr	r2, [pc, #144]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021db8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8021dba:	4a23      	ldr	r2, [pc, #140]	@ (8021e48 <HAL_UART_MspInit+0x160>)
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	2100      	movs	r1, #0
 8021dc4:	2034      	movs	r0, #52	@ 0x34
 8021dc6:	f000 fb72 	bl	80224ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8021dca:	2034      	movs	r0, #52	@ 0x34
 8021dcc:	f000 fb8b 	bl	80224e6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8021dd0:	e030      	b.n	8021e34 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8021e50 <HAL_UART_MspInit+0x168>)
 8021dd8:	4293      	cmp	r3, r2
 8021dda:	d12b      	bne.n	8021e34 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8021ddc:	2300      	movs	r3, #0
 8021dde:	613b      	str	r3, [r7, #16]
 8021de0:	4b17      	ldr	r3, [pc, #92]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021de4:	4a16      	ldr	r2, [pc, #88]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8021dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8021dec:	4b14      	ldr	r3, [pc, #80]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021df4:	613b      	str	r3, [r7, #16]
 8021df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021df8:	2300      	movs	r3, #0
 8021dfa:	60fb      	str	r3, [r7, #12]
 8021dfc:	4b10      	ldr	r3, [pc, #64]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e00:	4a0f      	ldr	r2, [pc, #60]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021e02:	f043 0301 	orr.w	r3, r3, #1
 8021e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8021e08:	4b0d      	ldr	r3, [pc, #52]	@ (8021e40 <HAL_UART_MspInit+0x158>)
 8021e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e0c:	f003 0301 	and.w	r3, r3, #1
 8021e10:	60fb      	str	r3, [r7, #12]
 8021e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8021e14:	230c      	movs	r3, #12
 8021e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e18:	2302      	movs	r3, #2
 8021e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e1c:	2300      	movs	r3, #0
 8021e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e20:	2303      	movs	r3, #3
 8021e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8021e24:	2307      	movs	r3, #7
 8021e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021e28:	f107 031c 	add.w	r3, r7, #28
 8021e2c:	4619      	mov	r1, r3
 8021e2e:	4805      	ldr	r0, [pc, #20]	@ (8021e44 <HAL_UART_MspInit+0x15c>)
 8021e30:	f000 ffda 	bl	8022de8 <HAL_GPIO_Init>
}
 8021e34:	bf00      	nop
 8021e36:	3730      	adds	r7, #48	@ 0x30
 8021e38:	46bd      	mov	sp, r7
 8021e3a:	bd80      	pop	{r7, pc}
 8021e3c:	40004c00 	.word	0x40004c00
 8021e40:	40023800 	.word	0x40023800
 8021e44:	40020000 	.word	0x40020000
 8021e48:	200002d8 	.word	0x200002d8
 8021e4c:	40026040 	.word	0x40026040
 8021e50:	40004400 	.word	0x40004400

08021e54 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8021e54:	b580      	push	{r7, lr}
 8021e56:	b082      	sub	sp, #8
 8021e58:	af00      	add	r7, sp, #0
 8021e5a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	681b      	ldr	r3, [r3, #0]
 8021e60:	4a14      	ldr	r2, [pc, #80]	@ (8021eb4 <HAL_UART_MspDeInit+0x60>)
 8021e62:	4293      	cmp	r3, r2
 8021e64:	d112      	bne.n	8021e8c <HAL_UART_MspDeInit+0x38>
  {
    /* USER CODE BEGIN UART4_MspDeInit 0 */

    /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8021e66:	4b14      	ldr	r3, [pc, #80]	@ (8021eb8 <HAL_UART_MspDeInit+0x64>)
 8021e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e6a:	4a13      	ldr	r2, [pc, #76]	@ (8021eb8 <HAL_UART_MspDeInit+0x64>)
 8021e6c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8021e70:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8021e72:	2103      	movs	r1, #3
 8021e74:	4811      	ldr	r0, [pc, #68]	@ (8021ebc <HAL_UART_MspDeInit+0x68>)
 8021e76:	f001 f94b 	bl	8023110 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021e7e:	4618      	mov	r0, r3
 8021e80:	f000 fc00 	bl	8022684 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8021e84:	2034      	movs	r0, #52	@ 0x34
 8021e86:	f000 fb3c 	bl	8022502 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8021e8a:	e00e      	b.n	8021eaa <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART2)
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	4a0b      	ldr	r2, [pc, #44]	@ (8021ec0 <HAL_UART_MspDeInit+0x6c>)
 8021e92:	4293      	cmp	r3, r2
 8021e94:	d109      	bne.n	8021eaa <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8021e96:	4b08      	ldr	r3, [pc, #32]	@ (8021eb8 <HAL_UART_MspDeInit+0x64>)
 8021e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e9a:	4a07      	ldr	r2, [pc, #28]	@ (8021eb8 <HAL_UART_MspDeInit+0x64>)
 8021e9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8021ea0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8021ea2:	210c      	movs	r1, #12
 8021ea4:	4805      	ldr	r0, [pc, #20]	@ (8021ebc <HAL_UART_MspDeInit+0x68>)
 8021ea6:	f001 f933 	bl	8023110 <HAL_GPIO_DeInit>
}
 8021eaa:	bf00      	nop
 8021eac:	3708      	adds	r7, #8
 8021eae:	46bd      	mov	sp, r7
 8021eb0:	bd80      	pop	{r7, pc}
 8021eb2:	bf00      	nop
 8021eb4:	40004c00 	.word	0x40004c00
 8021eb8:	40023800 	.word	0x40023800
 8021ebc:	40020000 	.word	0x40020000
 8021ec0:	40004400 	.word	0x40004400

08021ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021ec4:	b580      	push	{r7, lr}
 8021ec6:	b08e      	sub	sp, #56	@ 0x38
 8021ec8:	af00      	add	r7, sp, #0
 8021eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021ecc:	2300      	movs	r3, #0
 8021ece:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021ed4:	2300      	movs	r3, #0
 8021ed6:	60fb      	str	r3, [r7, #12]
 8021ed8:	4b33      	ldr	r3, [pc, #204]	@ (8021fa8 <HAL_InitTick+0xe4>)
 8021eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021edc:	4a32      	ldr	r2, [pc, #200]	@ (8021fa8 <HAL_InitTick+0xe4>)
 8021ede:	f043 0310 	orr.w	r3, r3, #16
 8021ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8021ee4:	4b30      	ldr	r3, [pc, #192]	@ (8021fa8 <HAL_InitTick+0xe4>)
 8021ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021ee8:	f003 0310 	and.w	r3, r3, #16
 8021eec:	60fb      	str	r3, [r7, #12]
 8021eee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021ef0:	f107 0210 	add.w	r2, r7, #16
 8021ef4:	f107 0314 	add.w	r3, r7, #20
 8021ef8:	4611      	mov	r1, r2
 8021efa:	4618      	mov	r0, r3
 8021efc:	f002 fb2a 	bl	8024554 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021f00:	6a3b      	ldr	r3, [r7, #32]
 8021f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d103      	bne.n	8021f12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021f0a:	f002 fafb 	bl	8024504 <HAL_RCC_GetPCLK1Freq>
 8021f0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8021f10:	e004      	b.n	8021f1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021f12:	f002 faf7 	bl	8024504 <HAL_RCC_GetPCLK1Freq>
 8021f16:	4603      	mov	r3, r0
 8021f18:	005b      	lsls	r3, r3, #1
 8021f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021f1e:	4a23      	ldr	r2, [pc, #140]	@ (8021fac <HAL_InitTick+0xe8>)
 8021f20:	fba2 2303 	umull	r2, r3, r2, r3
 8021f24:	0c9b      	lsrs	r3, r3, #18
 8021f26:	3b01      	subs	r3, #1
 8021f28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021f2a:	4b21      	ldr	r3, [pc, #132]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f2c:	4a21      	ldr	r2, [pc, #132]	@ (8021fb4 <HAL_InitTick+0xf0>)
 8021f2e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021f30:	4b1f      	ldr	r3, [pc, #124]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8021f36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021f38:	4a1d      	ldr	r2, [pc, #116]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f40:	2200      	movs	r2, #0
 8021f42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f44:	4b1a      	ldr	r3, [pc, #104]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f46:	2200      	movs	r2, #0
 8021f48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f4a:	4b19      	ldr	r3, [pc, #100]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021f50:	4817      	ldr	r0, [pc, #92]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f52:	f002 ffff 	bl	8024f54 <HAL_TIM_Base_Init>
 8021f56:	4603      	mov	r3, r0
 8021f58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8021f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d11b      	bne.n	8021f9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021f64:	4812      	ldr	r0, [pc, #72]	@ (8021fb0 <HAL_InitTick+0xec>)
 8021f66:	f003 f84f 	bl	8025008 <HAL_TIM_Base_Start_IT>
 8021f6a:	4603      	mov	r3, r0
 8021f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8021f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d111      	bne.n	8021f9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021f78:	2036      	movs	r0, #54	@ 0x36
 8021f7a:	f000 fab4 	bl	80224e6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	2b0f      	cmp	r3, #15
 8021f82:	d808      	bhi.n	8021f96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021f84:	2200      	movs	r2, #0
 8021f86:	6879      	ldr	r1, [r7, #4]
 8021f88:	2036      	movs	r0, #54	@ 0x36
 8021f8a:	f000 fa90 	bl	80224ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8021fb8 <HAL_InitTick+0xf4>)
 8021f90:	687b      	ldr	r3, [r7, #4]
 8021f92:	6013      	str	r3, [r2, #0]
 8021f94:	e002      	b.n	8021f9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021f96:	2301      	movs	r3, #1
 8021f98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8021fa0:	4618      	mov	r0, r3
 8021fa2:	3738      	adds	r7, #56	@ 0x38
 8021fa4:	46bd      	mov	sp, r7
 8021fa6:	bd80      	pop	{r7, pc}
 8021fa8:	40023800 	.word	0x40023800
 8021fac:	431bde83 	.word	0x431bde83
 8021fb0:	20000590 	.word	0x20000590
 8021fb4:	40001000 	.word	0x40001000
 8021fb8:	20000004 	.word	0x20000004

08021fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021fbc:	b480      	push	{r7}
 8021fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8021fc0:	bf00      	nop
 8021fc2:	e7fd      	b.n	8021fc0 <NMI_Handler+0x4>

08021fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021fc4:	b480      	push	{r7}
 8021fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  //__BKPT(0);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021fc8:	bf00      	nop
 8021fca:	e7fd      	b.n	8021fc8 <HardFault_Handler+0x4>

08021fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fcc:	b480      	push	{r7}
 8021fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fd0:	bf00      	nop
 8021fd2:	e7fd      	b.n	8021fd0 <MemManage_Handler+0x4>

08021fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fd4:	b480      	push	{r7}
 8021fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fd8:	bf00      	nop
 8021fda:	e7fd      	b.n	8021fd8 <BusFault_Handler+0x4>

08021fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fdc:	b480      	push	{r7}
 8021fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fe0:	bf00      	nop
 8021fe2:	e7fd      	b.n	8021fe0 <UsageFault_Handler+0x4>

08021fe4 <DebugMon_Handler>:
#endif
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021fe4:	b480      	push	{r7}
 8021fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021fe8:	bf00      	nop
 8021fea:	46bd      	mov	sp, r7
 8021fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff0:	4770      	bx	lr
	...

08021ff4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8021ff8:	4802      	ldr	r0, [pc, #8]	@ (8022004 <DMA1_Stream2_IRQHandler+0x10>)
 8021ffa:	f000 fc8b 	bl	8022914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8021ffe:	bf00      	nop
 8022000:	bd80      	pop	{r7, pc}
 8022002:	bf00      	nop
 8022004:	200002d8 	.word	0x200002d8

08022008 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8022008:	b580      	push	{r7, lr}
 802200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802200c:	4802      	ldr	r0, [pc, #8]	@ (8022018 <UART4_IRQHandler+0x10>)
 802200e:	f003 fc23 	bl	8025858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8022012:	bf00      	nop
 8022014:	bd80      	pop	{r7, pc}
 8022016:	bf00      	nop
 8022018:	20000248 	.word	0x20000248

0802201c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 802201c:	b580      	push	{r7, lr}
 802201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022020:	4802      	ldr	r0, [pc, #8]	@ (802202c <TIM6_DAC_IRQHandler+0x10>)
 8022022:	f003 f861 	bl	80250e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022026:	bf00      	nop
 8022028:	bd80      	pop	{r7, pc}
 802202a:	bf00      	nop
 802202c:	20000590 	.word	0x20000590

08022030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8022030:	b480      	push	{r7}
 8022032:	af00      	add	r7, sp, #0
  return 1;
 8022034:	2301      	movs	r3, #1
}
 8022036:	4618      	mov	r0, r3
 8022038:	46bd      	mov	sp, r7
 802203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802203e:	4770      	bx	lr

08022040 <_kill>:

int _kill(int pid, int sig)
{
 8022040:	b580      	push	{r7, lr}
 8022042:	b082      	sub	sp, #8
 8022044:	af00      	add	r7, sp, #0
 8022046:	6078      	str	r0, [r7, #4]
 8022048:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 802204a:	f009 fd5f 	bl	802bb0c <__errno>
 802204e:	4603      	mov	r3, r0
 8022050:	2216      	movs	r2, #22
 8022052:	601a      	str	r2, [r3, #0]
  return -1;
 8022054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022058:	4618      	mov	r0, r3
 802205a:	3708      	adds	r7, #8
 802205c:	46bd      	mov	sp, r7
 802205e:	bd80      	pop	{r7, pc}

08022060 <_exit>:

void _exit (int status)
{
 8022060:	b580      	push	{r7, lr}
 8022062:	b082      	sub	sp, #8
 8022064:	af00      	add	r7, sp, #0
 8022066:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8022068:	f04f 31ff 	mov.w	r1, #4294967295
 802206c:	6878      	ldr	r0, [r7, #4]
 802206e:	f7ff ffe7 	bl	8022040 <_kill>
  while (1) {}    /* Make sure we hang here */
 8022072:	bf00      	nop
 8022074:	e7fd      	b.n	8022072 <_exit+0x12>

08022076 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8022076:	b580      	push	{r7, lr}
 8022078:	b086      	sub	sp, #24
 802207a:	af00      	add	r7, sp, #0
 802207c:	60f8      	str	r0, [r7, #12]
 802207e:	60b9      	str	r1, [r7, #8]
 8022080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022082:	2300      	movs	r3, #0
 8022084:	617b      	str	r3, [r7, #20]
 8022086:	e00a      	b.n	802209e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8022088:	f3af 8000 	nop.w
 802208c:	4601      	mov	r1, r0
 802208e:	68bb      	ldr	r3, [r7, #8]
 8022090:	1c5a      	adds	r2, r3, #1
 8022092:	60ba      	str	r2, [r7, #8]
 8022094:	b2ca      	uxtb	r2, r1
 8022096:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022098:	697b      	ldr	r3, [r7, #20]
 802209a:	3301      	adds	r3, #1
 802209c:	617b      	str	r3, [r7, #20]
 802209e:	697a      	ldr	r2, [r7, #20]
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	429a      	cmp	r2, r3
 80220a4:	dbf0      	blt.n	8022088 <_read+0x12>
  }

  return len;
 80220a6:	687b      	ldr	r3, [r7, #4]
}
 80220a8:	4618      	mov	r0, r3
 80220aa:	3718      	adds	r7, #24
 80220ac:	46bd      	mov	sp, r7
 80220ae:	bd80      	pop	{r7, pc}

080220b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80220b0:	b480      	push	{r7}
 80220b2:	b083      	sub	sp, #12
 80220b4:	af00      	add	r7, sp, #0
 80220b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80220b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80220bc:	4618      	mov	r0, r3
 80220be:	370c      	adds	r7, #12
 80220c0:	46bd      	mov	sp, r7
 80220c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220c6:	4770      	bx	lr

080220c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80220c8:	b480      	push	{r7}
 80220ca:	b083      	sub	sp, #12
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80220d2:	683b      	ldr	r3, [r7, #0]
 80220d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80220d8:	605a      	str	r2, [r3, #4]
  return 0;
 80220da:	2300      	movs	r3, #0
}
 80220dc:	4618      	mov	r0, r3
 80220de:	370c      	adds	r7, #12
 80220e0:	46bd      	mov	sp, r7
 80220e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220e6:	4770      	bx	lr

080220e8 <_isatty>:

int _isatty(int file)
{
 80220e8:	b480      	push	{r7}
 80220ea:	b083      	sub	sp, #12
 80220ec:	af00      	add	r7, sp, #0
 80220ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80220f0:	2301      	movs	r3, #1
}
 80220f2:	4618      	mov	r0, r3
 80220f4:	370c      	adds	r7, #12
 80220f6:	46bd      	mov	sp, r7
 80220f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220fc:	4770      	bx	lr

080220fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80220fe:	b480      	push	{r7}
 8022100:	b085      	sub	sp, #20
 8022102:	af00      	add	r7, sp, #0
 8022104:	60f8      	str	r0, [r7, #12]
 8022106:	60b9      	str	r1, [r7, #8]
 8022108:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802210a:	2300      	movs	r3, #0
}
 802210c:	4618      	mov	r0, r3
 802210e:	3714      	adds	r7, #20
 8022110:	46bd      	mov	sp, r7
 8022112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022116:	4770      	bx	lr

08022118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022118:	b580      	push	{r7, lr}
 802211a:	b086      	sub	sp, #24
 802211c:	af00      	add	r7, sp, #0
 802211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022120:	4a14      	ldr	r2, [pc, #80]	@ (8022174 <_sbrk+0x5c>)
 8022122:	4b15      	ldr	r3, [pc, #84]	@ (8022178 <_sbrk+0x60>)
 8022124:	1ad3      	subs	r3, r2, r3
 8022126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022128:	697b      	ldr	r3, [r7, #20]
 802212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802212c:	4b13      	ldr	r3, [pc, #76]	@ (802217c <_sbrk+0x64>)
 802212e:	681b      	ldr	r3, [r3, #0]
 8022130:	2b00      	cmp	r3, #0
 8022132:	d102      	bne.n	802213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022134:	4b11      	ldr	r3, [pc, #68]	@ (802217c <_sbrk+0x64>)
 8022136:	4a12      	ldr	r2, [pc, #72]	@ (8022180 <_sbrk+0x68>)
 8022138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802213a:	4b10      	ldr	r3, [pc, #64]	@ (802217c <_sbrk+0x64>)
 802213c:	681a      	ldr	r2, [r3, #0]
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	4413      	add	r3, r2
 8022142:	693a      	ldr	r2, [r7, #16]
 8022144:	429a      	cmp	r2, r3
 8022146:	d207      	bcs.n	8022158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8022148:	f009 fce0 	bl	802bb0c <__errno>
 802214c:	4603      	mov	r3, r0
 802214e:	220c      	movs	r2, #12
 8022150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8022152:	f04f 33ff 	mov.w	r3, #4294967295
 8022156:	e009      	b.n	802216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8022158:	4b08      	ldr	r3, [pc, #32]	@ (802217c <_sbrk+0x64>)
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802215e:	4b07      	ldr	r3, [pc, #28]	@ (802217c <_sbrk+0x64>)
 8022160:	681a      	ldr	r2, [r3, #0]
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	4413      	add	r3, r2
 8022166:	4a05      	ldr	r2, [pc, #20]	@ (802217c <_sbrk+0x64>)
 8022168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802216a:	68fb      	ldr	r3, [r7, #12]
}
 802216c:	4618      	mov	r0, r3
 802216e:	3718      	adds	r7, #24
 8022170:	46bd      	mov	sp, r7
 8022172:	bd80      	pop	{r7, pc}
 8022174:	20020000 	.word	0x20020000
 8022178:	00000600 	.word	0x00000600
 802217c:	200005d8 	.word	0x200005d8
 8022180:	2000e7e0 	.word	0x2000e7e0

08022184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8022184:	b480      	push	{r7}
 8022186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8022188:	4b06      	ldr	r3, [pc, #24]	@ (80221a4 <SystemInit+0x20>)
 802218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802218e:	4a05      	ldr	r2, [pc, #20]	@ (80221a4 <SystemInit+0x20>)
 8022190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8022194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8022198:	bf00      	nop
 802219a:	46bd      	mov	sp, r7
 802219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221a0:	4770      	bx	lr
 80221a2:	bf00      	nop
 80221a4:	e000ed00 	.word	0xe000ed00

080221a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80221a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80221e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80221ac:	f7ff ffea 	bl	8022184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80221b0:	480c      	ldr	r0, [pc, #48]	@ (80221e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80221b2:	490d      	ldr	r1, [pc, #52]	@ (80221e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80221b4:	4a0d      	ldr	r2, [pc, #52]	@ (80221ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80221b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80221b8:	e002      	b.n	80221c0 <LoopCopyDataInit>

080221ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80221ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80221bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80221be:	3304      	adds	r3, #4

080221c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80221c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80221c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80221c4:	d3f9      	bcc.n	80221ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80221c6:	4a0a      	ldr	r2, [pc, #40]	@ (80221f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80221c8:	4c0a      	ldr	r4, [pc, #40]	@ (80221f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80221ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80221cc:	e001      	b.n	80221d2 <LoopFillZerobss>

080221ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80221ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80221d0:	3204      	adds	r2, #4

080221d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80221d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80221d4:	d3fb      	bcc.n	80221ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80221d6:	f009 fc9f 	bl	802bb18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80221da:	f7ff fa31 	bl	8021640 <main>
  bx  lr    
 80221de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80221e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80221e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80221e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80221ec:	0802f6a0 	.word	0x0802f6a0
  ldr r2, =_sbss
 80221f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80221f4:	2000e7dc 	.word	0x2000e7dc

080221f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80221f8:	e7fe      	b.n	80221f8 <ADC_IRQHandler>
	...

080221fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80221fc:	b580      	push	{r7, lr}
 80221fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022200:	4b0e      	ldr	r3, [pc, #56]	@ (802223c <HAL_Init+0x40>)
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	4a0d      	ldr	r2, [pc, #52]	@ (802223c <HAL_Init+0x40>)
 8022206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802220a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802220c:	4b0b      	ldr	r3, [pc, #44]	@ (802223c <HAL_Init+0x40>)
 802220e:	681b      	ldr	r3, [r3, #0]
 8022210:	4a0a      	ldr	r2, [pc, #40]	@ (802223c <HAL_Init+0x40>)
 8022212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8022216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022218:	4b08      	ldr	r3, [pc, #32]	@ (802223c <HAL_Init+0x40>)
 802221a:	681b      	ldr	r3, [r3, #0]
 802221c:	4a07      	ldr	r2, [pc, #28]	@ (802223c <HAL_Init+0x40>)
 802221e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8022222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022224:	2003      	movs	r0, #3
 8022226:	f000 f937 	bl	8022498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802222a:	200f      	movs	r0, #15
 802222c:	f7ff fe4a 	bl	8021ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022230:	f7ff fcea 	bl	8021c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022234:	2300      	movs	r3, #0
}
 8022236:	4618      	mov	r0, r3
 8022238:	bd80      	pop	{r7, pc}
 802223a:	bf00      	nop
 802223c:	40023c00 	.word	0x40023c00

08022240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022240:	b480      	push	{r7}
 8022242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8022244:	4b06      	ldr	r3, [pc, #24]	@ (8022260 <HAL_IncTick+0x20>)
 8022246:	781b      	ldrb	r3, [r3, #0]
 8022248:	461a      	mov	r2, r3
 802224a:	4b06      	ldr	r3, [pc, #24]	@ (8022264 <HAL_IncTick+0x24>)
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	4413      	add	r3, r2
 8022250:	4a04      	ldr	r2, [pc, #16]	@ (8022264 <HAL_IncTick+0x24>)
 8022252:	6013      	str	r3, [r2, #0]
}
 8022254:	bf00      	nop
 8022256:	46bd      	mov	sp, r7
 8022258:	f85d 7b04 	ldr.w	r7, [sp], #4
 802225c:	4770      	bx	lr
 802225e:	bf00      	nop
 8022260:	20000008 	.word	0x20000008
 8022264:	200005dc 	.word	0x200005dc

08022268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022268:	b480      	push	{r7}
 802226a:	af00      	add	r7, sp, #0
  return uwTick;
 802226c:	4b03      	ldr	r3, [pc, #12]	@ (802227c <HAL_GetTick+0x14>)
 802226e:	681b      	ldr	r3, [r3, #0]
}
 8022270:	4618      	mov	r0, r3
 8022272:	46bd      	mov	sp, r7
 8022274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022278:	4770      	bx	lr
 802227a:	bf00      	nop
 802227c:	200005dc 	.word	0x200005dc

08022280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022280:	b580      	push	{r7, lr}
 8022282:	b084      	sub	sp, #16
 8022284:	af00      	add	r7, sp, #0
 8022286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022288:	f7ff ffee 	bl	8022268 <HAL_GetTick>
 802228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022292:	68fb      	ldr	r3, [r7, #12]
 8022294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022298:	d005      	beq.n	80222a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802229a:	4b0a      	ldr	r3, [pc, #40]	@ (80222c4 <HAL_Delay+0x44>)
 802229c:	781b      	ldrb	r3, [r3, #0]
 802229e:	461a      	mov	r2, r3
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	4413      	add	r3, r2
 80222a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80222a6:	bf00      	nop
 80222a8:	f7ff ffde 	bl	8022268 <HAL_GetTick>
 80222ac:	4602      	mov	r2, r0
 80222ae:	68bb      	ldr	r3, [r7, #8]
 80222b0:	1ad3      	subs	r3, r2, r3
 80222b2:	68fa      	ldr	r2, [r7, #12]
 80222b4:	429a      	cmp	r2, r3
 80222b6:	d8f7      	bhi.n	80222a8 <HAL_Delay+0x28>
  {
  }
}
 80222b8:	bf00      	nop
 80222ba:	bf00      	nop
 80222bc:	3710      	adds	r7, #16
 80222be:	46bd      	mov	sp, r7
 80222c0:	bd80      	pop	{r7, pc}
 80222c2:	bf00      	nop
 80222c4:	20000008 	.word	0x20000008

080222c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80222c8:	b480      	push	{r7}
 80222ca:	b085      	sub	sp, #20
 80222cc:	af00      	add	r7, sp, #0
 80222ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	f003 0307 	and.w	r3, r3, #7
 80222d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80222d8:	4b0c      	ldr	r3, [pc, #48]	@ (802230c <__NVIC_SetPriorityGrouping+0x44>)
 80222da:	68db      	ldr	r3, [r3, #12]
 80222dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80222de:	68ba      	ldr	r2, [r7, #8]
 80222e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80222e4:	4013      	ands	r3, r2
 80222e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80222e8:	68fb      	ldr	r3, [r7, #12]
 80222ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80222ec:	68bb      	ldr	r3, [r7, #8]
 80222ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80222f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80222f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80222f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80222fa:	4a04      	ldr	r2, [pc, #16]	@ (802230c <__NVIC_SetPriorityGrouping+0x44>)
 80222fc:	68bb      	ldr	r3, [r7, #8]
 80222fe:	60d3      	str	r3, [r2, #12]
}
 8022300:	bf00      	nop
 8022302:	3714      	adds	r7, #20
 8022304:	46bd      	mov	sp, r7
 8022306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802230a:	4770      	bx	lr
 802230c:	e000ed00 	.word	0xe000ed00

08022310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022310:	b480      	push	{r7}
 8022312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022314:	4b04      	ldr	r3, [pc, #16]	@ (8022328 <__NVIC_GetPriorityGrouping+0x18>)
 8022316:	68db      	ldr	r3, [r3, #12]
 8022318:	0a1b      	lsrs	r3, r3, #8
 802231a:	f003 0307 	and.w	r3, r3, #7
}
 802231e:	4618      	mov	r0, r3
 8022320:	46bd      	mov	sp, r7
 8022322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022326:	4770      	bx	lr
 8022328:	e000ed00 	.word	0xe000ed00

0802232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802232c:	b480      	push	{r7}
 802232e:	b083      	sub	sp, #12
 8022330:	af00      	add	r7, sp, #0
 8022332:	4603      	mov	r3, r0
 8022334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802233a:	2b00      	cmp	r3, #0
 802233c:	db0b      	blt.n	8022356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802233e:	79fb      	ldrb	r3, [r7, #7]
 8022340:	f003 021f 	and.w	r2, r3, #31
 8022344:	4907      	ldr	r1, [pc, #28]	@ (8022364 <__NVIC_EnableIRQ+0x38>)
 8022346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802234a:	095b      	lsrs	r3, r3, #5
 802234c:	2001      	movs	r0, #1
 802234e:	fa00 f202 	lsl.w	r2, r0, r2
 8022352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8022356:	bf00      	nop
 8022358:	370c      	adds	r7, #12
 802235a:	46bd      	mov	sp, r7
 802235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022360:	4770      	bx	lr
 8022362:	bf00      	nop
 8022364:	e000e100 	.word	0xe000e100

08022368 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8022368:	b480      	push	{r7}
 802236a:	b083      	sub	sp, #12
 802236c:	af00      	add	r7, sp, #0
 802236e:	4603      	mov	r3, r0
 8022370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022376:	2b00      	cmp	r3, #0
 8022378:	db12      	blt.n	80223a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802237a:	79fb      	ldrb	r3, [r7, #7]
 802237c:	f003 021f 	and.w	r2, r3, #31
 8022380:	490a      	ldr	r1, [pc, #40]	@ (80223ac <__NVIC_DisableIRQ+0x44>)
 8022382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022386:	095b      	lsrs	r3, r3, #5
 8022388:	2001      	movs	r0, #1
 802238a:	fa00 f202 	lsl.w	r2, r0, r2
 802238e:	3320      	adds	r3, #32
 8022390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8022394:	f3bf 8f4f 	dsb	sy
}
 8022398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802239a:	f3bf 8f6f 	isb	sy
}
 802239e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80223a0:	bf00      	nop
 80223a2:	370c      	adds	r7, #12
 80223a4:	46bd      	mov	sp, r7
 80223a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223aa:	4770      	bx	lr
 80223ac:	e000e100 	.word	0xe000e100

080223b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80223b0:	b480      	push	{r7}
 80223b2:	b083      	sub	sp, #12
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	4603      	mov	r3, r0
 80223b8:	6039      	str	r1, [r7, #0]
 80223ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80223bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	db0a      	blt.n	80223da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80223c4:	683b      	ldr	r3, [r7, #0]
 80223c6:	b2da      	uxtb	r2, r3
 80223c8:	490c      	ldr	r1, [pc, #48]	@ (80223fc <__NVIC_SetPriority+0x4c>)
 80223ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223ce:	0112      	lsls	r2, r2, #4
 80223d0:	b2d2      	uxtb	r2, r2
 80223d2:	440b      	add	r3, r1
 80223d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80223d8:	e00a      	b.n	80223f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80223da:	683b      	ldr	r3, [r7, #0]
 80223dc:	b2da      	uxtb	r2, r3
 80223de:	4908      	ldr	r1, [pc, #32]	@ (8022400 <__NVIC_SetPriority+0x50>)
 80223e0:	79fb      	ldrb	r3, [r7, #7]
 80223e2:	f003 030f 	and.w	r3, r3, #15
 80223e6:	3b04      	subs	r3, #4
 80223e8:	0112      	lsls	r2, r2, #4
 80223ea:	b2d2      	uxtb	r2, r2
 80223ec:	440b      	add	r3, r1
 80223ee:	761a      	strb	r2, [r3, #24]
}
 80223f0:	bf00      	nop
 80223f2:	370c      	adds	r7, #12
 80223f4:	46bd      	mov	sp, r7
 80223f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223fa:	4770      	bx	lr
 80223fc:	e000e100 	.word	0xe000e100
 8022400:	e000ed00 	.word	0xe000ed00

08022404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022404:	b480      	push	{r7}
 8022406:	b089      	sub	sp, #36	@ 0x24
 8022408:	af00      	add	r7, sp, #0
 802240a:	60f8      	str	r0, [r7, #12]
 802240c:	60b9      	str	r1, [r7, #8]
 802240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022410:	68fb      	ldr	r3, [r7, #12]
 8022412:	f003 0307 	and.w	r3, r3, #7
 8022416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022418:	69fb      	ldr	r3, [r7, #28]
 802241a:	f1c3 0307 	rsb	r3, r3, #7
 802241e:	2b04      	cmp	r3, #4
 8022420:	bf28      	it	cs
 8022422:	2304      	movcs	r3, #4
 8022424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022426:	69fb      	ldr	r3, [r7, #28]
 8022428:	3304      	adds	r3, #4
 802242a:	2b06      	cmp	r3, #6
 802242c:	d902      	bls.n	8022434 <NVIC_EncodePriority+0x30>
 802242e:	69fb      	ldr	r3, [r7, #28]
 8022430:	3b03      	subs	r3, #3
 8022432:	e000      	b.n	8022436 <NVIC_EncodePriority+0x32>
 8022434:	2300      	movs	r3, #0
 8022436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022438:	f04f 32ff 	mov.w	r2, #4294967295
 802243c:	69bb      	ldr	r3, [r7, #24]
 802243e:	fa02 f303 	lsl.w	r3, r2, r3
 8022442:	43da      	mvns	r2, r3
 8022444:	68bb      	ldr	r3, [r7, #8]
 8022446:	401a      	ands	r2, r3
 8022448:	697b      	ldr	r3, [r7, #20]
 802244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802244c:	f04f 31ff 	mov.w	r1, #4294967295
 8022450:	697b      	ldr	r3, [r7, #20]
 8022452:	fa01 f303 	lsl.w	r3, r1, r3
 8022456:	43d9      	mvns	r1, r3
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802245c:	4313      	orrs	r3, r2
         );
}
 802245e:	4618      	mov	r0, r3
 8022460:	3724      	adds	r7, #36	@ 0x24
 8022462:	46bd      	mov	sp, r7
 8022464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022468:	4770      	bx	lr
	...

0802246c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802246c:	b480      	push	{r7}
 802246e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8022470:	f3bf 8f4f 	dsb	sy
}
 8022474:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8022476:	4b06      	ldr	r3, [pc, #24]	@ (8022490 <__NVIC_SystemReset+0x24>)
 8022478:	68db      	ldr	r3, [r3, #12]
 802247a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802247e:	4904      	ldr	r1, [pc, #16]	@ (8022490 <__NVIC_SystemReset+0x24>)
 8022480:	4b04      	ldr	r3, [pc, #16]	@ (8022494 <__NVIC_SystemReset+0x28>)
 8022482:	4313      	orrs	r3, r2
 8022484:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8022486:	f3bf 8f4f 	dsb	sy
}
 802248a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802248c:	bf00      	nop
 802248e:	e7fd      	b.n	802248c <__NVIC_SystemReset+0x20>
 8022490:	e000ed00 	.word	0xe000ed00
 8022494:	05fa0004 	.word	0x05fa0004

08022498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022498:	b580      	push	{r7, lr}
 802249a:	b082      	sub	sp, #8
 802249c:	af00      	add	r7, sp, #0
 802249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80224a0:	6878      	ldr	r0, [r7, #4]
 80224a2:	f7ff ff11 	bl	80222c8 <__NVIC_SetPriorityGrouping>
}
 80224a6:	bf00      	nop
 80224a8:	3708      	adds	r7, #8
 80224aa:	46bd      	mov	sp, r7
 80224ac:	bd80      	pop	{r7, pc}

080224ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80224ae:	b580      	push	{r7, lr}
 80224b0:	b086      	sub	sp, #24
 80224b2:	af00      	add	r7, sp, #0
 80224b4:	4603      	mov	r3, r0
 80224b6:	60b9      	str	r1, [r7, #8]
 80224b8:	607a      	str	r2, [r7, #4]
 80224ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80224bc:	2300      	movs	r3, #0
 80224be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80224c0:	f7ff ff26 	bl	8022310 <__NVIC_GetPriorityGrouping>
 80224c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80224c6:	687a      	ldr	r2, [r7, #4]
 80224c8:	68b9      	ldr	r1, [r7, #8]
 80224ca:	6978      	ldr	r0, [r7, #20]
 80224cc:	f7ff ff9a 	bl	8022404 <NVIC_EncodePriority>
 80224d0:	4602      	mov	r2, r0
 80224d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80224d6:	4611      	mov	r1, r2
 80224d8:	4618      	mov	r0, r3
 80224da:	f7ff ff69 	bl	80223b0 <__NVIC_SetPriority>
}
 80224de:	bf00      	nop
 80224e0:	3718      	adds	r7, #24
 80224e2:	46bd      	mov	sp, r7
 80224e4:	bd80      	pop	{r7, pc}

080224e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80224e6:	b580      	push	{r7, lr}
 80224e8:	b082      	sub	sp, #8
 80224ea:	af00      	add	r7, sp, #0
 80224ec:	4603      	mov	r3, r0
 80224ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80224f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80224f4:	4618      	mov	r0, r3
 80224f6:	f7ff ff19 	bl	802232c <__NVIC_EnableIRQ>
}
 80224fa:	bf00      	nop
 80224fc:	3708      	adds	r7, #8
 80224fe:	46bd      	mov	sp, r7
 8022500:	bd80      	pop	{r7, pc}

08022502 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8022502:	b580      	push	{r7, lr}
 8022504:	b082      	sub	sp, #8
 8022506:	af00      	add	r7, sp, #0
 8022508:	4603      	mov	r3, r0
 802250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 802250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022510:	4618      	mov	r0, r3
 8022512:	f7ff ff29 	bl	8022368 <__NVIC_DisableIRQ>
}
 8022516:	bf00      	nop
 8022518:	3708      	adds	r7, #8
 802251a:	46bd      	mov	sp, r7
 802251c:	bd80      	pop	{r7, pc}

0802251e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 802251e:	b580      	push	{r7, lr}
 8022520:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8022522:	f7ff ffa3 	bl	802246c <__NVIC_SystemReset>
	...

08022528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8022528:	b580      	push	{r7, lr}
 802252a:	b086      	sub	sp, #24
 802252c:	af00      	add	r7, sp, #0
 802252e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8022530:	2300      	movs	r3, #0
 8022532:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8022534:	f7ff fe98 	bl	8022268 <HAL_GetTick>
 8022538:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802253a:	687b      	ldr	r3, [r7, #4]
 802253c:	2b00      	cmp	r3, #0
 802253e:	d101      	bne.n	8022544 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8022540:	2301      	movs	r3, #1
 8022542:	e099      	b.n	8022678 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	2202      	movs	r2, #2
 8022548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	2200      	movs	r2, #0
 8022550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	681b      	ldr	r3, [r3, #0]
 8022558:	681a      	ldr	r2, [r3, #0]
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	f022 0201 	bic.w	r2, r2, #1
 8022562:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022564:	e00f      	b.n	8022586 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022566:	f7ff fe7f 	bl	8022268 <HAL_GetTick>
 802256a:	4602      	mov	r2, r0
 802256c:	693b      	ldr	r3, [r7, #16]
 802256e:	1ad3      	subs	r3, r2, r3
 8022570:	2b05      	cmp	r3, #5
 8022572:	d908      	bls.n	8022586 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	2220      	movs	r2, #32
 8022578:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	2203      	movs	r2, #3
 802257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8022582:	2303      	movs	r3, #3
 8022584:	e078      	b.n	8022678 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	f003 0301 	and.w	r3, r3, #1
 8022590:	2b00      	cmp	r3, #0
 8022592:	d1e8      	bne.n	8022566 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	681b      	ldr	r3, [r3, #0]
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802259c:	697a      	ldr	r2, [r7, #20]
 802259e:	4b38      	ldr	r3, [pc, #224]	@ (8022680 <HAL_DMA_Init+0x158>)
 80225a0:	4013      	ands	r3, r2
 80225a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	685a      	ldr	r2, [r3, #4]
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	689b      	ldr	r3, [r3, #8]
 80225ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80225b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	691b      	ldr	r3, [r3, #16]
 80225b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80225be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	699b      	ldr	r3, [r3, #24]
 80225c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80225ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	6a1b      	ldr	r3, [r3, #32]
 80225d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80225d2:	697a      	ldr	r2, [r7, #20]
 80225d4:	4313      	orrs	r3, r2
 80225d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80225dc:	2b04      	cmp	r3, #4
 80225de:	d107      	bne.n	80225f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80225e8:	4313      	orrs	r3, r2
 80225ea:	697a      	ldr	r2, [r7, #20]
 80225ec:	4313      	orrs	r3, r2
 80225ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	697a      	ldr	r2, [r7, #20]
 80225f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	695b      	ldr	r3, [r3, #20]
 80225fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8022600:	697b      	ldr	r3, [r7, #20]
 8022602:	f023 0307 	bic.w	r3, r3, #7
 8022606:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8022608:	687b      	ldr	r3, [r7, #4]
 802260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802260c:	697a      	ldr	r2, [r7, #20]
 802260e:	4313      	orrs	r3, r2
 8022610:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022612:	687b      	ldr	r3, [r7, #4]
 8022614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022616:	2b04      	cmp	r3, #4
 8022618:	d117      	bne.n	802264a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802261e:	697a      	ldr	r2, [r7, #20]
 8022620:	4313      	orrs	r3, r2
 8022622:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022628:	2b00      	cmp	r3, #0
 802262a:	d00e      	beq.n	802264a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802262c:	6878      	ldr	r0, [r7, #4]
 802262e:	f000 fb5f 	bl	8022cf0 <DMA_CheckFifoParam>
 8022632:	4603      	mov	r3, r0
 8022634:	2b00      	cmp	r3, #0
 8022636:	d008      	beq.n	802264a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	2240      	movs	r2, #64	@ 0x40
 802263c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	2201      	movs	r2, #1
 8022642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8022646:	2301      	movs	r3, #1
 8022648:	e016      	b.n	8022678 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	681b      	ldr	r3, [r3, #0]
 802264e:	697a      	ldr	r2, [r7, #20]
 8022650:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8022652:	6878      	ldr	r0, [r7, #4]
 8022654:	f000 fb16 	bl	8022c84 <DMA_CalcBaseAndBitshift>
 8022658:	4603      	mov	r3, r0
 802265a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022660:	223f      	movs	r2, #63	@ 0x3f
 8022662:	409a      	lsls	r2, r3
 8022664:	68fb      	ldr	r3, [r7, #12]
 8022666:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	2200      	movs	r2, #0
 802266c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	2201      	movs	r2, #1
 8022672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8022676:	2300      	movs	r3, #0
}
 8022678:	4618      	mov	r0, r3
 802267a:	3718      	adds	r7, #24
 802267c:	46bd      	mov	sp, r7
 802267e:	bd80      	pop	{r7, pc}
 8022680:	f010803f 	.word	0xf010803f

08022684 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8022684:	b580      	push	{r7, lr}
 8022686:	b084      	sub	sp, #16
 8022688:	af00      	add	r7, sp, #0
 802268a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	2b00      	cmp	r3, #0
 8022690:	d101      	bne.n	8022696 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8022692:	2301      	movs	r3, #1
 8022694:	e050      	b.n	8022738 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802269c:	b2db      	uxtb	r3, r3
 802269e:	2b02      	cmp	r3, #2
 80226a0:	d101      	bne.n	80226a6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80226a2:	2302      	movs	r3, #2
 80226a4:	e048      	b.n	8022738 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	681b      	ldr	r3, [r3, #0]
 80226aa:	681a      	ldr	r2, [r3, #0]
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	f022 0201 	bic.w	r2, r2, #1
 80226b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	2200      	movs	r2, #0
 80226bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	2200      	movs	r2, #0
 80226c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	681b      	ldr	r3, [r3, #0]
 80226ca:	2200      	movs	r2, #0
 80226cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	681b      	ldr	r3, [r3, #0]
 80226d2:	2200      	movs	r2, #0
 80226d4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	2200      	movs	r2, #0
 80226dc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	681b      	ldr	r3, [r3, #0]
 80226e2:	2221      	movs	r2, #33	@ 0x21
 80226e4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80226e6:	6878      	ldr	r0, [r7, #4]
 80226e8:	f000 facc 	bl	8022c84 <DMA_CalcBaseAndBitshift>
 80226ec:	4603      	mov	r3, r0
 80226ee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	2200      	movs	r2, #0
 80226f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	2200      	movs	r2, #0
 80226fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	2200      	movs	r2, #0
 8022700:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	2200      	movs	r2, #0
 8022706:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	2200      	movs	r2, #0
 802270c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	2200      	movs	r2, #0
 8022712:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022718:	223f      	movs	r2, #63	@ 0x3f
 802271a:	409a      	lsls	r2, r3
 802271c:	68fb      	ldr	r3, [r7, #12]
 802271e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	2200      	movs	r2, #0
 8022724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	2200      	movs	r2, #0
 802272a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	2200      	movs	r2, #0
 8022732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8022736:	2300      	movs	r3, #0
}
 8022738:	4618      	mov	r0, r3
 802273a:	3710      	adds	r7, #16
 802273c:	46bd      	mov	sp, r7
 802273e:	bd80      	pop	{r7, pc}

08022740 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022740:	b580      	push	{r7, lr}
 8022742:	b086      	sub	sp, #24
 8022744:	af00      	add	r7, sp, #0
 8022746:	60f8      	str	r0, [r7, #12]
 8022748:	60b9      	str	r1, [r7, #8]
 802274a:	607a      	str	r2, [r7, #4]
 802274c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802274e:	2300      	movs	r3, #0
 8022750:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8022752:	68fb      	ldr	r3, [r7, #12]
 8022754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022756:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8022758:	68fb      	ldr	r3, [r7, #12]
 802275a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 802275e:	2b01      	cmp	r3, #1
 8022760:	d101      	bne.n	8022766 <HAL_DMA_Start_IT+0x26>
 8022762:	2302      	movs	r3, #2
 8022764:	e040      	b.n	80227e8 <HAL_DMA_Start_IT+0xa8>
 8022766:	68fb      	ldr	r3, [r7, #12]
 8022768:	2201      	movs	r2, #1
 802276a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802276e:	68fb      	ldr	r3, [r7, #12]
 8022770:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8022774:	b2db      	uxtb	r3, r3
 8022776:	2b01      	cmp	r3, #1
 8022778:	d12f      	bne.n	80227da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	2202      	movs	r2, #2
 802277e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	2200      	movs	r2, #0
 8022786:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8022788:	683b      	ldr	r3, [r7, #0]
 802278a:	687a      	ldr	r2, [r7, #4]
 802278c:	68b9      	ldr	r1, [r7, #8]
 802278e:	68f8      	ldr	r0, [r7, #12]
 8022790:	f000 fa4a 	bl	8022c28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022794:	68fb      	ldr	r3, [r7, #12]
 8022796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022798:	223f      	movs	r2, #63	@ 0x3f
 802279a:	409a      	lsls	r2, r3
 802279c:	693b      	ldr	r3, [r7, #16]
 802279e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80227a0:	68fb      	ldr	r3, [r7, #12]
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	681a      	ldr	r2, [r3, #0]
 80227a6:	68fb      	ldr	r3, [r7, #12]
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	f042 0216 	orr.w	r2, r2, #22
 80227ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80227b0:	68fb      	ldr	r3, [r7, #12]
 80227b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	d007      	beq.n	80227c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	681b      	ldr	r3, [r3, #0]
 80227bc:	681a      	ldr	r2, [r3, #0]
 80227be:	68fb      	ldr	r3, [r7, #12]
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	f042 0208 	orr.w	r2, r2, #8
 80227c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80227c8:	68fb      	ldr	r3, [r7, #12]
 80227ca:	681b      	ldr	r3, [r3, #0]
 80227cc:	681a      	ldr	r2, [r3, #0]
 80227ce:	68fb      	ldr	r3, [r7, #12]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	f042 0201 	orr.w	r2, r2, #1
 80227d6:	601a      	str	r2, [r3, #0]
 80227d8:	e005      	b.n	80227e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	2200      	movs	r2, #0
 80227de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80227e2:	2302      	movs	r3, #2
 80227e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80227e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80227e8:	4618      	mov	r0, r3
 80227ea:	3718      	adds	r7, #24
 80227ec:	46bd      	mov	sp, r7
 80227ee:	bd80      	pop	{r7, pc}

080227f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	b084      	sub	sp, #16
 80227f4:	af00      	add	r7, sp, #0
 80227f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80227fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80227fe:	f7ff fd33 	bl	8022268 <HAL_GetTick>
 8022802:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802280a:	b2db      	uxtb	r3, r3
 802280c:	2b02      	cmp	r3, #2
 802280e:	d008      	beq.n	8022822 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	2280      	movs	r2, #128	@ 0x80
 8022814:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	2200      	movs	r2, #0
 802281a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 802281e:	2301      	movs	r3, #1
 8022820:	e052      	b.n	80228c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	681a      	ldr	r2, [r3, #0]
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	f022 0216 	bic.w	r2, r2, #22
 8022830:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	695a      	ldr	r2, [r3, #20]
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	681b      	ldr	r3, [r3, #0]
 802283c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022840:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022846:	2b00      	cmp	r3, #0
 8022848:	d103      	bne.n	8022852 <HAL_DMA_Abort+0x62>
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802284e:	2b00      	cmp	r3, #0
 8022850:	d007      	beq.n	8022862 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	681a      	ldr	r2, [r3, #0]
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	681b      	ldr	r3, [r3, #0]
 802285c:	f022 0208 	bic.w	r2, r2, #8
 8022860:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	681a      	ldr	r2, [r3, #0]
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	f022 0201 	bic.w	r2, r2, #1
 8022870:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022872:	e013      	b.n	802289c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022874:	f7ff fcf8 	bl	8022268 <HAL_GetTick>
 8022878:	4602      	mov	r2, r0
 802287a:	68bb      	ldr	r3, [r7, #8]
 802287c:	1ad3      	subs	r3, r2, r3
 802287e:	2b05      	cmp	r3, #5
 8022880:	d90c      	bls.n	802289c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	2220      	movs	r2, #32
 8022886:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	2203      	movs	r2, #3
 802288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	2200      	movs	r2, #0
 8022894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8022898:	2303      	movs	r3, #3
 802289a:	e015      	b.n	80228c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802289c:	687b      	ldr	r3, [r7, #4]
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	f003 0301 	and.w	r3, r3, #1
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d1e4      	bne.n	8022874 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80228ae:	223f      	movs	r2, #63	@ 0x3f
 80228b0:	409a      	lsls	r2, r3
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	2201      	movs	r2, #1
 80228ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	2200      	movs	r2, #0
 80228c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80228c6:	2300      	movs	r3, #0
}
 80228c8:	4618      	mov	r0, r3
 80228ca:	3710      	adds	r7, #16
 80228cc:	46bd      	mov	sp, r7
 80228ce:	bd80      	pop	{r7, pc}

080228d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80228d0:	b480      	push	{r7}
 80228d2:	b083      	sub	sp, #12
 80228d4:	af00      	add	r7, sp, #0
 80228d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80228de:	b2db      	uxtb	r3, r3
 80228e0:	2b02      	cmp	r3, #2
 80228e2:	d004      	beq.n	80228ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	2280      	movs	r2, #128	@ 0x80
 80228e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80228ea:	2301      	movs	r3, #1
 80228ec:	e00c      	b.n	8022908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	2205      	movs	r2, #5
 80228f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	681a      	ldr	r2, [r3, #0]
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	681b      	ldr	r3, [r3, #0]
 8022900:	f022 0201 	bic.w	r2, r2, #1
 8022904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8022906:	2300      	movs	r3, #0
}
 8022908:	4618      	mov	r0, r3
 802290a:	370c      	adds	r7, #12
 802290c:	46bd      	mov	sp, r7
 802290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022912:	4770      	bx	lr

08022914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8022914:	b580      	push	{r7, lr}
 8022916:	b086      	sub	sp, #24
 8022918:	af00      	add	r7, sp, #0
 802291a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802291c:	2300      	movs	r3, #0
 802291e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8022920:	4b8e      	ldr	r3, [pc, #568]	@ (8022b5c <HAL_DMA_IRQHandler+0x248>)
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	4a8e      	ldr	r2, [pc, #568]	@ (8022b60 <HAL_DMA_IRQHandler+0x24c>)
 8022926:	fba2 2303 	umull	r2, r3, r2, r3
 802292a:	0a9b      	lsrs	r3, r3, #10
 802292c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8022934:	693b      	ldr	r3, [r7, #16]
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802293e:	2208      	movs	r2, #8
 8022940:	409a      	lsls	r2, r3
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	4013      	ands	r3, r2
 8022946:	2b00      	cmp	r3, #0
 8022948:	d01a      	beq.n	8022980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	681b      	ldr	r3, [r3, #0]
 802294e:	681b      	ldr	r3, [r3, #0]
 8022950:	f003 0304 	and.w	r3, r3, #4
 8022954:	2b00      	cmp	r3, #0
 8022956:	d013      	beq.n	8022980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	681b      	ldr	r3, [r3, #0]
 802295c:	681a      	ldr	r2, [r3, #0]
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	f022 0204 	bic.w	r2, r2, #4
 8022966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802296c:	2208      	movs	r2, #8
 802296e:	409a      	lsls	r2, r3
 8022970:	693b      	ldr	r3, [r7, #16]
 8022972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8022978:	f043 0201 	orr.w	r2, r3, #1
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022984:	2201      	movs	r2, #1
 8022986:	409a      	lsls	r2, r3
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	4013      	ands	r3, r2
 802298c:	2b00      	cmp	r3, #0
 802298e:	d012      	beq.n	80229b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	681b      	ldr	r3, [r3, #0]
 8022994:	695b      	ldr	r3, [r3, #20]
 8022996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802299a:	2b00      	cmp	r3, #0
 802299c:	d00b      	beq.n	80229b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802299e:	687b      	ldr	r3, [r7, #4]
 80229a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80229a2:	2201      	movs	r2, #1
 80229a4:	409a      	lsls	r2, r3
 80229a6:	693b      	ldr	r3, [r7, #16]
 80229a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80229ae:	f043 0202 	orr.w	r2, r3, #2
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80229ba:	2204      	movs	r2, #4
 80229bc:	409a      	lsls	r2, r3
 80229be:	68fb      	ldr	r3, [r7, #12]
 80229c0:	4013      	ands	r3, r2
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d012      	beq.n	80229ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	681b      	ldr	r3, [r3, #0]
 80229cc:	f003 0302 	and.w	r3, r3, #2
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	d00b      	beq.n	80229ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80229d8:	2204      	movs	r2, #4
 80229da:	409a      	lsls	r2, r3
 80229dc:	693b      	ldr	r3, [r7, #16]
 80229de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80229e4:	f043 0204 	orr.w	r2, r3, #4
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80229ec:	687b      	ldr	r3, [r7, #4]
 80229ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80229f0:	2210      	movs	r2, #16
 80229f2:	409a      	lsls	r2, r3
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	4013      	ands	r3, r2
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	d043      	beq.n	8022a84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	f003 0308 	and.w	r3, r3, #8
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d03c      	beq.n	8022a84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022a0e:	2210      	movs	r2, #16
 8022a10:	409a      	lsls	r2, r3
 8022a12:	693b      	ldr	r3, [r7, #16]
 8022a14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022a16:	687b      	ldr	r3, [r7, #4]
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d018      	beq.n	8022a56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022a24:	687b      	ldr	r3, [r7, #4]
 8022a26:	681b      	ldr	r3, [r3, #0]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	d108      	bne.n	8022a44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d024      	beq.n	8022a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022a3e:	6878      	ldr	r0, [r7, #4]
 8022a40:	4798      	blx	r3
 8022a42:	e01f      	b.n	8022a84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d01b      	beq.n	8022a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8022a4c:	687b      	ldr	r3, [r7, #4]
 8022a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022a50:	6878      	ldr	r0, [r7, #4]
 8022a52:	4798      	blx	r3
 8022a54:	e016      	b.n	8022a84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d107      	bne.n	8022a74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	681b      	ldr	r3, [r3, #0]
 8022a68:	681a      	ldr	r2, [r3, #0]
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	f022 0208 	bic.w	r2, r2, #8
 8022a72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	d003      	beq.n	8022a84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022a80:	6878      	ldr	r0, [r7, #4]
 8022a82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022a88:	2220      	movs	r2, #32
 8022a8a:	409a      	lsls	r2, r3
 8022a8c:	68fb      	ldr	r3, [r7, #12]
 8022a8e:	4013      	ands	r3, r2
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	f000 808f 	beq.w	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	681b      	ldr	r3, [r3, #0]
 8022a9c:	f003 0310 	and.w	r3, r3, #16
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	f000 8087 	beq.w	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022aaa:	2220      	movs	r2, #32
 8022aac:	409a      	lsls	r2, r3
 8022aae:	693b      	ldr	r3, [r7, #16]
 8022ab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8022ab8:	b2db      	uxtb	r3, r3
 8022aba:	2b05      	cmp	r3, #5
 8022abc:	d136      	bne.n	8022b2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	681a      	ldr	r2, [r3, #0]
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	681b      	ldr	r3, [r3, #0]
 8022ac8:	f022 0216 	bic.w	r2, r2, #22
 8022acc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	681b      	ldr	r3, [r3, #0]
 8022ad2:	695a      	ldr	r2, [r3, #20]
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022adc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d103      	bne.n	8022aee <HAL_DMA_IRQHandler+0x1da>
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d007      	beq.n	8022afe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	681b      	ldr	r3, [r3, #0]
 8022af2:	681a      	ldr	r2, [r3, #0]
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	f022 0208 	bic.w	r2, r2, #8
 8022afc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022b02:	223f      	movs	r2, #63	@ 0x3f
 8022b04:	409a      	lsls	r2, r3
 8022b06:	693b      	ldr	r3, [r7, #16]
 8022b08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	2201      	movs	r2, #1
 8022b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	2200      	movs	r2, #0
 8022b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	d07e      	beq.n	8022c20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022b26:	6878      	ldr	r0, [r7, #4]
 8022b28:	4798      	blx	r3
        }
        return;
 8022b2a:	e079      	b.n	8022c20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d01d      	beq.n	8022b76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	d10d      	bne.n	8022b64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022b4c:	2b00      	cmp	r3, #0
 8022b4e:	d031      	beq.n	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022b54:	6878      	ldr	r0, [r7, #4]
 8022b56:	4798      	blx	r3
 8022b58:	e02c      	b.n	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
 8022b5a:	bf00      	nop
 8022b5c:	20000000 	.word	0x20000000
 8022b60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d023      	beq.n	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022b70:	6878      	ldr	r0, [r7, #4]
 8022b72:	4798      	blx	r3
 8022b74:	e01e      	b.n	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d10f      	bne.n	8022ba4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	681a      	ldr	r2, [r3, #0]
 8022b8a:	687b      	ldr	r3, [r7, #4]
 8022b8c:	681b      	ldr	r3, [r3, #0]
 8022b8e:	f022 0210 	bic.w	r2, r2, #16
 8022b92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	2201      	movs	r2, #1
 8022b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	2200      	movs	r2, #0
 8022ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022ba8:	2b00      	cmp	r3, #0
 8022baa:	d003      	beq.n	8022bb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022bb0:	6878      	ldr	r0, [r7, #4]
 8022bb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d032      	beq.n	8022c22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8022bc0:	f003 0301 	and.w	r3, r3, #1
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	d022      	beq.n	8022c0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	2205      	movs	r2, #5
 8022bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	681b      	ldr	r3, [r3, #0]
 8022bd4:	681a      	ldr	r2, [r3, #0]
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	f022 0201 	bic.w	r2, r2, #1
 8022bde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8022be0:	68bb      	ldr	r3, [r7, #8]
 8022be2:	3301      	adds	r3, #1
 8022be4:	60bb      	str	r3, [r7, #8]
 8022be6:	697a      	ldr	r2, [r7, #20]
 8022be8:	429a      	cmp	r2, r3
 8022bea:	d307      	bcc.n	8022bfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	681b      	ldr	r3, [r3, #0]
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	f003 0301 	and.w	r3, r3, #1
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d1f2      	bne.n	8022be0 <HAL_DMA_IRQHandler+0x2cc>
 8022bfa:	e000      	b.n	8022bfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8022bfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	2201      	movs	r2, #1
 8022c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	2200      	movs	r2, #0
 8022c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d005      	beq.n	8022c22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8022c16:	687b      	ldr	r3, [r7, #4]
 8022c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022c1a:	6878      	ldr	r0, [r7, #4]
 8022c1c:	4798      	blx	r3
 8022c1e:	e000      	b.n	8022c22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8022c20:	bf00      	nop
    }
  }
}
 8022c22:	3718      	adds	r7, #24
 8022c24:	46bd      	mov	sp, r7
 8022c26:	bd80      	pop	{r7, pc}

08022c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022c28:	b480      	push	{r7}
 8022c2a:	b085      	sub	sp, #20
 8022c2c:	af00      	add	r7, sp, #0
 8022c2e:	60f8      	str	r0, [r7, #12]
 8022c30:	60b9      	str	r1, [r7, #8]
 8022c32:	607a      	str	r2, [r7, #4]
 8022c34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8022c36:	68fb      	ldr	r3, [r7, #12]
 8022c38:	681b      	ldr	r3, [r3, #0]
 8022c3a:	681a      	ldr	r2, [r3, #0]
 8022c3c:	68fb      	ldr	r3, [r7, #12]
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8022c44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8022c46:	68fb      	ldr	r3, [r7, #12]
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	683a      	ldr	r2, [r7, #0]
 8022c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8022c4e:	68fb      	ldr	r3, [r7, #12]
 8022c50:	689b      	ldr	r3, [r3, #8]
 8022c52:	2b40      	cmp	r3, #64	@ 0x40
 8022c54:	d108      	bne.n	8022c68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8022c56:	68fb      	ldr	r3, [r7, #12]
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	687a      	ldr	r2, [r7, #4]
 8022c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8022c5e:	68fb      	ldr	r3, [r7, #12]
 8022c60:	681b      	ldr	r3, [r3, #0]
 8022c62:	68ba      	ldr	r2, [r7, #8]
 8022c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8022c66:	e007      	b.n	8022c78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	681b      	ldr	r3, [r3, #0]
 8022c6c:	68ba      	ldr	r2, [r7, #8]
 8022c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8022c70:	68fb      	ldr	r3, [r7, #12]
 8022c72:	681b      	ldr	r3, [r3, #0]
 8022c74:	687a      	ldr	r2, [r7, #4]
 8022c76:	60da      	str	r2, [r3, #12]
}
 8022c78:	bf00      	nop
 8022c7a:	3714      	adds	r7, #20
 8022c7c:	46bd      	mov	sp, r7
 8022c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c82:	4770      	bx	lr

08022c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8022c84:	b480      	push	{r7}
 8022c86:	b085      	sub	sp, #20
 8022c88:	af00      	add	r7, sp, #0
 8022c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	b2db      	uxtb	r3, r3
 8022c92:	3b10      	subs	r3, #16
 8022c94:	4a14      	ldr	r2, [pc, #80]	@ (8022ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8022c96:	fba2 2303 	umull	r2, r3, r2, r3
 8022c9a:	091b      	lsrs	r3, r3, #4
 8022c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8022c9e:	4a13      	ldr	r2, [pc, #76]	@ (8022cec <DMA_CalcBaseAndBitshift+0x68>)
 8022ca0:	68fb      	ldr	r3, [r7, #12]
 8022ca2:	4413      	add	r3, r2
 8022ca4:	781b      	ldrb	r3, [r3, #0]
 8022ca6:	461a      	mov	r2, r3
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8022cac:	68fb      	ldr	r3, [r7, #12]
 8022cae:	2b03      	cmp	r3, #3
 8022cb0:	d909      	bls.n	8022cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8022cba:	f023 0303 	bic.w	r3, r3, #3
 8022cbe:	1d1a      	adds	r2, r3, #4
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8022cc4:	e007      	b.n	8022cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	681b      	ldr	r3, [r3, #0]
 8022cca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8022cce:	f023 0303 	bic.w	r3, r3, #3
 8022cd2:	687a      	ldr	r2, [r7, #4]
 8022cd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8022cda:	4618      	mov	r0, r3
 8022cdc:	3714      	adds	r7, #20
 8022cde:	46bd      	mov	sp, r7
 8022ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ce4:	4770      	bx	lr
 8022ce6:	bf00      	nop
 8022ce8:	aaaaaaab 	.word	0xaaaaaaab
 8022cec:	0802f220 	.word	0x0802f220

08022cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8022cf0:	b480      	push	{r7}
 8022cf2:	b085      	sub	sp, #20
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8022cf8:	2300      	movs	r3, #0
 8022cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	699b      	ldr	r3, [r3, #24]
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d11f      	bne.n	8022d4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8022d0a:	68bb      	ldr	r3, [r7, #8]
 8022d0c:	2b03      	cmp	r3, #3
 8022d0e:	d856      	bhi.n	8022dbe <DMA_CheckFifoParam+0xce>
 8022d10:	a201      	add	r2, pc, #4	@ (adr r2, 8022d18 <DMA_CheckFifoParam+0x28>)
 8022d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d16:	bf00      	nop
 8022d18:	08022d29 	.word	0x08022d29
 8022d1c:	08022d3b 	.word	0x08022d3b
 8022d20:	08022d29 	.word	0x08022d29
 8022d24:	08022dbf 	.word	0x08022dbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022d28:	687b      	ldr	r3, [r7, #4]
 8022d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	d046      	beq.n	8022dc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8022d34:	2301      	movs	r3, #1
 8022d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022d38:	e043      	b.n	8022dc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8022d42:	d140      	bne.n	8022dc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8022d44:	2301      	movs	r3, #1
 8022d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022d48:	e03d      	b.n	8022dc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	699b      	ldr	r3, [r3, #24]
 8022d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022d52:	d121      	bne.n	8022d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8022d54:	68bb      	ldr	r3, [r7, #8]
 8022d56:	2b03      	cmp	r3, #3
 8022d58:	d837      	bhi.n	8022dca <DMA_CheckFifoParam+0xda>
 8022d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8022d60 <DMA_CheckFifoParam+0x70>)
 8022d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d60:	08022d71 	.word	0x08022d71
 8022d64:	08022d77 	.word	0x08022d77
 8022d68:	08022d71 	.word	0x08022d71
 8022d6c:	08022d89 	.word	0x08022d89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8022d70:	2301      	movs	r3, #1
 8022d72:	73fb      	strb	r3, [r7, #15]
      break;
 8022d74:	e030      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d025      	beq.n	8022dce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8022d82:	2301      	movs	r3, #1
 8022d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022d86:	e022      	b.n	8022dce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8022d90:	d11f      	bne.n	8022dd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8022d92:	2301      	movs	r3, #1
 8022d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8022d96:	e01c      	b.n	8022dd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8022d98:	68bb      	ldr	r3, [r7, #8]
 8022d9a:	2b02      	cmp	r3, #2
 8022d9c:	d903      	bls.n	8022da6 <DMA_CheckFifoParam+0xb6>
 8022d9e:	68bb      	ldr	r3, [r7, #8]
 8022da0:	2b03      	cmp	r3, #3
 8022da2:	d003      	beq.n	8022dac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8022da4:	e018      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8022da6:	2301      	movs	r3, #1
 8022da8:	73fb      	strb	r3, [r7, #15]
      break;
 8022daa:	e015      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	d00e      	beq.n	8022dd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8022db8:	2301      	movs	r3, #1
 8022dba:	73fb      	strb	r3, [r7, #15]
      break;
 8022dbc:	e00b      	b.n	8022dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8022dbe:	bf00      	nop
 8022dc0:	e00a      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8022dc2:	bf00      	nop
 8022dc4:	e008      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8022dc6:	bf00      	nop
 8022dc8:	e006      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8022dca:	bf00      	nop
 8022dcc:	e004      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8022dce:	bf00      	nop
 8022dd0:	e002      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8022dd2:	bf00      	nop
 8022dd4:	e000      	b.n	8022dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8022dd6:	bf00      	nop
    }
  } 
  
  return status; 
 8022dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8022dda:	4618      	mov	r0, r3
 8022ddc:	3714      	adds	r7, #20
 8022dde:	46bd      	mov	sp, r7
 8022de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022de4:	4770      	bx	lr
 8022de6:	bf00      	nop

08022de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022de8:	b480      	push	{r7}
 8022dea:	b089      	sub	sp, #36	@ 0x24
 8022dec:	af00      	add	r7, sp, #0
 8022dee:	6078      	str	r0, [r7, #4]
 8022df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8022df2:	2300      	movs	r3, #0
 8022df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8022df6:	2300      	movs	r3, #0
 8022df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8022dfa:	2300      	movs	r3, #0
 8022dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022dfe:	2300      	movs	r3, #0
 8022e00:	61fb      	str	r3, [r7, #28]
 8022e02:	e165      	b.n	80230d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8022e04:	2201      	movs	r2, #1
 8022e06:	69fb      	ldr	r3, [r7, #28]
 8022e08:	fa02 f303 	lsl.w	r3, r2, r3
 8022e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8022e0e:	683b      	ldr	r3, [r7, #0]
 8022e10:	681b      	ldr	r3, [r3, #0]
 8022e12:	697a      	ldr	r2, [r7, #20]
 8022e14:	4013      	ands	r3, r2
 8022e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8022e18:	693a      	ldr	r2, [r7, #16]
 8022e1a:	697b      	ldr	r3, [r7, #20]
 8022e1c:	429a      	cmp	r2, r3
 8022e1e:	f040 8154 	bne.w	80230ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8022e22:	683b      	ldr	r3, [r7, #0]
 8022e24:	685b      	ldr	r3, [r3, #4]
 8022e26:	f003 0303 	and.w	r3, r3, #3
 8022e2a:	2b01      	cmp	r3, #1
 8022e2c:	d005      	beq.n	8022e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022e2e:	683b      	ldr	r3, [r7, #0]
 8022e30:	685b      	ldr	r3, [r3, #4]
 8022e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8022e36:	2b02      	cmp	r3, #2
 8022e38:	d130      	bne.n	8022e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8022e3a:	687b      	ldr	r3, [r7, #4]
 8022e3c:	689b      	ldr	r3, [r3, #8]
 8022e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8022e40:	69fb      	ldr	r3, [r7, #28]
 8022e42:	005b      	lsls	r3, r3, #1
 8022e44:	2203      	movs	r2, #3
 8022e46:	fa02 f303 	lsl.w	r3, r2, r3
 8022e4a:	43db      	mvns	r3, r3
 8022e4c:	69ba      	ldr	r2, [r7, #24]
 8022e4e:	4013      	ands	r3, r2
 8022e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8022e52:	683b      	ldr	r3, [r7, #0]
 8022e54:	68da      	ldr	r2, [r3, #12]
 8022e56:	69fb      	ldr	r3, [r7, #28]
 8022e58:	005b      	lsls	r3, r3, #1
 8022e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8022e5e:	69ba      	ldr	r2, [r7, #24]
 8022e60:	4313      	orrs	r3, r2
 8022e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	69ba      	ldr	r2, [r7, #24]
 8022e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	685b      	ldr	r3, [r3, #4]
 8022e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8022e70:	2201      	movs	r2, #1
 8022e72:	69fb      	ldr	r3, [r7, #28]
 8022e74:	fa02 f303 	lsl.w	r3, r2, r3
 8022e78:	43db      	mvns	r3, r3
 8022e7a:	69ba      	ldr	r2, [r7, #24]
 8022e7c:	4013      	ands	r3, r2
 8022e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8022e80:	683b      	ldr	r3, [r7, #0]
 8022e82:	685b      	ldr	r3, [r3, #4]
 8022e84:	091b      	lsrs	r3, r3, #4
 8022e86:	f003 0201 	and.w	r2, r3, #1
 8022e8a:	69fb      	ldr	r3, [r7, #28]
 8022e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8022e90:	69ba      	ldr	r2, [r7, #24]
 8022e92:	4313      	orrs	r3, r2
 8022e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	69ba      	ldr	r2, [r7, #24]
 8022e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8022e9c:	683b      	ldr	r3, [r7, #0]
 8022e9e:	685b      	ldr	r3, [r3, #4]
 8022ea0:	f003 0303 	and.w	r3, r3, #3
 8022ea4:	2b03      	cmp	r3, #3
 8022ea6:	d017      	beq.n	8022ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	68db      	ldr	r3, [r3, #12]
 8022eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8022eae:	69fb      	ldr	r3, [r7, #28]
 8022eb0:	005b      	lsls	r3, r3, #1
 8022eb2:	2203      	movs	r2, #3
 8022eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8022eb8:	43db      	mvns	r3, r3
 8022eba:	69ba      	ldr	r2, [r7, #24]
 8022ebc:	4013      	ands	r3, r2
 8022ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8022ec0:	683b      	ldr	r3, [r7, #0]
 8022ec2:	689a      	ldr	r2, [r3, #8]
 8022ec4:	69fb      	ldr	r3, [r7, #28]
 8022ec6:	005b      	lsls	r3, r3, #1
 8022ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8022ecc:	69ba      	ldr	r2, [r7, #24]
 8022ece:	4313      	orrs	r3, r2
 8022ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	69ba      	ldr	r2, [r7, #24]
 8022ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022ed8:	683b      	ldr	r3, [r7, #0]
 8022eda:	685b      	ldr	r3, [r3, #4]
 8022edc:	f003 0303 	and.w	r3, r3, #3
 8022ee0:	2b02      	cmp	r3, #2
 8022ee2:	d123      	bne.n	8022f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8022ee4:	69fb      	ldr	r3, [r7, #28]
 8022ee6:	08da      	lsrs	r2, r3, #3
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	3208      	adds	r2, #8
 8022eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8022ef2:	69fb      	ldr	r3, [r7, #28]
 8022ef4:	f003 0307 	and.w	r3, r3, #7
 8022ef8:	009b      	lsls	r3, r3, #2
 8022efa:	220f      	movs	r2, #15
 8022efc:	fa02 f303 	lsl.w	r3, r2, r3
 8022f00:	43db      	mvns	r3, r3
 8022f02:	69ba      	ldr	r2, [r7, #24]
 8022f04:	4013      	ands	r3, r2
 8022f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8022f08:	683b      	ldr	r3, [r7, #0]
 8022f0a:	691a      	ldr	r2, [r3, #16]
 8022f0c:	69fb      	ldr	r3, [r7, #28]
 8022f0e:	f003 0307 	and.w	r3, r3, #7
 8022f12:	009b      	lsls	r3, r3, #2
 8022f14:	fa02 f303 	lsl.w	r3, r2, r3
 8022f18:	69ba      	ldr	r2, [r7, #24]
 8022f1a:	4313      	orrs	r3, r2
 8022f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8022f1e:	69fb      	ldr	r3, [r7, #28]
 8022f20:	08da      	lsrs	r2, r3, #3
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	3208      	adds	r2, #8
 8022f26:	69b9      	ldr	r1, [r7, #24]
 8022f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	681b      	ldr	r3, [r3, #0]
 8022f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8022f32:	69fb      	ldr	r3, [r7, #28]
 8022f34:	005b      	lsls	r3, r3, #1
 8022f36:	2203      	movs	r2, #3
 8022f38:	fa02 f303 	lsl.w	r3, r2, r3
 8022f3c:	43db      	mvns	r3, r3
 8022f3e:	69ba      	ldr	r2, [r7, #24]
 8022f40:	4013      	ands	r3, r2
 8022f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8022f44:	683b      	ldr	r3, [r7, #0]
 8022f46:	685b      	ldr	r3, [r3, #4]
 8022f48:	f003 0203 	and.w	r2, r3, #3
 8022f4c:	69fb      	ldr	r3, [r7, #28]
 8022f4e:	005b      	lsls	r3, r3, #1
 8022f50:	fa02 f303 	lsl.w	r3, r2, r3
 8022f54:	69ba      	ldr	r2, [r7, #24]
 8022f56:	4313      	orrs	r3, r2
 8022f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	69ba      	ldr	r2, [r7, #24]
 8022f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8022f60:	683b      	ldr	r3, [r7, #0]
 8022f62:	685b      	ldr	r3, [r3, #4]
 8022f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	f000 80ae 	beq.w	80230ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022f6e:	2300      	movs	r3, #0
 8022f70:	60fb      	str	r3, [r7, #12]
 8022f72:	4b5d      	ldr	r3, [pc, #372]	@ (80230e8 <HAL_GPIO_Init+0x300>)
 8022f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022f76:	4a5c      	ldr	r2, [pc, #368]	@ (80230e8 <HAL_GPIO_Init+0x300>)
 8022f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8022f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8022f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80230e8 <HAL_GPIO_Init+0x300>)
 8022f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022f86:	60fb      	str	r3, [r7, #12]
 8022f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8022f8a:	4a58      	ldr	r2, [pc, #352]	@ (80230ec <HAL_GPIO_Init+0x304>)
 8022f8c:	69fb      	ldr	r3, [r7, #28]
 8022f8e:	089b      	lsrs	r3, r3, #2
 8022f90:	3302      	adds	r3, #2
 8022f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8022f98:	69fb      	ldr	r3, [r7, #28]
 8022f9a:	f003 0303 	and.w	r3, r3, #3
 8022f9e:	009b      	lsls	r3, r3, #2
 8022fa0:	220f      	movs	r2, #15
 8022fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8022fa6:	43db      	mvns	r3, r3
 8022fa8:	69ba      	ldr	r2, [r7, #24]
 8022faa:	4013      	ands	r3, r2
 8022fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80230f0 <HAL_GPIO_Init+0x308>)
 8022fb2:	4293      	cmp	r3, r2
 8022fb4:	d025      	beq.n	8023002 <HAL_GPIO_Init+0x21a>
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80230f4 <HAL_GPIO_Init+0x30c>)
 8022fba:	4293      	cmp	r3, r2
 8022fbc:	d01f      	beq.n	8022ffe <HAL_GPIO_Init+0x216>
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	4a4d      	ldr	r2, [pc, #308]	@ (80230f8 <HAL_GPIO_Init+0x310>)
 8022fc2:	4293      	cmp	r3, r2
 8022fc4:	d019      	beq.n	8022ffa <HAL_GPIO_Init+0x212>
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	4a4c      	ldr	r2, [pc, #304]	@ (80230fc <HAL_GPIO_Init+0x314>)
 8022fca:	4293      	cmp	r3, r2
 8022fcc:	d013      	beq.n	8022ff6 <HAL_GPIO_Init+0x20e>
 8022fce:	687b      	ldr	r3, [r7, #4]
 8022fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8023100 <HAL_GPIO_Init+0x318>)
 8022fd2:	4293      	cmp	r3, r2
 8022fd4:	d00d      	beq.n	8022ff2 <HAL_GPIO_Init+0x20a>
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8023104 <HAL_GPIO_Init+0x31c>)
 8022fda:	4293      	cmp	r3, r2
 8022fdc:	d007      	beq.n	8022fee <HAL_GPIO_Init+0x206>
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	4a49      	ldr	r2, [pc, #292]	@ (8023108 <HAL_GPIO_Init+0x320>)
 8022fe2:	4293      	cmp	r3, r2
 8022fe4:	d101      	bne.n	8022fea <HAL_GPIO_Init+0x202>
 8022fe6:	2306      	movs	r3, #6
 8022fe8:	e00c      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8022fea:	2307      	movs	r3, #7
 8022fec:	e00a      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8022fee:	2305      	movs	r3, #5
 8022ff0:	e008      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8022ff2:	2304      	movs	r3, #4
 8022ff4:	e006      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8022ff6:	2303      	movs	r3, #3
 8022ff8:	e004      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8022ffa:	2302      	movs	r3, #2
 8022ffc:	e002      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8022ffe:	2301      	movs	r3, #1
 8023000:	e000      	b.n	8023004 <HAL_GPIO_Init+0x21c>
 8023002:	2300      	movs	r3, #0
 8023004:	69fa      	ldr	r2, [r7, #28]
 8023006:	f002 0203 	and.w	r2, r2, #3
 802300a:	0092      	lsls	r2, r2, #2
 802300c:	4093      	lsls	r3, r2
 802300e:	69ba      	ldr	r2, [r7, #24]
 8023010:	4313      	orrs	r3, r2
 8023012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8023014:	4935      	ldr	r1, [pc, #212]	@ (80230ec <HAL_GPIO_Init+0x304>)
 8023016:	69fb      	ldr	r3, [r7, #28]
 8023018:	089b      	lsrs	r3, r3, #2
 802301a:	3302      	adds	r3, #2
 802301c:	69ba      	ldr	r2, [r7, #24]
 802301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8023022:	4b3a      	ldr	r3, [pc, #232]	@ (802310c <HAL_GPIO_Init+0x324>)
 8023024:	689b      	ldr	r3, [r3, #8]
 8023026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023028:	693b      	ldr	r3, [r7, #16]
 802302a:	43db      	mvns	r3, r3
 802302c:	69ba      	ldr	r2, [r7, #24]
 802302e:	4013      	ands	r3, r2
 8023030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8023032:	683b      	ldr	r3, [r7, #0]
 8023034:	685b      	ldr	r3, [r3, #4]
 8023036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802303a:	2b00      	cmp	r3, #0
 802303c:	d003      	beq.n	8023046 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 802303e:	69ba      	ldr	r2, [r7, #24]
 8023040:	693b      	ldr	r3, [r7, #16]
 8023042:	4313      	orrs	r3, r2
 8023044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8023046:	4a31      	ldr	r2, [pc, #196]	@ (802310c <HAL_GPIO_Init+0x324>)
 8023048:	69bb      	ldr	r3, [r7, #24]
 802304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802304c:	4b2f      	ldr	r3, [pc, #188]	@ (802310c <HAL_GPIO_Init+0x324>)
 802304e:	68db      	ldr	r3, [r3, #12]
 8023050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023052:	693b      	ldr	r3, [r7, #16]
 8023054:	43db      	mvns	r3, r3
 8023056:	69ba      	ldr	r2, [r7, #24]
 8023058:	4013      	ands	r3, r2
 802305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802305c:	683b      	ldr	r3, [r7, #0]
 802305e:	685b      	ldr	r3, [r3, #4]
 8023060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8023064:	2b00      	cmp	r3, #0
 8023066:	d003      	beq.n	8023070 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8023068:	69ba      	ldr	r2, [r7, #24]
 802306a:	693b      	ldr	r3, [r7, #16]
 802306c:	4313      	orrs	r3, r2
 802306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8023070:	4a26      	ldr	r2, [pc, #152]	@ (802310c <HAL_GPIO_Init+0x324>)
 8023072:	69bb      	ldr	r3, [r7, #24]
 8023074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8023076:	4b25      	ldr	r3, [pc, #148]	@ (802310c <HAL_GPIO_Init+0x324>)
 8023078:	685b      	ldr	r3, [r3, #4]
 802307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802307c:	693b      	ldr	r3, [r7, #16]
 802307e:	43db      	mvns	r3, r3
 8023080:	69ba      	ldr	r2, [r7, #24]
 8023082:	4013      	ands	r3, r2
 8023084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8023086:	683b      	ldr	r3, [r7, #0]
 8023088:	685b      	ldr	r3, [r3, #4]
 802308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802308e:	2b00      	cmp	r3, #0
 8023090:	d003      	beq.n	802309a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8023092:	69ba      	ldr	r2, [r7, #24]
 8023094:	693b      	ldr	r3, [r7, #16]
 8023096:	4313      	orrs	r3, r2
 8023098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802309a:	4a1c      	ldr	r2, [pc, #112]	@ (802310c <HAL_GPIO_Init+0x324>)
 802309c:	69bb      	ldr	r3, [r7, #24]
 802309e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80230a0:	4b1a      	ldr	r3, [pc, #104]	@ (802310c <HAL_GPIO_Init+0x324>)
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80230a6:	693b      	ldr	r3, [r7, #16]
 80230a8:	43db      	mvns	r3, r3
 80230aa:	69ba      	ldr	r2, [r7, #24]
 80230ac:	4013      	ands	r3, r2
 80230ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80230b0:	683b      	ldr	r3, [r7, #0]
 80230b2:	685b      	ldr	r3, [r3, #4]
 80230b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80230b8:	2b00      	cmp	r3, #0
 80230ba:	d003      	beq.n	80230c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80230bc:	69ba      	ldr	r2, [r7, #24]
 80230be:	693b      	ldr	r3, [r7, #16]
 80230c0:	4313      	orrs	r3, r2
 80230c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80230c4:	4a11      	ldr	r2, [pc, #68]	@ (802310c <HAL_GPIO_Init+0x324>)
 80230c6:	69bb      	ldr	r3, [r7, #24]
 80230c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80230ca:	69fb      	ldr	r3, [r7, #28]
 80230cc:	3301      	adds	r3, #1
 80230ce:	61fb      	str	r3, [r7, #28]
 80230d0:	69fb      	ldr	r3, [r7, #28]
 80230d2:	2b0f      	cmp	r3, #15
 80230d4:	f67f ae96 	bls.w	8022e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80230d8:	bf00      	nop
 80230da:	bf00      	nop
 80230dc:	3724      	adds	r7, #36	@ 0x24
 80230de:	46bd      	mov	sp, r7
 80230e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230e4:	4770      	bx	lr
 80230e6:	bf00      	nop
 80230e8:	40023800 	.word	0x40023800
 80230ec:	40013800 	.word	0x40013800
 80230f0:	40020000 	.word	0x40020000
 80230f4:	40020400 	.word	0x40020400
 80230f8:	40020800 	.word	0x40020800
 80230fc:	40020c00 	.word	0x40020c00
 8023100:	40021000 	.word	0x40021000
 8023104:	40021400 	.word	0x40021400
 8023108:	40021800 	.word	0x40021800
 802310c:	40013c00 	.word	0x40013c00

08023110 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8023110:	b480      	push	{r7}
 8023112:	b087      	sub	sp, #28
 8023114:	af00      	add	r7, sp, #0
 8023116:	6078      	str	r0, [r7, #4]
 8023118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802311a:	2300      	movs	r3, #0
 802311c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802311e:	2300      	movs	r3, #0
 8023120:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8023122:	2300      	movs	r3, #0
 8023124:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023126:	2300      	movs	r3, #0
 8023128:	617b      	str	r3, [r7, #20]
 802312a:	e0c7      	b.n	80232bc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802312c:	2201      	movs	r2, #1
 802312e:	697b      	ldr	r3, [r7, #20]
 8023130:	fa02 f303 	lsl.w	r3, r2, r3
 8023134:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8023136:	683a      	ldr	r2, [r7, #0]
 8023138:	693b      	ldr	r3, [r7, #16]
 802313a:	4013      	ands	r3, r2
 802313c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802313e:	68fa      	ldr	r2, [r7, #12]
 8023140:	693b      	ldr	r3, [r7, #16]
 8023142:	429a      	cmp	r2, r3
 8023144:	f040 80b7 	bne.w	80232b6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8023148:	4a62      	ldr	r2, [pc, #392]	@ (80232d4 <HAL_GPIO_DeInit+0x1c4>)
 802314a:	697b      	ldr	r3, [r7, #20]
 802314c:	089b      	lsrs	r3, r3, #2
 802314e:	3302      	adds	r3, #2
 8023150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023154:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8023156:	697b      	ldr	r3, [r7, #20]
 8023158:	f003 0303 	and.w	r3, r3, #3
 802315c:	009b      	lsls	r3, r3, #2
 802315e:	220f      	movs	r2, #15
 8023160:	fa02 f303 	lsl.w	r3, r2, r3
 8023164:	68ba      	ldr	r2, [r7, #8]
 8023166:	4013      	ands	r3, r2
 8023168:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 802316a:	687b      	ldr	r3, [r7, #4]
 802316c:	4a5a      	ldr	r2, [pc, #360]	@ (80232d8 <HAL_GPIO_DeInit+0x1c8>)
 802316e:	4293      	cmp	r3, r2
 8023170:	d025      	beq.n	80231be <HAL_GPIO_DeInit+0xae>
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	4a59      	ldr	r2, [pc, #356]	@ (80232dc <HAL_GPIO_DeInit+0x1cc>)
 8023176:	4293      	cmp	r3, r2
 8023178:	d01f      	beq.n	80231ba <HAL_GPIO_DeInit+0xaa>
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	4a58      	ldr	r2, [pc, #352]	@ (80232e0 <HAL_GPIO_DeInit+0x1d0>)
 802317e:	4293      	cmp	r3, r2
 8023180:	d019      	beq.n	80231b6 <HAL_GPIO_DeInit+0xa6>
 8023182:	687b      	ldr	r3, [r7, #4]
 8023184:	4a57      	ldr	r2, [pc, #348]	@ (80232e4 <HAL_GPIO_DeInit+0x1d4>)
 8023186:	4293      	cmp	r3, r2
 8023188:	d013      	beq.n	80231b2 <HAL_GPIO_DeInit+0xa2>
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	4a56      	ldr	r2, [pc, #344]	@ (80232e8 <HAL_GPIO_DeInit+0x1d8>)
 802318e:	4293      	cmp	r3, r2
 8023190:	d00d      	beq.n	80231ae <HAL_GPIO_DeInit+0x9e>
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	4a55      	ldr	r2, [pc, #340]	@ (80232ec <HAL_GPIO_DeInit+0x1dc>)
 8023196:	4293      	cmp	r3, r2
 8023198:	d007      	beq.n	80231aa <HAL_GPIO_DeInit+0x9a>
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	4a54      	ldr	r2, [pc, #336]	@ (80232f0 <HAL_GPIO_DeInit+0x1e0>)
 802319e:	4293      	cmp	r3, r2
 80231a0:	d101      	bne.n	80231a6 <HAL_GPIO_DeInit+0x96>
 80231a2:	2306      	movs	r3, #6
 80231a4:	e00c      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231a6:	2307      	movs	r3, #7
 80231a8:	e00a      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231aa:	2305      	movs	r3, #5
 80231ac:	e008      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231ae:	2304      	movs	r3, #4
 80231b0:	e006      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231b2:	2303      	movs	r3, #3
 80231b4:	e004      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231b6:	2302      	movs	r3, #2
 80231b8:	e002      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231ba:	2301      	movs	r3, #1
 80231bc:	e000      	b.n	80231c0 <HAL_GPIO_DeInit+0xb0>
 80231be:	2300      	movs	r3, #0
 80231c0:	697a      	ldr	r2, [r7, #20]
 80231c2:	f002 0203 	and.w	r2, r2, #3
 80231c6:	0092      	lsls	r2, r2, #2
 80231c8:	4093      	lsls	r3, r2
 80231ca:	68ba      	ldr	r2, [r7, #8]
 80231cc:	429a      	cmp	r2, r3
 80231ce:	d132      	bne.n	8023236 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80231d0:	4b48      	ldr	r3, [pc, #288]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231d2:	681a      	ldr	r2, [r3, #0]
 80231d4:	68fb      	ldr	r3, [r7, #12]
 80231d6:	43db      	mvns	r3, r3
 80231d8:	4946      	ldr	r1, [pc, #280]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231da:	4013      	ands	r3, r2
 80231dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80231de:	4b45      	ldr	r3, [pc, #276]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231e0:	685a      	ldr	r2, [r3, #4]
 80231e2:	68fb      	ldr	r3, [r7, #12]
 80231e4:	43db      	mvns	r3, r3
 80231e6:	4943      	ldr	r1, [pc, #268]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231e8:	4013      	ands	r3, r2
 80231ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80231ec:	4b41      	ldr	r3, [pc, #260]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231ee:	68da      	ldr	r2, [r3, #12]
 80231f0:	68fb      	ldr	r3, [r7, #12]
 80231f2:	43db      	mvns	r3, r3
 80231f4:	493f      	ldr	r1, [pc, #252]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231f6:	4013      	ands	r3, r2
 80231f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80231fa:	4b3e      	ldr	r3, [pc, #248]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 80231fc:	689a      	ldr	r2, [r3, #8]
 80231fe:	68fb      	ldr	r3, [r7, #12]
 8023200:	43db      	mvns	r3, r3
 8023202:	493c      	ldr	r1, [pc, #240]	@ (80232f4 <HAL_GPIO_DeInit+0x1e4>)
 8023204:	4013      	ands	r3, r2
 8023206:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8023208:	697b      	ldr	r3, [r7, #20]
 802320a:	f003 0303 	and.w	r3, r3, #3
 802320e:	009b      	lsls	r3, r3, #2
 8023210:	220f      	movs	r2, #15
 8023212:	fa02 f303 	lsl.w	r3, r2, r3
 8023216:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8023218:	4a2e      	ldr	r2, [pc, #184]	@ (80232d4 <HAL_GPIO_DeInit+0x1c4>)
 802321a:	697b      	ldr	r3, [r7, #20]
 802321c:	089b      	lsrs	r3, r3, #2
 802321e:	3302      	adds	r3, #2
 8023220:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8023224:	68bb      	ldr	r3, [r7, #8]
 8023226:	43da      	mvns	r2, r3
 8023228:	482a      	ldr	r0, [pc, #168]	@ (80232d4 <HAL_GPIO_DeInit+0x1c4>)
 802322a:	697b      	ldr	r3, [r7, #20]
 802322c:	089b      	lsrs	r3, r3, #2
 802322e:	400a      	ands	r2, r1
 8023230:	3302      	adds	r3, #2
 8023232:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	681a      	ldr	r2, [r3, #0]
 802323a:	697b      	ldr	r3, [r7, #20]
 802323c:	005b      	lsls	r3, r3, #1
 802323e:	2103      	movs	r1, #3
 8023240:	fa01 f303 	lsl.w	r3, r1, r3
 8023244:	43db      	mvns	r3, r3
 8023246:	401a      	ands	r2, r3
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802324c:	697b      	ldr	r3, [r7, #20]
 802324e:	08da      	lsrs	r2, r3, #3
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	3208      	adds	r2, #8
 8023254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023258:	697b      	ldr	r3, [r7, #20]
 802325a:	f003 0307 	and.w	r3, r3, #7
 802325e:	009b      	lsls	r3, r3, #2
 8023260:	220f      	movs	r2, #15
 8023262:	fa02 f303 	lsl.w	r3, r2, r3
 8023266:	43db      	mvns	r3, r3
 8023268:	697a      	ldr	r2, [r7, #20]
 802326a:	08d2      	lsrs	r2, r2, #3
 802326c:	4019      	ands	r1, r3
 802326e:	687b      	ldr	r3, [r7, #4]
 8023270:	3208      	adds	r2, #8
 8023272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	68da      	ldr	r2, [r3, #12]
 802327a:	697b      	ldr	r3, [r7, #20]
 802327c:	005b      	lsls	r3, r3, #1
 802327e:	2103      	movs	r1, #3
 8023280:	fa01 f303 	lsl.w	r3, r1, r3
 8023284:	43db      	mvns	r3, r3
 8023286:	401a      	ands	r2, r3
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	685a      	ldr	r2, [r3, #4]
 8023290:	2101      	movs	r1, #1
 8023292:	697b      	ldr	r3, [r7, #20]
 8023294:	fa01 f303 	lsl.w	r3, r1, r3
 8023298:	43db      	mvns	r3, r3
 802329a:	401a      	ands	r2, r3
 802329c:	687b      	ldr	r3, [r7, #4]
 802329e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80232a0:	687b      	ldr	r3, [r7, #4]
 80232a2:	689a      	ldr	r2, [r3, #8]
 80232a4:	697b      	ldr	r3, [r7, #20]
 80232a6:	005b      	lsls	r3, r3, #1
 80232a8:	2103      	movs	r1, #3
 80232aa:	fa01 f303 	lsl.w	r3, r1, r3
 80232ae:	43db      	mvns	r3, r3
 80232b0:	401a      	ands	r2, r3
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80232b6:	697b      	ldr	r3, [r7, #20]
 80232b8:	3301      	adds	r3, #1
 80232ba:	617b      	str	r3, [r7, #20]
 80232bc:	697b      	ldr	r3, [r7, #20]
 80232be:	2b0f      	cmp	r3, #15
 80232c0:	f67f af34 	bls.w	802312c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80232c4:	bf00      	nop
 80232c6:	bf00      	nop
 80232c8:	371c      	adds	r7, #28
 80232ca:	46bd      	mov	sp, r7
 80232cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232d0:	4770      	bx	lr
 80232d2:	bf00      	nop
 80232d4:	40013800 	.word	0x40013800
 80232d8:	40020000 	.word	0x40020000
 80232dc:	40020400 	.word	0x40020400
 80232e0:	40020800 	.word	0x40020800
 80232e4:	40020c00 	.word	0x40020c00
 80232e8:	40021000 	.word	0x40021000
 80232ec:	40021400 	.word	0x40021400
 80232f0:	40021800 	.word	0x40021800
 80232f4:	40013c00 	.word	0x40013c00

080232f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80232f8:	b480      	push	{r7}
 80232fa:	b083      	sub	sp, #12
 80232fc:	af00      	add	r7, sp, #0
 80232fe:	6078      	str	r0, [r7, #4]
 8023300:	460b      	mov	r3, r1
 8023302:	807b      	strh	r3, [r7, #2]
 8023304:	4613      	mov	r3, r2
 8023306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8023308:	787b      	ldrb	r3, [r7, #1]
 802330a:	2b00      	cmp	r3, #0
 802330c:	d003      	beq.n	8023316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802330e:	887a      	ldrh	r2, [r7, #2]
 8023310:	687b      	ldr	r3, [r7, #4]
 8023312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8023314:	e003      	b.n	802331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8023316:	887b      	ldrh	r3, [r7, #2]
 8023318:	041a      	lsls	r2, r3, #16
 802331a:	687b      	ldr	r3, [r7, #4]
 802331c:	619a      	str	r2, [r3, #24]
}
 802331e:	bf00      	nop
 8023320:	370c      	adds	r7, #12
 8023322:	46bd      	mov	sp, r7
 8023324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023328:	4770      	bx	lr
	...

0802332c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802332c:	b580      	push	{r7, lr}
 802332e:	b084      	sub	sp, #16
 8023330:	af00      	add	r7, sp, #0
 8023332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	2b00      	cmp	r3, #0
 8023338:	d101      	bne.n	802333e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802333a:	2301      	movs	r3, #1
 802333c:	e12b      	b.n	8023596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802333e:	687b      	ldr	r3, [r7, #4]
 8023340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8023344:	b2db      	uxtb	r3, r3
 8023346:	2b00      	cmp	r3, #0
 8023348:	d106      	bne.n	8023358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802334a:	687b      	ldr	r3, [r7, #4]
 802334c:	2200      	movs	r2, #0
 802334e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8023352:	6878      	ldr	r0, [r7, #4]
 8023354:	f7fe fc80 	bl	8021c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8023358:	687b      	ldr	r3, [r7, #4]
 802335a:	2224      	movs	r2, #36	@ 0x24
 802335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8023360:	687b      	ldr	r3, [r7, #4]
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	681a      	ldr	r2, [r3, #0]
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	f022 0201 	bic.w	r2, r2, #1
 802336e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	681b      	ldr	r3, [r3, #0]
 8023374:	681a      	ldr	r2, [r3, #0]
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 802337e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	681a      	ldr	r2, [r3, #0]
 8023386:	687b      	ldr	r3, [r7, #4]
 8023388:	681b      	ldr	r3, [r3, #0]
 802338a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 802338e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8023390:	f001 f8b8 	bl	8024504 <HAL_RCC_GetPCLK1Freq>
 8023394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	685b      	ldr	r3, [r3, #4]
 802339a:	4a81      	ldr	r2, [pc, #516]	@ (80235a0 <HAL_I2C_Init+0x274>)
 802339c:	4293      	cmp	r3, r2
 802339e:	d807      	bhi.n	80233b0 <HAL_I2C_Init+0x84>
 80233a0:	68fb      	ldr	r3, [r7, #12]
 80233a2:	4a80      	ldr	r2, [pc, #512]	@ (80235a4 <HAL_I2C_Init+0x278>)
 80233a4:	4293      	cmp	r3, r2
 80233a6:	bf94      	ite	ls
 80233a8:	2301      	movls	r3, #1
 80233aa:	2300      	movhi	r3, #0
 80233ac:	b2db      	uxtb	r3, r3
 80233ae:	e006      	b.n	80233be <HAL_I2C_Init+0x92>
 80233b0:	68fb      	ldr	r3, [r7, #12]
 80233b2:	4a7d      	ldr	r2, [pc, #500]	@ (80235a8 <HAL_I2C_Init+0x27c>)
 80233b4:	4293      	cmp	r3, r2
 80233b6:	bf94      	ite	ls
 80233b8:	2301      	movls	r3, #1
 80233ba:	2300      	movhi	r3, #0
 80233bc:	b2db      	uxtb	r3, r3
 80233be:	2b00      	cmp	r3, #0
 80233c0:	d001      	beq.n	80233c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80233c2:	2301      	movs	r3, #1
 80233c4:	e0e7      	b.n	8023596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80233c6:	68fb      	ldr	r3, [r7, #12]
 80233c8:	4a78      	ldr	r2, [pc, #480]	@ (80235ac <HAL_I2C_Init+0x280>)
 80233ca:	fba2 2303 	umull	r2, r3, r2, r3
 80233ce:	0c9b      	lsrs	r3, r3, #18
 80233d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80233d2:	687b      	ldr	r3, [r7, #4]
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	685b      	ldr	r3, [r3, #4]
 80233d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80233dc:	687b      	ldr	r3, [r7, #4]
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	68ba      	ldr	r2, [r7, #8]
 80233e2:	430a      	orrs	r2, r1
 80233e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	681b      	ldr	r3, [r3, #0]
 80233ea:	6a1b      	ldr	r3, [r3, #32]
 80233ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	685b      	ldr	r3, [r3, #4]
 80233f4:	4a6a      	ldr	r2, [pc, #424]	@ (80235a0 <HAL_I2C_Init+0x274>)
 80233f6:	4293      	cmp	r3, r2
 80233f8:	d802      	bhi.n	8023400 <HAL_I2C_Init+0xd4>
 80233fa:	68bb      	ldr	r3, [r7, #8]
 80233fc:	3301      	adds	r3, #1
 80233fe:	e009      	b.n	8023414 <HAL_I2C_Init+0xe8>
 8023400:	68bb      	ldr	r3, [r7, #8]
 8023402:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8023406:	fb02 f303 	mul.w	r3, r2, r3
 802340a:	4a69      	ldr	r2, [pc, #420]	@ (80235b0 <HAL_I2C_Init+0x284>)
 802340c:	fba2 2303 	umull	r2, r3, r2, r3
 8023410:	099b      	lsrs	r3, r3, #6
 8023412:	3301      	adds	r3, #1
 8023414:	687a      	ldr	r2, [r7, #4]
 8023416:	6812      	ldr	r2, [r2, #0]
 8023418:	430b      	orrs	r3, r1
 802341a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	681b      	ldr	r3, [r3, #0]
 8023420:	69db      	ldr	r3, [r3, #28]
 8023422:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8023426:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	685b      	ldr	r3, [r3, #4]
 802342e:	495c      	ldr	r1, [pc, #368]	@ (80235a0 <HAL_I2C_Init+0x274>)
 8023430:	428b      	cmp	r3, r1
 8023432:	d819      	bhi.n	8023468 <HAL_I2C_Init+0x13c>
 8023434:	68fb      	ldr	r3, [r7, #12]
 8023436:	1e59      	subs	r1, r3, #1
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	685b      	ldr	r3, [r3, #4]
 802343c:	005b      	lsls	r3, r3, #1
 802343e:	fbb1 f3f3 	udiv	r3, r1, r3
 8023442:	1c59      	adds	r1, r3, #1
 8023444:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8023448:	400b      	ands	r3, r1
 802344a:	2b00      	cmp	r3, #0
 802344c:	d00a      	beq.n	8023464 <HAL_I2C_Init+0x138>
 802344e:	68fb      	ldr	r3, [r7, #12]
 8023450:	1e59      	subs	r1, r3, #1
 8023452:	687b      	ldr	r3, [r7, #4]
 8023454:	685b      	ldr	r3, [r3, #4]
 8023456:	005b      	lsls	r3, r3, #1
 8023458:	fbb1 f3f3 	udiv	r3, r1, r3
 802345c:	3301      	adds	r3, #1
 802345e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023462:	e051      	b.n	8023508 <HAL_I2C_Init+0x1dc>
 8023464:	2304      	movs	r3, #4
 8023466:	e04f      	b.n	8023508 <HAL_I2C_Init+0x1dc>
 8023468:	687b      	ldr	r3, [r7, #4]
 802346a:	689b      	ldr	r3, [r3, #8]
 802346c:	2b00      	cmp	r3, #0
 802346e:	d111      	bne.n	8023494 <HAL_I2C_Init+0x168>
 8023470:	68fb      	ldr	r3, [r7, #12]
 8023472:	1e58      	subs	r0, r3, #1
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	6859      	ldr	r1, [r3, #4]
 8023478:	460b      	mov	r3, r1
 802347a:	005b      	lsls	r3, r3, #1
 802347c:	440b      	add	r3, r1
 802347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8023482:	3301      	adds	r3, #1
 8023484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023488:	2b00      	cmp	r3, #0
 802348a:	bf0c      	ite	eq
 802348c:	2301      	moveq	r3, #1
 802348e:	2300      	movne	r3, #0
 8023490:	b2db      	uxtb	r3, r3
 8023492:	e012      	b.n	80234ba <HAL_I2C_Init+0x18e>
 8023494:	68fb      	ldr	r3, [r7, #12]
 8023496:	1e58      	subs	r0, r3, #1
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	6859      	ldr	r1, [r3, #4]
 802349c:	460b      	mov	r3, r1
 802349e:	009b      	lsls	r3, r3, #2
 80234a0:	440b      	add	r3, r1
 80234a2:	0099      	lsls	r1, r3, #2
 80234a4:	440b      	add	r3, r1
 80234a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80234aa:	3301      	adds	r3, #1
 80234ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	bf0c      	ite	eq
 80234b4:	2301      	moveq	r3, #1
 80234b6:	2300      	movne	r3, #0
 80234b8:	b2db      	uxtb	r3, r3
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d001      	beq.n	80234c2 <HAL_I2C_Init+0x196>
 80234be:	2301      	movs	r3, #1
 80234c0:	e022      	b.n	8023508 <HAL_I2C_Init+0x1dc>
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	689b      	ldr	r3, [r3, #8]
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d10e      	bne.n	80234e8 <HAL_I2C_Init+0x1bc>
 80234ca:	68fb      	ldr	r3, [r7, #12]
 80234cc:	1e58      	subs	r0, r3, #1
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	6859      	ldr	r1, [r3, #4]
 80234d2:	460b      	mov	r3, r1
 80234d4:	005b      	lsls	r3, r3, #1
 80234d6:	440b      	add	r3, r1
 80234d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80234dc:	3301      	adds	r3, #1
 80234de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80234e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80234e6:	e00f      	b.n	8023508 <HAL_I2C_Init+0x1dc>
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	1e58      	subs	r0, r3, #1
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	6859      	ldr	r1, [r3, #4]
 80234f0:	460b      	mov	r3, r1
 80234f2:	009b      	lsls	r3, r3, #2
 80234f4:	440b      	add	r3, r1
 80234f6:	0099      	lsls	r1, r3, #2
 80234f8:	440b      	add	r3, r1
 80234fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80234fe:	3301      	adds	r3, #1
 8023500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8023508:	6879      	ldr	r1, [r7, #4]
 802350a:	6809      	ldr	r1, [r1, #0]
 802350c:	4313      	orrs	r3, r2
 802350e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	681b      	ldr	r3, [r3, #0]
 8023514:	681b      	ldr	r3, [r3, #0]
 8023516:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	69da      	ldr	r2, [r3, #28]
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	6a1b      	ldr	r3, [r3, #32]
 8023522:	431a      	orrs	r2, r3
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	430a      	orrs	r2, r1
 802352a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802352c:	687b      	ldr	r3, [r7, #4]
 802352e:	681b      	ldr	r3, [r3, #0]
 8023530:	689b      	ldr	r3, [r3, #8]
 8023532:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8023536:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802353a:	687a      	ldr	r2, [r7, #4]
 802353c:	6911      	ldr	r1, [r2, #16]
 802353e:	687a      	ldr	r2, [r7, #4]
 8023540:	68d2      	ldr	r2, [r2, #12]
 8023542:	4311      	orrs	r1, r2
 8023544:	687a      	ldr	r2, [r7, #4]
 8023546:	6812      	ldr	r2, [r2, #0]
 8023548:	430b      	orrs	r3, r1
 802354a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	681b      	ldr	r3, [r3, #0]
 8023550:	68db      	ldr	r3, [r3, #12]
 8023552:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	695a      	ldr	r2, [r3, #20]
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	699b      	ldr	r3, [r3, #24]
 802355e:	431a      	orrs	r2, r3
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	430a      	orrs	r2, r1
 8023566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8023568:	687b      	ldr	r3, [r7, #4]
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	681a      	ldr	r2, [r3, #0]
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	681b      	ldr	r3, [r3, #0]
 8023572:	f042 0201 	orr.w	r2, r2, #1
 8023576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	2200      	movs	r2, #0
 802357c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	2220      	movs	r2, #32
 8023582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8023586:	687b      	ldr	r3, [r7, #4]
 8023588:	2200      	movs	r2, #0
 802358a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	2200      	movs	r2, #0
 8023590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8023594:	2300      	movs	r3, #0
}
 8023596:	4618      	mov	r0, r3
 8023598:	3710      	adds	r7, #16
 802359a:	46bd      	mov	sp, r7
 802359c:	bd80      	pop	{r7, pc}
 802359e:	bf00      	nop
 80235a0:	000186a0 	.word	0x000186a0
 80235a4:	001e847f 	.word	0x001e847f
 80235a8:	003d08ff 	.word	0x003d08ff
 80235ac:	431bde83 	.word	0x431bde83
 80235b0:	10624dd3 	.word	0x10624dd3

080235b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80235b4:	b580      	push	{r7, lr}
 80235b6:	b088      	sub	sp, #32
 80235b8:	af02      	add	r7, sp, #8
 80235ba:	60f8      	str	r0, [r7, #12]
 80235bc:	607a      	str	r2, [r7, #4]
 80235be:	461a      	mov	r2, r3
 80235c0:	460b      	mov	r3, r1
 80235c2:	817b      	strh	r3, [r7, #10]
 80235c4:	4613      	mov	r3, r2
 80235c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80235c8:	f7fe fe4e 	bl	8022268 <HAL_GetTick>
 80235cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80235d4:	b2db      	uxtb	r3, r3
 80235d6:	2b20      	cmp	r3, #32
 80235d8:	f040 80e0 	bne.w	802379c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80235dc:	697b      	ldr	r3, [r7, #20]
 80235de:	9300      	str	r3, [sp, #0]
 80235e0:	2319      	movs	r3, #25
 80235e2:	2201      	movs	r2, #1
 80235e4:	4970      	ldr	r1, [pc, #448]	@ (80237a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80235e6:	68f8      	ldr	r0, [r7, #12]
 80235e8:	f000 fc64 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 80235ec:	4603      	mov	r3, r0
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	d001      	beq.n	80235f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80235f2:	2302      	movs	r3, #2
 80235f4:	e0d3      	b.n	802379e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80235f6:	68fb      	ldr	r3, [r7, #12]
 80235f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80235fc:	2b01      	cmp	r3, #1
 80235fe:	d101      	bne.n	8023604 <HAL_I2C_Master_Transmit+0x50>
 8023600:	2302      	movs	r3, #2
 8023602:	e0cc      	b.n	802379e <HAL_I2C_Master_Transmit+0x1ea>
 8023604:	68fb      	ldr	r3, [r7, #12]
 8023606:	2201      	movs	r2, #1
 8023608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802360c:	68fb      	ldr	r3, [r7, #12]
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	681b      	ldr	r3, [r3, #0]
 8023612:	f003 0301 	and.w	r3, r3, #1
 8023616:	2b01      	cmp	r3, #1
 8023618:	d007      	beq.n	802362a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802361a:	68fb      	ldr	r3, [r7, #12]
 802361c:	681b      	ldr	r3, [r3, #0]
 802361e:	681a      	ldr	r2, [r3, #0]
 8023620:	68fb      	ldr	r3, [r7, #12]
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	f042 0201 	orr.w	r2, r2, #1
 8023628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802362a:	68fb      	ldr	r3, [r7, #12]
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	681a      	ldr	r2, [r3, #0]
 8023630:	68fb      	ldr	r3, [r7, #12]
 8023632:	681b      	ldr	r3, [r3, #0]
 8023634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8023638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 802363a:	68fb      	ldr	r3, [r7, #12]
 802363c:	2221      	movs	r2, #33	@ 0x21
 802363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8023642:	68fb      	ldr	r3, [r7, #12]
 8023644:	2210      	movs	r2, #16
 8023646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 802364a:	68fb      	ldr	r3, [r7, #12]
 802364c:	2200      	movs	r2, #0
 802364e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8023650:	68fb      	ldr	r3, [r7, #12]
 8023652:	687a      	ldr	r2, [r7, #4]
 8023654:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8023656:	68fb      	ldr	r3, [r7, #12]
 8023658:	893a      	ldrh	r2, [r7, #8]
 802365a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802365c:	68fb      	ldr	r3, [r7, #12]
 802365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023660:	b29a      	uxth	r2, r3
 8023662:	68fb      	ldr	r3, [r7, #12]
 8023664:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023666:	68fb      	ldr	r3, [r7, #12]
 8023668:	4a50      	ldr	r2, [pc, #320]	@ (80237ac <HAL_I2C_Master_Transmit+0x1f8>)
 802366a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 802366c:	8979      	ldrh	r1, [r7, #10]
 802366e:	697b      	ldr	r3, [r7, #20]
 8023670:	6a3a      	ldr	r2, [r7, #32]
 8023672:	68f8      	ldr	r0, [r7, #12]
 8023674:	f000 face 	bl	8023c14 <I2C_MasterRequestWrite>
 8023678:	4603      	mov	r3, r0
 802367a:	2b00      	cmp	r3, #0
 802367c:	d001      	beq.n	8023682 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 802367e:	2301      	movs	r3, #1
 8023680:	e08d      	b.n	802379e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023682:	2300      	movs	r3, #0
 8023684:	613b      	str	r3, [r7, #16]
 8023686:	68fb      	ldr	r3, [r7, #12]
 8023688:	681b      	ldr	r3, [r3, #0]
 802368a:	695b      	ldr	r3, [r3, #20]
 802368c:	613b      	str	r3, [r7, #16]
 802368e:	68fb      	ldr	r3, [r7, #12]
 8023690:	681b      	ldr	r3, [r3, #0]
 8023692:	699b      	ldr	r3, [r3, #24]
 8023694:	613b      	str	r3, [r7, #16]
 8023696:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8023698:	e066      	b.n	8023768 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802369a:	697a      	ldr	r2, [r7, #20]
 802369c:	6a39      	ldr	r1, [r7, #32]
 802369e:	68f8      	ldr	r0, [r7, #12]
 80236a0:	f000 fd22 	bl	80240e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80236a4:	4603      	mov	r3, r0
 80236a6:	2b00      	cmp	r3, #0
 80236a8:	d00d      	beq.n	80236c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80236aa:	68fb      	ldr	r3, [r7, #12]
 80236ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80236ae:	2b04      	cmp	r3, #4
 80236b0:	d107      	bne.n	80236c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80236b2:	68fb      	ldr	r3, [r7, #12]
 80236b4:	681b      	ldr	r3, [r3, #0]
 80236b6:	681a      	ldr	r2, [r3, #0]
 80236b8:	68fb      	ldr	r3, [r7, #12]
 80236ba:	681b      	ldr	r3, [r3, #0]
 80236bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80236c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80236c2:	2301      	movs	r3, #1
 80236c4:	e06b      	b.n	802379e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80236c6:	68fb      	ldr	r3, [r7, #12]
 80236c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80236ca:	781a      	ldrb	r2, [r3, #0]
 80236cc:	68fb      	ldr	r3, [r7, #12]
 80236ce:	681b      	ldr	r3, [r3, #0]
 80236d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80236d2:	68fb      	ldr	r3, [r7, #12]
 80236d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80236d6:	1c5a      	adds	r2, r3, #1
 80236d8:	68fb      	ldr	r3, [r7, #12]
 80236da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80236dc:	68fb      	ldr	r3, [r7, #12]
 80236de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80236e0:	b29b      	uxth	r3, r3
 80236e2:	3b01      	subs	r3, #1
 80236e4:	b29a      	uxth	r2, r3
 80236e6:	68fb      	ldr	r3, [r7, #12]
 80236e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80236ea:	68fb      	ldr	r3, [r7, #12]
 80236ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80236ee:	3b01      	subs	r3, #1
 80236f0:	b29a      	uxth	r2, r3
 80236f2:	68fb      	ldr	r3, [r7, #12]
 80236f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80236f6:	68fb      	ldr	r3, [r7, #12]
 80236f8:	681b      	ldr	r3, [r3, #0]
 80236fa:	695b      	ldr	r3, [r3, #20]
 80236fc:	f003 0304 	and.w	r3, r3, #4
 8023700:	2b04      	cmp	r3, #4
 8023702:	d11b      	bne.n	802373c <HAL_I2C_Master_Transmit+0x188>
 8023704:	68fb      	ldr	r3, [r7, #12]
 8023706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023708:	2b00      	cmp	r3, #0
 802370a:	d017      	beq.n	802373c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802370c:	68fb      	ldr	r3, [r7, #12]
 802370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023710:	781a      	ldrb	r2, [r3, #0]
 8023712:	68fb      	ldr	r3, [r7, #12]
 8023714:	681b      	ldr	r3, [r3, #0]
 8023716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023718:	68fb      	ldr	r3, [r7, #12]
 802371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802371c:	1c5a      	adds	r2, r3, #1
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8023722:	68fb      	ldr	r3, [r7, #12]
 8023724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023726:	b29b      	uxth	r3, r3
 8023728:	3b01      	subs	r3, #1
 802372a:	b29a      	uxth	r2, r3
 802372c:	68fb      	ldr	r3, [r7, #12]
 802372e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8023730:	68fb      	ldr	r3, [r7, #12]
 8023732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023734:	3b01      	subs	r3, #1
 8023736:	b29a      	uxth	r2, r3
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802373c:	697a      	ldr	r2, [r7, #20]
 802373e:	6a39      	ldr	r1, [r7, #32]
 8023740:	68f8      	ldr	r0, [r7, #12]
 8023742:	f000 fd19 	bl	8024178 <I2C_WaitOnBTFFlagUntilTimeout>
 8023746:	4603      	mov	r3, r0
 8023748:	2b00      	cmp	r3, #0
 802374a:	d00d      	beq.n	8023768 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802374c:	68fb      	ldr	r3, [r7, #12]
 802374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023750:	2b04      	cmp	r3, #4
 8023752:	d107      	bne.n	8023764 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023754:	68fb      	ldr	r3, [r7, #12]
 8023756:	681b      	ldr	r3, [r3, #0]
 8023758:	681a      	ldr	r2, [r3, #0]
 802375a:	68fb      	ldr	r3, [r7, #12]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023762:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8023764:	2301      	movs	r3, #1
 8023766:	e01a      	b.n	802379e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8023768:	68fb      	ldr	r3, [r7, #12]
 802376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802376c:	2b00      	cmp	r3, #0
 802376e:	d194      	bne.n	802369a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023770:	68fb      	ldr	r3, [r7, #12]
 8023772:	681b      	ldr	r3, [r3, #0]
 8023774:	681a      	ldr	r2, [r3, #0]
 8023776:	68fb      	ldr	r3, [r7, #12]
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8023780:	68fb      	ldr	r3, [r7, #12]
 8023782:	2220      	movs	r2, #32
 8023784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023788:	68fb      	ldr	r3, [r7, #12]
 802378a:	2200      	movs	r2, #0
 802378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023790:	68fb      	ldr	r3, [r7, #12]
 8023792:	2200      	movs	r2, #0
 8023794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8023798:	2300      	movs	r3, #0
 802379a:	e000      	b.n	802379e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 802379c:	2302      	movs	r3, #2
  }
}
 802379e:	4618      	mov	r0, r3
 80237a0:	3718      	adds	r7, #24
 80237a2:	46bd      	mov	sp, r7
 80237a4:	bd80      	pop	{r7, pc}
 80237a6:	bf00      	nop
 80237a8:	00100002 	.word	0x00100002
 80237ac:	ffff0000 	.word	0xffff0000

080237b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80237b0:	b580      	push	{r7, lr}
 80237b2:	b08c      	sub	sp, #48	@ 0x30
 80237b4:	af02      	add	r7, sp, #8
 80237b6:	60f8      	str	r0, [r7, #12]
 80237b8:	607a      	str	r2, [r7, #4]
 80237ba:	461a      	mov	r2, r3
 80237bc:	460b      	mov	r3, r1
 80237be:	817b      	strh	r3, [r7, #10]
 80237c0:	4613      	mov	r3, r2
 80237c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80237c4:	f7fe fd50 	bl	8022268 <HAL_GetTick>
 80237c8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80237ca:	68fb      	ldr	r3, [r7, #12]
 80237cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80237d0:	b2db      	uxtb	r3, r3
 80237d2:	2b20      	cmp	r3, #32
 80237d4:	f040 8217 	bne.w	8023c06 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80237d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80237da:	9300      	str	r3, [sp, #0]
 80237dc:	2319      	movs	r3, #25
 80237de:	2201      	movs	r2, #1
 80237e0:	497c      	ldr	r1, [pc, #496]	@ (80239d4 <HAL_I2C_Master_Receive+0x224>)
 80237e2:	68f8      	ldr	r0, [r7, #12]
 80237e4:	f000 fb66 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 80237e8:	4603      	mov	r3, r0
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	d001      	beq.n	80237f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80237ee:	2302      	movs	r3, #2
 80237f0:	e20a      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80237f2:	68fb      	ldr	r3, [r7, #12]
 80237f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80237f8:	2b01      	cmp	r3, #1
 80237fa:	d101      	bne.n	8023800 <HAL_I2C_Master_Receive+0x50>
 80237fc:	2302      	movs	r3, #2
 80237fe:	e203      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
 8023800:	68fb      	ldr	r3, [r7, #12]
 8023802:	2201      	movs	r2, #1
 8023804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023808:	68fb      	ldr	r3, [r7, #12]
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	681b      	ldr	r3, [r3, #0]
 802380e:	f003 0301 	and.w	r3, r3, #1
 8023812:	2b01      	cmp	r3, #1
 8023814:	d007      	beq.n	8023826 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023816:	68fb      	ldr	r3, [r7, #12]
 8023818:	681b      	ldr	r3, [r3, #0]
 802381a:	681a      	ldr	r2, [r3, #0]
 802381c:	68fb      	ldr	r3, [r7, #12]
 802381e:	681b      	ldr	r3, [r3, #0]
 8023820:	f042 0201 	orr.w	r2, r2, #1
 8023824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023826:	68fb      	ldr	r3, [r7, #12]
 8023828:	681b      	ldr	r3, [r3, #0]
 802382a:	681a      	ldr	r2, [r3, #0]
 802382c:	68fb      	ldr	r3, [r7, #12]
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8023834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8023836:	68fb      	ldr	r3, [r7, #12]
 8023838:	2222      	movs	r2, #34	@ 0x22
 802383a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 802383e:	68fb      	ldr	r3, [r7, #12]
 8023840:	2210      	movs	r2, #16
 8023842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8023846:	68fb      	ldr	r3, [r7, #12]
 8023848:	2200      	movs	r2, #0
 802384a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802384c:	68fb      	ldr	r3, [r7, #12]
 802384e:	687a      	ldr	r2, [r7, #4]
 8023850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8023852:	68fb      	ldr	r3, [r7, #12]
 8023854:	893a      	ldrh	r2, [r7, #8]
 8023856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023858:	68fb      	ldr	r3, [r7, #12]
 802385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802385c:	b29a      	uxth	r2, r3
 802385e:	68fb      	ldr	r3, [r7, #12]
 8023860:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023862:	68fb      	ldr	r3, [r7, #12]
 8023864:	4a5c      	ldr	r2, [pc, #368]	@ (80239d8 <HAL_I2C_Master_Receive+0x228>)
 8023866:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8023868:	8979      	ldrh	r1, [r7, #10]
 802386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802386c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802386e:	68f8      	ldr	r0, [r7, #12]
 8023870:	f000 fa52 	bl	8023d18 <I2C_MasterRequestRead>
 8023874:	4603      	mov	r3, r0
 8023876:	2b00      	cmp	r3, #0
 8023878:	d001      	beq.n	802387e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 802387a:	2301      	movs	r3, #1
 802387c:	e1c4      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 802387e:	68fb      	ldr	r3, [r7, #12]
 8023880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023882:	2b00      	cmp	r3, #0
 8023884:	d113      	bne.n	80238ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023886:	2300      	movs	r3, #0
 8023888:	623b      	str	r3, [r7, #32]
 802388a:	68fb      	ldr	r3, [r7, #12]
 802388c:	681b      	ldr	r3, [r3, #0]
 802388e:	695b      	ldr	r3, [r3, #20]
 8023890:	623b      	str	r3, [r7, #32]
 8023892:	68fb      	ldr	r3, [r7, #12]
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	699b      	ldr	r3, [r3, #24]
 8023898:	623b      	str	r3, [r7, #32]
 802389a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802389c:	68fb      	ldr	r3, [r7, #12]
 802389e:	681b      	ldr	r3, [r3, #0]
 80238a0:	681a      	ldr	r2, [r3, #0]
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	681b      	ldr	r3, [r3, #0]
 80238a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80238aa:	601a      	str	r2, [r3, #0]
 80238ac:	e198      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80238ae:	68fb      	ldr	r3, [r7, #12]
 80238b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80238b2:	2b01      	cmp	r3, #1
 80238b4:	d11b      	bne.n	80238ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80238b6:	68fb      	ldr	r3, [r7, #12]
 80238b8:	681b      	ldr	r3, [r3, #0]
 80238ba:	681a      	ldr	r2, [r3, #0]
 80238bc:	68fb      	ldr	r3, [r7, #12]
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80238c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80238c6:	2300      	movs	r3, #0
 80238c8:	61fb      	str	r3, [r7, #28]
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	695b      	ldr	r3, [r3, #20]
 80238d0:	61fb      	str	r3, [r7, #28]
 80238d2:	68fb      	ldr	r3, [r7, #12]
 80238d4:	681b      	ldr	r3, [r3, #0]
 80238d6:	699b      	ldr	r3, [r3, #24]
 80238d8:	61fb      	str	r3, [r7, #28]
 80238da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80238dc:	68fb      	ldr	r3, [r7, #12]
 80238de:	681b      	ldr	r3, [r3, #0]
 80238e0:	681a      	ldr	r2, [r3, #0]
 80238e2:	68fb      	ldr	r3, [r7, #12]
 80238e4:	681b      	ldr	r3, [r3, #0]
 80238e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80238ea:	601a      	str	r2, [r3, #0]
 80238ec:	e178      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80238ee:	68fb      	ldr	r3, [r7, #12]
 80238f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80238f2:	2b02      	cmp	r3, #2
 80238f4:	d11b      	bne.n	802392e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80238f6:	68fb      	ldr	r3, [r7, #12]
 80238f8:	681b      	ldr	r3, [r3, #0]
 80238fa:	681a      	ldr	r2, [r3, #0]
 80238fc:	68fb      	ldr	r3, [r7, #12]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8023904:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023906:	68fb      	ldr	r3, [r7, #12]
 8023908:	681b      	ldr	r3, [r3, #0]
 802390a:	681a      	ldr	r2, [r3, #0]
 802390c:	68fb      	ldr	r3, [r7, #12]
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8023914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023916:	2300      	movs	r3, #0
 8023918:	61bb      	str	r3, [r7, #24]
 802391a:	68fb      	ldr	r3, [r7, #12]
 802391c:	681b      	ldr	r3, [r3, #0]
 802391e:	695b      	ldr	r3, [r3, #20]
 8023920:	61bb      	str	r3, [r7, #24]
 8023922:	68fb      	ldr	r3, [r7, #12]
 8023924:	681b      	ldr	r3, [r3, #0]
 8023926:	699b      	ldr	r3, [r3, #24]
 8023928:	61bb      	str	r3, [r7, #24]
 802392a:	69bb      	ldr	r3, [r7, #24]
 802392c:	e158      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802392e:	68fb      	ldr	r3, [r7, #12]
 8023930:	681b      	ldr	r3, [r3, #0]
 8023932:	681a      	ldr	r2, [r3, #0]
 8023934:	68fb      	ldr	r3, [r7, #12]
 8023936:	681b      	ldr	r3, [r3, #0]
 8023938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802393c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802393e:	2300      	movs	r3, #0
 8023940:	617b      	str	r3, [r7, #20]
 8023942:	68fb      	ldr	r3, [r7, #12]
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	695b      	ldr	r3, [r3, #20]
 8023948:	617b      	str	r3, [r7, #20]
 802394a:	68fb      	ldr	r3, [r7, #12]
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	699b      	ldr	r3, [r3, #24]
 8023950:	617b      	str	r3, [r7, #20]
 8023952:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8023954:	e144      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8023956:	68fb      	ldr	r3, [r7, #12]
 8023958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802395a:	2b03      	cmp	r3, #3
 802395c:	f200 80f1 	bhi.w	8023b42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8023960:	68fb      	ldr	r3, [r7, #12]
 8023962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023964:	2b01      	cmp	r3, #1
 8023966:	d123      	bne.n	80239b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802396a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802396c:	68f8      	ldr	r0, [r7, #12]
 802396e:	f000 fc4b 	bl	8024208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8023972:	4603      	mov	r3, r0
 8023974:	2b00      	cmp	r3, #0
 8023976:	d001      	beq.n	802397c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8023978:	2301      	movs	r3, #1
 802397a:	e145      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802397c:	68fb      	ldr	r3, [r7, #12]
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	691a      	ldr	r2, [r3, #16]
 8023982:	68fb      	ldr	r3, [r7, #12]
 8023984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023986:	b2d2      	uxtb	r2, r2
 8023988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802398a:	68fb      	ldr	r3, [r7, #12]
 802398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802398e:	1c5a      	adds	r2, r3, #1
 8023990:	68fb      	ldr	r3, [r7, #12]
 8023992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023994:	68fb      	ldr	r3, [r7, #12]
 8023996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023998:	3b01      	subs	r3, #1
 802399a:	b29a      	uxth	r2, r3
 802399c:	68fb      	ldr	r3, [r7, #12]
 802399e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80239a0:	68fb      	ldr	r3, [r7, #12]
 80239a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80239a4:	b29b      	uxth	r3, r3
 80239a6:	3b01      	subs	r3, #1
 80239a8:	b29a      	uxth	r2, r3
 80239aa:	68fb      	ldr	r3, [r7, #12]
 80239ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80239ae:	e117      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80239b0:	68fb      	ldr	r3, [r7, #12]
 80239b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80239b4:	2b02      	cmp	r3, #2
 80239b6:	d14e      	bne.n	8023a56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80239b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80239ba:	9300      	str	r3, [sp, #0]
 80239bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239be:	2200      	movs	r2, #0
 80239c0:	4906      	ldr	r1, [pc, #24]	@ (80239dc <HAL_I2C_Master_Receive+0x22c>)
 80239c2:	68f8      	ldr	r0, [r7, #12]
 80239c4:	f000 fa76 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 80239c8:	4603      	mov	r3, r0
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d008      	beq.n	80239e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80239ce:	2301      	movs	r3, #1
 80239d0:	e11a      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
 80239d2:	bf00      	nop
 80239d4:	00100002 	.word	0x00100002
 80239d8:	ffff0000 	.word	0xffff0000
 80239dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80239e0:	68fb      	ldr	r3, [r7, #12]
 80239e2:	681b      	ldr	r3, [r3, #0]
 80239e4:	681a      	ldr	r2, [r3, #0]
 80239e6:	68fb      	ldr	r3, [r7, #12]
 80239e8:	681b      	ldr	r3, [r3, #0]
 80239ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80239ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	691a      	ldr	r2, [r3, #16]
 80239f6:	68fb      	ldr	r3, [r7, #12]
 80239f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80239fa:	b2d2      	uxtb	r2, r2
 80239fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80239fe:	68fb      	ldr	r3, [r7, #12]
 8023a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a02:	1c5a      	adds	r2, r3, #1
 8023a04:	68fb      	ldr	r3, [r7, #12]
 8023a06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023a08:	68fb      	ldr	r3, [r7, #12]
 8023a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023a0c:	3b01      	subs	r3, #1
 8023a0e:	b29a      	uxth	r2, r3
 8023a10:	68fb      	ldr	r3, [r7, #12]
 8023a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8023a14:	68fb      	ldr	r3, [r7, #12]
 8023a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023a18:	b29b      	uxth	r3, r3
 8023a1a:	3b01      	subs	r3, #1
 8023a1c:	b29a      	uxth	r2, r3
 8023a1e:	68fb      	ldr	r3, [r7, #12]
 8023a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023a22:	68fb      	ldr	r3, [r7, #12]
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	691a      	ldr	r2, [r3, #16]
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a2c:	b2d2      	uxtb	r2, r2
 8023a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023a30:	68fb      	ldr	r3, [r7, #12]
 8023a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a34:	1c5a      	adds	r2, r3, #1
 8023a36:	68fb      	ldr	r3, [r7, #12]
 8023a38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023a3a:	68fb      	ldr	r3, [r7, #12]
 8023a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023a3e:	3b01      	subs	r3, #1
 8023a40:	b29a      	uxth	r2, r3
 8023a42:	68fb      	ldr	r3, [r7, #12]
 8023a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8023a46:	68fb      	ldr	r3, [r7, #12]
 8023a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023a4a:	b29b      	uxth	r3, r3
 8023a4c:	3b01      	subs	r3, #1
 8023a4e:	b29a      	uxth	r2, r3
 8023a50:	68fb      	ldr	r3, [r7, #12]
 8023a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8023a54:	e0c4      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a58:	9300      	str	r3, [sp, #0]
 8023a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	496c      	ldr	r1, [pc, #432]	@ (8023c10 <HAL_I2C_Master_Receive+0x460>)
 8023a60:	68f8      	ldr	r0, [r7, #12]
 8023a62:	f000 fa27 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 8023a66:	4603      	mov	r3, r0
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d001      	beq.n	8023a70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8023a6c:	2301      	movs	r3, #1
 8023a6e:	e0cb      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023a70:	68fb      	ldr	r3, [r7, #12]
 8023a72:	681b      	ldr	r3, [r3, #0]
 8023a74:	681a      	ldr	r2, [r3, #0]
 8023a76:	68fb      	ldr	r3, [r7, #12]
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8023a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023a80:	68fb      	ldr	r3, [r7, #12]
 8023a82:	681b      	ldr	r3, [r3, #0]
 8023a84:	691a      	ldr	r2, [r3, #16]
 8023a86:	68fb      	ldr	r3, [r7, #12]
 8023a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a8a:	b2d2      	uxtb	r2, r2
 8023a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a92:	1c5a      	adds	r2, r3, #1
 8023a94:	68fb      	ldr	r3, [r7, #12]
 8023a96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023a98:	68fb      	ldr	r3, [r7, #12]
 8023a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023a9c:	3b01      	subs	r3, #1
 8023a9e:	b29a      	uxth	r2, r3
 8023aa0:	68fb      	ldr	r3, [r7, #12]
 8023aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8023aa4:	68fb      	ldr	r3, [r7, #12]
 8023aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023aa8:	b29b      	uxth	r3, r3
 8023aaa:	3b01      	subs	r3, #1
 8023aac:	b29a      	uxth	r2, r3
 8023aae:	68fb      	ldr	r3, [r7, #12]
 8023ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023ab4:	9300      	str	r3, [sp, #0]
 8023ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ab8:	2200      	movs	r2, #0
 8023aba:	4955      	ldr	r1, [pc, #340]	@ (8023c10 <HAL_I2C_Master_Receive+0x460>)
 8023abc:	68f8      	ldr	r0, [r7, #12]
 8023abe:	f000 f9f9 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 8023ac2:	4603      	mov	r3, r0
 8023ac4:	2b00      	cmp	r3, #0
 8023ac6:	d001      	beq.n	8023acc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8023ac8:	2301      	movs	r3, #1
 8023aca:	e09d      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023acc:	68fb      	ldr	r3, [r7, #12]
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	681a      	ldr	r2, [r3, #0]
 8023ad2:	68fb      	ldr	r3, [r7, #12]
 8023ad4:	681b      	ldr	r3, [r3, #0]
 8023ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023adc:	68fb      	ldr	r3, [r7, #12]
 8023ade:	681b      	ldr	r3, [r3, #0]
 8023ae0:	691a      	ldr	r2, [r3, #16]
 8023ae2:	68fb      	ldr	r3, [r7, #12]
 8023ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023ae6:	b2d2      	uxtb	r2, r2
 8023ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023aea:	68fb      	ldr	r3, [r7, #12]
 8023aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023aee:	1c5a      	adds	r2, r3, #1
 8023af0:	68fb      	ldr	r3, [r7, #12]
 8023af2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023af4:	68fb      	ldr	r3, [r7, #12]
 8023af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023af8:	3b01      	subs	r3, #1
 8023afa:	b29a      	uxth	r2, r3
 8023afc:	68fb      	ldr	r3, [r7, #12]
 8023afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8023b00:	68fb      	ldr	r3, [r7, #12]
 8023b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023b04:	b29b      	uxth	r3, r3
 8023b06:	3b01      	subs	r3, #1
 8023b08:	b29a      	uxth	r2, r3
 8023b0a:	68fb      	ldr	r3, [r7, #12]
 8023b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023b0e:	68fb      	ldr	r3, [r7, #12]
 8023b10:	681b      	ldr	r3, [r3, #0]
 8023b12:	691a      	ldr	r2, [r3, #16]
 8023b14:	68fb      	ldr	r3, [r7, #12]
 8023b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b18:	b2d2      	uxtb	r2, r2
 8023b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023b1c:	68fb      	ldr	r3, [r7, #12]
 8023b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b20:	1c5a      	adds	r2, r3, #1
 8023b22:	68fb      	ldr	r3, [r7, #12]
 8023b24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023b26:	68fb      	ldr	r3, [r7, #12]
 8023b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023b2a:	3b01      	subs	r3, #1
 8023b2c:	b29a      	uxth	r2, r3
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8023b32:	68fb      	ldr	r3, [r7, #12]
 8023b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023b36:	b29b      	uxth	r3, r3
 8023b38:	3b01      	subs	r3, #1
 8023b3a:	b29a      	uxth	r2, r3
 8023b3c:	68fb      	ldr	r3, [r7, #12]
 8023b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8023b40:	e04e      	b.n	8023be0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023b44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8023b46:	68f8      	ldr	r0, [r7, #12]
 8023b48:	f000 fb5e 	bl	8024208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8023b4c:	4603      	mov	r3, r0
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d001      	beq.n	8023b56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8023b52:	2301      	movs	r3, #1
 8023b54:	e058      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023b56:	68fb      	ldr	r3, [r7, #12]
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	691a      	ldr	r2, [r3, #16]
 8023b5c:	68fb      	ldr	r3, [r7, #12]
 8023b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b60:	b2d2      	uxtb	r2, r2
 8023b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b68:	1c5a      	adds	r2, r3, #1
 8023b6a:	68fb      	ldr	r3, [r7, #12]
 8023b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8023b6e:	68fb      	ldr	r3, [r7, #12]
 8023b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023b72:	3b01      	subs	r3, #1
 8023b74:	b29a      	uxth	r2, r3
 8023b76:	68fb      	ldr	r3, [r7, #12]
 8023b78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8023b7a:	68fb      	ldr	r3, [r7, #12]
 8023b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023b7e:	b29b      	uxth	r3, r3
 8023b80:	3b01      	subs	r3, #1
 8023b82:	b29a      	uxth	r2, r3
 8023b84:	68fb      	ldr	r3, [r7, #12]
 8023b86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8023b88:	68fb      	ldr	r3, [r7, #12]
 8023b8a:	681b      	ldr	r3, [r3, #0]
 8023b8c:	695b      	ldr	r3, [r3, #20]
 8023b8e:	f003 0304 	and.w	r3, r3, #4
 8023b92:	2b04      	cmp	r3, #4
 8023b94:	d124      	bne.n	8023be0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8023b96:	68fb      	ldr	r3, [r7, #12]
 8023b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023b9a:	2b03      	cmp	r3, #3
 8023b9c:	d107      	bne.n	8023bae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	681a      	ldr	r2, [r3, #0]
 8023ba4:	68fb      	ldr	r3, [r7, #12]
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8023bac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023bae:	68fb      	ldr	r3, [r7, #12]
 8023bb0:	681b      	ldr	r3, [r3, #0]
 8023bb2:	691a      	ldr	r2, [r3, #16]
 8023bb4:	68fb      	ldr	r3, [r7, #12]
 8023bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023bb8:	b2d2      	uxtb	r2, r2
 8023bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023bbc:	68fb      	ldr	r3, [r7, #12]
 8023bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023bc0:	1c5a      	adds	r2, r3, #1
 8023bc2:	68fb      	ldr	r3, [r7, #12]
 8023bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023bc6:	68fb      	ldr	r3, [r7, #12]
 8023bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023bca:	3b01      	subs	r3, #1
 8023bcc:	b29a      	uxth	r2, r3
 8023bce:	68fb      	ldr	r3, [r7, #12]
 8023bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8023bd2:	68fb      	ldr	r3, [r7, #12]
 8023bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8023bd6:	b29b      	uxth	r3, r3
 8023bd8:	3b01      	subs	r3, #1
 8023bda:	b29a      	uxth	r2, r3
 8023bdc:	68fb      	ldr	r3, [r7, #12]
 8023bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8023be0:	68fb      	ldr	r3, [r7, #12]
 8023be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	f47f aeb6 	bne.w	8023956 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8023bea:	68fb      	ldr	r3, [r7, #12]
 8023bec:	2220      	movs	r2, #32
 8023bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	2200      	movs	r2, #0
 8023bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023bfa:	68fb      	ldr	r3, [r7, #12]
 8023bfc:	2200      	movs	r2, #0
 8023bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8023c02:	2300      	movs	r3, #0
 8023c04:	e000      	b.n	8023c08 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8023c06:	2302      	movs	r3, #2
  }
}
 8023c08:	4618      	mov	r0, r3
 8023c0a:	3728      	adds	r7, #40	@ 0x28
 8023c0c:	46bd      	mov	sp, r7
 8023c0e:	bd80      	pop	{r7, pc}
 8023c10:	00010004 	.word	0x00010004

08023c14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8023c14:	b580      	push	{r7, lr}
 8023c16:	b088      	sub	sp, #32
 8023c18:	af02      	add	r7, sp, #8
 8023c1a:	60f8      	str	r0, [r7, #12]
 8023c1c:	607a      	str	r2, [r7, #4]
 8023c1e:	603b      	str	r3, [r7, #0]
 8023c20:	460b      	mov	r3, r1
 8023c22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8023c24:	68fb      	ldr	r3, [r7, #12]
 8023c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023c28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8023c2a:	697b      	ldr	r3, [r7, #20]
 8023c2c:	2b08      	cmp	r3, #8
 8023c2e:	d006      	beq.n	8023c3e <I2C_MasterRequestWrite+0x2a>
 8023c30:	697b      	ldr	r3, [r7, #20]
 8023c32:	2b01      	cmp	r3, #1
 8023c34:	d003      	beq.n	8023c3e <I2C_MasterRequestWrite+0x2a>
 8023c36:	697b      	ldr	r3, [r7, #20]
 8023c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8023c3c:	d108      	bne.n	8023c50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8023c3e:	68fb      	ldr	r3, [r7, #12]
 8023c40:	681b      	ldr	r3, [r3, #0]
 8023c42:	681a      	ldr	r2, [r3, #0]
 8023c44:	68fb      	ldr	r3, [r7, #12]
 8023c46:	681b      	ldr	r3, [r3, #0]
 8023c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023c4c:	601a      	str	r2, [r3, #0]
 8023c4e:	e00b      	b.n	8023c68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8023c50:	68fb      	ldr	r3, [r7, #12]
 8023c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023c54:	2b12      	cmp	r3, #18
 8023c56:	d107      	bne.n	8023c68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8023c58:	68fb      	ldr	r3, [r7, #12]
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	681a      	ldr	r2, [r3, #0]
 8023c5e:	68fb      	ldr	r3, [r7, #12]
 8023c60:	681b      	ldr	r3, [r3, #0]
 8023c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8023c68:	683b      	ldr	r3, [r7, #0]
 8023c6a:	9300      	str	r3, [sp, #0]
 8023c6c:	687b      	ldr	r3, [r7, #4]
 8023c6e:	2200      	movs	r2, #0
 8023c70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8023c74:	68f8      	ldr	r0, [r7, #12]
 8023c76:	f000 f91d 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 8023c7a:	4603      	mov	r3, r0
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	d00d      	beq.n	8023c9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8023c80:	68fb      	ldr	r3, [r7, #12]
 8023c82:	681b      	ldr	r3, [r3, #0]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023c8e:	d103      	bne.n	8023c98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8023c90:	68fb      	ldr	r3, [r7, #12]
 8023c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023c96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8023c98:	2303      	movs	r3, #3
 8023c9a:	e035      	b.n	8023d08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8023c9c:	68fb      	ldr	r3, [r7, #12]
 8023c9e:	691b      	ldr	r3, [r3, #16]
 8023ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023ca4:	d108      	bne.n	8023cb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8023ca6:	897b      	ldrh	r3, [r7, #10]
 8023ca8:	b2db      	uxtb	r3, r3
 8023caa:	461a      	mov	r2, r3
 8023cac:	68fb      	ldr	r3, [r7, #12]
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8023cb4:	611a      	str	r2, [r3, #16]
 8023cb6:	e01b      	b.n	8023cf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8023cb8:	897b      	ldrh	r3, [r7, #10]
 8023cba:	11db      	asrs	r3, r3, #7
 8023cbc:	b2db      	uxtb	r3, r3
 8023cbe:	f003 0306 	and.w	r3, r3, #6
 8023cc2:	b2db      	uxtb	r3, r3
 8023cc4:	f063 030f 	orn	r3, r3, #15
 8023cc8:	b2da      	uxtb	r2, r3
 8023cca:	68fb      	ldr	r3, [r7, #12]
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8023cd0:	683b      	ldr	r3, [r7, #0]
 8023cd2:	687a      	ldr	r2, [r7, #4]
 8023cd4:	490e      	ldr	r1, [pc, #56]	@ (8023d10 <I2C_MasterRequestWrite+0xfc>)
 8023cd6:	68f8      	ldr	r0, [r7, #12]
 8023cd8:	f000 f966 	bl	8023fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023cdc:	4603      	mov	r3, r0
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	d001      	beq.n	8023ce6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8023ce2:	2301      	movs	r3, #1
 8023ce4:	e010      	b.n	8023d08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8023ce6:	897b      	ldrh	r3, [r7, #10]
 8023ce8:	b2da      	uxtb	r2, r3
 8023cea:	68fb      	ldr	r3, [r7, #12]
 8023cec:	681b      	ldr	r3, [r3, #0]
 8023cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8023cf0:	683b      	ldr	r3, [r7, #0]
 8023cf2:	687a      	ldr	r2, [r7, #4]
 8023cf4:	4907      	ldr	r1, [pc, #28]	@ (8023d14 <I2C_MasterRequestWrite+0x100>)
 8023cf6:	68f8      	ldr	r0, [r7, #12]
 8023cf8:	f000 f956 	bl	8023fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023cfc:	4603      	mov	r3, r0
 8023cfe:	2b00      	cmp	r3, #0
 8023d00:	d001      	beq.n	8023d06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8023d02:	2301      	movs	r3, #1
 8023d04:	e000      	b.n	8023d08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8023d06:	2300      	movs	r3, #0
}
 8023d08:	4618      	mov	r0, r3
 8023d0a:	3718      	adds	r7, #24
 8023d0c:	46bd      	mov	sp, r7
 8023d0e:	bd80      	pop	{r7, pc}
 8023d10:	00010008 	.word	0x00010008
 8023d14:	00010002 	.word	0x00010002

08023d18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b088      	sub	sp, #32
 8023d1c:	af02      	add	r7, sp, #8
 8023d1e:	60f8      	str	r0, [r7, #12]
 8023d20:	607a      	str	r2, [r7, #4]
 8023d22:	603b      	str	r3, [r7, #0]
 8023d24:	460b      	mov	r3, r1
 8023d26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023d2e:	68fb      	ldr	r3, [r7, #12]
 8023d30:	681b      	ldr	r3, [r3, #0]
 8023d32:	681a      	ldr	r2, [r3, #0]
 8023d34:	68fb      	ldr	r3, [r7, #12]
 8023d36:	681b      	ldr	r3, [r3, #0]
 8023d38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8023d3e:	697b      	ldr	r3, [r7, #20]
 8023d40:	2b08      	cmp	r3, #8
 8023d42:	d006      	beq.n	8023d52 <I2C_MasterRequestRead+0x3a>
 8023d44:	697b      	ldr	r3, [r7, #20]
 8023d46:	2b01      	cmp	r3, #1
 8023d48:	d003      	beq.n	8023d52 <I2C_MasterRequestRead+0x3a>
 8023d4a:	697b      	ldr	r3, [r7, #20]
 8023d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8023d50:	d108      	bne.n	8023d64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8023d52:	68fb      	ldr	r3, [r7, #12]
 8023d54:	681b      	ldr	r3, [r3, #0]
 8023d56:	681a      	ldr	r2, [r3, #0]
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	681b      	ldr	r3, [r3, #0]
 8023d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023d60:	601a      	str	r2, [r3, #0]
 8023d62:	e00b      	b.n	8023d7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8023d64:	68fb      	ldr	r3, [r7, #12]
 8023d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023d68:	2b11      	cmp	r3, #17
 8023d6a:	d107      	bne.n	8023d7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8023d6c:	68fb      	ldr	r3, [r7, #12]
 8023d6e:	681b      	ldr	r3, [r3, #0]
 8023d70:	681a      	ldr	r2, [r3, #0]
 8023d72:	68fb      	ldr	r3, [r7, #12]
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8023d7c:	683b      	ldr	r3, [r7, #0]
 8023d7e:	9300      	str	r3, [sp, #0]
 8023d80:	687b      	ldr	r3, [r7, #4]
 8023d82:	2200      	movs	r2, #0
 8023d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8023d88:	68f8      	ldr	r0, [r7, #12]
 8023d8a:	f000 f893 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 8023d8e:	4603      	mov	r3, r0
 8023d90:	2b00      	cmp	r3, #0
 8023d92:	d00d      	beq.n	8023db0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8023d94:	68fb      	ldr	r3, [r7, #12]
 8023d96:	681b      	ldr	r3, [r3, #0]
 8023d98:	681b      	ldr	r3, [r3, #0]
 8023d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023da2:	d103      	bne.n	8023dac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8023da4:	68fb      	ldr	r3, [r7, #12]
 8023da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8023dac:	2303      	movs	r3, #3
 8023dae:	e079      	b.n	8023ea4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8023db0:	68fb      	ldr	r3, [r7, #12]
 8023db2:	691b      	ldr	r3, [r3, #16]
 8023db4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023db8:	d108      	bne.n	8023dcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8023dba:	897b      	ldrh	r3, [r7, #10]
 8023dbc:	b2db      	uxtb	r3, r3
 8023dbe:	f043 0301 	orr.w	r3, r3, #1
 8023dc2:	b2da      	uxtb	r2, r3
 8023dc4:	68fb      	ldr	r3, [r7, #12]
 8023dc6:	681b      	ldr	r3, [r3, #0]
 8023dc8:	611a      	str	r2, [r3, #16]
 8023dca:	e05f      	b.n	8023e8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8023dcc:	897b      	ldrh	r3, [r7, #10]
 8023dce:	11db      	asrs	r3, r3, #7
 8023dd0:	b2db      	uxtb	r3, r3
 8023dd2:	f003 0306 	and.w	r3, r3, #6
 8023dd6:	b2db      	uxtb	r3, r3
 8023dd8:	f063 030f 	orn	r3, r3, #15
 8023ddc:	b2da      	uxtb	r2, r3
 8023dde:	68fb      	ldr	r3, [r7, #12]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8023de4:	683b      	ldr	r3, [r7, #0]
 8023de6:	687a      	ldr	r2, [r7, #4]
 8023de8:	4930      	ldr	r1, [pc, #192]	@ (8023eac <I2C_MasterRequestRead+0x194>)
 8023dea:	68f8      	ldr	r0, [r7, #12]
 8023dec:	f000 f8dc 	bl	8023fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023df0:	4603      	mov	r3, r0
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	d001      	beq.n	8023dfa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8023df6:	2301      	movs	r3, #1
 8023df8:	e054      	b.n	8023ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8023dfa:	897b      	ldrh	r3, [r7, #10]
 8023dfc:	b2da      	uxtb	r2, r3
 8023dfe:	68fb      	ldr	r3, [r7, #12]
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8023e04:	683b      	ldr	r3, [r7, #0]
 8023e06:	687a      	ldr	r2, [r7, #4]
 8023e08:	4929      	ldr	r1, [pc, #164]	@ (8023eb0 <I2C_MasterRequestRead+0x198>)
 8023e0a:	68f8      	ldr	r0, [r7, #12]
 8023e0c:	f000 f8cc 	bl	8023fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023e10:	4603      	mov	r3, r0
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	d001      	beq.n	8023e1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8023e16:	2301      	movs	r3, #1
 8023e18:	e044      	b.n	8023ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023e1a:	2300      	movs	r3, #0
 8023e1c:	613b      	str	r3, [r7, #16]
 8023e1e:	68fb      	ldr	r3, [r7, #12]
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	695b      	ldr	r3, [r3, #20]
 8023e24:	613b      	str	r3, [r7, #16]
 8023e26:	68fb      	ldr	r3, [r7, #12]
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	699b      	ldr	r3, [r3, #24]
 8023e2c:	613b      	str	r3, [r7, #16]
 8023e2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8023e30:	68fb      	ldr	r3, [r7, #12]
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	681a      	ldr	r2, [r3, #0]
 8023e36:	68fb      	ldr	r3, [r7, #12]
 8023e38:	681b      	ldr	r3, [r3, #0]
 8023e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023e3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8023e40:	683b      	ldr	r3, [r7, #0]
 8023e42:	9300      	str	r3, [sp, #0]
 8023e44:	687b      	ldr	r3, [r7, #4]
 8023e46:	2200      	movs	r2, #0
 8023e48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8023e4c:	68f8      	ldr	r0, [r7, #12]
 8023e4e:	f000 f831 	bl	8023eb4 <I2C_WaitOnFlagUntilTimeout>
 8023e52:	4603      	mov	r3, r0
 8023e54:	2b00      	cmp	r3, #0
 8023e56:	d00d      	beq.n	8023e74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8023e58:	68fb      	ldr	r3, [r7, #12]
 8023e5a:	681b      	ldr	r3, [r3, #0]
 8023e5c:	681b      	ldr	r3, [r3, #0]
 8023e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023e66:	d103      	bne.n	8023e70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8023e68:	68fb      	ldr	r3, [r7, #12]
 8023e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023e6e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8023e70:	2303      	movs	r3, #3
 8023e72:	e017      	b.n	8023ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8023e74:	897b      	ldrh	r3, [r7, #10]
 8023e76:	11db      	asrs	r3, r3, #7
 8023e78:	b2db      	uxtb	r3, r3
 8023e7a:	f003 0306 	and.w	r3, r3, #6
 8023e7e:	b2db      	uxtb	r3, r3
 8023e80:	f063 030e 	orn	r3, r3, #14
 8023e84:	b2da      	uxtb	r2, r3
 8023e86:	68fb      	ldr	r3, [r7, #12]
 8023e88:	681b      	ldr	r3, [r3, #0]
 8023e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8023e8c:	683b      	ldr	r3, [r7, #0]
 8023e8e:	687a      	ldr	r2, [r7, #4]
 8023e90:	4907      	ldr	r1, [pc, #28]	@ (8023eb0 <I2C_MasterRequestRead+0x198>)
 8023e92:	68f8      	ldr	r0, [r7, #12]
 8023e94:	f000 f888 	bl	8023fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023e98:	4603      	mov	r3, r0
 8023e9a:	2b00      	cmp	r3, #0
 8023e9c:	d001      	beq.n	8023ea2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8023e9e:	2301      	movs	r3, #1
 8023ea0:	e000      	b.n	8023ea4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8023ea2:	2300      	movs	r3, #0
}
 8023ea4:	4618      	mov	r0, r3
 8023ea6:	3718      	adds	r7, #24
 8023ea8:	46bd      	mov	sp, r7
 8023eaa:	bd80      	pop	{r7, pc}
 8023eac:	00010008 	.word	0x00010008
 8023eb0:	00010002 	.word	0x00010002

08023eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8023eb4:	b580      	push	{r7, lr}
 8023eb6:	b084      	sub	sp, #16
 8023eb8:	af00      	add	r7, sp, #0
 8023eba:	60f8      	str	r0, [r7, #12]
 8023ebc:	60b9      	str	r1, [r7, #8]
 8023ebe:	603b      	str	r3, [r7, #0]
 8023ec0:	4613      	mov	r3, r2
 8023ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8023ec4:	e048      	b.n	8023f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023ec6:	683b      	ldr	r3, [r7, #0]
 8023ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023ecc:	d044      	beq.n	8023f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023ece:	f7fe f9cb 	bl	8022268 <HAL_GetTick>
 8023ed2:	4602      	mov	r2, r0
 8023ed4:	69bb      	ldr	r3, [r7, #24]
 8023ed6:	1ad3      	subs	r3, r2, r3
 8023ed8:	683a      	ldr	r2, [r7, #0]
 8023eda:	429a      	cmp	r2, r3
 8023edc:	d302      	bcc.n	8023ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8023ede:	683b      	ldr	r3, [r7, #0]
 8023ee0:	2b00      	cmp	r3, #0
 8023ee2:	d139      	bne.n	8023f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8023ee4:	68bb      	ldr	r3, [r7, #8]
 8023ee6:	0c1b      	lsrs	r3, r3, #16
 8023ee8:	b2db      	uxtb	r3, r3
 8023eea:	2b01      	cmp	r3, #1
 8023eec:	d10d      	bne.n	8023f0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8023eee:	68fb      	ldr	r3, [r7, #12]
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	695b      	ldr	r3, [r3, #20]
 8023ef4:	43da      	mvns	r2, r3
 8023ef6:	68bb      	ldr	r3, [r7, #8]
 8023ef8:	4013      	ands	r3, r2
 8023efa:	b29b      	uxth	r3, r3
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	bf0c      	ite	eq
 8023f00:	2301      	moveq	r3, #1
 8023f02:	2300      	movne	r3, #0
 8023f04:	b2db      	uxtb	r3, r3
 8023f06:	461a      	mov	r2, r3
 8023f08:	e00c      	b.n	8023f24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8023f0a:	68fb      	ldr	r3, [r7, #12]
 8023f0c:	681b      	ldr	r3, [r3, #0]
 8023f0e:	699b      	ldr	r3, [r3, #24]
 8023f10:	43da      	mvns	r2, r3
 8023f12:	68bb      	ldr	r3, [r7, #8]
 8023f14:	4013      	ands	r3, r2
 8023f16:	b29b      	uxth	r3, r3
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	bf0c      	ite	eq
 8023f1c:	2301      	moveq	r3, #1
 8023f1e:	2300      	movne	r3, #0
 8023f20:	b2db      	uxtb	r3, r3
 8023f22:	461a      	mov	r2, r3
 8023f24:	79fb      	ldrb	r3, [r7, #7]
 8023f26:	429a      	cmp	r2, r3
 8023f28:	d116      	bne.n	8023f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8023f2a:	68fb      	ldr	r3, [r7, #12]
 8023f2c:	2200      	movs	r2, #0
 8023f2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8023f30:	68fb      	ldr	r3, [r7, #12]
 8023f32:	2220      	movs	r2, #32
 8023f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8023f38:	68fb      	ldr	r3, [r7, #12]
 8023f3a:	2200      	movs	r2, #0
 8023f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8023f40:	68fb      	ldr	r3, [r7, #12]
 8023f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023f44:	f043 0220 	orr.w	r2, r3, #32
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8023f4c:	68fb      	ldr	r3, [r7, #12]
 8023f4e:	2200      	movs	r2, #0
 8023f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8023f54:	2301      	movs	r3, #1
 8023f56:	e023      	b.n	8023fa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8023f58:	68bb      	ldr	r3, [r7, #8]
 8023f5a:	0c1b      	lsrs	r3, r3, #16
 8023f5c:	b2db      	uxtb	r3, r3
 8023f5e:	2b01      	cmp	r3, #1
 8023f60:	d10d      	bne.n	8023f7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8023f62:	68fb      	ldr	r3, [r7, #12]
 8023f64:	681b      	ldr	r3, [r3, #0]
 8023f66:	695b      	ldr	r3, [r3, #20]
 8023f68:	43da      	mvns	r2, r3
 8023f6a:	68bb      	ldr	r3, [r7, #8]
 8023f6c:	4013      	ands	r3, r2
 8023f6e:	b29b      	uxth	r3, r3
 8023f70:	2b00      	cmp	r3, #0
 8023f72:	bf0c      	ite	eq
 8023f74:	2301      	moveq	r3, #1
 8023f76:	2300      	movne	r3, #0
 8023f78:	b2db      	uxtb	r3, r3
 8023f7a:	461a      	mov	r2, r3
 8023f7c:	e00c      	b.n	8023f98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8023f7e:	68fb      	ldr	r3, [r7, #12]
 8023f80:	681b      	ldr	r3, [r3, #0]
 8023f82:	699b      	ldr	r3, [r3, #24]
 8023f84:	43da      	mvns	r2, r3
 8023f86:	68bb      	ldr	r3, [r7, #8]
 8023f88:	4013      	ands	r3, r2
 8023f8a:	b29b      	uxth	r3, r3
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	bf0c      	ite	eq
 8023f90:	2301      	moveq	r3, #1
 8023f92:	2300      	movne	r3, #0
 8023f94:	b2db      	uxtb	r3, r3
 8023f96:	461a      	mov	r2, r3
 8023f98:	79fb      	ldrb	r3, [r7, #7]
 8023f9a:	429a      	cmp	r2, r3
 8023f9c:	d093      	beq.n	8023ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8023f9e:	2300      	movs	r3, #0
}
 8023fa0:	4618      	mov	r0, r3
 8023fa2:	3710      	adds	r7, #16
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	bd80      	pop	{r7, pc}

08023fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8023fa8:	b580      	push	{r7, lr}
 8023faa:	b084      	sub	sp, #16
 8023fac:	af00      	add	r7, sp, #0
 8023fae:	60f8      	str	r0, [r7, #12]
 8023fb0:	60b9      	str	r1, [r7, #8]
 8023fb2:	607a      	str	r2, [r7, #4]
 8023fb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8023fb6:	e071      	b.n	802409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8023fb8:	68fb      	ldr	r3, [r7, #12]
 8023fba:	681b      	ldr	r3, [r3, #0]
 8023fbc:	695b      	ldr	r3, [r3, #20]
 8023fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023fc6:	d123      	bne.n	8024010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023fc8:	68fb      	ldr	r3, [r7, #12]
 8023fca:	681b      	ldr	r3, [r3, #0]
 8023fcc:	681a      	ldr	r2, [r3, #0]
 8023fce:	68fb      	ldr	r3, [r7, #12]
 8023fd0:	681b      	ldr	r3, [r3, #0]
 8023fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023fd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023fd8:	68fb      	ldr	r3, [r7, #12]
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8023fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8023fe2:	68fb      	ldr	r3, [r7, #12]
 8023fe4:	2200      	movs	r2, #0
 8023fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8023fe8:	68fb      	ldr	r3, [r7, #12]
 8023fea:	2220      	movs	r2, #32
 8023fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023ff0:	68fb      	ldr	r3, [r7, #12]
 8023ff2:	2200      	movs	r2, #0
 8023ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8023ff8:	68fb      	ldr	r3, [r7, #12]
 8023ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023ffc:	f043 0204 	orr.w	r2, r3, #4
 8024000:	68fb      	ldr	r3, [r7, #12]
 8024002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	2200      	movs	r2, #0
 8024008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 802400c:	2301      	movs	r3, #1
 802400e:	e067      	b.n	80240e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024016:	d041      	beq.n	802409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024018:	f7fe f926 	bl	8022268 <HAL_GetTick>
 802401c:	4602      	mov	r2, r0
 802401e:	683b      	ldr	r3, [r7, #0]
 8024020:	1ad3      	subs	r3, r2, r3
 8024022:	687a      	ldr	r2, [r7, #4]
 8024024:	429a      	cmp	r2, r3
 8024026:	d302      	bcc.n	802402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8024028:	687b      	ldr	r3, [r7, #4]
 802402a:	2b00      	cmp	r3, #0
 802402c:	d136      	bne.n	802409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 802402e:	68bb      	ldr	r3, [r7, #8]
 8024030:	0c1b      	lsrs	r3, r3, #16
 8024032:	b2db      	uxtb	r3, r3
 8024034:	2b01      	cmp	r3, #1
 8024036:	d10c      	bne.n	8024052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8024038:	68fb      	ldr	r3, [r7, #12]
 802403a:	681b      	ldr	r3, [r3, #0]
 802403c:	695b      	ldr	r3, [r3, #20]
 802403e:	43da      	mvns	r2, r3
 8024040:	68bb      	ldr	r3, [r7, #8]
 8024042:	4013      	ands	r3, r2
 8024044:	b29b      	uxth	r3, r3
 8024046:	2b00      	cmp	r3, #0
 8024048:	bf14      	ite	ne
 802404a:	2301      	movne	r3, #1
 802404c:	2300      	moveq	r3, #0
 802404e:	b2db      	uxtb	r3, r3
 8024050:	e00b      	b.n	802406a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8024052:	68fb      	ldr	r3, [r7, #12]
 8024054:	681b      	ldr	r3, [r3, #0]
 8024056:	699b      	ldr	r3, [r3, #24]
 8024058:	43da      	mvns	r2, r3
 802405a:	68bb      	ldr	r3, [r7, #8]
 802405c:	4013      	ands	r3, r2
 802405e:	b29b      	uxth	r3, r3
 8024060:	2b00      	cmp	r3, #0
 8024062:	bf14      	ite	ne
 8024064:	2301      	movne	r3, #1
 8024066:	2300      	moveq	r3, #0
 8024068:	b2db      	uxtb	r3, r3
 802406a:	2b00      	cmp	r3, #0
 802406c:	d016      	beq.n	802409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 802406e:	68fb      	ldr	r3, [r7, #12]
 8024070:	2200      	movs	r2, #0
 8024072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8024074:	68fb      	ldr	r3, [r7, #12]
 8024076:	2220      	movs	r2, #32
 8024078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 802407c:	68fb      	ldr	r3, [r7, #12]
 802407e:	2200      	movs	r2, #0
 8024080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024084:	68fb      	ldr	r3, [r7, #12]
 8024086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024088:	f043 0220 	orr.w	r2, r3, #32
 802408c:	68fb      	ldr	r3, [r7, #12]
 802408e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8024090:	68fb      	ldr	r3, [r7, #12]
 8024092:	2200      	movs	r2, #0
 8024094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8024098:	2301      	movs	r3, #1
 802409a:	e021      	b.n	80240e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 802409c:	68bb      	ldr	r3, [r7, #8]
 802409e:	0c1b      	lsrs	r3, r3, #16
 80240a0:	b2db      	uxtb	r3, r3
 80240a2:	2b01      	cmp	r3, #1
 80240a4:	d10c      	bne.n	80240c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80240a6:	68fb      	ldr	r3, [r7, #12]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	695b      	ldr	r3, [r3, #20]
 80240ac:	43da      	mvns	r2, r3
 80240ae:	68bb      	ldr	r3, [r7, #8]
 80240b0:	4013      	ands	r3, r2
 80240b2:	b29b      	uxth	r3, r3
 80240b4:	2b00      	cmp	r3, #0
 80240b6:	bf14      	ite	ne
 80240b8:	2301      	movne	r3, #1
 80240ba:	2300      	moveq	r3, #0
 80240bc:	b2db      	uxtb	r3, r3
 80240be:	e00b      	b.n	80240d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80240c0:	68fb      	ldr	r3, [r7, #12]
 80240c2:	681b      	ldr	r3, [r3, #0]
 80240c4:	699b      	ldr	r3, [r3, #24]
 80240c6:	43da      	mvns	r2, r3
 80240c8:	68bb      	ldr	r3, [r7, #8]
 80240ca:	4013      	ands	r3, r2
 80240cc:	b29b      	uxth	r3, r3
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	bf14      	ite	ne
 80240d2:	2301      	movne	r3, #1
 80240d4:	2300      	moveq	r3, #0
 80240d6:	b2db      	uxtb	r3, r3
 80240d8:	2b00      	cmp	r3, #0
 80240da:	f47f af6d 	bne.w	8023fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80240de:	2300      	movs	r3, #0
}
 80240e0:	4618      	mov	r0, r3
 80240e2:	3710      	adds	r7, #16
 80240e4:	46bd      	mov	sp, r7
 80240e6:	bd80      	pop	{r7, pc}

080240e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80240e8:	b580      	push	{r7, lr}
 80240ea:	b084      	sub	sp, #16
 80240ec:	af00      	add	r7, sp, #0
 80240ee:	60f8      	str	r0, [r7, #12]
 80240f0:	60b9      	str	r1, [r7, #8]
 80240f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80240f4:	e034      	b.n	8024160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80240f6:	68f8      	ldr	r0, [r7, #12]
 80240f8:	f000 f8e3 	bl	80242c2 <I2C_IsAcknowledgeFailed>
 80240fc:	4603      	mov	r3, r0
 80240fe:	2b00      	cmp	r3, #0
 8024100:	d001      	beq.n	8024106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8024102:	2301      	movs	r3, #1
 8024104:	e034      	b.n	8024170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024106:	68bb      	ldr	r3, [r7, #8]
 8024108:	f1b3 3fff 	cmp.w	r3, #4294967295
 802410c:	d028      	beq.n	8024160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802410e:	f7fe f8ab 	bl	8022268 <HAL_GetTick>
 8024112:	4602      	mov	r2, r0
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	1ad3      	subs	r3, r2, r3
 8024118:	68ba      	ldr	r2, [r7, #8]
 802411a:	429a      	cmp	r2, r3
 802411c:	d302      	bcc.n	8024124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 802411e:	68bb      	ldr	r3, [r7, #8]
 8024120:	2b00      	cmp	r3, #0
 8024122:	d11d      	bne.n	8024160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8024124:	68fb      	ldr	r3, [r7, #12]
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	695b      	ldr	r3, [r3, #20]
 802412a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802412e:	2b80      	cmp	r3, #128	@ 0x80
 8024130:	d016      	beq.n	8024160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8024132:	68fb      	ldr	r3, [r7, #12]
 8024134:	2200      	movs	r2, #0
 8024136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8024138:	68fb      	ldr	r3, [r7, #12]
 802413a:	2220      	movs	r2, #32
 802413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8024140:	68fb      	ldr	r3, [r7, #12]
 8024142:	2200      	movs	r2, #0
 8024144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024148:	68fb      	ldr	r3, [r7, #12]
 802414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802414c:	f043 0220 	orr.w	r2, r3, #32
 8024150:	68fb      	ldr	r3, [r7, #12]
 8024152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8024154:	68fb      	ldr	r3, [r7, #12]
 8024156:	2200      	movs	r2, #0
 8024158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 802415c:	2301      	movs	r3, #1
 802415e:	e007      	b.n	8024170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8024160:	68fb      	ldr	r3, [r7, #12]
 8024162:	681b      	ldr	r3, [r3, #0]
 8024164:	695b      	ldr	r3, [r3, #20]
 8024166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802416a:	2b80      	cmp	r3, #128	@ 0x80
 802416c:	d1c3      	bne.n	80240f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 802416e:	2300      	movs	r3, #0
}
 8024170:	4618      	mov	r0, r3
 8024172:	3710      	adds	r7, #16
 8024174:	46bd      	mov	sp, r7
 8024176:	bd80      	pop	{r7, pc}

08024178 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024178:	b580      	push	{r7, lr}
 802417a:	b084      	sub	sp, #16
 802417c:	af00      	add	r7, sp, #0
 802417e:	60f8      	str	r0, [r7, #12]
 8024180:	60b9      	str	r1, [r7, #8]
 8024182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8024184:	e034      	b.n	80241f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8024186:	68f8      	ldr	r0, [r7, #12]
 8024188:	f000 f89b 	bl	80242c2 <I2C_IsAcknowledgeFailed>
 802418c:	4603      	mov	r3, r0
 802418e:	2b00      	cmp	r3, #0
 8024190:	d001      	beq.n	8024196 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8024192:	2301      	movs	r3, #1
 8024194:	e034      	b.n	8024200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024196:	68bb      	ldr	r3, [r7, #8]
 8024198:	f1b3 3fff 	cmp.w	r3, #4294967295
 802419c:	d028      	beq.n	80241f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802419e:	f7fe f863 	bl	8022268 <HAL_GetTick>
 80241a2:	4602      	mov	r2, r0
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	1ad3      	subs	r3, r2, r3
 80241a8:	68ba      	ldr	r2, [r7, #8]
 80241aa:	429a      	cmp	r2, r3
 80241ac:	d302      	bcc.n	80241b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80241ae:	68bb      	ldr	r3, [r7, #8]
 80241b0:	2b00      	cmp	r3, #0
 80241b2:	d11d      	bne.n	80241f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80241b4:	68fb      	ldr	r3, [r7, #12]
 80241b6:	681b      	ldr	r3, [r3, #0]
 80241b8:	695b      	ldr	r3, [r3, #20]
 80241ba:	f003 0304 	and.w	r3, r3, #4
 80241be:	2b04      	cmp	r3, #4
 80241c0:	d016      	beq.n	80241f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80241c2:	68fb      	ldr	r3, [r7, #12]
 80241c4:	2200      	movs	r2, #0
 80241c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80241c8:	68fb      	ldr	r3, [r7, #12]
 80241ca:	2220      	movs	r2, #32
 80241cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80241d0:	68fb      	ldr	r3, [r7, #12]
 80241d2:	2200      	movs	r2, #0
 80241d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80241d8:	68fb      	ldr	r3, [r7, #12]
 80241da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80241dc:	f043 0220 	orr.w	r2, r3, #32
 80241e0:	68fb      	ldr	r3, [r7, #12]
 80241e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80241e4:	68fb      	ldr	r3, [r7, #12]
 80241e6:	2200      	movs	r2, #0
 80241e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80241ec:	2301      	movs	r3, #1
 80241ee:	e007      	b.n	8024200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80241f0:	68fb      	ldr	r3, [r7, #12]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	695b      	ldr	r3, [r3, #20]
 80241f6:	f003 0304 	and.w	r3, r3, #4
 80241fa:	2b04      	cmp	r3, #4
 80241fc:	d1c3      	bne.n	8024186 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80241fe:	2300      	movs	r3, #0
}
 8024200:	4618      	mov	r0, r3
 8024202:	3710      	adds	r7, #16
 8024204:	46bd      	mov	sp, r7
 8024206:	bd80      	pop	{r7, pc}

08024208 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024208:	b580      	push	{r7, lr}
 802420a:	b084      	sub	sp, #16
 802420c:	af00      	add	r7, sp, #0
 802420e:	60f8      	str	r0, [r7, #12]
 8024210:	60b9      	str	r1, [r7, #8]
 8024212:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8024214:	e049      	b.n	80242aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8024216:	68fb      	ldr	r3, [r7, #12]
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	695b      	ldr	r3, [r3, #20]
 802421c:	f003 0310 	and.w	r3, r3, #16
 8024220:	2b10      	cmp	r3, #16
 8024222:	d119      	bne.n	8024258 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8024224:	68fb      	ldr	r3, [r7, #12]
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	f06f 0210 	mvn.w	r2, #16
 802422c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 802422e:	68fb      	ldr	r3, [r7, #12]
 8024230:	2200      	movs	r2, #0
 8024232:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8024234:	68fb      	ldr	r3, [r7, #12]
 8024236:	2220      	movs	r2, #32
 8024238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802423c:	68fb      	ldr	r3, [r7, #12]
 802423e:	2200      	movs	r2, #0
 8024240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8024244:	68fb      	ldr	r3, [r7, #12]
 8024246:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024248:	68fb      	ldr	r3, [r7, #12]
 802424a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802424c:	68fb      	ldr	r3, [r7, #12]
 802424e:	2200      	movs	r2, #0
 8024250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8024254:	2301      	movs	r3, #1
 8024256:	e030      	b.n	80242ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024258:	f7fe f806 	bl	8022268 <HAL_GetTick>
 802425c:	4602      	mov	r2, r0
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	1ad3      	subs	r3, r2, r3
 8024262:	68ba      	ldr	r2, [r7, #8]
 8024264:	429a      	cmp	r2, r3
 8024266:	d302      	bcc.n	802426e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8024268:	68bb      	ldr	r3, [r7, #8]
 802426a:	2b00      	cmp	r3, #0
 802426c:	d11d      	bne.n	80242aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 802426e:	68fb      	ldr	r3, [r7, #12]
 8024270:	681b      	ldr	r3, [r3, #0]
 8024272:	695b      	ldr	r3, [r3, #20]
 8024274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024278:	2b40      	cmp	r3, #64	@ 0x40
 802427a:	d016      	beq.n	80242aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802427c:	68fb      	ldr	r3, [r7, #12]
 802427e:	2200      	movs	r2, #0
 8024280:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8024282:	68fb      	ldr	r3, [r7, #12]
 8024284:	2220      	movs	r2, #32
 8024286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802428a:	68fb      	ldr	r3, [r7, #12]
 802428c:	2200      	movs	r2, #0
 802428e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024292:	68fb      	ldr	r3, [r7, #12]
 8024294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024296:	f043 0220 	orr.w	r2, r3, #32
 802429a:	68fb      	ldr	r3, [r7, #12]
 802429c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802429e:	68fb      	ldr	r3, [r7, #12]
 80242a0:	2200      	movs	r2, #0
 80242a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80242a6:	2301      	movs	r3, #1
 80242a8:	e007      	b.n	80242ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80242aa:	68fb      	ldr	r3, [r7, #12]
 80242ac:	681b      	ldr	r3, [r3, #0]
 80242ae:	695b      	ldr	r3, [r3, #20]
 80242b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80242b4:	2b40      	cmp	r3, #64	@ 0x40
 80242b6:	d1ae      	bne.n	8024216 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80242b8:	2300      	movs	r3, #0
}
 80242ba:	4618      	mov	r0, r3
 80242bc:	3710      	adds	r7, #16
 80242be:	46bd      	mov	sp, r7
 80242c0:	bd80      	pop	{r7, pc}

080242c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80242c2:	b480      	push	{r7}
 80242c4:	b083      	sub	sp, #12
 80242c6:	af00      	add	r7, sp, #0
 80242c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	681b      	ldr	r3, [r3, #0]
 80242ce:	695b      	ldr	r3, [r3, #20]
 80242d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80242d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80242d8:	d11b      	bne.n	8024312 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80242e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	2200      	movs	r2, #0
 80242e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80242ea:	687b      	ldr	r3, [r7, #4]
 80242ec:	2220      	movs	r2, #32
 80242ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80242f2:	687b      	ldr	r3, [r7, #4]
 80242f4:	2200      	movs	r2, #0
 80242f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80242fe:	f043 0204 	orr.w	r2, r3, #4
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	2200      	movs	r2, #0
 802430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 802430e:	2301      	movs	r3, #1
 8024310:	e000      	b.n	8024314 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8024312:	2300      	movs	r3, #0
}
 8024314:	4618      	mov	r0, r3
 8024316:	370c      	adds	r7, #12
 8024318:	46bd      	mov	sp, r7
 802431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431e:	4770      	bx	lr

08024320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8024320:	b580      	push	{r7, lr}
 8024322:	b084      	sub	sp, #16
 8024324:	af00      	add	r7, sp, #0
 8024326:	6078      	str	r0, [r7, #4]
 8024328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	2b00      	cmp	r3, #0
 802432e:	d101      	bne.n	8024334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8024330:	2301      	movs	r3, #1
 8024332:	e0cc      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8024334:	4b68      	ldr	r3, [pc, #416]	@ (80244d8 <HAL_RCC_ClockConfig+0x1b8>)
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	f003 030f 	and.w	r3, r3, #15
 802433c:	683a      	ldr	r2, [r7, #0]
 802433e:	429a      	cmp	r2, r3
 8024340:	d90c      	bls.n	802435c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024342:	4b65      	ldr	r3, [pc, #404]	@ (80244d8 <HAL_RCC_ClockConfig+0x1b8>)
 8024344:	683a      	ldr	r2, [r7, #0]
 8024346:	b2d2      	uxtb	r2, r2
 8024348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802434a:	4b63      	ldr	r3, [pc, #396]	@ (80244d8 <HAL_RCC_ClockConfig+0x1b8>)
 802434c:	681b      	ldr	r3, [r3, #0]
 802434e:	f003 030f 	and.w	r3, r3, #15
 8024352:	683a      	ldr	r2, [r7, #0]
 8024354:	429a      	cmp	r2, r3
 8024356:	d001      	beq.n	802435c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8024358:	2301      	movs	r3, #1
 802435a:	e0b8      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	681b      	ldr	r3, [r3, #0]
 8024360:	f003 0302 	and.w	r3, r3, #2
 8024364:	2b00      	cmp	r3, #0
 8024366:	d020      	beq.n	80243aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024368:	687b      	ldr	r3, [r7, #4]
 802436a:	681b      	ldr	r3, [r3, #0]
 802436c:	f003 0304 	and.w	r3, r3, #4
 8024370:	2b00      	cmp	r3, #0
 8024372:	d005      	beq.n	8024380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024374:	4b59      	ldr	r3, [pc, #356]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024376:	689b      	ldr	r3, [r3, #8]
 8024378:	4a58      	ldr	r2, [pc, #352]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 802437a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 802437e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024380:	687b      	ldr	r3, [r7, #4]
 8024382:	681b      	ldr	r3, [r3, #0]
 8024384:	f003 0308 	and.w	r3, r3, #8
 8024388:	2b00      	cmp	r3, #0
 802438a:	d005      	beq.n	8024398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802438c:	4b53      	ldr	r3, [pc, #332]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 802438e:	689b      	ldr	r3, [r3, #8]
 8024390:	4a52      	ldr	r2, [pc, #328]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8024396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024398:	4b50      	ldr	r3, [pc, #320]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 802439a:	689b      	ldr	r3, [r3, #8]
 802439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	689b      	ldr	r3, [r3, #8]
 80243a4:	494d      	ldr	r1, [pc, #308]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 80243a6:	4313      	orrs	r3, r2
 80243a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	f003 0301 	and.w	r3, r3, #1
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d044      	beq.n	8024440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80243b6:	687b      	ldr	r3, [r7, #4]
 80243b8:	685b      	ldr	r3, [r3, #4]
 80243ba:	2b01      	cmp	r3, #1
 80243bc:	d107      	bne.n	80243ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80243be:	4b47      	ldr	r3, [pc, #284]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 80243c0:	681b      	ldr	r3, [r3, #0]
 80243c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80243c6:	2b00      	cmp	r3, #0
 80243c8:	d119      	bne.n	80243fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80243ca:	2301      	movs	r3, #1
 80243cc:	e07f      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80243ce:	687b      	ldr	r3, [r7, #4]
 80243d0:	685b      	ldr	r3, [r3, #4]
 80243d2:	2b02      	cmp	r3, #2
 80243d4:	d003      	beq.n	80243de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80243d6:	687b      	ldr	r3, [r7, #4]
 80243d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80243da:	2b03      	cmp	r3, #3
 80243dc:	d107      	bne.n	80243ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80243de:	4b3f      	ldr	r3, [pc, #252]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 80243e0:	681b      	ldr	r3, [r3, #0]
 80243e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80243e6:	2b00      	cmp	r3, #0
 80243e8:	d109      	bne.n	80243fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80243ea:	2301      	movs	r3, #1
 80243ec:	e06f      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80243ee:	4b3b      	ldr	r3, [pc, #236]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 80243f0:	681b      	ldr	r3, [r3, #0]
 80243f2:	f003 0302 	and.w	r3, r3, #2
 80243f6:	2b00      	cmp	r3, #0
 80243f8:	d101      	bne.n	80243fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80243fa:	2301      	movs	r3, #1
 80243fc:	e067      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80243fe:	4b37      	ldr	r3, [pc, #220]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024400:	689b      	ldr	r3, [r3, #8]
 8024402:	f023 0203 	bic.w	r2, r3, #3
 8024406:	687b      	ldr	r3, [r7, #4]
 8024408:	685b      	ldr	r3, [r3, #4]
 802440a:	4934      	ldr	r1, [pc, #208]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 802440c:	4313      	orrs	r3, r2
 802440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8024410:	f7fd ff2a 	bl	8022268 <HAL_GetTick>
 8024414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024416:	e00a      	b.n	802442e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024418:	f7fd ff26 	bl	8022268 <HAL_GetTick>
 802441c:	4602      	mov	r2, r0
 802441e:	68fb      	ldr	r3, [r7, #12]
 8024420:	1ad3      	subs	r3, r2, r3
 8024422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8024426:	4293      	cmp	r3, r2
 8024428:	d901      	bls.n	802442e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802442a:	2303      	movs	r3, #3
 802442c:	e04f      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802442e:	4b2b      	ldr	r3, [pc, #172]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024430:	689b      	ldr	r3, [r3, #8]
 8024432:	f003 020c 	and.w	r2, r3, #12
 8024436:	687b      	ldr	r3, [r7, #4]
 8024438:	685b      	ldr	r3, [r3, #4]
 802443a:	009b      	lsls	r3, r3, #2
 802443c:	429a      	cmp	r2, r3
 802443e:	d1eb      	bne.n	8024418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8024440:	4b25      	ldr	r3, [pc, #148]	@ (80244d8 <HAL_RCC_ClockConfig+0x1b8>)
 8024442:	681b      	ldr	r3, [r3, #0]
 8024444:	f003 030f 	and.w	r3, r3, #15
 8024448:	683a      	ldr	r2, [r7, #0]
 802444a:	429a      	cmp	r2, r3
 802444c:	d20c      	bcs.n	8024468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802444e:	4b22      	ldr	r3, [pc, #136]	@ (80244d8 <HAL_RCC_ClockConfig+0x1b8>)
 8024450:	683a      	ldr	r2, [r7, #0]
 8024452:	b2d2      	uxtb	r2, r2
 8024454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8024456:	4b20      	ldr	r3, [pc, #128]	@ (80244d8 <HAL_RCC_ClockConfig+0x1b8>)
 8024458:	681b      	ldr	r3, [r3, #0]
 802445a:	f003 030f 	and.w	r3, r3, #15
 802445e:	683a      	ldr	r2, [r7, #0]
 8024460:	429a      	cmp	r2, r3
 8024462:	d001      	beq.n	8024468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024464:	2301      	movs	r3, #1
 8024466:	e032      	b.n	80244ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	f003 0304 	and.w	r3, r3, #4
 8024470:	2b00      	cmp	r3, #0
 8024472:	d008      	beq.n	8024486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024474:	4b19      	ldr	r3, [pc, #100]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024476:	689b      	ldr	r3, [r3, #8]
 8024478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 802447c:	687b      	ldr	r3, [r7, #4]
 802447e:	68db      	ldr	r3, [r3, #12]
 8024480:	4916      	ldr	r1, [pc, #88]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024482:	4313      	orrs	r3, r2
 8024484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	681b      	ldr	r3, [r3, #0]
 802448a:	f003 0308 	and.w	r3, r3, #8
 802448e:	2b00      	cmp	r3, #0
 8024490:	d009      	beq.n	80244a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024492:	4b12      	ldr	r3, [pc, #72]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 8024494:	689b      	ldr	r3, [r3, #8]
 8024496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	691b      	ldr	r3, [r3, #16]
 802449e:	00db      	lsls	r3, r3, #3
 80244a0:	490e      	ldr	r1, [pc, #56]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 80244a2:	4313      	orrs	r3, r2
 80244a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80244a6:	f000 f887 	bl	80245b8 <HAL_RCC_GetSysClockFreq>
 80244aa:	4602      	mov	r2, r0
 80244ac:	4b0b      	ldr	r3, [pc, #44]	@ (80244dc <HAL_RCC_ClockConfig+0x1bc>)
 80244ae:	689b      	ldr	r3, [r3, #8]
 80244b0:	091b      	lsrs	r3, r3, #4
 80244b2:	f003 030f 	and.w	r3, r3, #15
 80244b6:	490a      	ldr	r1, [pc, #40]	@ (80244e0 <HAL_RCC_ClockConfig+0x1c0>)
 80244b8:	5ccb      	ldrb	r3, [r1, r3]
 80244ba:	fa22 f303 	lsr.w	r3, r2, r3
 80244be:	4a09      	ldr	r2, [pc, #36]	@ (80244e4 <HAL_RCC_ClockConfig+0x1c4>)
 80244c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80244c2:	4b09      	ldr	r3, [pc, #36]	@ (80244e8 <HAL_RCC_ClockConfig+0x1c8>)
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	4618      	mov	r0, r3
 80244c8:	f7fd fcfc 	bl	8021ec4 <HAL_InitTick>

  return HAL_OK;
 80244cc:	2300      	movs	r3, #0
}
 80244ce:	4618      	mov	r0, r3
 80244d0:	3710      	adds	r7, #16
 80244d2:	46bd      	mov	sp, r7
 80244d4:	bd80      	pop	{r7, pc}
 80244d6:	bf00      	nop
 80244d8:	40023c00 	.word	0x40023c00
 80244dc:	40023800 	.word	0x40023800
 80244e0:	0802f208 	.word	0x0802f208
 80244e4:	20000000 	.word	0x20000000
 80244e8:	20000004 	.word	0x20000004

080244ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80244ec:	b480      	push	{r7}
 80244ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80244f0:	4b03      	ldr	r3, [pc, #12]	@ (8024500 <HAL_RCC_GetHCLKFreq+0x14>)
 80244f2:	681b      	ldr	r3, [r3, #0]
}
 80244f4:	4618      	mov	r0, r3
 80244f6:	46bd      	mov	sp, r7
 80244f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244fc:	4770      	bx	lr
 80244fe:	bf00      	nop
 8024500:	20000000 	.word	0x20000000

08024504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024504:	b580      	push	{r7, lr}
 8024506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8024508:	f7ff fff0 	bl	80244ec <HAL_RCC_GetHCLKFreq>
 802450c:	4602      	mov	r2, r0
 802450e:	4b05      	ldr	r3, [pc, #20]	@ (8024524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024510:	689b      	ldr	r3, [r3, #8]
 8024512:	0a9b      	lsrs	r3, r3, #10
 8024514:	f003 0307 	and.w	r3, r3, #7
 8024518:	4903      	ldr	r1, [pc, #12]	@ (8024528 <HAL_RCC_GetPCLK1Freq+0x24>)
 802451a:	5ccb      	ldrb	r3, [r1, r3]
 802451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8024520:	4618      	mov	r0, r3
 8024522:	bd80      	pop	{r7, pc}
 8024524:	40023800 	.word	0x40023800
 8024528:	0802f218 	.word	0x0802f218

0802452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802452c:	b580      	push	{r7, lr}
 802452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8024530:	f7ff ffdc 	bl	80244ec <HAL_RCC_GetHCLKFreq>
 8024534:	4602      	mov	r2, r0
 8024536:	4b05      	ldr	r3, [pc, #20]	@ (802454c <HAL_RCC_GetPCLK2Freq+0x20>)
 8024538:	689b      	ldr	r3, [r3, #8]
 802453a:	0b5b      	lsrs	r3, r3, #13
 802453c:	f003 0307 	and.w	r3, r3, #7
 8024540:	4903      	ldr	r1, [pc, #12]	@ (8024550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8024542:	5ccb      	ldrb	r3, [r1, r3]
 8024544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8024548:	4618      	mov	r0, r3
 802454a:	bd80      	pop	{r7, pc}
 802454c:	40023800 	.word	0x40023800
 8024550:	0802f218 	.word	0x0802f218

08024554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8024554:	b480      	push	{r7}
 8024556:	b083      	sub	sp, #12
 8024558:	af00      	add	r7, sp, #0
 802455a:	6078      	str	r0, [r7, #4]
 802455c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	220f      	movs	r2, #15
 8024562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8024564:	4b12      	ldr	r3, [pc, #72]	@ (80245b0 <HAL_RCC_GetClockConfig+0x5c>)
 8024566:	689b      	ldr	r3, [r3, #8]
 8024568:	f003 0203 	and.w	r2, r3, #3
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8024570:	4b0f      	ldr	r3, [pc, #60]	@ (80245b0 <HAL_RCC_GetClockConfig+0x5c>)
 8024572:	689b      	ldr	r3, [r3, #8]
 8024574:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 802457c:	4b0c      	ldr	r3, [pc, #48]	@ (80245b0 <HAL_RCC_GetClockConfig+0x5c>)
 802457e:	689b      	ldr	r3, [r3, #8]
 8024580:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8024588:	4b09      	ldr	r3, [pc, #36]	@ (80245b0 <HAL_RCC_GetClockConfig+0x5c>)
 802458a:	689b      	ldr	r3, [r3, #8]
 802458c:	08db      	lsrs	r3, r3, #3
 802458e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8024596:	4b07      	ldr	r3, [pc, #28]	@ (80245b4 <HAL_RCC_GetClockConfig+0x60>)
 8024598:	681b      	ldr	r3, [r3, #0]
 802459a:	f003 020f 	and.w	r2, r3, #15
 802459e:	683b      	ldr	r3, [r7, #0]
 80245a0:	601a      	str	r2, [r3, #0]
}
 80245a2:	bf00      	nop
 80245a4:	370c      	adds	r7, #12
 80245a6:	46bd      	mov	sp, r7
 80245a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245ac:	4770      	bx	lr
 80245ae:	bf00      	nop
 80245b0:	40023800 	.word	0x40023800
 80245b4:	40023c00 	.word	0x40023c00

080245b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80245b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80245bc:	b0ae      	sub	sp, #184	@ 0xb8
 80245be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80245c0:	2300      	movs	r3, #0
 80245c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80245c6:	2300      	movs	r3, #0
 80245c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80245cc:	2300      	movs	r3, #0
 80245ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80245d2:	2300      	movs	r3, #0
 80245d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80245d8:	2300      	movs	r3, #0
 80245da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80245de:	4bcb      	ldr	r3, [pc, #812]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 80245e0:	689b      	ldr	r3, [r3, #8]
 80245e2:	f003 030c 	and.w	r3, r3, #12
 80245e6:	2b0c      	cmp	r3, #12
 80245e8:	f200 8206 	bhi.w	80249f8 <HAL_RCC_GetSysClockFreq+0x440>
 80245ec:	a201      	add	r2, pc, #4	@ (adr r2, 80245f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80245ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80245f2:	bf00      	nop
 80245f4:	08024629 	.word	0x08024629
 80245f8:	080249f9 	.word	0x080249f9
 80245fc:	080249f9 	.word	0x080249f9
 8024600:	080249f9 	.word	0x080249f9
 8024604:	08024631 	.word	0x08024631
 8024608:	080249f9 	.word	0x080249f9
 802460c:	080249f9 	.word	0x080249f9
 8024610:	080249f9 	.word	0x080249f9
 8024614:	08024639 	.word	0x08024639
 8024618:	080249f9 	.word	0x080249f9
 802461c:	080249f9 	.word	0x080249f9
 8024620:	080249f9 	.word	0x080249f9
 8024624:	08024829 	.word	0x08024829
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8024628:	4bb9      	ldr	r3, [pc, #740]	@ (8024910 <HAL_RCC_GetSysClockFreq+0x358>)
 802462a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 802462e:	e1e7      	b.n	8024a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8024630:	4bb8      	ldr	r3, [pc, #736]	@ (8024914 <HAL_RCC_GetSysClockFreq+0x35c>)
 8024632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8024636:	e1e3      	b.n	8024a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8024638:	4bb4      	ldr	r3, [pc, #720]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 802463a:	685b      	ldr	r3, [r3, #4]
 802463c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8024644:	4bb1      	ldr	r3, [pc, #708]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 8024646:	685b      	ldr	r3, [r3, #4]
 8024648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802464c:	2b00      	cmp	r3, #0
 802464e:	d071      	beq.n	8024734 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024650:	4bae      	ldr	r3, [pc, #696]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 8024652:	685b      	ldr	r3, [r3, #4]
 8024654:	099b      	lsrs	r3, r3, #6
 8024656:	2200      	movs	r2, #0
 8024658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 802465c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8024660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8024664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024668:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802466c:	2300      	movs	r3, #0
 802466e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8024676:	4622      	mov	r2, r4
 8024678:	462b      	mov	r3, r5
 802467a:	f04f 0000 	mov.w	r0, #0
 802467e:	f04f 0100 	mov.w	r1, #0
 8024682:	0159      	lsls	r1, r3, #5
 8024684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8024688:	0150      	lsls	r0, r2, #5
 802468a:	4602      	mov	r2, r0
 802468c:	460b      	mov	r3, r1
 802468e:	4621      	mov	r1, r4
 8024690:	1a51      	subs	r1, r2, r1
 8024692:	6439      	str	r1, [r7, #64]	@ 0x40
 8024694:	4629      	mov	r1, r5
 8024696:	eb63 0301 	sbc.w	r3, r3, r1
 802469a:	647b      	str	r3, [r7, #68]	@ 0x44
 802469c:	f04f 0200 	mov.w	r2, #0
 80246a0:	f04f 0300 	mov.w	r3, #0
 80246a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80246a8:	4649      	mov	r1, r9
 80246aa:	018b      	lsls	r3, r1, #6
 80246ac:	4641      	mov	r1, r8
 80246ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80246b2:	4641      	mov	r1, r8
 80246b4:	018a      	lsls	r2, r1, #6
 80246b6:	4641      	mov	r1, r8
 80246b8:	1a51      	subs	r1, r2, r1
 80246ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80246bc:	4649      	mov	r1, r9
 80246be:	eb63 0301 	sbc.w	r3, r3, r1
 80246c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80246c4:	f04f 0200 	mov.w	r2, #0
 80246c8:	f04f 0300 	mov.w	r3, #0
 80246cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80246d0:	4649      	mov	r1, r9
 80246d2:	00cb      	lsls	r3, r1, #3
 80246d4:	4641      	mov	r1, r8
 80246d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80246da:	4641      	mov	r1, r8
 80246dc:	00ca      	lsls	r2, r1, #3
 80246de:	4610      	mov	r0, r2
 80246e0:	4619      	mov	r1, r3
 80246e2:	4603      	mov	r3, r0
 80246e4:	4622      	mov	r2, r4
 80246e6:	189b      	adds	r3, r3, r2
 80246e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80246ea:	462b      	mov	r3, r5
 80246ec:	460a      	mov	r2, r1
 80246ee:	eb42 0303 	adc.w	r3, r2, r3
 80246f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80246f4:	f04f 0200 	mov.w	r2, #0
 80246f8:	f04f 0300 	mov.w	r3, #0
 80246fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8024700:	4629      	mov	r1, r5
 8024702:	024b      	lsls	r3, r1, #9
 8024704:	4621      	mov	r1, r4
 8024706:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802470a:	4621      	mov	r1, r4
 802470c:	024a      	lsls	r2, r1, #9
 802470e:	4610      	mov	r0, r2
 8024710:	4619      	mov	r1, r3
 8024712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024716:	2200      	movs	r2, #0
 8024718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 802471c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8024720:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8024724:	f7fc fad0 	bl	8020cc8 <__aeabi_uldivmod>
 8024728:	4602      	mov	r2, r0
 802472a:	460b      	mov	r3, r1
 802472c:	4613      	mov	r3, r2
 802472e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8024732:	e067      	b.n	8024804 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024734:	4b75      	ldr	r3, [pc, #468]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 8024736:	685b      	ldr	r3, [r3, #4]
 8024738:	099b      	lsrs	r3, r3, #6
 802473a:	2200      	movs	r2, #0
 802473c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8024740:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8024744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802474c:	67bb      	str	r3, [r7, #120]	@ 0x78
 802474e:	2300      	movs	r3, #0
 8024750:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8024752:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8024756:	4622      	mov	r2, r4
 8024758:	462b      	mov	r3, r5
 802475a:	f04f 0000 	mov.w	r0, #0
 802475e:	f04f 0100 	mov.w	r1, #0
 8024762:	0159      	lsls	r1, r3, #5
 8024764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8024768:	0150      	lsls	r0, r2, #5
 802476a:	4602      	mov	r2, r0
 802476c:	460b      	mov	r3, r1
 802476e:	4621      	mov	r1, r4
 8024770:	1a51      	subs	r1, r2, r1
 8024772:	62b9      	str	r1, [r7, #40]	@ 0x28
 8024774:	4629      	mov	r1, r5
 8024776:	eb63 0301 	sbc.w	r3, r3, r1
 802477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802477c:	f04f 0200 	mov.w	r2, #0
 8024780:	f04f 0300 	mov.w	r3, #0
 8024784:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8024788:	4649      	mov	r1, r9
 802478a:	018b      	lsls	r3, r1, #6
 802478c:	4641      	mov	r1, r8
 802478e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8024792:	4641      	mov	r1, r8
 8024794:	018a      	lsls	r2, r1, #6
 8024796:	4641      	mov	r1, r8
 8024798:	ebb2 0a01 	subs.w	sl, r2, r1
 802479c:	4649      	mov	r1, r9
 802479e:	eb63 0b01 	sbc.w	fp, r3, r1
 80247a2:	f04f 0200 	mov.w	r2, #0
 80247a6:	f04f 0300 	mov.w	r3, #0
 80247aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80247ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80247b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80247b6:	4692      	mov	sl, r2
 80247b8:	469b      	mov	fp, r3
 80247ba:	4623      	mov	r3, r4
 80247bc:	eb1a 0303 	adds.w	r3, sl, r3
 80247c0:	623b      	str	r3, [r7, #32]
 80247c2:	462b      	mov	r3, r5
 80247c4:	eb4b 0303 	adc.w	r3, fp, r3
 80247c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80247ca:	f04f 0200 	mov.w	r2, #0
 80247ce:	f04f 0300 	mov.w	r3, #0
 80247d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80247d6:	4629      	mov	r1, r5
 80247d8:	028b      	lsls	r3, r1, #10
 80247da:	4621      	mov	r1, r4
 80247dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80247e0:	4621      	mov	r1, r4
 80247e2:	028a      	lsls	r2, r1, #10
 80247e4:	4610      	mov	r0, r2
 80247e6:	4619      	mov	r1, r3
 80247e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80247ec:	2200      	movs	r2, #0
 80247ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80247f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80247f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80247f6:	f7fc fa67 	bl	8020cc8 <__aeabi_uldivmod>
 80247fa:	4602      	mov	r2, r0
 80247fc:	460b      	mov	r3, r1
 80247fe:	4613      	mov	r3, r2
 8024800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8024804:	4b41      	ldr	r3, [pc, #260]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 8024806:	685b      	ldr	r3, [r3, #4]
 8024808:	0c1b      	lsrs	r3, r3, #16
 802480a:	f003 0303 	and.w	r3, r3, #3
 802480e:	3301      	adds	r3, #1
 8024810:	005b      	lsls	r3, r3, #1
 8024812:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8024816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 802481a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8024826:	e0eb      	b.n	8024a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8024828:	4b38      	ldr	r3, [pc, #224]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 802482a:	685b      	ldr	r3, [r3, #4]
 802482c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8024834:	4b35      	ldr	r3, [pc, #212]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 8024836:	685b      	ldr	r3, [r3, #4]
 8024838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802483c:	2b00      	cmp	r3, #0
 802483e:	d06b      	beq.n	8024918 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024840:	4b32      	ldr	r3, [pc, #200]	@ (802490c <HAL_RCC_GetSysClockFreq+0x354>)
 8024842:	685b      	ldr	r3, [r3, #4]
 8024844:	099b      	lsrs	r3, r3, #6
 8024846:	2200      	movs	r2, #0
 8024848:	66bb      	str	r3, [r7, #104]	@ 0x68
 802484a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 802484c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024852:	663b      	str	r3, [r7, #96]	@ 0x60
 8024854:	2300      	movs	r3, #0
 8024856:	667b      	str	r3, [r7, #100]	@ 0x64
 8024858:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 802485c:	4622      	mov	r2, r4
 802485e:	462b      	mov	r3, r5
 8024860:	f04f 0000 	mov.w	r0, #0
 8024864:	f04f 0100 	mov.w	r1, #0
 8024868:	0159      	lsls	r1, r3, #5
 802486a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802486e:	0150      	lsls	r0, r2, #5
 8024870:	4602      	mov	r2, r0
 8024872:	460b      	mov	r3, r1
 8024874:	4621      	mov	r1, r4
 8024876:	1a51      	subs	r1, r2, r1
 8024878:	61b9      	str	r1, [r7, #24]
 802487a:	4629      	mov	r1, r5
 802487c:	eb63 0301 	sbc.w	r3, r3, r1
 8024880:	61fb      	str	r3, [r7, #28]
 8024882:	f04f 0200 	mov.w	r2, #0
 8024886:	f04f 0300 	mov.w	r3, #0
 802488a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 802488e:	4659      	mov	r1, fp
 8024890:	018b      	lsls	r3, r1, #6
 8024892:	4651      	mov	r1, sl
 8024894:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8024898:	4651      	mov	r1, sl
 802489a:	018a      	lsls	r2, r1, #6
 802489c:	4651      	mov	r1, sl
 802489e:	ebb2 0801 	subs.w	r8, r2, r1
 80248a2:	4659      	mov	r1, fp
 80248a4:	eb63 0901 	sbc.w	r9, r3, r1
 80248a8:	f04f 0200 	mov.w	r2, #0
 80248ac:	f04f 0300 	mov.w	r3, #0
 80248b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80248b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80248b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80248bc:	4690      	mov	r8, r2
 80248be:	4699      	mov	r9, r3
 80248c0:	4623      	mov	r3, r4
 80248c2:	eb18 0303 	adds.w	r3, r8, r3
 80248c6:	613b      	str	r3, [r7, #16]
 80248c8:	462b      	mov	r3, r5
 80248ca:	eb49 0303 	adc.w	r3, r9, r3
 80248ce:	617b      	str	r3, [r7, #20]
 80248d0:	f04f 0200 	mov.w	r2, #0
 80248d4:	f04f 0300 	mov.w	r3, #0
 80248d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80248dc:	4629      	mov	r1, r5
 80248de:	024b      	lsls	r3, r1, #9
 80248e0:	4621      	mov	r1, r4
 80248e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80248e6:	4621      	mov	r1, r4
 80248e8:	024a      	lsls	r2, r1, #9
 80248ea:	4610      	mov	r0, r2
 80248ec:	4619      	mov	r1, r3
 80248ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80248f2:	2200      	movs	r2, #0
 80248f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80248f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80248f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80248fc:	f7fc f9e4 	bl	8020cc8 <__aeabi_uldivmod>
 8024900:	4602      	mov	r2, r0
 8024902:	460b      	mov	r3, r1
 8024904:	4613      	mov	r3, r2
 8024906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802490a:	e065      	b.n	80249d8 <HAL_RCC_GetSysClockFreq+0x420>
 802490c:	40023800 	.word	0x40023800
 8024910:	00f42400 	.word	0x00f42400
 8024914:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024918:	4b3d      	ldr	r3, [pc, #244]	@ (8024a10 <HAL_RCC_GetSysClockFreq+0x458>)
 802491a:	685b      	ldr	r3, [r3, #4]
 802491c:	099b      	lsrs	r3, r3, #6
 802491e:	2200      	movs	r2, #0
 8024920:	4618      	mov	r0, r3
 8024922:	4611      	mov	r1, r2
 8024924:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8024928:	653b      	str	r3, [r7, #80]	@ 0x50
 802492a:	2300      	movs	r3, #0
 802492c:	657b      	str	r3, [r7, #84]	@ 0x54
 802492e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8024932:	4642      	mov	r2, r8
 8024934:	464b      	mov	r3, r9
 8024936:	f04f 0000 	mov.w	r0, #0
 802493a:	f04f 0100 	mov.w	r1, #0
 802493e:	0159      	lsls	r1, r3, #5
 8024940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8024944:	0150      	lsls	r0, r2, #5
 8024946:	4602      	mov	r2, r0
 8024948:	460b      	mov	r3, r1
 802494a:	4641      	mov	r1, r8
 802494c:	1a51      	subs	r1, r2, r1
 802494e:	60b9      	str	r1, [r7, #8]
 8024950:	4649      	mov	r1, r9
 8024952:	eb63 0301 	sbc.w	r3, r3, r1
 8024956:	60fb      	str	r3, [r7, #12]
 8024958:	f04f 0200 	mov.w	r2, #0
 802495c:	f04f 0300 	mov.w	r3, #0
 8024960:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8024964:	4659      	mov	r1, fp
 8024966:	018b      	lsls	r3, r1, #6
 8024968:	4651      	mov	r1, sl
 802496a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802496e:	4651      	mov	r1, sl
 8024970:	018a      	lsls	r2, r1, #6
 8024972:	4651      	mov	r1, sl
 8024974:	1a54      	subs	r4, r2, r1
 8024976:	4659      	mov	r1, fp
 8024978:	eb63 0501 	sbc.w	r5, r3, r1
 802497c:	f04f 0200 	mov.w	r2, #0
 8024980:	f04f 0300 	mov.w	r3, #0
 8024984:	00eb      	lsls	r3, r5, #3
 8024986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802498a:	00e2      	lsls	r2, r4, #3
 802498c:	4614      	mov	r4, r2
 802498e:	461d      	mov	r5, r3
 8024990:	4643      	mov	r3, r8
 8024992:	18e3      	adds	r3, r4, r3
 8024994:	603b      	str	r3, [r7, #0]
 8024996:	464b      	mov	r3, r9
 8024998:	eb45 0303 	adc.w	r3, r5, r3
 802499c:	607b      	str	r3, [r7, #4]
 802499e:	f04f 0200 	mov.w	r2, #0
 80249a2:	f04f 0300 	mov.w	r3, #0
 80249a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80249aa:	4629      	mov	r1, r5
 80249ac:	028b      	lsls	r3, r1, #10
 80249ae:	4621      	mov	r1, r4
 80249b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80249b4:	4621      	mov	r1, r4
 80249b6:	028a      	lsls	r2, r1, #10
 80249b8:	4610      	mov	r0, r2
 80249ba:	4619      	mov	r1, r3
 80249bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80249c0:	2200      	movs	r2, #0
 80249c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80249c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80249c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80249ca:	f7fc f97d 	bl	8020cc8 <__aeabi_uldivmod>
 80249ce:	4602      	mov	r2, r0
 80249d0:	460b      	mov	r3, r1
 80249d2:	4613      	mov	r3, r2
 80249d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80249d8:	4b0d      	ldr	r3, [pc, #52]	@ (8024a10 <HAL_RCC_GetSysClockFreq+0x458>)
 80249da:	685b      	ldr	r3, [r3, #4]
 80249dc:	0f1b      	lsrs	r3, r3, #28
 80249de:	f003 0307 	and.w	r3, r3, #7
 80249e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80249e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80249ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80249ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80249f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80249f6:	e003      	b.n	8024a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80249f8:	4b06      	ldr	r3, [pc, #24]	@ (8024a14 <HAL_RCC_GetSysClockFreq+0x45c>)
 80249fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80249fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8024a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8024a04:	4618      	mov	r0, r3
 8024a06:	37b8      	adds	r7, #184	@ 0xb8
 8024a08:	46bd      	mov	sp, r7
 8024a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024a0e:	bf00      	nop
 8024a10:	40023800 	.word	0x40023800
 8024a14:	00f42400 	.word	0x00f42400

08024a18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8024a18:	b580      	push	{r7, lr}
 8024a1a:	b086      	sub	sp, #24
 8024a1c:	af00      	add	r7, sp, #0
 8024a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8024a20:	687b      	ldr	r3, [r7, #4]
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	d101      	bne.n	8024a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8024a26:	2301      	movs	r3, #1
 8024a28:	e28d      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8024a2a:	687b      	ldr	r3, [r7, #4]
 8024a2c:	681b      	ldr	r3, [r3, #0]
 8024a2e:	f003 0301 	and.w	r3, r3, #1
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	f000 8083 	beq.w	8024b3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8024a38:	4b94      	ldr	r3, [pc, #592]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a3a:	689b      	ldr	r3, [r3, #8]
 8024a3c:	f003 030c 	and.w	r3, r3, #12
 8024a40:	2b04      	cmp	r3, #4
 8024a42:	d019      	beq.n	8024a78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8024a44:	4b91      	ldr	r3, [pc, #580]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a46:	689b      	ldr	r3, [r3, #8]
 8024a48:	f003 030c 	and.w	r3, r3, #12
        || \
 8024a4c:	2b08      	cmp	r3, #8
 8024a4e:	d106      	bne.n	8024a5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8024a50:	4b8e      	ldr	r3, [pc, #568]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a52:	685b      	ldr	r3, [r3, #4]
 8024a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8024a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8024a5c:	d00c      	beq.n	8024a78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8024a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a60:	689b      	ldr	r3, [r3, #8]
 8024a62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8024a66:	2b0c      	cmp	r3, #12
 8024a68:	d112      	bne.n	8024a90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8024a6a:	4b88      	ldr	r3, [pc, #544]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a6c:	685b      	ldr	r3, [r3, #4]
 8024a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8024a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8024a76:	d10b      	bne.n	8024a90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8024a78:	4b84      	ldr	r3, [pc, #528]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a7a:	681b      	ldr	r3, [r3, #0]
 8024a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	d05b      	beq.n	8024b3c <HAL_RCC_OscConfig+0x124>
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	685b      	ldr	r3, [r3, #4]
 8024a88:	2b00      	cmp	r3, #0
 8024a8a:	d157      	bne.n	8024b3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8024a8c:	2301      	movs	r3, #1
 8024a8e:	e25a      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8024a90:	687b      	ldr	r3, [r7, #4]
 8024a92:	685b      	ldr	r3, [r3, #4]
 8024a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024a98:	d106      	bne.n	8024aa8 <HAL_RCC_OscConfig+0x90>
 8024a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024a9c:	681b      	ldr	r3, [r3, #0]
 8024a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024aa4:	6013      	str	r3, [r2, #0]
 8024aa6:	e01d      	b.n	8024ae4 <HAL_RCC_OscConfig+0xcc>
 8024aa8:	687b      	ldr	r3, [r7, #4]
 8024aaa:	685b      	ldr	r3, [r3, #4]
 8024aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8024ab0:	d10c      	bne.n	8024acc <HAL_RCC_OscConfig+0xb4>
 8024ab2:	4b76      	ldr	r3, [pc, #472]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ab4:	681b      	ldr	r3, [r3, #0]
 8024ab6:	4a75      	ldr	r2, [pc, #468]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8024abc:	6013      	str	r3, [r2, #0]
 8024abe:	4b73      	ldr	r3, [pc, #460]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ac0:	681b      	ldr	r3, [r3, #0]
 8024ac2:	4a72      	ldr	r2, [pc, #456]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024ac8:	6013      	str	r3, [r2, #0]
 8024aca:	e00b      	b.n	8024ae4 <HAL_RCC_OscConfig+0xcc>
 8024acc:	4b6f      	ldr	r3, [pc, #444]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ace:	681b      	ldr	r3, [r3, #0]
 8024ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8024ad6:	6013      	str	r3, [r2, #0]
 8024ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ada:	681b      	ldr	r3, [r3, #0]
 8024adc:	4a6b      	ldr	r2, [pc, #428]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8024ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	685b      	ldr	r3, [r3, #4]
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	d013      	beq.n	8024b14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024aec:	f7fd fbbc 	bl	8022268 <HAL_GetTick>
 8024af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024af2:	e008      	b.n	8024b06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8024af4:	f7fd fbb8 	bl	8022268 <HAL_GetTick>
 8024af8:	4602      	mov	r2, r0
 8024afa:	693b      	ldr	r3, [r7, #16]
 8024afc:	1ad3      	subs	r3, r2, r3
 8024afe:	2b64      	cmp	r3, #100	@ 0x64
 8024b00:	d901      	bls.n	8024b06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8024b02:	2303      	movs	r3, #3
 8024b04:	e21f      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024b06:	4b61      	ldr	r3, [pc, #388]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	d0f0      	beq.n	8024af4 <HAL_RCC_OscConfig+0xdc>
 8024b12:	e014      	b.n	8024b3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024b14:	f7fd fba8 	bl	8022268 <HAL_GetTick>
 8024b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8024b1a:	e008      	b.n	8024b2e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8024b1c:	f7fd fba4 	bl	8022268 <HAL_GetTick>
 8024b20:	4602      	mov	r2, r0
 8024b22:	693b      	ldr	r3, [r7, #16]
 8024b24:	1ad3      	subs	r3, r2, r3
 8024b26:	2b64      	cmp	r3, #100	@ 0x64
 8024b28:	d901      	bls.n	8024b2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8024b2a:	2303      	movs	r3, #3
 8024b2c:	e20b      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8024b2e:	4b57      	ldr	r3, [pc, #348]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b30:	681b      	ldr	r3, [r3, #0]
 8024b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024b36:	2b00      	cmp	r3, #0
 8024b38:	d1f0      	bne.n	8024b1c <HAL_RCC_OscConfig+0x104>
 8024b3a:	e000      	b.n	8024b3e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8024b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8024b3e:	687b      	ldr	r3, [r7, #4]
 8024b40:	681b      	ldr	r3, [r3, #0]
 8024b42:	f003 0302 	and.w	r3, r3, #2
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d06f      	beq.n	8024c2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8024b4a:	4b50      	ldr	r3, [pc, #320]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b4c:	689b      	ldr	r3, [r3, #8]
 8024b4e:	f003 030c 	and.w	r3, r3, #12
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	d017      	beq.n	8024b86 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8024b56:	4b4d      	ldr	r3, [pc, #308]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b58:	689b      	ldr	r3, [r3, #8]
 8024b5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8024b5e:	2b08      	cmp	r3, #8
 8024b60:	d105      	bne.n	8024b6e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8024b62:	4b4a      	ldr	r3, [pc, #296]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b64:	685b      	ldr	r3, [r3, #4]
 8024b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	d00b      	beq.n	8024b86 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8024b6e:	4b47      	ldr	r3, [pc, #284]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b70:	689b      	ldr	r3, [r3, #8]
 8024b72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8024b76:	2b0c      	cmp	r3, #12
 8024b78:	d11c      	bne.n	8024bb4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8024b7a:	4b44      	ldr	r3, [pc, #272]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b7c:	685b      	ldr	r3, [r3, #4]
 8024b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	d116      	bne.n	8024bb4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8024b86:	4b41      	ldr	r3, [pc, #260]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024b88:	681b      	ldr	r3, [r3, #0]
 8024b8a:	f003 0302 	and.w	r3, r3, #2
 8024b8e:	2b00      	cmp	r3, #0
 8024b90:	d005      	beq.n	8024b9e <HAL_RCC_OscConfig+0x186>
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	68db      	ldr	r3, [r3, #12]
 8024b96:	2b01      	cmp	r3, #1
 8024b98:	d001      	beq.n	8024b9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8024b9a:	2301      	movs	r3, #1
 8024b9c:	e1d3      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	691b      	ldr	r3, [r3, #16]
 8024baa:	00db      	lsls	r3, r3, #3
 8024bac:	4937      	ldr	r1, [pc, #220]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024bae:	4313      	orrs	r3, r2
 8024bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8024bb2:	e03a      	b.n	8024c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	68db      	ldr	r3, [r3, #12]
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d020      	beq.n	8024bfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8024bbc:	4b34      	ldr	r3, [pc, #208]	@ (8024c90 <HAL_RCC_OscConfig+0x278>)
 8024bbe:	2201      	movs	r2, #1
 8024bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024bc2:	f7fd fb51 	bl	8022268 <HAL_GetTick>
 8024bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024bc8:	e008      	b.n	8024bdc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8024bca:	f7fd fb4d 	bl	8022268 <HAL_GetTick>
 8024bce:	4602      	mov	r2, r0
 8024bd0:	693b      	ldr	r3, [r7, #16]
 8024bd2:	1ad3      	subs	r3, r2, r3
 8024bd4:	2b02      	cmp	r3, #2
 8024bd6:	d901      	bls.n	8024bdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8024bd8:	2303      	movs	r3, #3
 8024bda:	e1b4      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024bde:	681b      	ldr	r3, [r3, #0]
 8024be0:	f003 0302 	and.w	r3, r3, #2
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	d0f0      	beq.n	8024bca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024be8:	4b28      	ldr	r3, [pc, #160]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	691b      	ldr	r3, [r3, #16]
 8024bf4:	00db      	lsls	r3, r3, #3
 8024bf6:	4925      	ldr	r1, [pc, #148]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024bf8:	4313      	orrs	r3, r2
 8024bfa:	600b      	str	r3, [r1, #0]
 8024bfc:	e015      	b.n	8024c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8024bfe:	4b24      	ldr	r3, [pc, #144]	@ (8024c90 <HAL_RCC_OscConfig+0x278>)
 8024c00:	2200      	movs	r2, #0
 8024c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024c04:	f7fd fb30 	bl	8022268 <HAL_GetTick>
 8024c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8024c0a:	e008      	b.n	8024c1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8024c0c:	f7fd fb2c 	bl	8022268 <HAL_GetTick>
 8024c10:	4602      	mov	r2, r0
 8024c12:	693b      	ldr	r3, [r7, #16]
 8024c14:	1ad3      	subs	r3, r2, r3
 8024c16:	2b02      	cmp	r3, #2
 8024c18:	d901      	bls.n	8024c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8024c1a:	2303      	movs	r3, #3
 8024c1c:	e193      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8024c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024c20:	681b      	ldr	r3, [r3, #0]
 8024c22:	f003 0302 	and.w	r3, r3, #2
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	d1f0      	bne.n	8024c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	681b      	ldr	r3, [r3, #0]
 8024c2e:	f003 0308 	and.w	r3, r3, #8
 8024c32:	2b00      	cmp	r3, #0
 8024c34:	d036      	beq.n	8024ca4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8024c36:	687b      	ldr	r3, [r7, #4]
 8024c38:	695b      	ldr	r3, [r3, #20]
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	d016      	beq.n	8024c6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8024c3e:	4b15      	ldr	r3, [pc, #84]	@ (8024c94 <HAL_RCC_OscConfig+0x27c>)
 8024c40:	2201      	movs	r2, #1
 8024c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024c44:	f7fd fb10 	bl	8022268 <HAL_GetTick>
 8024c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8024c4a:	e008      	b.n	8024c5e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8024c4c:	f7fd fb0c 	bl	8022268 <HAL_GetTick>
 8024c50:	4602      	mov	r2, r0
 8024c52:	693b      	ldr	r3, [r7, #16]
 8024c54:	1ad3      	subs	r3, r2, r3
 8024c56:	2b02      	cmp	r3, #2
 8024c58:	d901      	bls.n	8024c5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8024c5a:	2303      	movs	r3, #3
 8024c5c:	e173      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8024c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8024c8c <HAL_RCC_OscConfig+0x274>)
 8024c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024c62:	f003 0302 	and.w	r3, r3, #2
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	d0f0      	beq.n	8024c4c <HAL_RCC_OscConfig+0x234>
 8024c6a:	e01b      	b.n	8024ca4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8024c6c:	4b09      	ldr	r3, [pc, #36]	@ (8024c94 <HAL_RCC_OscConfig+0x27c>)
 8024c6e:	2200      	movs	r2, #0
 8024c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024c72:	f7fd faf9 	bl	8022268 <HAL_GetTick>
 8024c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8024c78:	e00e      	b.n	8024c98 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8024c7a:	f7fd faf5 	bl	8022268 <HAL_GetTick>
 8024c7e:	4602      	mov	r2, r0
 8024c80:	693b      	ldr	r3, [r7, #16]
 8024c82:	1ad3      	subs	r3, r2, r3
 8024c84:	2b02      	cmp	r3, #2
 8024c86:	d907      	bls.n	8024c98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8024c88:	2303      	movs	r3, #3
 8024c8a:	e15c      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
 8024c8c:	40023800 	.word	0x40023800
 8024c90:	42470000 	.word	0x42470000
 8024c94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8024c98:	4b8a      	ldr	r3, [pc, #552]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024c9c:	f003 0302 	and.w	r3, r3, #2
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d1ea      	bne.n	8024c7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	681b      	ldr	r3, [r3, #0]
 8024ca8:	f003 0304 	and.w	r3, r3, #4
 8024cac:	2b00      	cmp	r3, #0
 8024cae:	f000 8097 	beq.w	8024de0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8024cb2:	2300      	movs	r3, #0
 8024cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8024cb6:	4b83      	ldr	r3, [pc, #524]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	d10f      	bne.n	8024ce2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8024cc2:	2300      	movs	r3, #0
 8024cc4:	60bb      	str	r3, [r7, #8]
 8024cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024cca:	4a7e      	ldr	r2, [pc, #504]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8024cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8024cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024cda:	60bb      	str	r3, [r7, #8]
 8024cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024cde:	2301      	movs	r3, #1
 8024ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024ce2:	4b79      	ldr	r3, [pc, #484]	@ (8024ec8 <HAL_RCC_OscConfig+0x4b0>)
 8024ce4:	681b      	ldr	r3, [r3, #0]
 8024ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d118      	bne.n	8024d20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8024cee:	4b76      	ldr	r3, [pc, #472]	@ (8024ec8 <HAL_RCC_OscConfig+0x4b0>)
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	4a75      	ldr	r2, [pc, #468]	@ (8024ec8 <HAL_RCC_OscConfig+0x4b0>)
 8024cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8024cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8024cfa:	f7fd fab5 	bl	8022268 <HAL_GetTick>
 8024cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024d00:	e008      	b.n	8024d14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8024d02:	f7fd fab1 	bl	8022268 <HAL_GetTick>
 8024d06:	4602      	mov	r2, r0
 8024d08:	693b      	ldr	r3, [r7, #16]
 8024d0a:	1ad3      	subs	r3, r2, r3
 8024d0c:	2b02      	cmp	r3, #2
 8024d0e:	d901      	bls.n	8024d14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8024d10:	2303      	movs	r3, #3
 8024d12:	e118      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024d14:	4b6c      	ldr	r3, [pc, #432]	@ (8024ec8 <HAL_RCC_OscConfig+0x4b0>)
 8024d16:	681b      	ldr	r3, [r3, #0]
 8024d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	d0f0      	beq.n	8024d02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	689b      	ldr	r3, [r3, #8]
 8024d24:	2b01      	cmp	r3, #1
 8024d26:	d106      	bne.n	8024d36 <HAL_RCC_OscConfig+0x31e>
 8024d28:	4b66      	ldr	r3, [pc, #408]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024d2c:	4a65      	ldr	r2, [pc, #404]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d2e:	f043 0301 	orr.w	r3, r3, #1
 8024d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8024d34:	e01c      	b.n	8024d70 <HAL_RCC_OscConfig+0x358>
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	689b      	ldr	r3, [r3, #8]
 8024d3a:	2b05      	cmp	r3, #5
 8024d3c:	d10c      	bne.n	8024d58 <HAL_RCC_OscConfig+0x340>
 8024d3e:	4b61      	ldr	r3, [pc, #388]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024d42:	4a60      	ldr	r2, [pc, #384]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d44:	f043 0304 	orr.w	r3, r3, #4
 8024d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8024d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d50:	f043 0301 	orr.w	r3, r3, #1
 8024d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8024d56:	e00b      	b.n	8024d70 <HAL_RCC_OscConfig+0x358>
 8024d58:	4b5a      	ldr	r3, [pc, #360]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024d5c:	4a59      	ldr	r2, [pc, #356]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d5e:	f023 0301 	bic.w	r3, r3, #1
 8024d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8024d64:	4b57      	ldr	r3, [pc, #348]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024d68:	4a56      	ldr	r2, [pc, #344]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d6a:	f023 0304 	bic.w	r3, r3, #4
 8024d6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	689b      	ldr	r3, [r3, #8]
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	d015      	beq.n	8024da4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024d78:	f7fd fa76 	bl	8022268 <HAL_GetTick>
 8024d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024d7e:	e00a      	b.n	8024d96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024d80:	f7fd fa72 	bl	8022268 <HAL_GetTick>
 8024d84:	4602      	mov	r2, r0
 8024d86:	693b      	ldr	r3, [r7, #16]
 8024d88:	1ad3      	subs	r3, r2, r3
 8024d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8024d8e:	4293      	cmp	r3, r2
 8024d90:	d901      	bls.n	8024d96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8024d92:	2303      	movs	r3, #3
 8024d94:	e0d7      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024d96:	4b4b      	ldr	r3, [pc, #300]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024d9a:	f003 0302 	and.w	r3, r3, #2
 8024d9e:	2b00      	cmp	r3, #0
 8024da0:	d0ee      	beq.n	8024d80 <HAL_RCC_OscConfig+0x368>
 8024da2:	e014      	b.n	8024dce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024da4:	f7fd fa60 	bl	8022268 <HAL_GetTick>
 8024da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024daa:	e00a      	b.n	8024dc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024dac:	f7fd fa5c 	bl	8022268 <HAL_GetTick>
 8024db0:	4602      	mov	r2, r0
 8024db2:	693b      	ldr	r3, [r7, #16]
 8024db4:	1ad3      	subs	r3, r2, r3
 8024db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8024dba:	4293      	cmp	r3, r2
 8024dbc:	d901      	bls.n	8024dc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8024dbe:	2303      	movs	r3, #3
 8024dc0:	e0c1      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024dc2:	4b40      	ldr	r3, [pc, #256]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024dc6:	f003 0302 	and.w	r3, r3, #2
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	d1ee      	bne.n	8024dac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8024dce:	7dfb      	ldrb	r3, [r7, #23]
 8024dd0:	2b01      	cmp	r3, #1
 8024dd2:	d105      	bne.n	8024de0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8024dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024dd8:	4a3a      	ldr	r2, [pc, #232]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024dde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	699b      	ldr	r3, [r3, #24]
 8024de4:	2b00      	cmp	r3, #0
 8024de6:	f000 80ad 	beq.w	8024f44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8024dea:	4b36      	ldr	r3, [pc, #216]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024dec:	689b      	ldr	r3, [r3, #8]
 8024dee:	f003 030c 	and.w	r3, r3, #12
 8024df2:	2b08      	cmp	r3, #8
 8024df4:	d060      	beq.n	8024eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	699b      	ldr	r3, [r3, #24]
 8024dfa:	2b02      	cmp	r3, #2
 8024dfc:	d145      	bne.n	8024e8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024dfe:	4b33      	ldr	r3, [pc, #204]	@ (8024ecc <HAL_RCC_OscConfig+0x4b4>)
 8024e00:	2200      	movs	r2, #0
 8024e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024e04:	f7fd fa30 	bl	8022268 <HAL_GetTick>
 8024e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024e0a:	e008      	b.n	8024e1e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024e0c:	f7fd fa2c 	bl	8022268 <HAL_GetTick>
 8024e10:	4602      	mov	r2, r0
 8024e12:	693b      	ldr	r3, [r7, #16]
 8024e14:	1ad3      	subs	r3, r2, r3
 8024e16:	2b02      	cmp	r3, #2
 8024e18:	d901      	bls.n	8024e1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8024e1a:	2303      	movs	r3, #3
 8024e1c:	e093      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024e1e:	4b29      	ldr	r3, [pc, #164]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024e20:	681b      	ldr	r3, [r3, #0]
 8024e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8024e26:	2b00      	cmp	r3, #0
 8024e28:	d1f0      	bne.n	8024e0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	69da      	ldr	r2, [r3, #28]
 8024e2e:	687b      	ldr	r3, [r7, #4]
 8024e30:	6a1b      	ldr	r3, [r3, #32]
 8024e32:	431a      	orrs	r2, r3
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024e38:	019b      	lsls	r3, r3, #6
 8024e3a:	431a      	orrs	r2, r3
 8024e3c:	687b      	ldr	r3, [r7, #4]
 8024e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024e40:	085b      	lsrs	r3, r3, #1
 8024e42:	3b01      	subs	r3, #1
 8024e44:	041b      	lsls	r3, r3, #16
 8024e46:	431a      	orrs	r2, r3
 8024e48:	687b      	ldr	r3, [r7, #4]
 8024e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024e4c:	061b      	lsls	r3, r3, #24
 8024e4e:	431a      	orrs	r2, r3
 8024e50:	687b      	ldr	r3, [r7, #4]
 8024e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024e54:	071b      	lsls	r3, r3, #28
 8024e56:	491b      	ldr	r1, [pc, #108]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024e58:	4313      	orrs	r3, r2
 8024e5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8024e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8024ecc <HAL_RCC_OscConfig+0x4b4>)
 8024e5e:	2201      	movs	r2, #1
 8024e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024e62:	f7fd fa01 	bl	8022268 <HAL_GetTick>
 8024e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024e68:	e008      	b.n	8024e7c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024e6a:	f7fd f9fd 	bl	8022268 <HAL_GetTick>
 8024e6e:	4602      	mov	r2, r0
 8024e70:	693b      	ldr	r3, [r7, #16]
 8024e72:	1ad3      	subs	r3, r2, r3
 8024e74:	2b02      	cmp	r3, #2
 8024e76:	d901      	bls.n	8024e7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8024e78:	2303      	movs	r3, #3
 8024e7a:	e064      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024e7c:	4b11      	ldr	r3, [pc, #68]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024e7e:	681b      	ldr	r3, [r3, #0]
 8024e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	d0f0      	beq.n	8024e6a <HAL_RCC_OscConfig+0x452>
 8024e88:	e05c      	b.n	8024f44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024e8a:	4b10      	ldr	r3, [pc, #64]	@ (8024ecc <HAL_RCC_OscConfig+0x4b4>)
 8024e8c:	2200      	movs	r2, #0
 8024e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024e90:	f7fd f9ea 	bl	8022268 <HAL_GetTick>
 8024e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024e96:	e008      	b.n	8024eaa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024e98:	f7fd f9e6 	bl	8022268 <HAL_GetTick>
 8024e9c:	4602      	mov	r2, r0
 8024e9e:	693b      	ldr	r3, [r7, #16]
 8024ea0:	1ad3      	subs	r3, r2, r3
 8024ea2:	2b02      	cmp	r3, #2
 8024ea4:	d901      	bls.n	8024eaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8024ea6:	2303      	movs	r3, #3
 8024ea8:	e04d      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024eaa:	4b06      	ldr	r3, [pc, #24]	@ (8024ec4 <HAL_RCC_OscConfig+0x4ac>)
 8024eac:	681b      	ldr	r3, [r3, #0]
 8024eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8024eb2:	2b00      	cmp	r3, #0
 8024eb4:	d1f0      	bne.n	8024e98 <HAL_RCC_OscConfig+0x480>
 8024eb6:	e045      	b.n	8024f44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8024eb8:	687b      	ldr	r3, [r7, #4]
 8024eba:	699b      	ldr	r3, [r3, #24]
 8024ebc:	2b01      	cmp	r3, #1
 8024ebe:	d107      	bne.n	8024ed0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8024ec0:	2301      	movs	r3, #1
 8024ec2:	e040      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
 8024ec4:	40023800 	.word	0x40023800
 8024ec8:	40007000 	.word	0x40007000
 8024ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8024ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8024f50 <HAL_RCC_OscConfig+0x538>)
 8024ed2:	685b      	ldr	r3, [r3, #4]
 8024ed4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	699b      	ldr	r3, [r3, #24]
 8024eda:	2b01      	cmp	r3, #1
 8024edc:	d030      	beq.n	8024f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024ede:	68fb      	ldr	r3, [r7, #12]
 8024ee0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024ee8:	429a      	cmp	r2, r3
 8024eea:	d129      	bne.n	8024f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8024eec:	68fb      	ldr	r3, [r7, #12]
 8024eee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8024ef2:	687b      	ldr	r3, [r7, #4]
 8024ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024ef6:	429a      	cmp	r2, r3
 8024ef8:	d122      	bne.n	8024f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8024efa:	68fa      	ldr	r2, [r7, #12]
 8024efc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8024f00:	4013      	ands	r3, r2
 8024f02:	687a      	ldr	r2, [r7, #4]
 8024f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8024f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8024f08:	4293      	cmp	r3, r2
 8024f0a:	d119      	bne.n	8024f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8024f0c:	68fb      	ldr	r3, [r7, #12]
 8024f0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8024f12:	687b      	ldr	r3, [r7, #4]
 8024f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024f16:	085b      	lsrs	r3, r3, #1
 8024f18:	3b01      	subs	r3, #1
 8024f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8024f1c:	429a      	cmp	r2, r3
 8024f1e:	d10f      	bne.n	8024f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8024f2c:	429a      	cmp	r2, r3
 8024f2e:	d107      	bne.n	8024f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8024f30:	68fb      	ldr	r3, [r7, #12]
 8024f32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024f3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8024f3c:	429a      	cmp	r2, r3
 8024f3e:	d001      	beq.n	8024f44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8024f40:	2301      	movs	r3, #1
 8024f42:	e000      	b.n	8024f46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8024f44:	2300      	movs	r3, #0
}
 8024f46:	4618      	mov	r0, r3
 8024f48:	3718      	adds	r7, #24
 8024f4a:	46bd      	mov	sp, r7
 8024f4c:	bd80      	pop	{r7, pc}
 8024f4e:	bf00      	nop
 8024f50:	40023800 	.word	0x40023800

08024f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8024f54:	b580      	push	{r7, lr}
 8024f56:	b082      	sub	sp, #8
 8024f58:	af00      	add	r7, sp, #0
 8024f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	d101      	bne.n	8024f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8024f62:	2301      	movs	r3, #1
 8024f64:	e041      	b.n	8024fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8024f6c:	b2db      	uxtb	r3, r3
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	d106      	bne.n	8024f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024f72:	687b      	ldr	r3, [r7, #4]
 8024f74:	2200      	movs	r2, #0
 8024f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8024f7a:	6878      	ldr	r0, [r7, #4]
 8024f7c:	f000 f839 	bl	8024ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024f80:	687b      	ldr	r3, [r7, #4]
 8024f82:	2202      	movs	r2, #2
 8024f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024f88:	687b      	ldr	r3, [r7, #4]
 8024f8a:	681a      	ldr	r2, [r3, #0]
 8024f8c:	687b      	ldr	r3, [r7, #4]
 8024f8e:	3304      	adds	r3, #4
 8024f90:	4619      	mov	r1, r3
 8024f92:	4610      	mov	r0, r2
 8024f94:	f000 f9c0 	bl	8025318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8024f98:	687b      	ldr	r3, [r7, #4]
 8024f9a:	2201      	movs	r2, #1
 8024f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	2201      	movs	r2, #1
 8024fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	2201      	movs	r2, #1
 8024fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8024fb0:	687b      	ldr	r3, [r7, #4]
 8024fb2:	2201      	movs	r2, #1
 8024fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	2201      	movs	r2, #1
 8024fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	2201      	movs	r2, #1
 8024fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8024fc8:	687b      	ldr	r3, [r7, #4]
 8024fca:	2201      	movs	r2, #1
 8024fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	2201      	movs	r2, #1
 8024fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	2201      	movs	r2, #1
 8024fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	2201      	movs	r2, #1
 8024fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8024fe8:	2300      	movs	r3, #0
}
 8024fea:	4618      	mov	r0, r3
 8024fec:	3708      	adds	r7, #8
 8024fee:	46bd      	mov	sp, r7
 8024ff0:	bd80      	pop	{r7, pc}

08024ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8024ff2:	b480      	push	{r7}
 8024ff4:	b083      	sub	sp, #12
 8024ff6:	af00      	add	r7, sp, #0
 8024ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8024ffa:	bf00      	nop
 8024ffc:	370c      	adds	r7, #12
 8024ffe:	46bd      	mov	sp, r7
 8025000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025004:	4770      	bx	lr
	...

08025008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8025008:	b480      	push	{r7}
 802500a:	b085      	sub	sp, #20
 802500c:	af00      	add	r7, sp, #0
 802500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8025016:	b2db      	uxtb	r3, r3
 8025018:	2b01      	cmp	r3, #1
 802501a:	d001      	beq.n	8025020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802501c:	2301      	movs	r3, #1
 802501e:	e04e      	b.n	80250be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025020:	687b      	ldr	r3, [r7, #4]
 8025022:	2202      	movs	r2, #2
 8025024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	681b      	ldr	r3, [r3, #0]
 802502c:	68da      	ldr	r2, [r3, #12]
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	681b      	ldr	r3, [r3, #0]
 8025032:	f042 0201 	orr.w	r2, r2, #1
 8025036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	4a23      	ldr	r2, [pc, #140]	@ (80250cc <HAL_TIM_Base_Start_IT+0xc4>)
 802503e:	4293      	cmp	r3, r2
 8025040:	d022      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 8025042:	687b      	ldr	r3, [r7, #4]
 8025044:	681b      	ldr	r3, [r3, #0]
 8025046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802504a:	d01d      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 802504c:	687b      	ldr	r3, [r7, #4]
 802504e:	681b      	ldr	r3, [r3, #0]
 8025050:	4a1f      	ldr	r2, [pc, #124]	@ (80250d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8025052:	4293      	cmp	r3, r2
 8025054:	d018      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 8025056:	687b      	ldr	r3, [r7, #4]
 8025058:	681b      	ldr	r3, [r3, #0]
 802505a:	4a1e      	ldr	r2, [pc, #120]	@ (80250d4 <HAL_TIM_Base_Start_IT+0xcc>)
 802505c:	4293      	cmp	r3, r2
 802505e:	d013      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	681b      	ldr	r3, [r3, #0]
 8025064:	4a1c      	ldr	r2, [pc, #112]	@ (80250d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8025066:	4293      	cmp	r3, r2
 8025068:	d00e      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	4a1b      	ldr	r2, [pc, #108]	@ (80250dc <HAL_TIM_Base_Start_IT+0xd4>)
 8025070:	4293      	cmp	r3, r2
 8025072:	d009      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	4a19      	ldr	r2, [pc, #100]	@ (80250e0 <HAL_TIM_Base_Start_IT+0xd8>)
 802507a:	4293      	cmp	r3, r2
 802507c:	d004      	beq.n	8025088 <HAL_TIM_Base_Start_IT+0x80>
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	681b      	ldr	r3, [r3, #0]
 8025082:	4a18      	ldr	r2, [pc, #96]	@ (80250e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8025084:	4293      	cmp	r3, r2
 8025086:	d111      	bne.n	80250ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025088:	687b      	ldr	r3, [r7, #4]
 802508a:	681b      	ldr	r3, [r3, #0]
 802508c:	689b      	ldr	r3, [r3, #8]
 802508e:	f003 0307 	and.w	r3, r3, #7
 8025092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	2b06      	cmp	r3, #6
 8025098:	d010      	beq.n	80250bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 802509a:	687b      	ldr	r3, [r7, #4]
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	681a      	ldr	r2, [r3, #0]
 80250a0:	687b      	ldr	r3, [r7, #4]
 80250a2:	681b      	ldr	r3, [r3, #0]
 80250a4:	f042 0201 	orr.w	r2, r2, #1
 80250a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80250aa:	e007      	b.n	80250bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	681a      	ldr	r2, [r3, #0]
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	f042 0201 	orr.w	r2, r2, #1
 80250ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80250bc:	2300      	movs	r3, #0
}
 80250be:	4618      	mov	r0, r3
 80250c0:	3714      	adds	r7, #20
 80250c2:	46bd      	mov	sp, r7
 80250c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250c8:	4770      	bx	lr
 80250ca:	bf00      	nop
 80250cc:	40010000 	.word	0x40010000
 80250d0:	40000400 	.word	0x40000400
 80250d4:	40000800 	.word	0x40000800
 80250d8:	40000c00 	.word	0x40000c00
 80250dc:	40010400 	.word	0x40010400
 80250e0:	40014000 	.word	0x40014000
 80250e4:	40001800 	.word	0x40001800

080250e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80250e8:	b580      	push	{r7, lr}
 80250ea:	b084      	sub	sp, #16
 80250ec:	af00      	add	r7, sp, #0
 80250ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80250f0:	687b      	ldr	r3, [r7, #4]
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	68db      	ldr	r3, [r3, #12]
 80250f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80250f8:	687b      	ldr	r3, [r7, #4]
 80250fa:	681b      	ldr	r3, [r3, #0]
 80250fc:	691b      	ldr	r3, [r3, #16]
 80250fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8025100:	68bb      	ldr	r3, [r7, #8]
 8025102:	f003 0302 	and.w	r3, r3, #2
 8025106:	2b00      	cmp	r3, #0
 8025108:	d020      	beq.n	802514c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 802510a:	68fb      	ldr	r3, [r7, #12]
 802510c:	f003 0302 	and.w	r3, r3, #2
 8025110:	2b00      	cmp	r3, #0
 8025112:	d01b      	beq.n	802514c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	681b      	ldr	r3, [r3, #0]
 8025118:	f06f 0202 	mvn.w	r2, #2
 802511c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	2201      	movs	r2, #1
 8025122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	699b      	ldr	r3, [r3, #24]
 802512a:	f003 0303 	and.w	r3, r3, #3
 802512e:	2b00      	cmp	r3, #0
 8025130:	d003      	beq.n	802513a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8025132:	6878      	ldr	r0, [r7, #4]
 8025134:	f000 f8d2 	bl	80252dc <HAL_TIM_IC_CaptureCallback>
 8025138:	e005      	b.n	8025146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802513a:	6878      	ldr	r0, [r7, #4]
 802513c:	f000 f8c4 	bl	80252c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025140:	6878      	ldr	r0, [r7, #4]
 8025142:	f000 f8d5 	bl	80252f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	2200      	movs	r2, #0
 802514a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 802514c:	68bb      	ldr	r3, [r7, #8]
 802514e:	f003 0304 	and.w	r3, r3, #4
 8025152:	2b00      	cmp	r3, #0
 8025154:	d020      	beq.n	8025198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	f003 0304 	and.w	r3, r3, #4
 802515c:	2b00      	cmp	r3, #0
 802515e:	d01b      	beq.n	8025198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	f06f 0204 	mvn.w	r2, #4
 8025168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	2202      	movs	r2, #2
 802516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8025170:	687b      	ldr	r3, [r7, #4]
 8025172:	681b      	ldr	r3, [r3, #0]
 8025174:	699b      	ldr	r3, [r3, #24]
 8025176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802517a:	2b00      	cmp	r3, #0
 802517c:	d003      	beq.n	8025186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802517e:	6878      	ldr	r0, [r7, #4]
 8025180:	f000 f8ac 	bl	80252dc <HAL_TIM_IC_CaptureCallback>
 8025184:	e005      	b.n	8025192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025186:	6878      	ldr	r0, [r7, #4]
 8025188:	f000 f89e 	bl	80252c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802518c:	6878      	ldr	r0, [r7, #4]
 802518e:	f000 f8af 	bl	80252f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025192:	687b      	ldr	r3, [r7, #4]
 8025194:	2200      	movs	r2, #0
 8025196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8025198:	68bb      	ldr	r3, [r7, #8]
 802519a:	f003 0308 	and.w	r3, r3, #8
 802519e:	2b00      	cmp	r3, #0
 80251a0:	d020      	beq.n	80251e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80251a2:	68fb      	ldr	r3, [r7, #12]
 80251a4:	f003 0308 	and.w	r3, r3, #8
 80251a8:	2b00      	cmp	r3, #0
 80251aa:	d01b      	beq.n	80251e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80251ac:	687b      	ldr	r3, [r7, #4]
 80251ae:	681b      	ldr	r3, [r3, #0]
 80251b0:	f06f 0208 	mvn.w	r2, #8
 80251b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	2204      	movs	r2, #4
 80251ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	681b      	ldr	r3, [r3, #0]
 80251c0:	69db      	ldr	r3, [r3, #28]
 80251c2:	f003 0303 	and.w	r3, r3, #3
 80251c6:	2b00      	cmp	r3, #0
 80251c8:	d003      	beq.n	80251d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80251ca:	6878      	ldr	r0, [r7, #4]
 80251cc:	f000 f886 	bl	80252dc <HAL_TIM_IC_CaptureCallback>
 80251d0:	e005      	b.n	80251de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80251d2:	6878      	ldr	r0, [r7, #4]
 80251d4:	f000 f878 	bl	80252c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80251d8:	6878      	ldr	r0, [r7, #4]
 80251da:	f000 f889 	bl	80252f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80251de:	687b      	ldr	r3, [r7, #4]
 80251e0:	2200      	movs	r2, #0
 80251e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80251e4:	68bb      	ldr	r3, [r7, #8]
 80251e6:	f003 0310 	and.w	r3, r3, #16
 80251ea:	2b00      	cmp	r3, #0
 80251ec:	d020      	beq.n	8025230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80251ee:	68fb      	ldr	r3, [r7, #12]
 80251f0:	f003 0310 	and.w	r3, r3, #16
 80251f4:	2b00      	cmp	r3, #0
 80251f6:	d01b      	beq.n	8025230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	681b      	ldr	r3, [r3, #0]
 80251fc:	f06f 0210 	mvn.w	r2, #16
 8025200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8025202:	687b      	ldr	r3, [r7, #4]
 8025204:	2208      	movs	r2, #8
 8025206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8025208:	687b      	ldr	r3, [r7, #4]
 802520a:	681b      	ldr	r3, [r3, #0]
 802520c:	69db      	ldr	r3, [r3, #28]
 802520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8025212:	2b00      	cmp	r3, #0
 8025214:	d003      	beq.n	802521e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025216:	6878      	ldr	r0, [r7, #4]
 8025218:	f000 f860 	bl	80252dc <HAL_TIM_IC_CaptureCallback>
 802521c:	e005      	b.n	802522a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802521e:	6878      	ldr	r0, [r7, #4]
 8025220:	f000 f852 	bl	80252c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025224:	6878      	ldr	r0, [r7, #4]
 8025226:	f000 f863 	bl	80252f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802522a:	687b      	ldr	r3, [r7, #4]
 802522c:	2200      	movs	r2, #0
 802522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8025230:	68bb      	ldr	r3, [r7, #8]
 8025232:	f003 0301 	and.w	r3, r3, #1
 8025236:	2b00      	cmp	r3, #0
 8025238:	d00c      	beq.n	8025254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 802523a:	68fb      	ldr	r3, [r7, #12]
 802523c:	f003 0301 	and.w	r3, r3, #1
 8025240:	2b00      	cmp	r3, #0
 8025242:	d007      	beq.n	8025254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	681b      	ldr	r3, [r3, #0]
 8025248:	f06f 0201 	mvn.w	r2, #1
 802524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802524e:	6878      	ldr	r0, [r7, #4]
 8025250:	f7fc fcc2 	bl	8021bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8025254:	68bb      	ldr	r3, [r7, #8]
 8025256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802525a:	2b00      	cmp	r3, #0
 802525c:	d00c      	beq.n	8025278 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 802525e:	68fb      	ldr	r3, [r7, #12]
 8025260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025264:	2b00      	cmp	r3, #0
 8025266:	d007      	beq.n	8025278 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	681b      	ldr	r3, [r3, #0]
 802526c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8025270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8025272:	6878      	ldr	r0, [r7, #4]
 8025274:	f000 f900 	bl	8025478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8025278:	68bb      	ldr	r3, [r7, #8]
 802527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802527e:	2b00      	cmp	r3, #0
 8025280:	d00c      	beq.n	802529c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8025282:	68fb      	ldr	r3, [r7, #12]
 8025284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025288:	2b00      	cmp	r3, #0
 802528a:	d007      	beq.n	802529c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8025294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8025296:	6878      	ldr	r0, [r7, #4]
 8025298:	f000 f834 	bl	8025304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 802529c:	68bb      	ldr	r3, [r7, #8]
 802529e:	f003 0320 	and.w	r3, r3, #32
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	d00c      	beq.n	80252c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80252a6:	68fb      	ldr	r3, [r7, #12]
 80252a8:	f003 0320 	and.w	r3, r3, #32
 80252ac:	2b00      	cmp	r3, #0
 80252ae:	d007      	beq.n	80252c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80252b0:	687b      	ldr	r3, [r7, #4]
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	f06f 0220 	mvn.w	r2, #32
 80252b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80252ba:	6878      	ldr	r0, [r7, #4]
 80252bc:	f000 f8d2 	bl	8025464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80252c0:	bf00      	nop
 80252c2:	3710      	adds	r7, #16
 80252c4:	46bd      	mov	sp, r7
 80252c6:	bd80      	pop	{r7, pc}

080252c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80252c8:	b480      	push	{r7}
 80252ca:	b083      	sub	sp, #12
 80252cc:	af00      	add	r7, sp, #0
 80252ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80252d0:	bf00      	nop
 80252d2:	370c      	adds	r7, #12
 80252d4:	46bd      	mov	sp, r7
 80252d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252da:	4770      	bx	lr

080252dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80252dc:	b480      	push	{r7}
 80252de:	b083      	sub	sp, #12
 80252e0:	af00      	add	r7, sp, #0
 80252e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80252e4:	bf00      	nop
 80252e6:	370c      	adds	r7, #12
 80252e8:	46bd      	mov	sp, r7
 80252ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ee:	4770      	bx	lr

080252f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80252f0:	b480      	push	{r7}
 80252f2:	b083      	sub	sp, #12
 80252f4:	af00      	add	r7, sp, #0
 80252f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80252f8:	bf00      	nop
 80252fa:	370c      	adds	r7, #12
 80252fc:	46bd      	mov	sp, r7
 80252fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025302:	4770      	bx	lr

08025304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8025304:	b480      	push	{r7}
 8025306:	b083      	sub	sp, #12
 8025308:	af00      	add	r7, sp, #0
 802530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802530c:	bf00      	nop
 802530e:	370c      	adds	r7, #12
 8025310:	46bd      	mov	sp, r7
 8025312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025316:	4770      	bx	lr

08025318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8025318:	b480      	push	{r7}
 802531a:	b085      	sub	sp, #20
 802531c:	af00      	add	r7, sp, #0
 802531e:	6078      	str	r0, [r7, #4]
 8025320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	681b      	ldr	r3, [r3, #0]
 8025326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	4a43      	ldr	r2, [pc, #268]	@ (8025438 <TIM_Base_SetConfig+0x120>)
 802532c:	4293      	cmp	r3, r2
 802532e:	d013      	beq.n	8025358 <TIM_Base_SetConfig+0x40>
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025336:	d00f      	beq.n	8025358 <TIM_Base_SetConfig+0x40>
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	4a40      	ldr	r2, [pc, #256]	@ (802543c <TIM_Base_SetConfig+0x124>)
 802533c:	4293      	cmp	r3, r2
 802533e:	d00b      	beq.n	8025358 <TIM_Base_SetConfig+0x40>
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	4a3f      	ldr	r2, [pc, #252]	@ (8025440 <TIM_Base_SetConfig+0x128>)
 8025344:	4293      	cmp	r3, r2
 8025346:	d007      	beq.n	8025358 <TIM_Base_SetConfig+0x40>
 8025348:	687b      	ldr	r3, [r7, #4]
 802534a:	4a3e      	ldr	r2, [pc, #248]	@ (8025444 <TIM_Base_SetConfig+0x12c>)
 802534c:	4293      	cmp	r3, r2
 802534e:	d003      	beq.n	8025358 <TIM_Base_SetConfig+0x40>
 8025350:	687b      	ldr	r3, [r7, #4]
 8025352:	4a3d      	ldr	r2, [pc, #244]	@ (8025448 <TIM_Base_SetConfig+0x130>)
 8025354:	4293      	cmp	r3, r2
 8025356:	d108      	bne.n	802536a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8025358:	68fb      	ldr	r3, [r7, #12]
 802535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8025360:	683b      	ldr	r3, [r7, #0]
 8025362:	685b      	ldr	r3, [r3, #4]
 8025364:	68fa      	ldr	r2, [r7, #12]
 8025366:	4313      	orrs	r3, r2
 8025368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802536a:	687b      	ldr	r3, [r7, #4]
 802536c:	4a32      	ldr	r2, [pc, #200]	@ (8025438 <TIM_Base_SetConfig+0x120>)
 802536e:	4293      	cmp	r3, r2
 8025370:	d02b      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025378:	d027      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	4a2f      	ldr	r2, [pc, #188]	@ (802543c <TIM_Base_SetConfig+0x124>)
 802537e:	4293      	cmp	r3, r2
 8025380:	d023      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 8025382:	687b      	ldr	r3, [r7, #4]
 8025384:	4a2e      	ldr	r2, [pc, #184]	@ (8025440 <TIM_Base_SetConfig+0x128>)
 8025386:	4293      	cmp	r3, r2
 8025388:	d01f      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 802538a:	687b      	ldr	r3, [r7, #4]
 802538c:	4a2d      	ldr	r2, [pc, #180]	@ (8025444 <TIM_Base_SetConfig+0x12c>)
 802538e:	4293      	cmp	r3, r2
 8025390:	d01b      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 8025392:	687b      	ldr	r3, [r7, #4]
 8025394:	4a2c      	ldr	r2, [pc, #176]	@ (8025448 <TIM_Base_SetConfig+0x130>)
 8025396:	4293      	cmp	r3, r2
 8025398:	d017      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	4a2b      	ldr	r2, [pc, #172]	@ (802544c <TIM_Base_SetConfig+0x134>)
 802539e:	4293      	cmp	r3, r2
 80253a0:	d013      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	4a2a      	ldr	r2, [pc, #168]	@ (8025450 <TIM_Base_SetConfig+0x138>)
 80253a6:	4293      	cmp	r3, r2
 80253a8:	d00f      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	4a29      	ldr	r2, [pc, #164]	@ (8025454 <TIM_Base_SetConfig+0x13c>)
 80253ae:	4293      	cmp	r3, r2
 80253b0:	d00b      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 80253b2:	687b      	ldr	r3, [r7, #4]
 80253b4:	4a28      	ldr	r2, [pc, #160]	@ (8025458 <TIM_Base_SetConfig+0x140>)
 80253b6:	4293      	cmp	r3, r2
 80253b8:	d007      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	4a27      	ldr	r2, [pc, #156]	@ (802545c <TIM_Base_SetConfig+0x144>)
 80253be:	4293      	cmp	r3, r2
 80253c0:	d003      	beq.n	80253ca <TIM_Base_SetConfig+0xb2>
 80253c2:	687b      	ldr	r3, [r7, #4]
 80253c4:	4a26      	ldr	r2, [pc, #152]	@ (8025460 <TIM_Base_SetConfig+0x148>)
 80253c6:	4293      	cmp	r3, r2
 80253c8:	d108      	bne.n	80253dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80253ca:	68fb      	ldr	r3, [r7, #12]
 80253cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80253d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80253d2:	683b      	ldr	r3, [r7, #0]
 80253d4:	68db      	ldr	r3, [r3, #12]
 80253d6:	68fa      	ldr	r2, [r7, #12]
 80253d8:	4313      	orrs	r3, r2
 80253da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80253dc:	68fb      	ldr	r3, [r7, #12]
 80253de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80253e2:	683b      	ldr	r3, [r7, #0]
 80253e4:	695b      	ldr	r3, [r3, #20]
 80253e6:	4313      	orrs	r3, r2
 80253e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80253ea:	683b      	ldr	r3, [r7, #0]
 80253ec:	689a      	ldr	r2, [r3, #8]
 80253ee:	687b      	ldr	r3, [r7, #4]
 80253f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80253f2:	683b      	ldr	r3, [r7, #0]
 80253f4:	681a      	ldr	r2, [r3, #0]
 80253f6:	687b      	ldr	r3, [r7, #4]
 80253f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	4a0e      	ldr	r2, [pc, #56]	@ (8025438 <TIM_Base_SetConfig+0x120>)
 80253fe:	4293      	cmp	r3, r2
 8025400:	d003      	beq.n	802540a <TIM_Base_SetConfig+0xf2>
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	4a10      	ldr	r2, [pc, #64]	@ (8025448 <TIM_Base_SetConfig+0x130>)
 8025406:	4293      	cmp	r3, r2
 8025408:	d103      	bne.n	8025412 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802540a:	683b      	ldr	r3, [r7, #0]
 802540c:	691a      	ldr	r2, [r3, #16]
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	f043 0204 	orr.w	r2, r3, #4
 802541a:	687b      	ldr	r3, [r7, #4]
 802541c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802541e:	687b      	ldr	r3, [r7, #4]
 8025420:	2201      	movs	r2, #1
 8025422:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8025424:	687b      	ldr	r3, [r7, #4]
 8025426:	68fa      	ldr	r2, [r7, #12]
 8025428:	601a      	str	r2, [r3, #0]
}
 802542a:	bf00      	nop
 802542c:	3714      	adds	r7, #20
 802542e:	46bd      	mov	sp, r7
 8025430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025434:	4770      	bx	lr
 8025436:	bf00      	nop
 8025438:	40010000 	.word	0x40010000
 802543c:	40000400 	.word	0x40000400
 8025440:	40000800 	.word	0x40000800
 8025444:	40000c00 	.word	0x40000c00
 8025448:	40010400 	.word	0x40010400
 802544c:	40014000 	.word	0x40014000
 8025450:	40014400 	.word	0x40014400
 8025454:	40014800 	.word	0x40014800
 8025458:	40001800 	.word	0x40001800
 802545c:	40001c00 	.word	0x40001c00
 8025460:	40002000 	.word	0x40002000

08025464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8025464:	b480      	push	{r7}
 8025466:	b083      	sub	sp, #12
 8025468:	af00      	add	r7, sp, #0
 802546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802546c:	bf00      	nop
 802546e:	370c      	adds	r7, #12
 8025470:	46bd      	mov	sp, r7
 8025472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025476:	4770      	bx	lr

08025478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8025478:	b480      	push	{r7}
 802547a:	b083      	sub	sp, #12
 802547c:	af00      	add	r7, sp, #0
 802547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8025480:	bf00      	nop
 8025482:	370c      	adds	r7, #12
 8025484:	46bd      	mov	sp, r7
 8025486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802548a:	4770      	bx	lr

0802548c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802548c:	b580      	push	{r7, lr}
 802548e:	b082      	sub	sp, #8
 8025490:	af00      	add	r7, sp, #0
 8025492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	2b00      	cmp	r3, #0
 8025498:	d101      	bne.n	802549e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802549a:	2301      	movs	r3, #1
 802549c:	e042      	b.n	8025524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802549e:	687b      	ldr	r3, [r7, #4]
 80254a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80254a4:	b2db      	uxtb	r3, r3
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	d106      	bne.n	80254b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80254aa:	687b      	ldr	r3, [r7, #4]
 80254ac:	2200      	movs	r2, #0
 80254ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80254b2:	6878      	ldr	r0, [r7, #4]
 80254b4:	f7fc fc18 	bl	8021ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	2224      	movs	r2, #36	@ 0x24
 80254bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80254c0:	687b      	ldr	r3, [r7, #4]
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	68da      	ldr	r2, [r3, #12]
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	681b      	ldr	r3, [r3, #0]
 80254ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80254ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80254d0:	6878      	ldr	r0, [r7, #4]
 80254d2:	f001 f849 	bl	8026568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80254d6:	687b      	ldr	r3, [r7, #4]
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	691a      	ldr	r2, [r3, #16]
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	681b      	ldr	r3, [r3, #0]
 80254e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80254e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80254e6:	687b      	ldr	r3, [r7, #4]
 80254e8:	681b      	ldr	r3, [r3, #0]
 80254ea:	695a      	ldr	r2, [r3, #20]
 80254ec:	687b      	ldr	r3, [r7, #4]
 80254ee:	681b      	ldr	r3, [r3, #0]
 80254f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80254f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80254f6:	687b      	ldr	r3, [r7, #4]
 80254f8:	681b      	ldr	r3, [r3, #0]
 80254fa:	68da      	ldr	r2, [r3, #12]
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8025504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025506:	687b      	ldr	r3, [r7, #4]
 8025508:	2200      	movs	r2, #0
 802550a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 802550c:	687b      	ldr	r3, [r7, #4]
 802550e:	2220      	movs	r2, #32
 8025510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8025514:	687b      	ldr	r3, [r7, #4]
 8025516:	2220      	movs	r2, #32
 8025518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802551c:	687b      	ldr	r3, [r7, #4]
 802551e:	2200      	movs	r2, #0
 8025520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8025522:	2300      	movs	r3, #0
}
 8025524:	4618      	mov	r0, r3
 8025526:	3708      	adds	r7, #8
 8025528:	46bd      	mov	sp, r7
 802552a:	bd80      	pop	{r7, pc}

0802552c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 802552c:	b580      	push	{r7, lr}
 802552e:	b082      	sub	sp, #8
 8025530:	af00      	add	r7, sp, #0
 8025532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8025534:	687b      	ldr	r3, [r7, #4]
 8025536:	2b00      	cmp	r3, #0
 8025538:	d101      	bne.n	802553e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 802553a:	2301      	movs	r3, #1
 802553c:	e024      	b.n	8025588 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	2224      	movs	r2, #36	@ 0x24
 8025542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8025546:	687b      	ldr	r3, [r7, #4]
 8025548:	681b      	ldr	r3, [r3, #0]
 802554a:	68da      	ldr	r2, [r3, #12]
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	681b      	ldr	r3, [r3, #0]
 8025550:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8025554:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8025556:	6878      	ldr	r0, [r7, #4]
 8025558:	f7fc fc7c 	bl	8021e54 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802555c:	687b      	ldr	r3, [r7, #4]
 802555e:	2200      	movs	r2, #0
 8025560:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	2200      	movs	r2, #0
 8025566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	2200      	movs	r2, #0
 802556e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	2200      	movs	r2, #0
 8025576:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	2200      	movs	r2, #0
 802557c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	2200      	movs	r2, #0
 8025582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8025586:	2300      	movs	r3, #0
}
 8025588:	4618      	mov	r0, r3
 802558a:	3708      	adds	r7, #8
 802558c:	46bd      	mov	sp, r7
 802558e:	bd80      	pop	{r7, pc}

08025590 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025590:	b580      	push	{r7, lr}
 8025592:	b08a      	sub	sp, #40	@ 0x28
 8025594:	af02      	add	r7, sp, #8
 8025596:	60f8      	str	r0, [r7, #12]
 8025598:	60b9      	str	r1, [r7, #8]
 802559a:	603b      	str	r3, [r7, #0]
 802559c:	4613      	mov	r3, r2
 802559e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80255a0:	2300      	movs	r3, #0
 80255a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80255a4:	68fb      	ldr	r3, [r7, #12]
 80255a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80255aa:	b2db      	uxtb	r3, r3
 80255ac:	2b20      	cmp	r3, #32
 80255ae:	d175      	bne.n	802569c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80255b0:	68bb      	ldr	r3, [r7, #8]
 80255b2:	2b00      	cmp	r3, #0
 80255b4:	d002      	beq.n	80255bc <HAL_UART_Transmit+0x2c>
 80255b6:	88fb      	ldrh	r3, [r7, #6]
 80255b8:	2b00      	cmp	r3, #0
 80255ba:	d101      	bne.n	80255c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80255bc:	2301      	movs	r3, #1
 80255be:	e06e      	b.n	802569e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80255c0:	68fb      	ldr	r3, [r7, #12]
 80255c2:	2200      	movs	r2, #0
 80255c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80255c6:	68fb      	ldr	r3, [r7, #12]
 80255c8:	2221      	movs	r2, #33	@ 0x21
 80255ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80255ce:	f7fc fe4b 	bl	8022268 <HAL_GetTick>
 80255d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80255d4:	68fb      	ldr	r3, [r7, #12]
 80255d6:	88fa      	ldrh	r2, [r7, #6]
 80255d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80255da:	68fb      	ldr	r3, [r7, #12]
 80255dc:	88fa      	ldrh	r2, [r7, #6]
 80255de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80255e0:	68fb      	ldr	r3, [r7, #12]
 80255e2:	689b      	ldr	r3, [r3, #8]
 80255e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80255e8:	d108      	bne.n	80255fc <HAL_UART_Transmit+0x6c>
 80255ea:	68fb      	ldr	r3, [r7, #12]
 80255ec:	691b      	ldr	r3, [r3, #16]
 80255ee:	2b00      	cmp	r3, #0
 80255f0:	d104      	bne.n	80255fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80255f2:	2300      	movs	r3, #0
 80255f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80255f6:	68bb      	ldr	r3, [r7, #8]
 80255f8:	61bb      	str	r3, [r7, #24]
 80255fa:	e003      	b.n	8025604 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80255fc:	68bb      	ldr	r3, [r7, #8]
 80255fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8025600:	2300      	movs	r3, #0
 8025602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8025604:	e02e      	b.n	8025664 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8025606:	683b      	ldr	r3, [r7, #0]
 8025608:	9300      	str	r3, [sp, #0]
 802560a:	697b      	ldr	r3, [r7, #20]
 802560c:	2200      	movs	r2, #0
 802560e:	2180      	movs	r1, #128	@ 0x80
 8025610:	68f8      	ldr	r0, [r7, #12]
 8025612:	f000 fce7 	bl	8025fe4 <UART_WaitOnFlagUntilTimeout>
 8025616:	4603      	mov	r3, r0
 8025618:	2b00      	cmp	r3, #0
 802561a:	d005      	beq.n	8025628 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 802561c:	68fb      	ldr	r3, [r7, #12]
 802561e:	2220      	movs	r2, #32
 8025620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8025624:	2303      	movs	r3, #3
 8025626:	e03a      	b.n	802569e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8025628:	69fb      	ldr	r3, [r7, #28]
 802562a:	2b00      	cmp	r3, #0
 802562c:	d10b      	bne.n	8025646 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802562e:	69bb      	ldr	r3, [r7, #24]
 8025630:	881b      	ldrh	r3, [r3, #0]
 8025632:	461a      	mov	r2, r3
 8025634:	68fb      	ldr	r3, [r7, #12]
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802563c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802563e:	69bb      	ldr	r3, [r7, #24]
 8025640:	3302      	adds	r3, #2
 8025642:	61bb      	str	r3, [r7, #24]
 8025644:	e007      	b.n	8025656 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8025646:	69fb      	ldr	r3, [r7, #28]
 8025648:	781a      	ldrb	r2, [r3, #0]
 802564a:	68fb      	ldr	r3, [r7, #12]
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8025650:	69fb      	ldr	r3, [r7, #28]
 8025652:	3301      	adds	r3, #1
 8025654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8025656:	68fb      	ldr	r3, [r7, #12]
 8025658:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802565a:	b29b      	uxth	r3, r3
 802565c:	3b01      	subs	r3, #1
 802565e:	b29a      	uxth	r2, r3
 8025660:	68fb      	ldr	r3, [r7, #12]
 8025662:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8025664:	68fb      	ldr	r3, [r7, #12]
 8025666:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8025668:	b29b      	uxth	r3, r3
 802566a:	2b00      	cmp	r3, #0
 802566c:	d1cb      	bne.n	8025606 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802566e:	683b      	ldr	r3, [r7, #0]
 8025670:	9300      	str	r3, [sp, #0]
 8025672:	697b      	ldr	r3, [r7, #20]
 8025674:	2200      	movs	r2, #0
 8025676:	2140      	movs	r1, #64	@ 0x40
 8025678:	68f8      	ldr	r0, [r7, #12]
 802567a:	f000 fcb3 	bl	8025fe4 <UART_WaitOnFlagUntilTimeout>
 802567e:	4603      	mov	r3, r0
 8025680:	2b00      	cmp	r3, #0
 8025682:	d005      	beq.n	8025690 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8025684:	68fb      	ldr	r3, [r7, #12]
 8025686:	2220      	movs	r2, #32
 8025688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 802568c:	2303      	movs	r3, #3
 802568e:	e006      	b.n	802569e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8025690:	68fb      	ldr	r3, [r7, #12]
 8025692:	2220      	movs	r2, #32
 8025694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8025698:	2300      	movs	r3, #0
 802569a:	e000      	b.n	802569e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 802569c:	2302      	movs	r3, #2
  }
}
 802569e:	4618      	mov	r0, r3
 80256a0:	3720      	adds	r7, #32
 80256a2:	46bd      	mov	sp, r7
 80256a4:	bd80      	pop	{r7, pc}

080256a6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80256a6:	b580      	push	{r7, lr}
 80256a8:	b090      	sub	sp, #64	@ 0x40
 80256aa:	af00      	add	r7, sp, #0
 80256ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80256ae:	2300      	movs	r3, #0
 80256b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80256b2:	687b      	ldr	r3, [r7, #4]
 80256b4:	681b      	ldr	r3, [r3, #0]
 80256b6:	695b      	ldr	r3, [r3, #20]
 80256b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80256bc:	2b80      	cmp	r3, #128	@ 0x80
 80256be:	bf0c      	ite	eq
 80256c0:	2301      	moveq	r3, #1
 80256c2:	2300      	movne	r3, #0
 80256c4:	b2db      	uxtb	r3, r3
 80256c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80256c8:	687b      	ldr	r3, [r7, #4]
 80256ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80256ce:	b2db      	uxtb	r3, r3
 80256d0:	2b21      	cmp	r3, #33	@ 0x21
 80256d2:	d128      	bne.n	8025726 <HAL_UART_DMAStop+0x80>
 80256d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80256d6:	2b00      	cmp	r3, #0
 80256d8:	d025      	beq.n	8025726 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80256da:	687b      	ldr	r3, [r7, #4]
 80256dc:	681b      	ldr	r3, [r3, #0]
 80256de:	3314      	adds	r3, #20
 80256e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80256e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80256e4:	e853 3f00 	ldrex	r3, [r3]
 80256e8:	623b      	str	r3, [r7, #32]
   return(result);
 80256ea:	6a3b      	ldr	r3, [r7, #32]
 80256ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80256f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80256f2:	687b      	ldr	r3, [r7, #4]
 80256f4:	681b      	ldr	r3, [r3, #0]
 80256f6:	3314      	adds	r3, #20
 80256f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80256fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80256fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80256fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8025700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025702:	e841 2300 	strex	r3, r2, [r1]
 8025706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8025708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802570a:	2b00      	cmp	r3, #0
 802570c:	d1e5      	bne.n	80256da <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 802570e:	687b      	ldr	r3, [r7, #4]
 8025710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025712:	2b00      	cmp	r3, #0
 8025714:	d004      	beq.n	8025720 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8025716:	687b      	ldr	r3, [r7, #4]
 8025718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802571a:	4618      	mov	r0, r3
 802571c:	f7fd f868 	bl	80227f0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8025720:	6878      	ldr	r0, [r7, #4]
 8025722:	f000 fd5f 	bl	80261e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8025726:	687b      	ldr	r3, [r7, #4]
 8025728:	681b      	ldr	r3, [r3, #0]
 802572a:	695b      	ldr	r3, [r3, #20]
 802572c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025730:	2b40      	cmp	r3, #64	@ 0x40
 8025732:	bf0c      	ite	eq
 8025734:	2301      	moveq	r3, #1
 8025736:	2300      	movne	r3, #0
 8025738:	b2db      	uxtb	r3, r3
 802573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 802573c:	687b      	ldr	r3, [r7, #4]
 802573e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8025742:	b2db      	uxtb	r3, r3
 8025744:	2b22      	cmp	r3, #34	@ 0x22
 8025746:	d128      	bne.n	802579a <HAL_UART_DMAStop+0xf4>
 8025748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802574a:	2b00      	cmp	r3, #0
 802574c:	d025      	beq.n	802579a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802574e:	687b      	ldr	r3, [r7, #4]
 8025750:	681b      	ldr	r3, [r3, #0]
 8025752:	3314      	adds	r3, #20
 8025754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025756:	693b      	ldr	r3, [r7, #16]
 8025758:	e853 3f00 	ldrex	r3, [r3]
 802575c:	60fb      	str	r3, [r7, #12]
   return(result);
 802575e:	68fb      	ldr	r3, [r7, #12]
 8025760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025764:	637b      	str	r3, [r7, #52]	@ 0x34
 8025766:	687b      	ldr	r3, [r7, #4]
 8025768:	681b      	ldr	r3, [r3, #0]
 802576a:	3314      	adds	r3, #20
 802576c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802576e:	61fa      	str	r2, [r7, #28]
 8025770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025772:	69b9      	ldr	r1, [r7, #24]
 8025774:	69fa      	ldr	r2, [r7, #28]
 8025776:	e841 2300 	strex	r3, r2, [r1]
 802577a:	617b      	str	r3, [r7, #20]
   return(result);
 802577c:	697b      	ldr	r3, [r7, #20]
 802577e:	2b00      	cmp	r3, #0
 8025780:	d1e5      	bne.n	802574e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8025782:	687b      	ldr	r3, [r7, #4]
 8025784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025786:	2b00      	cmp	r3, #0
 8025788:	d004      	beq.n	8025794 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802578e:	4618      	mov	r0, r3
 8025790:	f7fd f82e 	bl	80227f0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8025794:	6878      	ldr	r0, [r7, #4]
 8025796:	f000 fd4d 	bl	8026234 <UART_EndRxTransfer>
  }

  return HAL_OK;
 802579a:	2300      	movs	r3, #0
}
 802579c:	4618      	mov	r0, r3
 802579e:	3740      	adds	r7, #64	@ 0x40
 80257a0:	46bd      	mov	sp, r7
 80257a2:	bd80      	pop	{r7, pc}

080257a4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80257a4:	b580      	push	{r7, lr}
 80257a6:	b08c      	sub	sp, #48	@ 0x30
 80257a8:	af00      	add	r7, sp, #0
 80257aa:	60f8      	str	r0, [r7, #12]
 80257ac:	60b9      	str	r1, [r7, #8]
 80257ae:	4613      	mov	r3, r2
 80257b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80257b2:	68fb      	ldr	r3, [r7, #12]
 80257b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80257b8:	b2db      	uxtb	r3, r3
 80257ba:	2b20      	cmp	r3, #32
 80257bc:	d146      	bne.n	802584c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80257be:	68bb      	ldr	r3, [r7, #8]
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	d002      	beq.n	80257ca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80257c4:	88fb      	ldrh	r3, [r7, #6]
 80257c6:	2b00      	cmp	r3, #0
 80257c8:	d101      	bne.n	80257ce <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80257ca:	2301      	movs	r3, #1
 80257cc:	e03f      	b.n	802584e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80257ce:	68fb      	ldr	r3, [r7, #12]
 80257d0:	2201      	movs	r2, #1
 80257d2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80257d4:	68fb      	ldr	r3, [r7, #12]
 80257d6:	2200      	movs	r2, #0
 80257d8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80257da:	88fb      	ldrh	r3, [r7, #6]
 80257dc:	461a      	mov	r2, r3
 80257de:	68b9      	ldr	r1, [r7, #8]
 80257e0:	68f8      	ldr	r0, [r7, #12]
 80257e2:	f000 fc59 	bl	8026098 <UART_Start_Receive_DMA>
 80257e6:	4603      	mov	r3, r0
 80257e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80257ec:	68fb      	ldr	r3, [r7, #12]
 80257ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80257f0:	2b01      	cmp	r3, #1
 80257f2:	d125      	bne.n	8025840 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80257f4:	2300      	movs	r3, #0
 80257f6:	613b      	str	r3, [r7, #16]
 80257f8:	68fb      	ldr	r3, [r7, #12]
 80257fa:	681b      	ldr	r3, [r3, #0]
 80257fc:	681b      	ldr	r3, [r3, #0]
 80257fe:	613b      	str	r3, [r7, #16]
 8025800:	68fb      	ldr	r3, [r7, #12]
 8025802:	681b      	ldr	r3, [r3, #0]
 8025804:	685b      	ldr	r3, [r3, #4]
 8025806:	613b      	str	r3, [r7, #16]
 8025808:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802580a:	68fb      	ldr	r3, [r7, #12]
 802580c:	681b      	ldr	r3, [r3, #0]
 802580e:	330c      	adds	r3, #12
 8025810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025812:	69bb      	ldr	r3, [r7, #24]
 8025814:	e853 3f00 	ldrex	r3, [r3]
 8025818:	617b      	str	r3, [r7, #20]
   return(result);
 802581a:	697b      	ldr	r3, [r7, #20]
 802581c:	f043 0310 	orr.w	r3, r3, #16
 8025820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8025822:	68fb      	ldr	r3, [r7, #12]
 8025824:	681b      	ldr	r3, [r3, #0]
 8025826:	330c      	adds	r3, #12
 8025828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802582a:	627a      	str	r2, [r7, #36]	@ 0x24
 802582c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802582e:	6a39      	ldr	r1, [r7, #32]
 8025830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025832:	e841 2300 	strex	r3, r2, [r1]
 8025836:	61fb      	str	r3, [r7, #28]
   return(result);
 8025838:	69fb      	ldr	r3, [r7, #28]
 802583a:	2b00      	cmp	r3, #0
 802583c:	d1e5      	bne.n	802580a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 802583e:	e002      	b.n	8025846 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8025840:	2301      	movs	r3, #1
 8025842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8025846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802584a:	e000      	b.n	802584e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 802584c:	2302      	movs	r3, #2
  }
}
 802584e:	4618      	mov	r0, r3
 8025850:	3730      	adds	r7, #48	@ 0x30
 8025852:	46bd      	mov	sp, r7
 8025854:	bd80      	pop	{r7, pc}
	...

08025858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8025858:	b580      	push	{r7, lr}
 802585a:	b0ba      	sub	sp, #232	@ 0xe8
 802585c:	af00      	add	r7, sp, #0
 802585e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8025860:	687b      	ldr	r3, [r7, #4]
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	681b      	ldr	r3, [r3, #0]
 8025866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802586a:	687b      	ldr	r3, [r7, #4]
 802586c:	681b      	ldr	r3, [r3, #0]
 802586e:	68db      	ldr	r3, [r3, #12]
 8025870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8025874:	687b      	ldr	r3, [r7, #4]
 8025876:	681b      	ldr	r3, [r3, #0]
 8025878:	695b      	ldr	r3, [r3, #20]
 802587a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 802587e:	2300      	movs	r3, #0
 8025880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8025884:	2300      	movs	r3, #0
 8025886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802588e:	f003 030f 	and.w	r3, r3, #15
 8025892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8025896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802589a:	2b00      	cmp	r3, #0
 802589c:	d10f      	bne.n	80258be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80258a2:	f003 0320 	and.w	r3, r3, #32
 80258a6:	2b00      	cmp	r3, #0
 80258a8:	d009      	beq.n	80258be <HAL_UART_IRQHandler+0x66>
 80258aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80258ae:	f003 0320 	and.w	r3, r3, #32
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	d003      	beq.n	80258be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80258b6:	6878      	ldr	r0, [r7, #4]
 80258b8:	f000 fd98 	bl	80263ec <UART_Receive_IT>
      return;
 80258bc:	e273      	b.n	8025da6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80258be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80258c2:	2b00      	cmp	r3, #0
 80258c4:	f000 80de 	beq.w	8025a84 <HAL_UART_IRQHandler+0x22c>
 80258c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80258cc:	f003 0301 	and.w	r3, r3, #1
 80258d0:	2b00      	cmp	r3, #0
 80258d2:	d106      	bne.n	80258e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80258d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80258d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80258dc:	2b00      	cmp	r3, #0
 80258de:	f000 80d1 	beq.w	8025a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80258e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80258e6:	f003 0301 	and.w	r3, r3, #1
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	d00b      	beq.n	8025906 <HAL_UART_IRQHandler+0xae>
 80258ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80258f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80258f6:	2b00      	cmp	r3, #0
 80258f8:	d005      	beq.n	8025906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80258fa:	687b      	ldr	r3, [r7, #4]
 80258fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80258fe:	f043 0201 	orr.w	r2, r3, #1
 8025902:	687b      	ldr	r3, [r7, #4]
 8025904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8025906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802590a:	f003 0304 	and.w	r3, r3, #4
 802590e:	2b00      	cmp	r3, #0
 8025910:	d00b      	beq.n	802592a <HAL_UART_IRQHandler+0xd2>
 8025912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8025916:	f003 0301 	and.w	r3, r3, #1
 802591a:	2b00      	cmp	r3, #0
 802591c:	d005      	beq.n	802592a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802591e:	687b      	ldr	r3, [r7, #4]
 8025920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025922:	f043 0202 	orr.w	r2, r3, #2
 8025926:	687b      	ldr	r3, [r7, #4]
 8025928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802592e:	f003 0302 	and.w	r3, r3, #2
 8025932:	2b00      	cmp	r3, #0
 8025934:	d00b      	beq.n	802594e <HAL_UART_IRQHandler+0xf6>
 8025936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802593a:	f003 0301 	and.w	r3, r3, #1
 802593e:	2b00      	cmp	r3, #0
 8025940:	d005      	beq.n	802594e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8025942:	687b      	ldr	r3, [r7, #4]
 8025944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025946:	f043 0204 	orr.w	r2, r3, #4
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8025952:	f003 0308 	and.w	r3, r3, #8
 8025956:	2b00      	cmp	r3, #0
 8025958:	d011      	beq.n	802597e <HAL_UART_IRQHandler+0x126>
 802595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802595e:	f003 0320 	and.w	r3, r3, #32
 8025962:	2b00      	cmp	r3, #0
 8025964:	d105      	bne.n	8025972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8025966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802596a:	f003 0301 	and.w	r3, r3, #1
 802596e:	2b00      	cmp	r3, #0
 8025970:	d005      	beq.n	802597e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8025972:	687b      	ldr	r3, [r7, #4]
 8025974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025976:	f043 0208 	orr.w	r2, r3, #8
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802597e:	687b      	ldr	r3, [r7, #4]
 8025980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025982:	2b00      	cmp	r3, #0
 8025984:	f000 820a 	beq.w	8025d9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8025988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802598c:	f003 0320 	and.w	r3, r3, #32
 8025990:	2b00      	cmp	r3, #0
 8025992:	d008      	beq.n	80259a6 <HAL_UART_IRQHandler+0x14e>
 8025994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8025998:	f003 0320 	and.w	r3, r3, #32
 802599c:	2b00      	cmp	r3, #0
 802599e:	d002      	beq.n	80259a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80259a0:	6878      	ldr	r0, [r7, #4]
 80259a2:	f000 fd23 	bl	80263ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80259a6:	687b      	ldr	r3, [r7, #4]
 80259a8:	681b      	ldr	r3, [r3, #0]
 80259aa:	695b      	ldr	r3, [r3, #20]
 80259ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80259b0:	2b40      	cmp	r3, #64	@ 0x40
 80259b2:	bf0c      	ite	eq
 80259b4:	2301      	moveq	r3, #1
 80259b6:	2300      	movne	r3, #0
 80259b8:	b2db      	uxtb	r3, r3
 80259ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80259be:	687b      	ldr	r3, [r7, #4]
 80259c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80259c2:	f003 0308 	and.w	r3, r3, #8
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d103      	bne.n	80259d2 <HAL_UART_IRQHandler+0x17a>
 80259ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80259ce:	2b00      	cmp	r3, #0
 80259d0:	d04f      	beq.n	8025a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80259d2:	6878      	ldr	r0, [r7, #4]
 80259d4:	f000 fc2e 	bl	8026234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	681b      	ldr	r3, [r3, #0]
 80259dc:	695b      	ldr	r3, [r3, #20]
 80259de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80259e2:	2b40      	cmp	r3, #64	@ 0x40
 80259e4:	d141      	bne.n	8025a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	681b      	ldr	r3, [r3, #0]
 80259ea:	3314      	adds	r3, #20
 80259ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80259f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80259f4:	e853 3f00 	ldrex	r3, [r3]
 80259f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80259fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8025a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8025a08:	687b      	ldr	r3, [r7, #4]
 8025a0a:	681b      	ldr	r3, [r3, #0]
 8025a0c:	3314      	adds	r3, #20
 8025a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8025a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8025a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8025a22:	e841 2300 	strex	r3, r2, [r1]
 8025a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8025a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8025a2e:	2b00      	cmp	r3, #0
 8025a30:	d1d9      	bne.n	80259e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8025a32:	687b      	ldr	r3, [r7, #4]
 8025a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	d013      	beq.n	8025a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8025a3a:	687b      	ldr	r3, [r7, #4]
 8025a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025a3e:	4a8a      	ldr	r2, [pc, #552]	@ (8025c68 <HAL_UART_IRQHandler+0x410>)
 8025a40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8025a42:	687b      	ldr	r3, [r7, #4]
 8025a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025a46:	4618      	mov	r0, r3
 8025a48:	f7fc ff42 	bl	80228d0 <HAL_DMA_Abort_IT>
 8025a4c:	4603      	mov	r3, r0
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	d016      	beq.n	8025a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8025a52:	687b      	ldr	r3, [r7, #4]
 8025a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8025a58:	687a      	ldr	r2, [r7, #4]
 8025a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8025a5c:	4610      	mov	r0, r2
 8025a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025a60:	e00e      	b.n	8025a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8025a62:	6878      	ldr	r0, [r7, #4]
 8025a64:	f001 fb4c 	bl	8027100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025a68:	e00a      	b.n	8025a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8025a6a:	6878      	ldr	r0, [r7, #4]
 8025a6c:	f001 fb48 	bl	8027100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025a70:	e006      	b.n	8025a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8025a72:	6878      	ldr	r0, [r7, #4]
 8025a74:	f001 fb44 	bl	8027100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025a78:	687b      	ldr	r3, [r7, #4]
 8025a7a:	2200      	movs	r2, #0
 8025a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8025a7e:	e18d      	b.n	8025d9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025a80:	bf00      	nop
    return;
 8025a82:	e18b      	b.n	8025d9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025a88:	2b01      	cmp	r3, #1
 8025a8a:	f040 8167 	bne.w	8025d5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8025a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8025a92:	f003 0310 	and.w	r3, r3, #16
 8025a96:	2b00      	cmp	r3, #0
 8025a98:	f000 8160 	beq.w	8025d5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8025a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8025aa0:	f003 0310 	and.w	r3, r3, #16
 8025aa4:	2b00      	cmp	r3, #0
 8025aa6:	f000 8159 	beq.w	8025d5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8025aaa:	2300      	movs	r3, #0
 8025aac:	60bb      	str	r3, [r7, #8]
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	681b      	ldr	r3, [r3, #0]
 8025ab4:	60bb      	str	r3, [r7, #8]
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	685b      	ldr	r3, [r3, #4]
 8025abc:	60bb      	str	r3, [r7, #8]
 8025abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025ac0:	687b      	ldr	r3, [r7, #4]
 8025ac2:	681b      	ldr	r3, [r3, #0]
 8025ac4:	695b      	ldr	r3, [r3, #20]
 8025ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025aca:	2b40      	cmp	r3, #64	@ 0x40
 8025acc:	f040 80ce 	bne.w	8025c6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8025ad0:	687b      	ldr	r3, [r7, #4]
 8025ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025ad4:	681b      	ldr	r3, [r3, #0]
 8025ad6:	685b      	ldr	r3, [r3, #4]
 8025ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8025adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	f000 80a9 	beq.w	8025c38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8025aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8025aee:	429a      	cmp	r2, r3
 8025af0:	f080 80a2 	bcs.w	8025c38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8025af4:	687b      	ldr	r3, [r7, #4]
 8025af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8025afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025b00:	69db      	ldr	r3, [r3, #28]
 8025b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8025b06:	f000 8088 	beq.w	8025c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8025b0a:	687b      	ldr	r3, [r7, #4]
 8025b0c:	681b      	ldr	r3, [r3, #0]
 8025b0e:	330c      	adds	r3, #12
 8025b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8025b18:	e853 3f00 	ldrex	r3, [r3]
 8025b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8025b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8025b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8025b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	330c      	adds	r3, #12
 8025b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8025b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8025b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8025b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8025b46:	e841 2300 	strex	r3, r2, [r1]
 8025b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8025b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	d1d9      	bne.n	8025b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	681b      	ldr	r3, [r3, #0]
 8025b5a:	3314      	adds	r3, #20
 8025b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8025b60:	e853 3f00 	ldrex	r3, [r3]
 8025b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8025b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8025b68:	f023 0301 	bic.w	r3, r3, #1
 8025b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	681b      	ldr	r3, [r3, #0]
 8025b74:	3314      	adds	r3, #20
 8025b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8025b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8025b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8025b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8025b86:	e841 2300 	strex	r3, r2, [r1]
 8025b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8025b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	d1e1      	bne.n	8025b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8025b92:	687b      	ldr	r3, [r7, #4]
 8025b94:	681b      	ldr	r3, [r3, #0]
 8025b96:	3314      	adds	r3, #20
 8025b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8025b9c:	e853 3f00 	ldrex	r3, [r3]
 8025ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8025ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8025ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8025bac:	687b      	ldr	r3, [r7, #4]
 8025bae:	681b      	ldr	r3, [r3, #0]
 8025bb0:	3314      	adds	r3, #20
 8025bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8025bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8025bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8025bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8025bbe:	e841 2300 	strex	r3, r2, [r1]
 8025bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8025bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025bc6:	2b00      	cmp	r3, #0
 8025bc8:	d1e3      	bne.n	8025b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8025bca:	687b      	ldr	r3, [r7, #4]
 8025bcc:	2220      	movs	r2, #32
 8025bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025bd2:	687b      	ldr	r3, [r7, #4]
 8025bd4:	2200      	movs	r2, #0
 8025bd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025bd8:	687b      	ldr	r3, [r7, #4]
 8025bda:	681b      	ldr	r3, [r3, #0]
 8025bdc:	330c      	adds	r3, #12
 8025bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8025be2:	e853 3f00 	ldrex	r3, [r3]
 8025be6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8025be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025bea:	f023 0310 	bic.w	r3, r3, #16
 8025bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8025bf2:	687b      	ldr	r3, [r7, #4]
 8025bf4:	681b      	ldr	r3, [r3, #0]
 8025bf6:	330c      	adds	r3, #12
 8025bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8025bfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8025bfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8025c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8025c04:	e841 2300 	strex	r3, r2, [r1]
 8025c08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8025c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025c0c:	2b00      	cmp	r3, #0
 8025c0e:	d1e3      	bne.n	8025bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8025c10:	687b      	ldr	r3, [r7, #4]
 8025c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025c14:	4618      	mov	r0, r3
 8025c16:	f7fc fdeb 	bl	80227f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8025c1a:	687b      	ldr	r3, [r7, #4]
 8025c1c:	2202      	movs	r2, #2
 8025c1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8025c20:	687b      	ldr	r3, [r7, #4]
 8025c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8025c24:	687b      	ldr	r3, [r7, #4]
 8025c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8025c28:	b29b      	uxth	r3, r3
 8025c2a:	1ad3      	subs	r3, r2, r3
 8025c2c:	b29b      	uxth	r3, r3
 8025c2e:	4619      	mov	r1, r3
 8025c30:	6878      	ldr	r0, [r7, #4]
 8025c32:	f001 fa2b 	bl	802708c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8025c36:	e0b3      	b.n	8025da0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8025c38:	687b      	ldr	r3, [r7, #4]
 8025c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8025c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8025c40:	429a      	cmp	r2, r3
 8025c42:	f040 80ad 	bne.w	8025da0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8025c46:	687b      	ldr	r3, [r7, #4]
 8025c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025c4a:	69db      	ldr	r3, [r3, #28]
 8025c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8025c50:	f040 80a6 	bne.w	8025da0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	2202      	movs	r2, #2
 8025c58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8025c5a:	687b      	ldr	r3, [r7, #4]
 8025c5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8025c5e:	4619      	mov	r1, r3
 8025c60:	6878      	ldr	r0, [r7, #4]
 8025c62:	f001 fa13 	bl	802708c <HAL_UARTEx_RxEventCallback>
      return;
 8025c66:	e09b      	b.n	8025da0 <HAL_UART_IRQHandler+0x548>
 8025c68:	080262fb 	.word	0x080262fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8025c6c:	687b      	ldr	r3, [r7, #4]
 8025c6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8025c70:	687b      	ldr	r3, [r7, #4]
 8025c72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8025c74:	b29b      	uxth	r3, r3
 8025c76:	1ad3      	subs	r3, r2, r3
 8025c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8025c7c:	687b      	ldr	r3, [r7, #4]
 8025c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8025c80:	b29b      	uxth	r3, r3
 8025c82:	2b00      	cmp	r3, #0
 8025c84:	f000 808e 	beq.w	8025da4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8025c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8025c8c:	2b00      	cmp	r3, #0
 8025c8e:	f000 8089 	beq.w	8025da4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8025c92:	687b      	ldr	r3, [r7, #4]
 8025c94:	681b      	ldr	r3, [r3, #0]
 8025c96:	330c      	adds	r3, #12
 8025c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025c9c:	e853 3f00 	ldrex	r3, [r3]
 8025ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8025ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8025ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8025cac:	687b      	ldr	r3, [r7, #4]
 8025cae:	681b      	ldr	r3, [r3, #0]
 8025cb0:	330c      	adds	r3, #12
 8025cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8025cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8025cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025cbe:	e841 2300 	strex	r3, r2, [r1]
 8025cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8025cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025cc6:	2b00      	cmp	r3, #0
 8025cc8:	d1e3      	bne.n	8025c92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025cca:	687b      	ldr	r3, [r7, #4]
 8025ccc:	681b      	ldr	r3, [r3, #0]
 8025cce:	3314      	adds	r3, #20
 8025cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025cd4:	e853 3f00 	ldrex	r3, [r3]
 8025cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8025cda:	6a3b      	ldr	r3, [r7, #32]
 8025cdc:	f023 0301 	bic.w	r3, r3, #1
 8025ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	681b      	ldr	r3, [r3, #0]
 8025ce8:	3314      	adds	r3, #20
 8025cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8025cee:	633a      	str	r2, [r7, #48]	@ 0x30
 8025cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8025cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025cf6:	e841 2300 	strex	r3, r2, [r1]
 8025cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8025cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d1e3      	bne.n	8025cca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8025d02:	687b      	ldr	r3, [r7, #4]
 8025d04:	2220      	movs	r2, #32
 8025d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025d0a:	687b      	ldr	r3, [r7, #4]
 8025d0c:	2200      	movs	r2, #0
 8025d0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025d10:	687b      	ldr	r3, [r7, #4]
 8025d12:	681b      	ldr	r3, [r3, #0]
 8025d14:	330c      	adds	r3, #12
 8025d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025d18:	693b      	ldr	r3, [r7, #16]
 8025d1a:	e853 3f00 	ldrex	r3, [r3]
 8025d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8025d20:	68fb      	ldr	r3, [r7, #12]
 8025d22:	f023 0310 	bic.w	r3, r3, #16
 8025d26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8025d2a:	687b      	ldr	r3, [r7, #4]
 8025d2c:	681b      	ldr	r3, [r3, #0]
 8025d2e:	330c      	adds	r3, #12
 8025d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8025d34:	61fa      	str	r2, [r7, #28]
 8025d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025d38:	69b9      	ldr	r1, [r7, #24]
 8025d3a:	69fa      	ldr	r2, [r7, #28]
 8025d3c:	e841 2300 	strex	r3, r2, [r1]
 8025d40:	617b      	str	r3, [r7, #20]
   return(result);
 8025d42:	697b      	ldr	r3, [r7, #20]
 8025d44:	2b00      	cmp	r3, #0
 8025d46:	d1e3      	bne.n	8025d10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8025d48:	687b      	ldr	r3, [r7, #4]
 8025d4a:	2202      	movs	r2, #2
 8025d4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8025d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8025d52:	4619      	mov	r1, r3
 8025d54:	6878      	ldr	r0, [r7, #4]
 8025d56:	f001 f999 	bl	802708c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8025d5a:	e023      	b.n	8025da4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8025d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8025d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025d64:	2b00      	cmp	r3, #0
 8025d66:	d009      	beq.n	8025d7c <HAL_UART_IRQHandler+0x524>
 8025d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8025d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d003      	beq.n	8025d7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8025d74:	6878      	ldr	r0, [r7, #4]
 8025d76:	f000 fad1 	bl	802631c <UART_Transmit_IT>
    return;
 8025d7a:	e014      	b.n	8025da6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8025d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8025d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025d84:	2b00      	cmp	r3, #0
 8025d86:	d00e      	beq.n	8025da6 <HAL_UART_IRQHandler+0x54e>
 8025d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8025d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025d90:	2b00      	cmp	r3, #0
 8025d92:	d008      	beq.n	8025da6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8025d94:	6878      	ldr	r0, [r7, #4]
 8025d96:	f000 fb11 	bl	80263bc <UART_EndTransmit_IT>
    return;
 8025d9a:	e004      	b.n	8025da6 <HAL_UART_IRQHandler+0x54e>
    return;
 8025d9c:	bf00      	nop
 8025d9e:	e002      	b.n	8025da6 <HAL_UART_IRQHandler+0x54e>
      return;
 8025da0:	bf00      	nop
 8025da2:	e000      	b.n	8025da6 <HAL_UART_IRQHandler+0x54e>
      return;
 8025da4:	bf00      	nop
  }
}
 8025da6:	37e8      	adds	r7, #232	@ 0xe8
 8025da8:	46bd      	mov	sp, r7
 8025daa:	bd80      	pop	{r7, pc}

08025dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8025dac:	b480      	push	{r7}
 8025dae:	b083      	sub	sp, #12
 8025db0:	af00      	add	r7, sp, #0
 8025db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8025db4:	bf00      	nop
 8025db6:	370c      	adds	r7, #12
 8025db8:	46bd      	mov	sp, r7
 8025dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dbe:	4770      	bx	lr

08025dc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8025dc0:	b480      	push	{r7}
 8025dc2:	b083      	sub	sp, #12
 8025dc4:	af00      	add	r7, sp, #0
 8025dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8025dc8:	bf00      	nop
 8025dca:	370c      	adds	r7, #12
 8025dcc:	46bd      	mov	sp, r7
 8025dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dd2:	4770      	bx	lr

08025dd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8025dd4:	b480      	push	{r7}
 8025dd6:	b083      	sub	sp, #12
 8025dd8:	af00      	add	r7, sp, #0
 8025dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8025ddc:	bf00      	nop
 8025dde:	370c      	adds	r7, #12
 8025de0:	46bd      	mov	sp, r7
 8025de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025de6:	4770      	bx	lr

08025de8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8025de8:	b580      	push	{r7, lr}
 8025dea:	b09c      	sub	sp, #112	@ 0x70
 8025dec:	af00      	add	r7, sp, #0
 8025dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025df0:	687b      	ldr	r3, [r7, #4]
 8025df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025df4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8025df6:	687b      	ldr	r3, [r7, #4]
 8025df8:	681b      	ldr	r3, [r3, #0]
 8025dfa:	681b      	ldr	r3, [r3, #0]
 8025dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8025e00:	2b00      	cmp	r3, #0
 8025e02:	d172      	bne.n	8025eea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8025e04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e06:	2200      	movs	r2, #0
 8025e08:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8025e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e0c:	681b      	ldr	r3, [r3, #0]
 8025e0e:	330c      	adds	r3, #12
 8025e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8025e14:	e853 3f00 	ldrex	r3, [r3]
 8025e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8025e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8025e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8025e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e24:	681b      	ldr	r3, [r3, #0]
 8025e26:	330c      	adds	r3, #12
 8025e28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8025e2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8025e2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8025e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8025e32:	e841 2300 	strex	r3, r2, [r1]
 8025e36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8025e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025e3a:	2b00      	cmp	r3, #0
 8025e3c:	d1e5      	bne.n	8025e0a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e40:	681b      	ldr	r3, [r3, #0]
 8025e42:	3314      	adds	r3, #20
 8025e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025e48:	e853 3f00 	ldrex	r3, [r3]
 8025e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8025e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025e50:	f023 0301 	bic.w	r3, r3, #1
 8025e54:	667b      	str	r3, [r7, #100]	@ 0x64
 8025e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	3314      	adds	r3, #20
 8025e5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8025e5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8025e60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025e64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025e66:	e841 2300 	strex	r3, r2, [r1]
 8025e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8025e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	d1e5      	bne.n	8025e3e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8025e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e74:	681b      	ldr	r3, [r3, #0]
 8025e76:	3314      	adds	r3, #20
 8025e78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e7c:	e853 3f00 	ldrex	r3, [r3]
 8025e80:	623b      	str	r3, [r7, #32]
   return(result);
 8025e82:	6a3b      	ldr	r3, [r7, #32]
 8025e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8025e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e8c:	681b      	ldr	r3, [r3, #0]
 8025e8e:	3314      	adds	r3, #20
 8025e90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8025e92:	633a      	str	r2, [r7, #48]	@ 0x30
 8025e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8025e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025e9a:	e841 2300 	strex	r3, r2, [r1]
 8025e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8025ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025ea2:	2b00      	cmp	r3, #0
 8025ea4:	d1e5      	bne.n	8025e72 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8025ea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025ea8:	2220      	movs	r2, #32
 8025eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025eb2:	2b01      	cmp	r3, #1
 8025eb4:	d119      	bne.n	8025eea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025eb8:	681b      	ldr	r3, [r3, #0]
 8025eba:	330c      	adds	r3, #12
 8025ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025ebe:	693b      	ldr	r3, [r7, #16]
 8025ec0:	e853 3f00 	ldrex	r3, [r3]
 8025ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	f023 0310 	bic.w	r3, r3, #16
 8025ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8025ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025ed0:	681b      	ldr	r3, [r3, #0]
 8025ed2:	330c      	adds	r3, #12
 8025ed4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8025ed6:	61fa      	str	r2, [r7, #28]
 8025ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025eda:	69b9      	ldr	r1, [r7, #24]
 8025edc:	69fa      	ldr	r2, [r7, #28]
 8025ede:	e841 2300 	strex	r3, r2, [r1]
 8025ee2:	617b      	str	r3, [r7, #20]
   return(result);
 8025ee4:	697b      	ldr	r3, [r7, #20]
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	d1e5      	bne.n	8025eb6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8025eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025eec:	2200      	movs	r2, #0
 8025eee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025ef4:	2b01      	cmp	r3, #1
 8025ef6:	d106      	bne.n	8025f06 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8025ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025efa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8025efc:	4619      	mov	r1, r3
 8025efe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8025f00:	f001 f8c4 	bl	802708c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8025f04:	e002      	b.n	8025f0c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8025f06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8025f08:	f7ff ff5a 	bl	8025dc0 <HAL_UART_RxCpltCallback>
}
 8025f0c:	bf00      	nop
 8025f0e:	3770      	adds	r7, #112	@ 0x70
 8025f10:	46bd      	mov	sp, r7
 8025f12:	bd80      	pop	{r7, pc}

08025f14 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8025f14:	b580      	push	{r7, lr}
 8025f16:	b084      	sub	sp, #16
 8025f18:	af00      	add	r7, sp, #0
 8025f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025f1c:	687b      	ldr	r3, [r7, #4]
 8025f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025f20:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8025f22:	68fb      	ldr	r3, [r7, #12]
 8025f24:	2201      	movs	r2, #1
 8025f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025f28:	68fb      	ldr	r3, [r7, #12]
 8025f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025f2c:	2b01      	cmp	r3, #1
 8025f2e:	d108      	bne.n	8025f42 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8025f30:	68fb      	ldr	r3, [r7, #12]
 8025f32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8025f34:	085b      	lsrs	r3, r3, #1
 8025f36:	b29b      	uxth	r3, r3
 8025f38:	4619      	mov	r1, r3
 8025f3a:	68f8      	ldr	r0, [r7, #12]
 8025f3c:	f001 f8a6 	bl	802708c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8025f40:	e002      	b.n	8025f48 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8025f42:	68f8      	ldr	r0, [r7, #12]
 8025f44:	f7ff ff46 	bl	8025dd4 <HAL_UART_RxHalfCpltCallback>
}
 8025f48:	bf00      	nop
 8025f4a:	3710      	adds	r7, #16
 8025f4c:	46bd      	mov	sp, r7
 8025f4e:	bd80      	pop	{r7, pc}

08025f50 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8025f50:	b580      	push	{r7, lr}
 8025f52:	b084      	sub	sp, #16
 8025f54:	af00      	add	r7, sp, #0
 8025f56:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8025f58:	2300      	movs	r3, #0
 8025f5a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025f5c:	687b      	ldr	r3, [r7, #4]
 8025f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025f60:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8025f62:	68bb      	ldr	r3, [r7, #8]
 8025f64:	681b      	ldr	r3, [r3, #0]
 8025f66:	695b      	ldr	r3, [r3, #20]
 8025f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025f6c:	2b80      	cmp	r3, #128	@ 0x80
 8025f6e:	bf0c      	ite	eq
 8025f70:	2301      	moveq	r3, #1
 8025f72:	2300      	movne	r3, #0
 8025f74:	b2db      	uxtb	r3, r3
 8025f76:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8025f78:	68bb      	ldr	r3, [r7, #8]
 8025f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8025f7e:	b2db      	uxtb	r3, r3
 8025f80:	2b21      	cmp	r3, #33	@ 0x21
 8025f82:	d108      	bne.n	8025f96 <UART_DMAError+0x46>
 8025f84:	68fb      	ldr	r3, [r7, #12]
 8025f86:	2b00      	cmp	r3, #0
 8025f88:	d005      	beq.n	8025f96 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8025f8a:	68bb      	ldr	r3, [r7, #8]
 8025f8c:	2200      	movs	r2, #0
 8025f8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8025f90:	68b8      	ldr	r0, [r7, #8]
 8025f92:	f000 f927 	bl	80261e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8025f96:	68bb      	ldr	r3, [r7, #8]
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	695b      	ldr	r3, [r3, #20]
 8025f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025fa0:	2b40      	cmp	r3, #64	@ 0x40
 8025fa2:	bf0c      	ite	eq
 8025fa4:	2301      	moveq	r3, #1
 8025fa6:	2300      	movne	r3, #0
 8025fa8:	b2db      	uxtb	r3, r3
 8025faa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8025fac:	68bb      	ldr	r3, [r7, #8]
 8025fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8025fb2:	b2db      	uxtb	r3, r3
 8025fb4:	2b22      	cmp	r3, #34	@ 0x22
 8025fb6:	d108      	bne.n	8025fca <UART_DMAError+0x7a>
 8025fb8:	68fb      	ldr	r3, [r7, #12]
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	d005      	beq.n	8025fca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8025fbe:	68bb      	ldr	r3, [r7, #8]
 8025fc0:	2200      	movs	r2, #0
 8025fc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8025fc4:	68b8      	ldr	r0, [r7, #8]
 8025fc6:	f000 f935 	bl	8026234 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8025fca:	68bb      	ldr	r3, [r7, #8]
 8025fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025fce:	f043 0210 	orr.w	r2, r3, #16
 8025fd2:	68bb      	ldr	r3, [r7, #8]
 8025fd4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8025fd6:	68b8      	ldr	r0, [r7, #8]
 8025fd8:	f001 f892 	bl	8027100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8025fdc:	bf00      	nop
 8025fde:	3710      	adds	r7, #16
 8025fe0:	46bd      	mov	sp, r7
 8025fe2:	bd80      	pop	{r7, pc}

08025fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8025fe4:	b580      	push	{r7, lr}
 8025fe6:	b086      	sub	sp, #24
 8025fe8:	af00      	add	r7, sp, #0
 8025fea:	60f8      	str	r0, [r7, #12]
 8025fec:	60b9      	str	r1, [r7, #8]
 8025fee:	603b      	str	r3, [r7, #0]
 8025ff0:	4613      	mov	r3, r2
 8025ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025ff4:	e03b      	b.n	802606e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025ff6:	6a3b      	ldr	r3, [r7, #32]
 8025ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ffc:	d037      	beq.n	802606e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025ffe:	f7fc f933 	bl	8022268 <HAL_GetTick>
 8026002:	4602      	mov	r2, r0
 8026004:	683b      	ldr	r3, [r7, #0]
 8026006:	1ad3      	subs	r3, r2, r3
 8026008:	6a3a      	ldr	r2, [r7, #32]
 802600a:	429a      	cmp	r2, r3
 802600c:	d302      	bcc.n	8026014 <UART_WaitOnFlagUntilTimeout+0x30>
 802600e:	6a3b      	ldr	r3, [r7, #32]
 8026010:	2b00      	cmp	r3, #0
 8026012:	d101      	bne.n	8026018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8026014:	2303      	movs	r3, #3
 8026016:	e03a      	b.n	802608e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8026018:	68fb      	ldr	r3, [r7, #12]
 802601a:	681b      	ldr	r3, [r3, #0]
 802601c:	68db      	ldr	r3, [r3, #12]
 802601e:	f003 0304 	and.w	r3, r3, #4
 8026022:	2b00      	cmp	r3, #0
 8026024:	d023      	beq.n	802606e <UART_WaitOnFlagUntilTimeout+0x8a>
 8026026:	68bb      	ldr	r3, [r7, #8]
 8026028:	2b80      	cmp	r3, #128	@ 0x80
 802602a:	d020      	beq.n	802606e <UART_WaitOnFlagUntilTimeout+0x8a>
 802602c:	68bb      	ldr	r3, [r7, #8]
 802602e:	2b40      	cmp	r3, #64	@ 0x40
 8026030:	d01d      	beq.n	802606e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8026032:	68fb      	ldr	r3, [r7, #12]
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	681b      	ldr	r3, [r3, #0]
 8026038:	f003 0308 	and.w	r3, r3, #8
 802603c:	2b08      	cmp	r3, #8
 802603e:	d116      	bne.n	802606e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8026040:	2300      	movs	r3, #0
 8026042:	617b      	str	r3, [r7, #20]
 8026044:	68fb      	ldr	r3, [r7, #12]
 8026046:	681b      	ldr	r3, [r3, #0]
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	617b      	str	r3, [r7, #20]
 802604c:	68fb      	ldr	r3, [r7, #12]
 802604e:	681b      	ldr	r3, [r3, #0]
 8026050:	685b      	ldr	r3, [r3, #4]
 8026052:	617b      	str	r3, [r7, #20]
 8026054:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8026056:	68f8      	ldr	r0, [r7, #12]
 8026058:	f000 f8ec 	bl	8026234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802605c:	68fb      	ldr	r3, [r7, #12]
 802605e:	2208      	movs	r2, #8
 8026060:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8026062:	68fb      	ldr	r3, [r7, #12]
 8026064:	2200      	movs	r2, #0
 8026066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 802606a:	2301      	movs	r3, #1
 802606c:	e00f      	b.n	802608e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802606e:	68fb      	ldr	r3, [r7, #12]
 8026070:	681b      	ldr	r3, [r3, #0]
 8026072:	681a      	ldr	r2, [r3, #0]
 8026074:	68bb      	ldr	r3, [r7, #8]
 8026076:	4013      	ands	r3, r2
 8026078:	68ba      	ldr	r2, [r7, #8]
 802607a:	429a      	cmp	r2, r3
 802607c:	bf0c      	ite	eq
 802607e:	2301      	moveq	r3, #1
 8026080:	2300      	movne	r3, #0
 8026082:	b2db      	uxtb	r3, r3
 8026084:	461a      	mov	r2, r3
 8026086:	79fb      	ldrb	r3, [r7, #7]
 8026088:	429a      	cmp	r2, r3
 802608a:	d0b4      	beq.n	8025ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802608c:	2300      	movs	r3, #0
}
 802608e:	4618      	mov	r0, r3
 8026090:	3718      	adds	r7, #24
 8026092:	46bd      	mov	sp, r7
 8026094:	bd80      	pop	{r7, pc}
	...

08026098 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8026098:	b580      	push	{r7, lr}
 802609a:	b098      	sub	sp, #96	@ 0x60
 802609c:	af00      	add	r7, sp, #0
 802609e:	60f8      	str	r0, [r7, #12]
 80260a0:	60b9      	str	r1, [r7, #8]
 80260a2:	4613      	mov	r3, r2
 80260a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80260a6:	68ba      	ldr	r2, [r7, #8]
 80260a8:	68fb      	ldr	r3, [r7, #12]
 80260aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80260ac:	68fb      	ldr	r3, [r7, #12]
 80260ae:	88fa      	ldrh	r2, [r7, #6]
 80260b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80260b2:	68fb      	ldr	r3, [r7, #12]
 80260b4:	2200      	movs	r2, #0
 80260b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	2222      	movs	r2, #34	@ 0x22
 80260bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80260c0:	68fb      	ldr	r3, [r7, #12]
 80260c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80260c4:	4a44      	ldr	r2, [pc, #272]	@ (80261d8 <UART_Start_Receive_DMA+0x140>)
 80260c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80260c8:	68fb      	ldr	r3, [r7, #12]
 80260ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80260cc:	4a43      	ldr	r2, [pc, #268]	@ (80261dc <UART_Start_Receive_DMA+0x144>)
 80260ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80260d0:	68fb      	ldr	r3, [r7, #12]
 80260d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80260d4:	4a42      	ldr	r2, [pc, #264]	@ (80261e0 <UART_Start_Receive_DMA+0x148>)
 80260d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80260d8:	68fb      	ldr	r3, [r7, #12]
 80260da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80260dc:	2200      	movs	r2, #0
 80260de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80260e0:	f107 0308 	add.w	r3, r7, #8
 80260e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80260e6:	68fb      	ldr	r3, [r7, #12]
 80260e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80260ea:	68fb      	ldr	r3, [r7, #12]
 80260ec:	681b      	ldr	r3, [r3, #0]
 80260ee:	3304      	adds	r3, #4
 80260f0:	4619      	mov	r1, r3
 80260f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80260f4:	681a      	ldr	r2, [r3, #0]
 80260f6:	88fb      	ldrh	r3, [r7, #6]
 80260f8:	f7fc fb22 	bl	8022740 <HAL_DMA_Start_IT>
 80260fc:	4603      	mov	r3, r0
 80260fe:	2b00      	cmp	r3, #0
 8026100:	d008      	beq.n	8026114 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8026102:	68fb      	ldr	r3, [r7, #12]
 8026104:	2210      	movs	r2, #16
 8026106:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8026108:	68fb      	ldr	r3, [r7, #12]
 802610a:	2220      	movs	r2, #32
 802610c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8026110:	2301      	movs	r3, #1
 8026112:	e05d      	b.n	80261d0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8026114:	2300      	movs	r3, #0
 8026116:	613b      	str	r3, [r7, #16]
 8026118:	68fb      	ldr	r3, [r7, #12]
 802611a:	681b      	ldr	r3, [r3, #0]
 802611c:	681b      	ldr	r3, [r3, #0]
 802611e:	613b      	str	r3, [r7, #16]
 8026120:	68fb      	ldr	r3, [r7, #12]
 8026122:	681b      	ldr	r3, [r3, #0]
 8026124:	685b      	ldr	r3, [r3, #4]
 8026126:	613b      	str	r3, [r7, #16]
 8026128:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 802612a:	68fb      	ldr	r3, [r7, #12]
 802612c:	691b      	ldr	r3, [r3, #16]
 802612e:	2b00      	cmp	r3, #0
 8026130:	d019      	beq.n	8026166 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8026132:	68fb      	ldr	r3, [r7, #12]
 8026134:	681b      	ldr	r3, [r3, #0]
 8026136:	330c      	adds	r3, #12
 8026138:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802613a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802613c:	e853 3f00 	ldrex	r3, [r3]
 8026140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8026142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8026144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8026148:	65bb      	str	r3, [r7, #88]	@ 0x58
 802614a:	68fb      	ldr	r3, [r7, #12]
 802614c:	681b      	ldr	r3, [r3, #0]
 802614e:	330c      	adds	r3, #12
 8026150:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8026152:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8026154:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026156:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8026158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802615a:	e841 2300 	strex	r3, r2, [r1]
 802615e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8026160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8026162:	2b00      	cmp	r3, #0
 8026164:	d1e5      	bne.n	8026132 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026166:	68fb      	ldr	r3, [r7, #12]
 8026168:	681b      	ldr	r3, [r3, #0]
 802616a:	3314      	adds	r3, #20
 802616c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026170:	e853 3f00 	ldrex	r3, [r3]
 8026174:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8026176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026178:	f043 0301 	orr.w	r3, r3, #1
 802617c:	657b      	str	r3, [r7, #84]	@ 0x54
 802617e:	68fb      	ldr	r3, [r7, #12]
 8026180:	681b      	ldr	r3, [r3, #0]
 8026182:	3314      	adds	r3, #20
 8026184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8026186:	63ba      	str	r2, [r7, #56]	@ 0x38
 8026188:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802618a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802618c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802618e:	e841 2300 	strex	r3, r2, [r1]
 8026192:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8026194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026196:	2b00      	cmp	r3, #0
 8026198:	d1e5      	bne.n	8026166 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802619a:	68fb      	ldr	r3, [r7, #12]
 802619c:	681b      	ldr	r3, [r3, #0]
 802619e:	3314      	adds	r3, #20
 80261a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80261a2:	69bb      	ldr	r3, [r7, #24]
 80261a4:	e853 3f00 	ldrex	r3, [r3]
 80261a8:	617b      	str	r3, [r7, #20]
   return(result);
 80261aa:	697b      	ldr	r3, [r7, #20]
 80261ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80261b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80261b2:	68fb      	ldr	r3, [r7, #12]
 80261b4:	681b      	ldr	r3, [r3, #0]
 80261b6:	3314      	adds	r3, #20
 80261b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80261ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80261bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80261be:	6a39      	ldr	r1, [r7, #32]
 80261c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80261c2:	e841 2300 	strex	r3, r2, [r1]
 80261c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80261c8:	69fb      	ldr	r3, [r7, #28]
 80261ca:	2b00      	cmp	r3, #0
 80261cc:	d1e5      	bne.n	802619a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80261ce:	2300      	movs	r3, #0
}
 80261d0:	4618      	mov	r0, r3
 80261d2:	3760      	adds	r7, #96	@ 0x60
 80261d4:	46bd      	mov	sp, r7
 80261d6:	bd80      	pop	{r7, pc}
 80261d8:	08025de9 	.word	0x08025de9
 80261dc:	08025f15 	.word	0x08025f15
 80261e0:	08025f51 	.word	0x08025f51

080261e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80261e4:	b480      	push	{r7}
 80261e6:	b089      	sub	sp, #36	@ 0x24
 80261e8:	af00      	add	r7, sp, #0
 80261ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	330c      	adds	r3, #12
 80261f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80261f4:	68fb      	ldr	r3, [r7, #12]
 80261f6:	e853 3f00 	ldrex	r3, [r3]
 80261fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80261fc:	68bb      	ldr	r3, [r7, #8]
 80261fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8026202:	61fb      	str	r3, [r7, #28]
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	681b      	ldr	r3, [r3, #0]
 8026208:	330c      	adds	r3, #12
 802620a:	69fa      	ldr	r2, [r7, #28]
 802620c:	61ba      	str	r2, [r7, #24]
 802620e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026210:	6979      	ldr	r1, [r7, #20]
 8026212:	69ba      	ldr	r2, [r7, #24]
 8026214:	e841 2300 	strex	r3, r2, [r1]
 8026218:	613b      	str	r3, [r7, #16]
   return(result);
 802621a:	693b      	ldr	r3, [r7, #16]
 802621c:	2b00      	cmp	r3, #0
 802621e:	d1e5      	bne.n	80261ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	2220      	movs	r2, #32
 8026224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8026228:	bf00      	nop
 802622a:	3724      	adds	r7, #36	@ 0x24
 802622c:	46bd      	mov	sp, r7
 802622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026232:	4770      	bx	lr

08026234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8026234:	b480      	push	{r7}
 8026236:	b095      	sub	sp, #84	@ 0x54
 8026238:	af00      	add	r7, sp, #0
 802623a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802623c:	687b      	ldr	r3, [r7, #4]
 802623e:	681b      	ldr	r3, [r3, #0]
 8026240:	330c      	adds	r3, #12
 8026242:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026246:	e853 3f00 	ldrex	r3, [r3]
 802624a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802624e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8026252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	681b      	ldr	r3, [r3, #0]
 8026258:	330c      	adds	r3, #12
 802625a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802625c:	643a      	str	r2, [r7, #64]	@ 0x40
 802625e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026260:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8026262:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8026264:	e841 2300 	strex	r3, r2, [r1]
 8026268:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802626c:	2b00      	cmp	r3, #0
 802626e:	d1e5      	bne.n	802623c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026270:	687b      	ldr	r3, [r7, #4]
 8026272:	681b      	ldr	r3, [r3, #0]
 8026274:	3314      	adds	r3, #20
 8026276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026278:	6a3b      	ldr	r3, [r7, #32]
 802627a:	e853 3f00 	ldrex	r3, [r3]
 802627e:	61fb      	str	r3, [r7, #28]
   return(result);
 8026280:	69fb      	ldr	r3, [r7, #28]
 8026282:	f023 0301 	bic.w	r3, r3, #1
 8026286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	681b      	ldr	r3, [r3, #0]
 802628c:	3314      	adds	r3, #20
 802628e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8026290:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8026292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8026296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026298:	e841 2300 	strex	r3, r2, [r1]
 802629c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d1e5      	bne.n	8026270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80262a4:	687b      	ldr	r3, [r7, #4]
 80262a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80262a8:	2b01      	cmp	r3, #1
 80262aa:	d119      	bne.n	80262e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	681b      	ldr	r3, [r3, #0]
 80262b0:	330c      	adds	r3, #12
 80262b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80262b4:	68fb      	ldr	r3, [r7, #12]
 80262b6:	e853 3f00 	ldrex	r3, [r3]
 80262ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80262bc:	68bb      	ldr	r3, [r7, #8]
 80262be:	f023 0310 	bic.w	r3, r3, #16
 80262c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	681b      	ldr	r3, [r3, #0]
 80262c8:	330c      	adds	r3, #12
 80262ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80262cc:	61ba      	str	r2, [r7, #24]
 80262ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80262d0:	6979      	ldr	r1, [r7, #20]
 80262d2:	69ba      	ldr	r2, [r7, #24]
 80262d4:	e841 2300 	strex	r3, r2, [r1]
 80262d8:	613b      	str	r3, [r7, #16]
   return(result);
 80262da:	693b      	ldr	r3, [r7, #16]
 80262dc:	2b00      	cmp	r3, #0
 80262de:	d1e5      	bne.n	80262ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	2220      	movs	r2, #32
 80262e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	2200      	movs	r2, #0
 80262ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80262ee:	bf00      	nop
 80262f0:	3754      	adds	r7, #84	@ 0x54
 80262f2:	46bd      	mov	sp, r7
 80262f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262f8:	4770      	bx	lr

080262fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80262fa:	b580      	push	{r7, lr}
 80262fc:	b084      	sub	sp, #16
 80262fe:	af00      	add	r7, sp, #0
 8026300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8026302:	687b      	ldr	r3, [r7, #4]
 8026304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8026306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8026308:	68fb      	ldr	r3, [r7, #12]
 802630a:	2200      	movs	r2, #0
 802630c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802630e:	68f8      	ldr	r0, [r7, #12]
 8026310:	f000 fef6 	bl	8027100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8026314:	bf00      	nop
 8026316:	3710      	adds	r7, #16
 8026318:	46bd      	mov	sp, r7
 802631a:	bd80      	pop	{r7, pc}

0802631c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802631c:	b480      	push	{r7}
 802631e:	b085      	sub	sp, #20
 8026320:	af00      	add	r7, sp, #0
 8026322:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802632a:	b2db      	uxtb	r3, r3
 802632c:	2b21      	cmp	r3, #33	@ 0x21
 802632e:	d13e      	bne.n	80263ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	689b      	ldr	r3, [r3, #8]
 8026334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8026338:	d114      	bne.n	8026364 <UART_Transmit_IT+0x48>
 802633a:	687b      	ldr	r3, [r7, #4]
 802633c:	691b      	ldr	r3, [r3, #16]
 802633e:	2b00      	cmp	r3, #0
 8026340:	d110      	bne.n	8026364 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8026342:	687b      	ldr	r3, [r7, #4]
 8026344:	6a1b      	ldr	r3, [r3, #32]
 8026346:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8026348:	68fb      	ldr	r3, [r7, #12]
 802634a:	881b      	ldrh	r3, [r3, #0]
 802634c:	461a      	mov	r2, r3
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	681b      	ldr	r3, [r3, #0]
 8026352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8026356:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8026358:	687b      	ldr	r3, [r7, #4]
 802635a:	6a1b      	ldr	r3, [r3, #32]
 802635c:	1c9a      	adds	r2, r3, #2
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	621a      	str	r2, [r3, #32]
 8026362:	e008      	b.n	8026376 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8026364:	687b      	ldr	r3, [r7, #4]
 8026366:	6a1b      	ldr	r3, [r3, #32]
 8026368:	1c59      	adds	r1, r3, #1
 802636a:	687a      	ldr	r2, [r7, #4]
 802636c:	6211      	str	r1, [r2, #32]
 802636e:	781a      	ldrb	r2, [r3, #0]
 8026370:	687b      	ldr	r3, [r7, #4]
 8026372:	681b      	ldr	r3, [r3, #0]
 8026374:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 802637a:	b29b      	uxth	r3, r3
 802637c:	3b01      	subs	r3, #1
 802637e:	b29b      	uxth	r3, r3
 8026380:	687a      	ldr	r2, [r7, #4]
 8026382:	4619      	mov	r1, r3
 8026384:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8026386:	2b00      	cmp	r3, #0
 8026388:	d10f      	bne.n	80263aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802638a:	687b      	ldr	r3, [r7, #4]
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	68da      	ldr	r2, [r3, #12]
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	681b      	ldr	r3, [r3, #0]
 8026394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8026398:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802639a:	687b      	ldr	r3, [r7, #4]
 802639c:	681b      	ldr	r3, [r3, #0]
 802639e:	68da      	ldr	r2, [r3, #12]
 80263a0:	687b      	ldr	r3, [r7, #4]
 80263a2:	681b      	ldr	r3, [r3, #0]
 80263a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80263a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80263aa:	2300      	movs	r3, #0
 80263ac:	e000      	b.n	80263b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80263ae:	2302      	movs	r3, #2
  }
}
 80263b0:	4618      	mov	r0, r3
 80263b2:	3714      	adds	r7, #20
 80263b4:	46bd      	mov	sp, r7
 80263b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263ba:	4770      	bx	lr

080263bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80263bc:	b580      	push	{r7, lr}
 80263be:	b082      	sub	sp, #8
 80263c0:	af00      	add	r7, sp, #0
 80263c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80263c4:	687b      	ldr	r3, [r7, #4]
 80263c6:	681b      	ldr	r3, [r3, #0]
 80263c8:	68da      	ldr	r2, [r3, #12]
 80263ca:	687b      	ldr	r3, [r7, #4]
 80263cc:	681b      	ldr	r3, [r3, #0]
 80263ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80263d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80263d4:	687b      	ldr	r3, [r7, #4]
 80263d6:	2220      	movs	r2, #32
 80263d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80263dc:	6878      	ldr	r0, [r7, #4]
 80263de:	f7ff fce5 	bl	8025dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80263e2:	2300      	movs	r3, #0
}
 80263e4:	4618      	mov	r0, r3
 80263e6:	3708      	adds	r7, #8
 80263e8:	46bd      	mov	sp, r7
 80263ea:	bd80      	pop	{r7, pc}

080263ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80263ec:	b580      	push	{r7, lr}
 80263ee:	b08c      	sub	sp, #48	@ 0x30
 80263f0:	af00      	add	r7, sp, #0
 80263f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80263f4:	2300      	movs	r3, #0
 80263f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80263f8:	2300      	movs	r3, #0
 80263fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8026402:	b2db      	uxtb	r3, r3
 8026404:	2b22      	cmp	r3, #34	@ 0x22
 8026406:	f040 80aa 	bne.w	802655e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	689b      	ldr	r3, [r3, #8]
 802640e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8026412:	d115      	bne.n	8026440 <UART_Receive_IT+0x54>
 8026414:	687b      	ldr	r3, [r7, #4]
 8026416:	691b      	ldr	r3, [r3, #16]
 8026418:	2b00      	cmp	r3, #0
 802641a:	d111      	bne.n	8026440 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026420:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	685b      	ldr	r3, [r3, #4]
 8026428:	b29b      	uxth	r3, r3
 802642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802642e:	b29a      	uxth	r2, r3
 8026430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026432:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8026434:	687b      	ldr	r3, [r7, #4]
 8026436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026438:	1c9a      	adds	r2, r3, #2
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	629a      	str	r2, [r3, #40]	@ 0x28
 802643e:	e024      	b.n	802648a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8026440:	687b      	ldr	r3, [r7, #4]
 8026442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026444:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	689b      	ldr	r3, [r3, #8]
 802644a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802644e:	d007      	beq.n	8026460 <UART_Receive_IT+0x74>
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	689b      	ldr	r3, [r3, #8]
 8026454:	2b00      	cmp	r3, #0
 8026456:	d10a      	bne.n	802646e <UART_Receive_IT+0x82>
 8026458:	687b      	ldr	r3, [r7, #4]
 802645a:	691b      	ldr	r3, [r3, #16]
 802645c:	2b00      	cmp	r3, #0
 802645e:	d106      	bne.n	802646e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	681b      	ldr	r3, [r3, #0]
 8026464:	685b      	ldr	r3, [r3, #4]
 8026466:	b2da      	uxtb	r2, r3
 8026468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802646a:	701a      	strb	r2, [r3, #0]
 802646c:	e008      	b.n	8026480 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802646e:	687b      	ldr	r3, [r7, #4]
 8026470:	681b      	ldr	r3, [r3, #0]
 8026472:	685b      	ldr	r3, [r3, #4]
 8026474:	b2db      	uxtb	r3, r3
 8026476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802647a:	b2da      	uxtb	r2, r3
 802647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802647e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026484:	1c5a      	adds	r2, r3, #1
 8026486:	687b      	ldr	r3, [r7, #4]
 8026488:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 802648a:	687b      	ldr	r3, [r7, #4]
 802648c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 802648e:	b29b      	uxth	r3, r3
 8026490:	3b01      	subs	r3, #1
 8026492:	b29b      	uxth	r3, r3
 8026494:	687a      	ldr	r2, [r7, #4]
 8026496:	4619      	mov	r1, r3
 8026498:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 802649a:	2b00      	cmp	r3, #0
 802649c:	d15d      	bne.n	802655a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802649e:	687b      	ldr	r3, [r7, #4]
 80264a0:	681b      	ldr	r3, [r3, #0]
 80264a2:	68da      	ldr	r2, [r3, #12]
 80264a4:	687b      	ldr	r3, [r7, #4]
 80264a6:	681b      	ldr	r3, [r3, #0]
 80264a8:	f022 0220 	bic.w	r2, r2, #32
 80264ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	68da      	ldr	r2, [r3, #12]
 80264b4:	687b      	ldr	r3, [r7, #4]
 80264b6:	681b      	ldr	r3, [r3, #0]
 80264b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80264bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	681b      	ldr	r3, [r3, #0]
 80264c2:	695a      	ldr	r2, [r3, #20]
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	681b      	ldr	r3, [r3, #0]
 80264c8:	f022 0201 	bic.w	r2, r2, #1
 80264cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80264ce:	687b      	ldr	r3, [r7, #4]
 80264d0:	2220      	movs	r2, #32
 80264d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80264d6:	687b      	ldr	r3, [r7, #4]
 80264d8:	2200      	movs	r2, #0
 80264da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80264dc:	687b      	ldr	r3, [r7, #4]
 80264de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80264e0:	2b01      	cmp	r3, #1
 80264e2:	d135      	bne.n	8026550 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80264e4:	687b      	ldr	r3, [r7, #4]
 80264e6:	2200      	movs	r2, #0
 80264e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80264ea:	687b      	ldr	r3, [r7, #4]
 80264ec:	681b      	ldr	r3, [r3, #0]
 80264ee:	330c      	adds	r3, #12
 80264f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80264f2:	697b      	ldr	r3, [r7, #20]
 80264f4:	e853 3f00 	ldrex	r3, [r3]
 80264f8:	613b      	str	r3, [r7, #16]
   return(result);
 80264fa:	693b      	ldr	r3, [r7, #16]
 80264fc:	f023 0310 	bic.w	r3, r3, #16
 8026500:	627b      	str	r3, [r7, #36]	@ 0x24
 8026502:	687b      	ldr	r3, [r7, #4]
 8026504:	681b      	ldr	r3, [r3, #0]
 8026506:	330c      	adds	r3, #12
 8026508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802650a:	623a      	str	r2, [r7, #32]
 802650c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802650e:	69f9      	ldr	r1, [r7, #28]
 8026510:	6a3a      	ldr	r2, [r7, #32]
 8026512:	e841 2300 	strex	r3, r2, [r1]
 8026516:	61bb      	str	r3, [r7, #24]
   return(result);
 8026518:	69bb      	ldr	r3, [r7, #24]
 802651a:	2b00      	cmp	r3, #0
 802651c:	d1e5      	bne.n	80264ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802651e:	687b      	ldr	r3, [r7, #4]
 8026520:	681b      	ldr	r3, [r3, #0]
 8026522:	681b      	ldr	r3, [r3, #0]
 8026524:	f003 0310 	and.w	r3, r3, #16
 8026528:	2b10      	cmp	r3, #16
 802652a:	d10a      	bne.n	8026542 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802652c:	2300      	movs	r3, #0
 802652e:	60fb      	str	r3, [r7, #12]
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	681b      	ldr	r3, [r3, #0]
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	60fb      	str	r3, [r7, #12]
 8026538:	687b      	ldr	r3, [r7, #4]
 802653a:	681b      	ldr	r3, [r3, #0]
 802653c:	685b      	ldr	r3, [r3, #4]
 802653e:	60fb      	str	r3, [r7, #12]
 8026540:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8026542:	687b      	ldr	r3, [r7, #4]
 8026544:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8026546:	4619      	mov	r1, r3
 8026548:	6878      	ldr	r0, [r7, #4]
 802654a:	f000 fd9f 	bl	802708c <HAL_UARTEx_RxEventCallback>
 802654e:	e002      	b.n	8026556 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8026550:	6878      	ldr	r0, [r7, #4]
 8026552:	f7ff fc35 	bl	8025dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8026556:	2300      	movs	r3, #0
 8026558:	e002      	b.n	8026560 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 802655a:	2300      	movs	r3, #0
 802655c:	e000      	b.n	8026560 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 802655e:	2302      	movs	r3, #2
  }
}
 8026560:	4618      	mov	r0, r3
 8026562:	3730      	adds	r7, #48	@ 0x30
 8026564:	46bd      	mov	sp, r7
 8026566:	bd80      	pop	{r7, pc}

08026568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8026568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802656c:	b0c0      	sub	sp, #256	@ 0x100
 802656e:	af00      	add	r7, sp, #0
 8026570:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8026574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	691b      	ldr	r3, [r3, #16]
 802657c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8026580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026584:	68d9      	ldr	r1, [r3, #12]
 8026586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802658a:	681a      	ldr	r2, [r3, #0]
 802658c:	ea40 0301 	orr.w	r3, r0, r1
 8026590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8026592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026596:	689a      	ldr	r2, [r3, #8]
 8026598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802659c:	691b      	ldr	r3, [r3, #16]
 802659e:	431a      	orrs	r2, r3
 80265a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265a4:	695b      	ldr	r3, [r3, #20]
 80265a6:	431a      	orrs	r2, r3
 80265a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265ac:	69db      	ldr	r3, [r3, #28]
 80265ae:	4313      	orrs	r3, r2
 80265b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80265b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265b8:	681b      	ldr	r3, [r3, #0]
 80265ba:	68db      	ldr	r3, [r3, #12]
 80265bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80265c0:	f021 010c 	bic.w	r1, r1, #12
 80265c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265c8:	681a      	ldr	r2, [r3, #0]
 80265ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80265ce:	430b      	orrs	r3, r1
 80265d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80265d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265d6:	681b      	ldr	r3, [r3, #0]
 80265d8:	695b      	ldr	r3, [r3, #20]
 80265da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80265de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265e2:	6999      	ldr	r1, [r3, #24]
 80265e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265e8:	681a      	ldr	r2, [r3, #0]
 80265ea:	ea40 0301 	orr.w	r3, r0, r1
 80265ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80265f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80265f4:	681a      	ldr	r2, [r3, #0]
 80265f6:	4b8f      	ldr	r3, [pc, #572]	@ (8026834 <UART_SetConfig+0x2cc>)
 80265f8:	429a      	cmp	r2, r3
 80265fa:	d005      	beq.n	8026608 <UART_SetConfig+0xa0>
 80265fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026600:	681a      	ldr	r2, [r3, #0]
 8026602:	4b8d      	ldr	r3, [pc, #564]	@ (8026838 <UART_SetConfig+0x2d0>)
 8026604:	429a      	cmp	r2, r3
 8026606:	d104      	bne.n	8026612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8026608:	f7fd ff90 	bl	802452c <HAL_RCC_GetPCLK2Freq>
 802660c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8026610:	e003      	b.n	802661a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8026612:	f7fd ff77 	bl	8024504 <HAL_RCC_GetPCLK1Freq>
 8026616:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802661e:	69db      	ldr	r3, [r3, #28]
 8026620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8026624:	f040 810c 	bne.w	8026840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8026628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802662c:	2200      	movs	r2, #0
 802662e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8026632:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8026636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 802663a:	4622      	mov	r2, r4
 802663c:	462b      	mov	r3, r5
 802663e:	1891      	adds	r1, r2, r2
 8026640:	65b9      	str	r1, [r7, #88]	@ 0x58
 8026642:	415b      	adcs	r3, r3
 8026644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8026646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802664a:	4621      	mov	r1, r4
 802664c:	eb12 0801 	adds.w	r8, r2, r1
 8026650:	4629      	mov	r1, r5
 8026652:	eb43 0901 	adc.w	r9, r3, r1
 8026656:	f04f 0200 	mov.w	r2, #0
 802665a:	f04f 0300 	mov.w	r3, #0
 802665e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8026662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8026666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802666a:	4690      	mov	r8, r2
 802666c:	4699      	mov	r9, r3
 802666e:	4623      	mov	r3, r4
 8026670:	eb18 0303 	adds.w	r3, r8, r3
 8026674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8026678:	462b      	mov	r3, r5
 802667a:	eb49 0303 	adc.w	r3, r9, r3
 802667e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8026682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026686:	685b      	ldr	r3, [r3, #4]
 8026688:	2200      	movs	r2, #0
 802668a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 802668e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8026692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8026696:	460b      	mov	r3, r1
 8026698:	18db      	adds	r3, r3, r3
 802669a:	653b      	str	r3, [r7, #80]	@ 0x50
 802669c:	4613      	mov	r3, r2
 802669e:	eb42 0303 	adc.w	r3, r2, r3
 80266a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80266a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80266a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80266ac:	f7fa fb0c 	bl	8020cc8 <__aeabi_uldivmod>
 80266b0:	4602      	mov	r2, r0
 80266b2:	460b      	mov	r3, r1
 80266b4:	4b61      	ldr	r3, [pc, #388]	@ (802683c <UART_SetConfig+0x2d4>)
 80266b6:	fba3 2302 	umull	r2, r3, r3, r2
 80266ba:	095b      	lsrs	r3, r3, #5
 80266bc:	011c      	lsls	r4, r3, #4
 80266be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80266c2:	2200      	movs	r2, #0
 80266c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80266c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80266cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80266d0:	4642      	mov	r2, r8
 80266d2:	464b      	mov	r3, r9
 80266d4:	1891      	adds	r1, r2, r2
 80266d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80266d8:	415b      	adcs	r3, r3
 80266da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80266dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80266e0:	4641      	mov	r1, r8
 80266e2:	eb12 0a01 	adds.w	sl, r2, r1
 80266e6:	4649      	mov	r1, r9
 80266e8:	eb43 0b01 	adc.w	fp, r3, r1
 80266ec:	f04f 0200 	mov.w	r2, #0
 80266f0:	f04f 0300 	mov.w	r3, #0
 80266f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80266f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80266fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8026700:	4692      	mov	sl, r2
 8026702:	469b      	mov	fp, r3
 8026704:	4643      	mov	r3, r8
 8026706:	eb1a 0303 	adds.w	r3, sl, r3
 802670a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 802670e:	464b      	mov	r3, r9
 8026710:	eb4b 0303 	adc.w	r3, fp, r3
 8026714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8026718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802671c:	685b      	ldr	r3, [r3, #4]
 802671e:	2200      	movs	r2, #0
 8026720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8026724:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8026728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 802672c:	460b      	mov	r3, r1
 802672e:	18db      	adds	r3, r3, r3
 8026730:	643b      	str	r3, [r7, #64]	@ 0x40
 8026732:	4613      	mov	r3, r2
 8026734:	eb42 0303 	adc.w	r3, r2, r3
 8026738:	647b      	str	r3, [r7, #68]	@ 0x44
 802673a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 802673e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8026742:	f7fa fac1 	bl	8020cc8 <__aeabi_uldivmod>
 8026746:	4602      	mov	r2, r0
 8026748:	460b      	mov	r3, r1
 802674a:	4611      	mov	r1, r2
 802674c:	4b3b      	ldr	r3, [pc, #236]	@ (802683c <UART_SetConfig+0x2d4>)
 802674e:	fba3 2301 	umull	r2, r3, r3, r1
 8026752:	095b      	lsrs	r3, r3, #5
 8026754:	2264      	movs	r2, #100	@ 0x64
 8026756:	fb02 f303 	mul.w	r3, r2, r3
 802675a:	1acb      	subs	r3, r1, r3
 802675c:	00db      	lsls	r3, r3, #3
 802675e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8026762:	4b36      	ldr	r3, [pc, #216]	@ (802683c <UART_SetConfig+0x2d4>)
 8026764:	fba3 2302 	umull	r2, r3, r3, r2
 8026768:	095b      	lsrs	r3, r3, #5
 802676a:	005b      	lsls	r3, r3, #1
 802676c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8026770:	441c      	add	r4, r3
 8026772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8026776:	2200      	movs	r2, #0
 8026778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802677c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8026780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8026784:	4642      	mov	r2, r8
 8026786:	464b      	mov	r3, r9
 8026788:	1891      	adds	r1, r2, r2
 802678a:	63b9      	str	r1, [r7, #56]	@ 0x38
 802678c:	415b      	adcs	r3, r3
 802678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8026790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8026794:	4641      	mov	r1, r8
 8026796:	1851      	adds	r1, r2, r1
 8026798:	6339      	str	r1, [r7, #48]	@ 0x30
 802679a:	4649      	mov	r1, r9
 802679c:	414b      	adcs	r3, r1
 802679e:	637b      	str	r3, [r7, #52]	@ 0x34
 80267a0:	f04f 0200 	mov.w	r2, #0
 80267a4:	f04f 0300 	mov.w	r3, #0
 80267a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80267ac:	4659      	mov	r1, fp
 80267ae:	00cb      	lsls	r3, r1, #3
 80267b0:	4651      	mov	r1, sl
 80267b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80267b6:	4651      	mov	r1, sl
 80267b8:	00ca      	lsls	r2, r1, #3
 80267ba:	4610      	mov	r0, r2
 80267bc:	4619      	mov	r1, r3
 80267be:	4603      	mov	r3, r0
 80267c0:	4642      	mov	r2, r8
 80267c2:	189b      	adds	r3, r3, r2
 80267c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80267c8:	464b      	mov	r3, r9
 80267ca:	460a      	mov	r2, r1
 80267cc:	eb42 0303 	adc.w	r3, r2, r3
 80267d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80267d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80267d8:	685b      	ldr	r3, [r3, #4]
 80267da:	2200      	movs	r2, #0
 80267dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80267e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80267e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80267e8:	460b      	mov	r3, r1
 80267ea:	18db      	adds	r3, r3, r3
 80267ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80267ee:	4613      	mov	r3, r2
 80267f0:	eb42 0303 	adc.w	r3, r2, r3
 80267f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80267f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80267fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80267fe:	f7fa fa63 	bl	8020cc8 <__aeabi_uldivmod>
 8026802:	4602      	mov	r2, r0
 8026804:	460b      	mov	r3, r1
 8026806:	4b0d      	ldr	r3, [pc, #52]	@ (802683c <UART_SetConfig+0x2d4>)
 8026808:	fba3 1302 	umull	r1, r3, r3, r2
 802680c:	095b      	lsrs	r3, r3, #5
 802680e:	2164      	movs	r1, #100	@ 0x64
 8026810:	fb01 f303 	mul.w	r3, r1, r3
 8026814:	1ad3      	subs	r3, r2, r3
 8026816:	00db      	lsls	r3, r3, #3
 8026818:	3332      	adds	r3, #50	@ 0x32
 802681a:	4a08      	ldr	r2, [pc, #32]	@ (802683c <UART_SetConfig+0x2d4>)
 802681c:	fba2 2303 	umull	r2, r3, r2, r3
 8026820:	095b      	lsrs	r3, r3, #5
 8026822:	f003 0207 	and.w	r2, r3, #7
 8026826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802682a:	681b      	ldr	r3, [r3, #0]
 802682c:	4422      	add	r2, r4
 802682e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8026830:	e106      	b.n	8026a40 <UART_SetConfig+0x4d8>
 8026832:	bf00      	nop
 8026834:	40011000 	.word	0x40011000
 8026838:	40011400 	.word	0x40011400
 802683c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8026840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8026844:	2200      	movs	r2, #0
 8026846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802684a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 802684e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8026852:	4642      	mov	r2, r8
 8026854:	464b      	mov	r3, r9
 8026856:	1891      	adds	r1, r2, r2
 8026858:	6239      	str	r1, [r7, #32]
 802685a:	415b      	adcs	r3, r3
 802685c:	627b      	str	r3, [r7, #36]	@ 0x24
 802685e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8026862:	4641      	mov	r1, r8
 8026864:	1854      	adds	r4, r2, r1
 8026866:	4649      	mov	r1, r9
 8026868:	eb43 0501 	adc.w	r5, r3, r1
 802686c:	f04f 0200 	mov.w	r2, #0
 8026870:	f04f 0300 	mov.w	r3, #0
 8026874:	00eb      	lsls	r3, r5, #3
 8026876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802687a:	00e2      	lsls	r2, r4, #3
 802687c:	4614      	mov	r4, r2
 802687e:	461d      	mov	r5, r3
 8026880:	4643      	mov	r3, r8
 8026882:	18e3      	adds	r3, r4, r3
 8026884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8026888:	464b      	mov	r3, r9
 802688a:	eb45 0303 	adc.w	r3, r5, r3
 802688e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8026892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026896:	685b      	ldr	r3, [r3, #4]
 8026898:	2200      	movs	r2, #0
 802689a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802689e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80268a2:	f04f 0200 	mov.w	r2, #0
 80268a6:	f04f 0300 	mov.w	r3, #0
 80268aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80268ae:	4629      	mov	r1, r5
 80268b0:	008b      	lsls	r3, r1, #2
 80268b2:	4621      	mov	r1, r4
 80268b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80268b8:	4621      	mov	r1, r4
 80268ba:	008a      	lsls	r2, r1, #2
 80268bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80268c0:	f7fa fa02 	bl	8020cc8 <__aeabi_uldivmod>
 80268c4:	4602      	mov	r2, r0
 80268c6:	460b      	mov	r3, r1
 80268c8:	4b60      	ldr	r3, [pc, #384]	@ (8026a4c <UART_SetConfig+0x4e4>)
 80268ca:	fba3 2302 	umull	r2, r3, r3, r2
 80268ce:	095b      	lsrs	r3, r3, #5
 80268d0:	011c      	lsls	r4, r3, #4
 80268d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80268d6:	2200      	movs	r2, #0
 80268d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80268dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80268e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80268e4:	4642      	mov	r2, r8
 80268e6:	464b      	mov	r3, r9
 80268e8:	1891      	adds	r1, r2, r2
 80268ea:	61b9      	str	r1, [r7, #24]
 80268ec:	415b      	adcs	r3, r3
 80268ee:	61fb      	str	r3, [r7, #28]
 80268f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80268f4:	4641      	mov	r1, r8
 80268f6:	1851      	adds	r1, r2, r1
 80268f8:	6139      	str	r1, [r7, #16]
 80268fa:	4649      	mov	r1, r9
 80268fc:	414b      	adcs	r3, r1
 80268fe:	617b      	str	r3, [r7, #20]
 8026900:	f04f 0200 	mov.w	r2, #0
 8026904:	f04f 0300 	mov.w	r3, #0
 8026908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802690c:	4659      	mov	r1, fp
 802690e:	00cb      	lsls	r3, r1, #3
 8026910:	4651      	mov	r1, sl
 8026912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8026916:	4651      	mov	r1, sl
 8026918:	00ca      	lsls	r2, r1, #3
 802691a:	4610      	mov	r0, r2
 802691c:	4619      	mov	r1, r3
 802691e:	4603      	mov	r3, r0
 8026920:	4642      	mov	r2, r8
 8026922:	189b      	adds	r3, r3, r2
 8026924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8026928:	464b      	mov	r3, r9
 802692a:	460a      	mov	r2, r1
 802692c:	eb42 0303 	adc.w	r3, r2, r3
 8026930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026938:	685b      	ldr	r3, [r3, #4]
 802693a:	2200      	movs	r2, #0
 802693c:	67bb      	str	r3, [r7, #120]	@ 0x78
 802693e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8026940:	f04f 0200 	mov.w	r2, #0
 8026944:	f04f 0300 	mov.w	r3, #0
 8026948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 802694c:	4649      	mov	r1, r9
 802694e:	008b      	lsls	r3, r1, #2
 8026950:	4641      	mov	r1, r8
 8026952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8026956:	4641      	mov	r1, r8
 8026958:	008a      	lsls	r2, r1, #2
 802695a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802695e:	f7fa f9b3 	bl	8020cc8 <__aeabi_uldivmod>
 8026962:	4602      	mov	r2, r0
 8026964:	460b      	mov	r3, r1
 8026966:	4611      	mov	r1, r2
 8026968:	4b38      	ldr	r3, [pc, #224]	@ (8026a4c <UART_SetConfig+0x4e4>)
 802696a:	fba3 2301 	umull	r2, r3, r3, r1
 802696e:	095b      	lsrs	r3, r3, #5
 8026970:	2264      	movs	r2, #100	@ 0x64
 8026972:	fb02 f303 	mul.w	r3, r2, r3
 8026976:	1acb      	subs	r3, r1, r3
 8026978:	011b      	lsls	r3, r3, #4
 802697a:	3332      	adds	r3, #50	@ 0x32
 802697c:	4a33      	ldr	r2, [pc, #204]	@ (8026a4c <UART_SetConfig+0x4e4>)
 802697e:	fba2 2303 	umull	r2, r3, r2, r3
 8026982:	095b      	lsrs	r3, r3, #5
 8026984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8026988:	441c      	add	r4, r3
 802698a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 802698e:	2200      	movs	r2, #0
 8026990:	673b      	str	r3, [r7, #112]	@ 0x70
 8026992:	677a      	str	r2, [r7, #116]	@ 0x74
 8026994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8026998:	4642      	mov	r2, r8
 802699a:	464b      	mov	r3, r9
 802699c:	1891      	adds	r1, r2, r2
 802699e:	60b9      	str	r1, [r7, #8]
 80269a0:	415b      	adcs	r3, r3
 80269a2:	60fb      	str	r3, [r7, #12]
 80269a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80269a8:	4641      	mov	r1, r8
 80269aa:	1851      	adds	r1, r2, r1
 80269ac:	6039      	str	r1, [r7, #0]
 80269ae:	4649      	mov	r1, r9
 80269b0:	414b      	adcs	r3, r1
 80269b2:	607b      	str	r3, [r7, #4]
 80269b4:	f04f 0200 	mov.w	r2, #0
 80269b8:	f04f 0300 	mov.w	r3, #0
 80269bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80269c0:	4659      	mov	r1, fp
 80269c2:	00cb      	lsls	r3, r1, #3
 80269c4:	4651      	mov	r1, sl
 80269c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80269ca:	4651      	mov	r1, sl
 80269cc:	00ca      	lsls	r2, r1, #3
 80269ce:	4610      	mov	r0, r2
 80269d0:	4619      	mov	r1, r3
 80269d2:	4603      	mov	r3, r0
 80269d4:	4642      	mov	r2, r8
 80269d6:	189b      	adds	r3, r3, r2
 80269d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80269da:	464b      	mov	r3, r9
 80269dc:	460a      	mov	r2, r1
 80269de:	eb42 0303 	adc.w	r3, r2, r3
 80269e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80269e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80269e8:	685b      	ldr	r3, [r3, #4]
 80269ea:	2200      	movs	r2, #0
 80269ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80269ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80269f0:	f04f 0200 	mov.w	r2, #0
 80269f4:	f04f 0300 	mov.w	r3, #0
 80269f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80269fc:	4649      	mov	r1, r9
 80269fe:	008b      	lsls	r3, r1, #2
 8026a00:	4641      	mov	r1, r8
 8026a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8026a06:	4641      	mov	r1, r8
 8026a08:	008a      	lsls	r2, r1, #2
 8026a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8026a0e:	f7fa f95b 	bl	8020cc8 <__aeabi_uldivmod>
 8026a12:	4602      	mov	r2, r0
 8026a14:	460b      	mov	r3, r1
 8026a16:	4b0d      	ldr	r3, [pc, #52]	@ (8026a4c <UART_SetConfig+0x4e4>)
 8026a18:	fba3 1302 	umull	r1, r3, r3, r2
 8026a1c:	095b      	lsrs	r3, r3, #5
 8026a1e:	2164      	movs	r1, #100	@ 0x64
 8026a20:	fb01 f303 	mul.w	r3, r1, r3
 8026a24:	1ad3      	subs	r3, r2, r3
 8026a26:	011b      	lsls	r3, r3, #4
 8026a28:	3332      	adds	r3, #50	@ 0x32
 8026a2a:	4a08      	ldr	r2, [pc, #32]	@ (8026a4c <UART_SetConfig+0x4e4>)
 8026a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8026a30:	095b      	lsrs	r3, r3, #5
 8026a32:	f003 020f 	and.w	r2, r3, #15
 8026a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8026a3a:	681b      	ldr	r3, [r3, #0]
 8026a3c:	4422      	add	r2, r4
 8026a3e:	609a      	str	r2, [r3, #8]
}
 8026a40:	bf00      	nop
 8026a42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8026a46:	46bd      	mov	sp, r7
 8026a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8026a4c:	51eb851f 	.word	0x51eb851f

08026a50 <esp32_init>:
 *          Otherwise, an error is returned.
 *
 * @param   None
 * @retval  ESP32_OK on success, ESP32_ERROR on failure.
 */
esp32_status_t esp32_init(void) {
 8026a50:	b580      	push	{r7, lr}
 8026a52:	b082      	sub	sp, #8
 8026a54:	af00      	add	r7, sp, #0
  esp32_status_t ret = ESP32_OK;
 8026a56:	2300      	movs	r3, #0
 8026a58:	71fb      	strb	r3, [r7, #7]

  /* Configuration the IO low layer */
  if ( esp32_io_init() < 0 ) {
 8026a5a:	f000 fa31 	bl	8026ec0 <esp32_io_init>
 8026a5e:	4603      	mov	r3, r0
 8026a60:	2b00      	cmp	r3, #0
 8026a62:	da01      	bge.n	8026a68 <esp32_init+0x18>
    return ESP32_ERROR;
 8026a64:	2301      	movs	r3, #1
 8026a66:	e000      	b.n	8026a6a <esp32_init+0x1a>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
                    (uint8_t *)AT_OK_STRING);
#endif
  return ret;
 8026a68:	79fb      	ldrb	r3, [r7, #7]
}
 8026a6a:	4618      	mov	r0, r3
 8026a6c:	3708      	adds	r7, #8
 8026a6e:	46bd      	mov	sp, r7
 8026a70:	bd80      	pop	{r7, pc}
	...

08026a74 <esp32_mqtt_subscribe>:
 * @brief  Subscribe to an MQTT topic.
 * @param  topic: MQTT topic to subscribe to (e.g., "topic/esp32at").
 * @param  qos: Quality of Service level (typically 1).
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
esp32_status_t esp32_mqtt_subscribe(const mqtt_subscribe_t *sub_args) {
 8026a74:	b580      	push	{r7, lr}
 8026a76:	b086      	sub	sp, #24
 8026a78:	af02      	add	r7, sp, #8
 8026a7a:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  /* Construct the MQTTSUB command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 8026a7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026a80:	2100      	movs	r1, #0
 8026a82:	480f      	ldr	r0, [pc, #60]	@ (8026ac0 <esp32_mqtt_subscribe+0x4c>)
 8026a84:	f004 ffb8 	bl	802b9f8 <memset>
  sprintf((char *)at_cmd, "AT+MQTTSUB=0,\"%s\",%u%s",
          sub_args->p_topic_filter, sub_args->qos, AT_CMD_TERMINATOR);
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	681a      	ldr	r2, [r3, #0]
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	7a1b      	ldrb	r3, [r3, #8]
  sprintf((char *)at_cmd, "AT+MQTTSUB=0,\"%s\",%u%s",
 8026a90:	4619      	mov	r1, r3
 8026a92:	4b0c      	ldr	r3, [pc, #48]	@ (8026ac4 <esp32_mqtt_subscribe+0x50>)
 8026a94:	9300      	str	r3, [sp, #0]
 8026a96:	460b      	mov	r3, r1
 8026a98:	490b      	ldr	r1, [pc, #44]	@ (8026ac8 <esp32_mqtt_subscribe+0x54>)
 8026a9a:	4809      	ldr	r0, [pc, #36]	@ (8026ac0 <esp32_mqtt_subscribe+0x4c>)
 8026a9c:	f004 fe98 	bl	802b7d0 <siprintf>

  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 8026aa0:	4807      	ldr	r0, [pc, #28]	@ (8026ac0 <esp32_mqtt_subscribe+0x4c>)
 8026aa2:	f7f9 fc05 	bl	80202b0 <strlen>
 8026aa6:	4603      	mov	r3, r0
 8026aa8:	4a08      	ldr	r2, [pc, #32]	@ (8026acc <esp32_mqtt_subscribe+0x58>)
 8026aaa:	4619      	mov	r1, r3
 8026aac:	4804      	ldr	r0, [pc, #16]	@ (8026ac0 <esp32_mqtt_subscribe+0x4c>)
 8026aae:	f000 f9bf 	bl	8026e30 <run_at_cmd>
 8026ab2:	4603      	mov	r3, r0
 8026ab4:	73fb      	strb	r3, [r7, #15]
                   (uint8_t *)AT_OK_STRING);

  return ret;
 8026ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8026ab8:	4618      	mov	r0, r3
 8026aba:	3710      	adds	r7, #16
 8026abc:	46bd      	mov	sp, r7
 8026abe:	bd80      	pop	{r7, pc}
 8026ac0:	200005e0 	.word	0x200005e0
 8026ac4:	0802eddc 	.word	0x0802eddc
 8026ac8:	0802ef74 	.word	0x0802ef74
 8026acc:	0802edec 	.word	0x0802edec

08026ad0 <esp32_mqtt_publish>:
 * sending the actual payload. If a response is expected, it processes it.
 *
 * @param  pub_args  Pointer to mqtt_receive_t containing topic, payload, QoS, etc.
 * @retval ESP32_OK on success, ESP32_ERROR on failure.
 */
esp32_status_t esp32_mqtt_publish(const mqtt_publish_t *pub_args) {
 8026ad0:	b590      	push	{r4, r7, lr}
 8026ad2:	b089      	sub	sp, #36	@ 0x24
 8026ad4:	af04      	add	r7, sp, #16
 8026ad6:	6078      	str	r0, [r7, #4]
  assert(pub_args && pub_args->p_topic && pub_args->p_payload);
 8026ad8:	687b      	ldr	r3, [r7, #4]
 8026ada:	2b00      	cmp	r3, #0
 8026adc:	d007      	beq.n	8026aee <esp32_mqtt_publish+0x1e>
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	681b      	ldr	r3, [r3, #0]
 8026ae2:	2b00      	cmp	r3, #0
 8026ae4:	d003      	beq.n	8026aee <esp32_mqtt_publish+0x1e>
 8026ae6:	687b      	ldr	r3, [r7, #4]
 8026ae8:	689b      	ldr	r3, [r3, #8]
 8026aea:	2b00      	cmp	r3, #0
 8026aec:	d106      	bne.n	8026afc <esp32_mqtt_publish+0x2c>
 8026aee:	4b20      	ldr	r3, [pc, #128]	@ (8026b70 <esp32_mqtt_publish+0xa0>)
 8026af0:	4a20      	ldr	r2, [pc, #128]	@ (8026b74 <esp32_mqtt_publish+0xa4>)
 8026af2:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8026af6:	4820      	ldr	r0, [pc, #128]	@ (8026b78 <esp32_mqtt_publish+0xa8>)
 8026af8:	f003 fb40 	bl	802a17c <__assert_func>

  esp32_status_t ret = ESP32_ERROR;
 8026afc:	2301      	movs	r3, #1
 8026afe:	73fb      	strb	r3, [r7, #15]

  /* Construct the MQTT PUBLISH command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 8026b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026b04:	2100      	movs	r1, #0
 8026b06:	481d      	ldr	r0, [pc, #116]	@ (8026b7c <esp32_mqtt_publish+0xac>)
 8026b08:	f004 ff76 	bl	802b9f8 <memset>
  sprintf((char *)at_cmd, "AT+MQTTPUBRAW=0,\"%s\",%u,%u,%u%s",
      pub_args->p_topic, pub_args->payload_length, pub_args->qos, pub_args->retain, AT_CMD_TERMINATOR);
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	681a      	ldr	r2, [r3, #0]
 8026b10:	687b      	ldr	r3, [r7, #4]
 8026b12:	68d9      	ldr	r1, [r3, #12]
 8026b14:	687b      	ldr	r3, [r7, #4]
 8026b16:	7c1b      	ldrb	r3, [r3, #16]
  sprintf((char *)at_cmd, "AT+MQTTPUBRAW=0,\"%s\",%u,%u,%u%s",
 8026b18:	4618      	mov	r0, r3
      pub_args->p_topic, pub_args->payload_length, pub_args->qos, pub_args->retain, AT_CMD_TERMINATOR);
 8026b1a:	687b      	ldr	r3, [r7, #4]
 8026b1c:	7c5b      	ldrb	r3, [r3, #17]
  sprintf((char *)at_cmd, "AT+MQTTPUBRAW=0,\"%s\",%u,%u,%u%s",
 8026b1e:	461c      	mov	r4, r3
 8026b20:	4b17      	ldr	r3, [pc, #92]	@ (8026b80 <esp32_mqtt_publish+0xb0>)
 8026b22:	9302      	str	r3, [sp, #8]
 8026b24:	9401      	str	r4, [sp, #4]
 8026b26:	9000      	str	r0, [sp, #0]
 8026b28:	460b      	mov	r3, r1
 8026b2a:	4916      	ldr	r1, [pc, #88]	@ (8026b84 <esp32_mqtt_publish+0xb4>)
 8026b2c:	4813      	ldr	r0, [pc, #76]	@ (8026b7c <esp32_mqtt_publish+0xac>)
 8026b2e:	f004 fe4f 	bl	802b7d0 <siprintf>

  /* The MQTT RAW publish command doesn't have a return command
         until the data is actually sent. Thus we check here whether
         we got the '>' prompt or not. */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_SEND_PROMPT_STRING);
 8026b32:	4812      	ldr	r0, [pc, #72]	@ (8026b7c <esp32_mqtt_publish+0xac>)
 8026b34:	f7f9 fbbc 	bl	80202b0 <strlen>
 8026b38:	4603      	mov	r3, r0
 8026b3a:	4a13      	ldr	r2, [pc, #76]	@ (8026b88 <esp32_mqtt_publish+0xb8>)
 8026b3c:	4619      	mov	r1, r3
 8026b3e:	480f      	ldr	r0, [pc, #60]	@ (8026b7c <esp32_mqtt_publish+0xac>)
 8026b40:	f000 f976 	bl	8026e30 <run_at_cmd>
 8026b44:	4603      	mov	r3, r0
 8026b46:	73fb      	strb	r3, [r7, #15]

  if (ret != ESP32_OK) {
 8026b48:	7bfb      	ldrb	r3, [r7, #15]
 8026b4a:	2b00      	cmp	r3, #0
 8026b4c:	d001      	beq.n	8026b52 <esp32_mqtt_publish+0x82>
    return ret;
 8026b4e:	7bfb      	ldrb	r3, [r7, #15]
 8026b50:	e00a      	b.n	8026b68 <esp32_mqtt_publish+0x98>
  }

  /* Send actual payload and check response */
  ret = run_at_cmd((uint8_t *)pub_args->p_payload, pub_args->payload_length, (uint8_t *)AT_OK_STRING);
 8026b52:	687b      	ldr	r3, [r7, #4]
 8026b54:	6898      	ldr	r0, [r3, #8]
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	68db      	ldr	r3, [r3, #12]
 8026b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8026b8c <esp32_mqtt_publish+0xbc>)
 8026b5c:	4619      	mov	r1, r3
 8026b5e:	f000 f967 	bl	8026e30 <run_at_cmd>
 8026b62:	4603      	mov	r3, r0
 8026b64:	73fb      	strb	r3, [r7, #15]

  return ret;
 8026b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8026b68:	4618      	mov	r0, r3
 8026b6a:	3714      	adds	r7, #20
 8026b6c:	46bd      	mov	sp, r7
 8026b6e:	bd90      	pop	{r4, r7, pc}
 8026b70:	0802efa4 	.word	0x0802efa4
 8026b74:	0802f228 	.word	0x0802f228
 8026b78:	0802efdc 	.word	0x0802efdc
 8026b7c:	200005e0 	.word	0x200005e0
 8026b80:	0802eddc 	.word	0x0802eddc
 8026b84:	0802eff8 	.word	0x0802eff8
 8026b88:	0802f018 	.word	0x0802f018
 8026b8c:	0802edec 	.word	0x0802edec

08026b90 <esp32_recv_mqtt_data>:
 * @param  p_data the buffer to fill will the received data.
 * @param  length the maximum data size to receive.
 * @param ret_length the actual data received.
 * @retval returns ESP32_OK on success and ESP32_ERROR otherwise.
 */
esp32_status_t esp32_recv_mqtt_data(mqtt_receive_t *p_receive_info) {
 8026b90:	b580      	push	{r7, lr}
 8026b92:	b084      	sub	sp, #16
 8026b94:	af00      	add	r7, sp, #0
 8026b96:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  /* Validate input parameter */
  assert(p_receive_info != NULL);
 8026b98:	687b      	ldr	r3, [r7, #4]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	d106      	bne.n	8026bac <esp32_recv_mqtt_data+0x1c>
 8026b9e:	4b13      	ldr	r3, [pc, #76]	@ (8026bec <esp32_recv_mqtt_data+0x5c>)
 8026ba0:	4a13      	ldr	r2, [pc, #76]	@ (8026bf0 <esp32_recv_mqtt_data+0x60>)
 8026ba2:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8026ba6:	4813      	ldr	r0, [pc, #76]	@ (8026bf4 <esp32_recv_mqtt_data+0x64>)
 8026ba8:	f003 fae8 	bl	802a17c <__assert_func>
  assert(p_receive_info->p_topic != NULL);
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	d106      	bne.n	8026bc2 <esp32_recv_mqtt_data+0x32>
 8026bb4:	4b10      	ldr	r3, [pc, #64]	@ (8026bf8 <esp32_recv_mqtt_data+0x68>)
 8026bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8026bf0 <esp32_recv_mqtt_data+0x60>)
 8026bb8:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8026bbc:	480d      	ldr	r0, [pc, #52]	@ (8026bf4 <esp32_recv_mqtt_data+0x64>)
 8026bbe:	f003 fadd 	bl	802a17c <__assert_func>
  assert(p_receive_info->p_payload != NULL);
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	689b      	ldr	r3, [r3, #8]
 8026bc6:	2b00      	cmp	r3, #0
 8026bc8:	d106      	bne.n	8026bd8 <esp32_recv_mqtt_data+0x48>
 8026bca:	4b0c      	ldr	r3, [pc, #48]	@ (8026bfc <esp32_recv_mqtt_data+0x6c>)
 8026bcc:	4a08      	ldr	r2, [pc, #32]	@ (8026bf0 <esp32_recv_mqtt_data+0x60>)
 8026bce:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8026bd2:	4808      	ldr	r0, [pc, #32]	@ (8026bf4 <esp32_recv_mqtt_data+0x64>)
 8026bd4:	f003 fad2 	bl	802a17c <__assert_func>

  /* Receive the data from the host */
  ret = recv_mqtt_data(p_receive_info);
 8026bd8:	6878      	ldr	r0, [r7, #4]
 8026bda:	f000 f811 	bl	8026c00 <recv_mqtt_data>
 8026bde:	4603      	mov	r3, r0
 8026be0:	73fb      	strb	r3, [r7, #15]

  return ret;
 8026be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8026be4:	4618      	mov	r0, r3
 8026be6:	3710      	adds	r7, #16
 8026be8:	46bd      	mov	sp, r7
 8026bea:	bd80      	pop	{r7, pc}
 8026bec:	0802f020 	.word	0x0802f020
 8026bf0:	0802f23c 	.word	0x0802f23c
 8026bf4:	0802efdc 	.word	0x0802efdc
 8026bf8:	0802f038 	.word	0x0802f038
 8026bfc:	0802f058 	.word	0x0802f058

08026c00 <recv_mqtt_data>:
/**
 * @brief Receives MQTT publish message from the WiFi module.
 * @param p_receive_info Pointer to the MQTT receive info structure.
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
static esp32_status_t recv_mqtt_data(mqtt_receive_t *p_receive_info) {
 8026c00:	b580      	push	{r7, lr}
 8026c02:	b088      	sub	sp, #32
 8026c04:	af00      	add	r7, sp, #0
 8026c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_char;
  uint32_t idx = 0;
 8026c08:	2300      	movs	r3, #0
 8026c0a:	61fb      	str	r3, [r7, #28]
  char length_string[10] = {0};
 8026c0c:	f107 0308 	add.w	r3, r7, #8
 8026c10:	2200      	movs	r2, #0
 8026c12:	601a      	str	r2, [r3, #0]
 8026c14:	605a      	str	r2, [r3, #4]
 8026c16:	811a      	strh	r2, [r3, #8]
  uint32_t length_value = 0;
 8026c18:	2300      	movs	r3, #0
 8026c1a:	61bb      	str	r3, [r7, #24]
  uint8_t i = 0;
 8026c1c:	2300      	movs	r3, #0
 8026c1e:	75fb      	strb	r3, [r7, #23]
  esp32_boolean new_chunk = ESP32_FALSE;
 8026c20:	2300      	movs	r3, #0
 8026c22:	75bb      	strb	r3, [r7, #22]

  /* Validate input parameter */
  assert(p_receive_info != NULL);
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d106      	bne.n	8026c38 <recv_mqtt_data+0x38>
 8026c2a:	4b79      	ldr	r3, [pc, #484]	@ (8026e10 <recv_mqtt_data+0x210>)
 8026c2c:	4a79      	ldr	r2, [pc, #484]	@ (8026e14 <recv_mqtt_data+0x214>)
 8026c2e:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8026c32:	4879      	ldr	r0, [pc, #484]	@ (8026e18 <recv_mqtt_data+0x218>)
 8026c34:	f003 faa2 	bl	802a17c <__assert_func>
  assert(p_receive_info->p_topic != NULL);
 8026c38:	687b      	ldr	r3, [r7, #4]
 8026c3a:	681b      	ldr	r3, [r3, #0]
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	d106      	bne.n	8026c4e <recv_mqtt_data+0x4e>
 8026c40:	4b76      	ldr	r3, [pc, #472]	@ (8026e1c <recv_mqtt_data+0x21c>)
 8026c42:	4a74      	ldr	r2, [pc, #464]	@ (8026e14 <recv_mqtt_data+0x214>)
 8026c44:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8026c48:	4873      	ldr	r0, [pc, #460]	@ (8026e18 <recv_mqtt_data+0x218>)
 8026c4a:	f003 fa97 	bl	802a17c <__assert_func>
  assert(p_receive_info->p_payload != NULL);
 8026c4e:	687b      	ldr	r3, [r7, #4]
 8026c50:	689b      	ldr	r3, [r3, #8]
 8026c52:	2b00      	cmp	r3, #0
 8026c54:	d106      	bne.n	8026c64 <recv_mqtt_data+0x64>
 8026c56:	4b72      	ldr	r3, [pc, #456]	@ (8026e20 <recv_mqtt_data+0x220>)
 8026c58:	4a6e      	ldr	r2, [pc, #440]	@ (8026e14 <recv_mqtt_data+0x214>)
 8026c5a:	f240 11f1 	movw	r1, #497	@ 0x1f1
 8026c5e:	486e      	ldr	r0, [pc, #440]	@ (8026e18 <recv_mqtt_data+0x218>)
 8026c60:	f003 fa8c 	bl	802a17c <__assert_func>

  /* Reset temporary buffer and output structure fields */
  memset(rx_buffer, 0, MAX_BUFFER_SIZE);
 8026c64:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8026c68:	2100      	movs	r1, #0
 8026c6a:	486e      	ldr	r0, [pc, #440]	@ (8026e24 <recv_mqtt_data+0x224>)
 8026c6c:	f004 fec4 	bl	802b9f8 <memset>
  memset(p_receive_info->p_topic, 0, p_receive_info->topic_length);
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	6818      	ldr	r0, [r3, #0]
 8026c74:	687b      	ldr	r3, [r7, #4]
 8026c76:	685b      	ldr	r3, [r3, #4]
 8026c78:	461a      	mov	r2, r3
 8026c7a:	2100      	movs	r1, #0
 8026c7c:	f004 febc 	bl	802b9f8 <memset>
  memset(p_receive_info->p_payload, 0, p_receive_info->payload_length);
 8026c80:	687b      	ldr	r3, [r7, #4]
 8026c82:	6898      	ldr	r0, [r3, #8]
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	68db      	ldr	r3, [r3, #12]
 8026c88:	461a      	mov	r2, r3
 8026c8a:	2100      	movs	r1, #0
 8026c8c:	f004 feb4 	bl	802b9f8 <memset>
  p_receive_info->topic_length = 0;
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	2200      	movs	r2, #0
 8026c94:	605a      	str	r2, [r3, #4]
  p_receive_info->payload_length = 0;
 8026c96:	687b      	ldr	r3, [r7, #4]
 8026c98:	2200      	movs	r2, #0
 8026c9a:	60da      	str	r2, [r3, #12]

  while (true) {
    if (esp32_io_recv_nb(&rx_char, 1) != 0) {
 8026c9c:	f107 0315 	add.w	r3, r7, #21
 8026ca0:	2101      	movs	r1, #1
 8026ca2:	4618      	mov	r0, r3
 8026ca4:	f000 f9a0 	bl	8026fe8 <esp32_io_recv_nb>
 8026ca8:	4603      	mov	r3, r0
 8026caa:	2b00      	cmp	r3, #0
 8026cac:	d031      	beq.n	8026d12 <recv_mqtt_data+0x112>
      // If a new MQTT chunk is expected, fill the payload
      if (new_chunk == ESP32_TRUE) {
 8026cae:	7dbb      	ldrb	r3, [r7, #22]
 8026cb0:	2b01      	cmp	r3, #1
 8026cb2:	d11a      	bne.n	8026cea <recv_mqtt_data+0xea>
        if (length_value > 0) {
 8026cb4:	69bb      	ldr	r3, [r7, #24]
 8026cb6:	2b00      	cmp	r3, #0
 8026cb8:	d00d      	beq.n	8026cd6 <recv_mqtt_data+0xd6>
          p_receive_info->p_payload[p_receive_info->payload_length++] = rx_char;
 8026cba:	687b      	ldr	r3, [r7, #4]
 8026cbc:	689a      	ldr	r2, [r3, #8]
 8026cbe:	687b      	ldr	r3, [r7, #4]
 8026cc0:	68db      	ldr	r3, [r3, #12]
 8026cc2:	1c58      	adds	r0, r3, #1
 8026cc4:	6879      	ldr	r1, [r7, #4]
 8026cc6:	60c8      	str	r0, [r1, #12]
 8026cc8:	4413      	add	r3, r2
 8026cca:	7d7a      	ldrb	r2, [r7, #21]
 8026ccc:	701a      	strb	r2, [r3, #0]
          length_value--;
 8026cce:	69bb      	ldr	r3, [r7, #24]
 8026cd0:	3b01      	subs	r3, #1
 8026cd2:	61bb      	str	r3, [r7, #24]
 8026cd4:	e009      	b.n	8026cea <recv_mqtt_data+0xea>
        } else {
          // Payload complete, reset for next message
          new_chunk = ESP32_FALSE;
 8026cd6:	2300      	movs	r3, #0
 8026cd8:	75bb      	strb	r3, [r7, #22]
          memset(rx_buffer, 0, MAX_BUFFER_SIZE);
 8026cda:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8026cde:	2100      	movs	r1, #0
 8026ce0:	4850      	ldr	r0, [pc, #320]	@ (8026e24 <recv_mqtt_data+0x224>)
 8026ce2:	f004 fe89 	bl	802b9f8 <memset>
          idx = 0;
 8026ce6:	2300      	movs	r3, #0
 8026ce8:	61fb      	str	r3, [r7, #28]
        }
      }

      // Store character in receive buffer for pattern matching
      if (idx < MAX_BUFFER_SIZE) {
 8026cea:	69fb      	ldr	r3, [r7, #28]
 8026cec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8026cf0:	d20d      	bcs.n	8026d0e <recv_mqtt_data+0x10e>
        rx_buffer[idx++] = rx_char;
 8026cf2:	69fb      	ldr	r3, [r7, #28]
 8026cf4:	1c5a      	adds	r2, r3, #1
 8026cf6:	61fa      	str	r2, [r7, #28]
 8026cf8:	7d79      	ldrb	r1, [r7, #21]
 8026cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8026e24 <recv_mqtt_data+0x224>)
 8026cfc:	54d1      	strb	r1, [r2, r3]
      }
      break;
    }

    // Check for start of MQTT received message
    if ((strstr((char *)rx_buffer, "+MQTTSUBRECV:0,") != NULL) && (new_chunk == ESP32_FALSE)) {
 8026cfe:	494a      	ldr	r1, [pc, #296]	@ (8026e28 <recv_mqtt_data+0x228>)
 8026d00:	4848      	ldr	r0, [pc, #288]	@ (8026e24 <recv_mqtt_data+0x224>)
 8026d02:	f004 fe93 	bl	802ba2c <strstr>
 8026d06:	4603      	mov	r3, r0
 8026d08:	2b00      	cmp	r3, #0
 8026d0a:	d070      	beq.n	8026dee <recv_mqtt_data+0x1ee>
 8026d0c:	e009      	b.n	8026d22 <recv_mqtt_data+0x122>
        return ESP32_ERROR;
 8026d0e:	2301      	movs	r3, #1
 8026d10:	e079      	b.n	8026e06 <recv_mqtt_data+0x206>
      if (new_chunk == ESP32_TRUE && length_value != 0) {
 8026d12:	7dbb      	ldrb	r3, [r7, #22]
 8026d14:	2b01      	cmp	r3, #1
 8026d16:	d174      	bne.n	8026e02 <recv_mqtt_data+0x202>
 8026d18:	69bb      	ldr	r3, [r7, #24]
 8026d1a:	2b00      	cmp	r3, #0
 8026d1c:	d071      	beq.n	8026e02 <recv_mqtt_data+0x202>
        return ESP32_ERROR;
 8026d1e:	2301      	movs	r3, #1
 8026d20:	e071      	b.n	8026e06 <recv_mqtt_data+0x206>
    if ((strstr((char *)rx_buffer, "+MQTTSUBRECV:0,") != NULL) && (new_chunk == ESP32_FALSE)) {
 8026d22:	7dbb      	ldrb	r3, [r7, #22]
 8026d24:	2b00      	cmp	r3, #0
 8026d26:	d162      	bne.n	8026dee <recv_mqtt_data+0x1ee>
      // Read separator character (should be `"` for topic start)
      esp32_io_recv(&rx_char, 1);
 8026d28:	f107 0315 	add.w	r3, r7, #21
 8026d2c:	2101      	movs	r1, #1
 8026d2e:	4618      	mov	r0, r3
 8026d30:	f000 f906 	bl	8026f40 <esp32_io_recv>

      // Read topic name until next quote (`"`)
      p_receive_info->topic_length = 0;
 8026d34:	687b      	ldr	r3, [r7, #4]
 8026d36:	2200      	movs	r2, #0
 8026d38:	605a      	str	r2, [r3, #4]
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != '"') {
 8026d3a:	e009      	b.n	8026d50 <recv_mqtt_data+0x150>

        p_receive_info->p_topic[p_receive_info->topic_length++] = rx_char;
 8026d3c:	687b      	ldr	r3, [r7, #4]
 8026d3e:	681a      	ldr	r2, [r3, #0]
 8026d40:	687b      	ldr	r3, [r7, #4]
 8026d42:	685b      	ldr	r3, [r3, #4]
 8026d44:	1c58      	adds	r0, r3, #1
 8026d46:	6879      	ldr	r1, [r7, #4]
 8026d48:	6048      	str	r0, [r1, #4]
 8026d4a:	4413      	add	r3, r2
 8026d4c:	7d7a      	ldrb	r2, [r7, #21]
 8026d4e:	701a      	strb	r2, [r3, #0]
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != '"') {
 8026d50:	f107 0315 	add.w	r3, r7, #21
 8026d54:	2101      	movs	r1, #1
 8026d56:	4618      	mov	r0, r3
 8026d58:	f000 f946 	bl	8026fe8 <esp32_io_recv_nb>
 8026d5c:	4603      	mov	r3, r0
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	d002      	beq.n	8026d68 <recv_mqtt_data+0x168>
 8026d62:	7d7b      	ldrb	r3, [r7, #21]
 8026d64:	2b22      	cmp	r3, #34	@ 0x22
 8026d66:	d1e9      	bne.n	8026d3c <recv_mqtt_data+0x13c>
      }
      p_receive_info->p_topic[p_receive_info->topic_length] = '\0';
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	681a      	ldr	r2, [r3, #0]
 8026d6c:	687b      	ldr	r3, [r7, #4]
 8026d6e:	685b      	ldr	r3, [r3, #4]
 8026d70:	4413      	add	r3, r2
 8026d72:	2200      	movs	r2, #0
 8026d74:	701a      	strb	r2, [r3, #0]

      // Read separator character before length
      esp32_io_recv(&rx_char, 1);
 8026d76:	f107 0315 	add.w	r3, r7, #21
 8026d7a:	2101      	movs	r1, #1
 8026d7c:	4618      	mov	r0, r3
 8026d7e:	f000 f8df 	bl	8026f40 <esp32_io_recv>

      // Read payload length as string
      i = 0;
 8026d82:	2300      	movs	r3, #0
 8026d84:	75fb      	strb	r3, [r7, #23]
      memset(length_string, 0, sizeof(length_string));
 8026d86:	f107 0308 	add.w	r3, r7, #8
 8026d8a:	220a      	movs	r2, #10
 8026d8c:	2100      	movs	r1, #0
 8026d8e:	4618      	mov	r0, r3
 8026d90:	f004 fe32 	bl	802b9f8 <memset>
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != ',' &&
 8026d94:	e007      	b.n	8026da6 <recv_mqtt_data+0x1a6>
             i < sizeof(length_string) - 1) {

        length_string[i++] = rx_char;
 8026d96:	7dfb      	ldrb	r3, [r7, #23]
 8026d98:	1c5a      	adds	r2, r3, #1
 8026d9a:	75fa      	strb	r2, [r7, #23]
 8026d9c:	7d7a      	ldrb	r2, [r7, #21]
 8026d9e:	3320      	adds	r3, #32
 8026da0:	443b      	add	r3, r7
 8026da2:	f803 2c18 	strb.w	r2, [r3, #-24]
      while (esp32_io_recv_nb(&rx_char, 1) && rx_char != ',' &&
 8026da6:	f107 0315 	add.w	r3, r7, #21
 8026daa:	2101      	movs	r1, #1
 8026dac:	4618      	mov	r0, r3
 8026dae:	f000 f91b 	bl	8026fe8 <esp32_io_recv_nb>
 8026db2:	4603      	mov	r3, r0
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	d005      	beq.n	8026dc4 <recv_mqtt_data+0x1c4>
 8026db8:	7d7b      	ldrb	r3, [r7, #21]
 8026dba:	2b2c      	cmp	r3, #44	@ 0x2c
 8026dbc:	d002      	beq.n	8026dc4 <recv_mqtt_data+0x1c4>
 8026dbe:	7dfb      	ldrb	r3, [r7, #23]
 8026dc0:	2b08      	cmp	r3, #8
 8026dc2:	d9e8      	bls.n	8026d96 <recv_mqtt_data+0x196>
      }
      length_string[i] = '\0';
 8026dc4:	7dfb      	ldrb	r3, [r7, #23]
 8026dc6:	3320      	adds	r3, #32
 8026dc8:	443b      	add	r3, r7
 8026dca:	2200      	movs	r2, #0
 8026dcc:	f803 2c18 	strb.w	r2, [r3, #-24]

      // Convert length string to integer
      length_value = atoi(length_string);
 8026dd0:	f107 0308 	add.w	r3, r7, #8
 8026dd4:	4618      	mov	r0, r3
 8026dd6:	f003 f9ef 	bl	802a1b8 <atoi>
 8026dda:	4603      	mov	r3, r0
 8026ddc:	61bb      	str	r3, [r7, #24]
      if (length_value > MAX_BUFFER_SIZE) {
 8026dde:	69bb      	ldr	r3, [r7, #24]
 8026de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8026de4:	d901      	bls.n	8026dea <recv_mqtt_data+0x1ea>
        return ESP32_ERROR;
 8026de6:	2301      	movs	r3, #1
 8026de8:	e00d      	b.n	8026e06 <recv_mqtt_data+0x206>
      }

      // Now ready to read payload
      new_chunk = ESP32_TRUE;
 8026dea:	2301      	movs	r3, #1
 8026dec:	75bb      	strb	r3, [r7, #22]
    }

    // Check for any error response in the stream
    if (strstr((char *)rx_buffer, "ERROR") != NULL) {
 8026dee:	490f      	ldr	r1, [pc, #60]	@ (8026e2c <recv_mqtt_data+0x22c>)
 8026df0:	480c      	ldr	r0, [pc, #48]	@ (8026e24 <recv_mqtt_data+0x224>)
 8026df2:	f004 fe1b 	bl	802ba2c <strstr>
 8026df6:	4603      	mov	r3, r0
 8026df8:	2b00      	cmp	r3, #0
 8026dfa:	f43f af4f 	beq.w	8026c9c <recv_mqtt_data+0x9c>
      return ESP32_ERROR;
 8026dfe:	2301      	movs	r3, #1
 8026e00:	e001      	b.n	8026e06 <recv_mqtt_data+0x206>
      break;
 8026e02:	bf00      	nop

//  if (p_receive_info->payload_length >1397){// ||
//    //  p_receive_info->payload_length == 422){
//    while(1);
//  }
  return ESP32_OK;
 8026e04:	2300      	movs	r3, #0
}
 8026e06:	4618      	mov	r0, r3
 8026e08:	3720      	adds	r7, #32
 8026e0a:	46bd      	mov	sp, r7
 8026e0c:	bd80      	pop	{r7, pc}
 8026e0e:	bf00      	nop
 8026e10:	0802f020 	.word	0x0802f020
 8026e14:	0802f254 	.word	0x0802f254
 8026e18:	0802efdc 	.word	0x0802efdc
 8026e1c:	0802f038 	.word	0x0802f038
 8026e20:	0802f058 	.word	0x0802f058
 8026e24:	200006e0 	.word	0x200006e0
 8026e28:	0802f07c 	.word	0x0802f07c
 8026e2c:	0802f08c 	.word	0x0802f08c

08026e30 <run_at_cmd>:
 * @param  cmd the buffer to fill will the received data.
 * @param  length the maximum data size to receive.
 * @param  token the expected output if command runs successfully
 * @retval returns ESP32_OK on success and ESP32_ERROR otherwise.
 */
static esp32_status_t run_at_cmd(uint8_t *cmd, uint32_t length, const uint8_t *token) {
 8026e30:	b580      	push	{r7, lr}
 8026e32:	b086      	sub	sp, #24
 8026e34:	af00      	add	r7, sp, #0
 8026e36:	60f8      	str	r0, [r7, #12]
 8026e38:	60b9      	str	r1, [r7, #8]
 8026e3a:	607a      	str	r2, [r7, #4]
  uint32_t idx = 0;
 8026e3c:	2300      	movs	r3, #0
 8026e3e:	617b      	str	r3, [r7, #20]
  uint8_t rx_char;

  /* Reset the Rx buffer to make sure no previous data exist */
  memset(rx_buffer, '\0', MAX_BUFFER_SIZE);
 8026e40:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8026e44:	2100      	movs	r1, #0
 8026e46:	481c      	ldr	r0, [pc, #112]	@ (8026eb8 <run_at_cmd+0x88>)
 8026e48:	f004 fdd6 	bl	802b9f8 <memset>

  if ( esp32_io_send(cmd, length) < 0 )
 8026e4c:	68b9      	ldr	r1, [r7, #8]
 8026e4e:	68f8      	ldr	r0, [r7, #12]
 8026e50:	f000 f85c 	bl	8026f0c <esp32_io_send>
 8026e54:	4603      	mov	r3, r0
 8026e56:	2b00      	cmp	r3, #0
 8026e58:	da01      	bge.n	8026e5e <run_at_cmd+0x2e>
  /* Send the command */
  {
    return ESP32_ERROR;
 8026e5a:	2301      	movs	r3, #1
 8026e5c:	e028      	b.n	8026eb0 <run_at_cmd+0x80>
  }

  /* Wait for reception */
  while ( true ) {
    /* Wait to receive data */
    if ( esp32_io_recv(&rx_char, 1) != 0 ) {
 8026e5e:	f107 0313 	add.w	r3, r7, #19
 8026e62:	2101      	movs	r1, #1
 8026e64:	4618      	mov	r0, r3
 8026e66:	f000 f86b 	bl	8026f40 <esp32_io_recv>
 8026e6a:	4603      	mov	r3, r0
 8026e6c:	2b00      	cmp	r3, #0
 8026e6e:	d01b      	beq.n	8026ea8 <run_at_cmd+0x78>
      rx_buffer [ idx++ ] = rx_char;
 8026e70:	697b      	ldr	r3, [r7, #20]
 8026e72:	1c5a      	adds	r2, r3, #1
 8026e74:	617a      	str	r2, [r7, #20]
 8026e76:	7cf9      	ldrb	r1, [r7, #19]
 8026e78:	4a0f      	ldr	r2, [pc, #60]	@ (8026eb8 <run_at_cmd+0x88>)
 8026e7a:	54d1      	strb	r1, [r2, r3]
    } else {
      break;
    }

    /* Check that max buffer size has not been reached */
    if ( idx == MAX_BUFFER_SIZE ) {
 8026e7c:	697b      	ldr	r3, [r7, #20]
 8026e7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8026e82:	d013      	beq.n	8026eac <run_at_cmd+0x7c>
      break;
    }

    /* Extract the token */
    if ( strstr((char *)rx_buffer, (char *)token) != NULL ) {
 8026e84:	6879      	ldr	r1, [r7, #4]
 8026e86:	480c      	ldr	r0, [pc, #48]	@ (8026eb8 <run_at_cmd+0x88>)
 8026e88:	f004 fdd0 	bl	802ba2c <strstr>
 8026e8c:	4603      	mov	r3, r0
 8026e8e:	2b00      	cmp	r3, #0
 8026e90:	d001      	beq.n	8026e96 <run_at_cmd+0x66>
      return ESP32_OK;
 8026e92:	2300      	movs	r3, #0
 8026e94:	e00c      	b.n	8026eb0 <run_at_cmd+0x80>
    }

    /* Check if the message contains error code */
    if ( strstr((char *)rx_buffer, AT_ERROR_STRING) != NULL ) {
 8026e96:	4909      	ldr	r1, [pc, #36]	@ (8026ebc <run_at_cmd+0x8c>)
 8026e98:	4807      	ldr	r0, [pc, #28]	@ (8026eb8 <run_at_cmd+0x88>)
 8026e9a:	f004 fdc7 	bl	802ba2c <strstr>
 8026e9e:	4603      	mov	r3, r0
 8026ea0:	2b00      	cmp	r3, #0
 8026ea2:	d0dc      	beq.n	8026e5e <run_at_cmd+0x2e>
      return ESP32_ERROR;
 8026ea4:	2301      	movs	r3, #1
 8026ea6:	e003      	b.n	8026eb0 <run_at_cmd+0x80>
      break;
 8026ea8:	bf00      	nop
 8026eaa:	e000      	b.n	8026eae <run_at_cmd+0x7e>
      break;
 8026eac:	bf00      	nop
    }
  }

  return ESP32_ERROR;
 8026eae:	2301      	movs	r3, #1
}
 8026eb0:	4618      	mov	r0, r3
 8026eb2:	3718      	adds	r7, #24
 8026eb4:	46bd      	mov	sp, r7
 8026eb6:	bd80      	pop	{r7, pc}
 8026eb8:	200006e0 	.word	0x200006e0
 8026ebc:	0802f0b4 	.word	0x0802f0b4

08026ec0 <esp32_io_init>:

/**
 * @brief  Initialize the ESP8266 UART interface with DMA and Idle Detection.
 * @retval 0 on success, -1 otherwise.
 */
int8_t esp32_io_init(void) {
 8026ec0:	b580      	push	{r7, lr}
 8026ec2:	af00      	add	r7, sp, #0
  HAL_Delay(2000);
 8026ec4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8026ec8:	f7fb f9da 	bl	8022280 <HAL_Delay>

  wifi_rx_buffer.head = 0;
 8026ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8026f04 <esp32_io_init+0x44>)
 8026ece:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026ed2:	2200      	movs	r2, #0
 8026ed4:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
  wifi_rx_buffer.tail = 0;
 8026ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8026f04 <esp32_io_init+0x44>)
 8026eda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026ede:	2200      	movs	r2, #0
 8026ee0:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

  // Start UART in DMA mode with Idle line detection
  if ( HAL_UARTEx_ReceiveToIdle_DMA(ESP32_UART_HANDLE, (uint8_t *)wifi_rx_buffer.data,
 8026ee4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8026ee8:	4906      	ldr	r1, [pc, #24]	@ (8026f04 <esp32_io_init+0x44>)
 8026eea:	4807      	ldr	r0, [pc, #28]	@ (8026f08 <esp32_io_init+0x48>)
 8026eec:	f7fe fc5a 	bl	80257a4 <HAL_UARTEx_ReceiveToIdle_DMA>
 8026ef0:	4603      	mov	r3, r0
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	d002      	beq.n	8026efc <esp32_io_init+0x3c>
                                    RING_BUFFER_SIZE) != HAL_OK ) {
    return -1;
 8026ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8026efa:	e000      	b.n	8026efe <esp32_io_init+0x3e>
  }
  return 0;
 8026efc:	2300      	movs	r3, #0
}
 8026efe:	4618      	mov	r0, r3
 8026f00:	bd80      	pop	{r7, pc}
 8026f02:	bf00      	nop
 8026f04:	200012e0 	.word	0x200012e0
 8026f08:	20000248 	.word	0x20000248

08026f0c <esp32_io_send>:
 * @brief  Send data to the ESP8266 module over UART.
 * @param  p_data: Pointer to the data buffer to send.
 * @param  length: Length of the data buffer.
 * @retval 0 on success, -1 otherwise.
 */
int8_t esp32_io_send(uint8_t *p_data, uint32_t length) {
 8026f0c:	b580      	push	{r7, lr}
 8026f0e:	b082      	sub	sp, #8
 8026f10:	af00      	add	r7, sp, #0
 8026f12:	6078      	str	r0, [r7, #4]
 8026f14:	6039      	str	r1, [r7, #0]
  if ( HAL_UART_Transmit(ESP32_UART_HANDLE, p_data, length, DEFAULT_TIME_OUT) !=
 8026f16:	683b      	ldr	r3, [r7, #0]
 8026f18:	b29a      	uxth	r2, r3
 8026f1a:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8026f1e:	6879      	ldr	r1, [r7, #4]
 8026f20:	4806      	ldr	r0, [pc, #24]	@ (8026f3c <esp32_io_send+0x30>)
 8026f22:	f7fe fb35 	bl	8025590 <HAL_UART_Transmit>
 8026f26:	4603      	mov	r3, r0
 8026f28:	2b00      	cmp	r3, #0
 8026f2a:	d002      	beq.n	8026f32 <esp32_io_send+0x26>
       HAL_OK ) {
    return -1;
 8026f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8026f30:	e000      	b.n	8026f34 <esp32_io_send+0x28>
  }
  return 0;
 8026f32:	2300      	movs	r3, #0
}
 8026f34:	4618      	mov	r0, r3
 8026f36:	3708      	adds	r7, #8
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	bd80      	pop	{r7, pc}
 8026f3c:	20000248 	.word	0x20000248

08026f40 <esp32_io_recv>:
 * @brief  Receive data from the ESP8266 module over UART.
 * @param  buffer: Pointer to the buffer to store received data.
 * @param  length: Maximum length of the buffer.
 * @retval Number of bytes received.
 */
int32_t esp32_io_recv(uint8_t *buffer, uint32_t length) {
 8026f40:	b580      	push	{r7, lr}
 8026f42:	b084      	sub	sp, #16
 8026f44:	af00      	add	r7, sp, #0
 8026f46:	6078      	str	r0, [r7, #4]
 8026f48:	6039      	str	r1, [r7, #0]
  uint32_t read_data = 0;
 8026f4a:	2300      	movs	r3, #0
 8026f4c:	60fb      	str	r3, [r7, #12]

  while ( length-- ) {
 8026f4e:	e03e      	b.n	8026fce <esp32_io_recv+0x8e>
    uint32_t tick_start = HAL_GetTick();
 8026f50:	f7fb f98a 	bl	8022268 <HAL_GetTick>
 8026f54:	60b8      	str	r0, [r7, #8]
    do {
      if ( wifi_rx_buffer.head != wifi_rx_buffer.tail ) {
 8026f56:	4b23      	ldr	r3, [pc, #140]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026f58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026f5c:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 8026f60:	4b20      	ldr	r3, [pc, #128]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026f62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026f66:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8026f6a:	429a      	cmp	r2, r3
 8026f6c:	d024      	beq.n	8026fb8 <esp32_io_recv+0x78>
        *buffer++ = wifi_rx_buffer.data [ wifi_rx_buffer.head++ ];
 8026f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026f70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026f74:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8026f78:	1c5a      	adds	r2, r3, #1
 8026f7a:	b291      	uxth	r1, r2
 8026f7c:	4a19      	ldr	r2, [pc, #100]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026f7e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8026f82:	f8a2 1802 	strh.w	r1, [r2, #2050]	@ 0x802
 8026f86:	4619      	mov	r1, r3
 8026f88:	687b      	ldr	r3, [r7, #4]
 8026f8a:	1c5a      	adds	r2, r3, #1
 8026f8c:	607a      	str	r2, [r7, #4]
 8026f8e:	4a15      	ldr	r2, [pc, #84]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026f90:	5c52      	ldrb	r2, [r2, r1]
 8026f92:	701a      	strb	r2, [r3, #0]
        read_data++;
 8026f94:	68fb      	ldr	r3, [r7, #12]
 8026f96:	3301      	adds	r3, #1
 8026f98:	60fb      	str	r3, [r7, #12]

        if ( wifi_rx_buffer.head >= RING_BUFFER_SIZE ) {
 8026f9a:	4b12      	ldr	r3, [pc, #72]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026f9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026fa0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8026fa4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8026fa8:	d310      	bcc.n	8026fcc <esp32_io_recv+0x8c>
          wifi_rx_buffer.head = 0;
 8026faa:	4b0e      	ldr	r3, [pc, #56]	@ (8026fe4 <esp32_io_recv+0xa4>)
 8026fac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8026fb0:	2200      	movs	r2, #0
 8026fb2:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
        }
        break;
 8026fb6:	e009      	b.n	8026fcc <esp32_io_recv+0x8c>
      }
    } while ( (HAL_GetTick() - tick_start) < DEFAULT_TIME_OUT);
 8026fb8:	f7fb f956 	bl	8022268 <HAL_GetTick>
 8026fbc:	4602      	mov	r2, r0
 8026fbe:	68bb      	ldr	r3, [r7, #8]
 8026fc0:	1ad3      	subs	r3, r2, r3
 8026fc2:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8026fc6:	4293      	cmp	r3, r2
 8026fc8:	d9c5      	bls.n	8026f56 <esp32_io_recv+0x16>
 8026fca:	e000      	b.n	8026fce <esp32_io_recv+0x8e>
        break;
 8026fcc:	bf00      	nop
  while ( length-- ) {
 8026fce:	683b      	ldr	r3, [r7, #0]
 8026fd0:	1e5a      	subs	r2, r3, #1
 8026fd2:	603a      	str	r2, [r7, #0]
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	d1bb      	bne.n	8026f50 <esp32_io_recv+0x10>
  }
  return read_data;
 8026fd8:	68fb      	ldr	r3, [r7, #12]
}
 8026fda:	4618      	mov	r0, r3
 8026fdc:	3710      	adds	r7, #16
 8026fde:	46bd      	mov	sp, r7
 8026fe0:	bd80      	pop	{r7, pc}
 8026fe2:	bf00      	nop
 8026fe4:	200012e0 	.word	0x200012e0

08026fe8 <esp32_io_recv_nb>:
 * @brief  Non-blocking receive data from the ESP8266 module over UART.
 * @param  buffer: Pointer to the buffer to store received data.
 * @param  length: Maximum length of the buffer.
 * @retval Number of bytes received.
 */
int32_t esp32_io_recv_nb(uint8_t *buffer, uint32_t length) {
 8026fe8:	b580      	push	{r7, lr}
 8026fea:	b084      	sub	sp, #16
 8026fec:	af00      	add	r7, sp, #0
 8026fee:	6078      	str	r0, [r7, #4]
 8026ff0:	6039      	str	r1, [r7, #0]
  uint32_t read_data = 0;
 8026ff2:	2300      	movs	r3, #0
 8026ff4:	60fb      	str	r3, [r7, #12]

  while ( length-- ) {
 8026ff6:	e03c      	b.n	8027072 <esp32_io_recv_nb+0x8a>
      uint32_t tick_start = HAL_GetTick();
 8026ff8:	f7fb f936 	bl	8022268 <HAL_GetTick>
 8026ffc:	60b8      	str	r0, [r7, #8]
      do {
        if ( wifi_rx_buffer.head != wifi_rx_buffer.tail ) {
 8026ffe:	4b22      	ldr	r3, [pc, #136]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 8027000:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8027004:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 8027008:	4b1f      	ldr	r3, [pc, #124]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 802700a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 802700e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8027012:	429a      	cmp	r2, r3
 8027014:	d024      	beq.n	8027060 <esp32_io_recv_nb+0x78>
          *buffer++ = wifi_rx_buffer.data [ wifi_rx_buffer.head++ ];
 8027016:	4b1c      	ldr	r3, [pc, #112]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 8027018:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 802701c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8027020:	1c5a      	adds	r2, r3, #1
 8027022:	b291      	uxth	r1, r2
 8027024:	4a18      	ldr	r2, [pc, #96]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 8027026:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 802702a:	f8a2 1802 	strh.w	r1, [r2, #2050]	@ 0x802
 802702e:	4619      	mov	r1, r3
 8027030:	687b      	ldr	r3, [r7, #4]
 8027032:	1c5a      	adds	r2, r3, #1
 8027034:	607a      	str	r2, [r7, #4]
 8027036:	4a14      	ldr	r2, [pc, #80]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 8027038:	5c52      	ldrb	r2, [r2, r1]
 802703a:	701a      	strb	r2, [r3, #0]
          read_data++;
 802703c:	68fb      	ldr	r3, [r7, #12]
 802703e:	3301      	adds	r3, #1
 8027040:	60fb      	str	r3, [r7, #12]

          if ( wifi_rx_buffer.head >= RING_BUFFER_SIZE ) {
 8027042:	4b11      	ldr	r3, [pc, #68]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 8027044:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8027048:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 802704c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8027050:	d30e      	bcc.n	8027070 <esp32_io_recv_nb+0x88>
            wifi_rx_buffer.head = 0;
 8027052:	4b0d      	ldr	r3, [pc, #52]	@ (8027088 <esp32_io_recv_nb+0xa0>)
 8027054:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8027058:	2200      	movs	r2, #0
 802705a:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
          }
          break;
 802705e:	e007      	b.n	8027070 <esp32_io_recv_nb+0x88>
        }
      } while ( (HAL_GetTick() - tick_start) < 200);
 8027060:	f7fb f902 	bl	8022268 <HAL_GetTick>
 8027064:	4602      	mov	r2, r0
 8027066:	68bb      	ldr	r3, [r7, #8]
 8027068:	1ad3      	subs	r3, r2, r3
 802706a:	2bc7      	cmp	r3, #199	@ 0xc7
 802706c:	d9c7      	bls.n	8026ffe <esp32_io_recv_nb+0x16>
 802706e:	e000      	b.n	8027072 <esp32_io_recv_nb+0x8a>
          break;
 8027070:	bf00      	nop
  while ( length-- ) {
 8027072:	683b      	ldr	r3, [r7, #0]
 8027074:	1e5a      	subs	r2, r3, #1
 8027076:	603a      	str	r2, [r7, #0]
 8027078:	2b00      	cmp	r3, #0
 802707a:	d1bd      	bne.n	8026ff8 <esp32_io_recv_nb+0x10>
    }
  return read_data;
 802707c:	68fb      	ldr	r3, [r7, #12]
}
 802707e:	4618      	mov	r0, r3
 8027080:	3710      	adds	r7, #16
 8027082:	46bd      	mov	sp, r7
 8027084:	bd80      	pop	{r7, pc}
 8027086:	bf00      	nop
 8027088:	200012e0 	.word	0x200012e0

0802708c <HAL_UARTEx_RxEventCallback>:
  * @param  huart UART handle
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 802708c:	b480      	push	{r7}
 802708e:	b083      	sub	sp, #12
 8027090:	af00      	add	r7, sp, #0
 8027092:	6078      	str	r0, [r7, #4]
 8027094:	460b      	mov	r3, r1
 8027096:	807b      	strh	r3, [r7, #2]
  if ( huart == ESP32_UART_HANDLE ) {
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	4a15      	ldr	r2, [pc, #84]	@ (80270f0 <HAL_UARTEx_RxEventCallback+0x64>)
 802709c:	4293      	cmp	r3, r2
 802709e:	d121      	bne.n	80270e4 <HAL_UARTEx_RxEventCallback+0x58>
    static uint16_t tail_pos = 0;

    if ( size > tail_pos ) {
 80270a0:	4b14      	ldr	r3, [pc, #80]	@ (80270f4 <HAL_UARTEx_RxEventCallback+0x68>)
 80270a2:	881b      	ldrh	r3, [r3, #0]
 80270a4:	887a      	ldrh	r2, [r7, #2]
 80270a6:	429a      	cmp	r2, r3
 80270a8:	d91c      	bls.n	80270e4 <HAL_UARTEx_RxEventCallback+0x58>
      tail_pos = size % RING_BUFFER_SIZE;
 80270aa:	887a      	ldrh	r2, [r7, #2]
 80270ac:	4b12      	ldr	r3, [pc, #72]	@ (80270f8 <HAL_UARTEx_RxEventCallback+0x6c>)
 80270ae:	fba3 1302 	umull	r1, r3, r3, r2
 80270b2:	0b59      	lsrs	r1, r3, #13
 80270b4:	460b      	mov	r3, r1
 80270b6:	009b      	lsls	r3, r3, #2
 80270b8:	440b      	add	r3, r1
 80270ba:	02db      	lsls	r3, r3, #11
 80270bc:	1ad3      	subs	r3, r2, r3
 80270be:	b29a      	uxth	r2, r3
 80270c0:	4b0c      	ldr	r3, [pc, #48]	@ (80270f4 <HAL_UARTEx_RxEventCallback+0x68>)
 80270c2:	801a      	strh	r2, [r3, #0]
      if ( tail_pos != wifi_rx_buffer.head ) {
 80270c4:	4b0d      	ldr	r3, [pc, #52]	@ (80270fc <HAL_UARTEx_RxEventCallback+0x70>)
 80270c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80270ca:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 80270ce:	4b09      	ldr	r3, [pc, #36]	@ (80270f4 <HAL_UARTEx_RxEventCallback+0x68>)
 80270d0:	881b      	ldrh	r3, [r3, #0]
 80270d2:	429a      	cmp	r2, r3
 80270d4:	d006      	beq.n	80270e4 <HAL_UARTEx_RxEventCallback+0x58>
        wifi_rx_buffer.tail = tail_pos;
 80270d6:	4b07      	ldr	r3, [pc, #28]	@ (80270f4 <HAL_UARTEx_RxEventCallback+0x68>)
 80270d8:	881a      	ldrh	r2, [r3, #0]
 80270da:	4b08      	ldr	r3, [pc, #32]	@ (80270fc <HAL_UARTEx_RxEventCallback+0x70>)
 80270dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80270e0:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
      }
    }
  }
}
 80270e4:	bf00      	nop
 80270e6:	370c      	adds	r7, #12
 80270e8:	46bd      	mov	sp, r7
 80270ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270ee:	4770      	bx	lr
 80270f0:	20000248 	.word	0x20000248
 80270f4:	20003ae4 	.word	0x20003ae4
 80270f8:	cccccccd 	.word	0xcccccccd
 80270fc:	200012e0 	.word	0x200012e0

08027100 <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart: Pointer to the UART handle.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8027100:	b580      	push	{r7, lr}
 8027102:	b082      	sub	sp, #8
 8027104:	af00      	add	r7, sp, #0
 8027106:	6078      	str	r0, [r7, #4]
  (void)*huart;
  esp32_io_error_handler();
 8027108:	f000 f804 	bl	8027114 <esp32_io_error_handler>
}
 802710c:	bf00      	nop
 802710e:	3708      	adds	r7, #8
 8027110:	46bd      	mov	sp, r7
 8027112:	bd80      	pop	{r7, pc}

08027114 <esp32_io_error_handler>:

/**
 * @brief  Handle UART errors by deinitializing the interface.
 * @retval None.
 */
static void esp32_io_error_handler(void) {
 8027114:	b580      	push	{r7, lr}
 8027116:	af00      	add	r7, sp, #0
  HAL_UART_DMAStop(ESP32_UART_HANDLE);
 8027118:	4803      	ldr	r0, [pc, #12]	@ (8027128 <esp32_io_error_handler+0x14>)
 802711a:	f7fe fac4 	bl	80256a6 <HAL_UART_DMAStop>
  HAL_UART_DeInit(ESP32_UART_HANDLE);
 802711e:	4802      	ldr	r0, [pc, #8]	@ (8027128 <esp32_io_error_handler+0x14>)
 8027120:	f7fe fa04 	bl	802552c <HAL_UART_DeInit>
  while ( 1 ) {
 8027124:	bf00      	nop
 8027126:	e7fd      	b.n	8027124 <esp32_io_error_handler+0x10>
 8027128:	20000248 	.word	0x20000248
 802712c:	00000000 	.word	0x00000000

08027130 <hdc1080_read_temperature>:
 * @param[in] hi2c_x Pointer to the I2C handle.
 * @param[out] temperature Pointer to store the temperature value in Celsius.
 * @return hdc_status_t Returns HDC_OK on success, HDC_ERROR on failure.
 */
hdc_status_t hdc1080_read_temperature(I2C_HandleTypeDef *hi2c_x,
    float *temperature) {
 8027130:	b580      	push	{r7, lr}
 8027132:	b086      	sub	sp, #24
 8027134:	af02      	add	r7, sp, #8
 8027136:	6078      	str	r0, [r7, #4]
 8027138:	6039      	str	r1, [r7, #0]
  if (temperature == NULL) {
 802713a:	683b      	ldr	r3, [r7, #0]
 802713c:	2b00      	cmp	r3, #0
 802713e:	d101      	bne.n	8027144 <hdc1080_read_temperature+0x14>
    return HDC_ERROR;
 8027140:	2301      	movs	r3, #1
 8027142:	e050      	b.n	80271e6 <hdc1080_read_temperature+0xb6>
  }

  uint8_t receive_data[2];
  uint8_t send_data = Temperature_register_add;
 8027144:	2300      	movs	r3, #0
 8027146:	72fb      	strb	r3, [r7, #11]
  uint16_t temp_x;

  /* Request temperature measurement */
  if (HAL_I2C_Master_Transmit(hi2c_x, HDC_1080_ADD << 1, &send_data, 1, 1000)
 8027148:	f107 020b 	add.w	r2, r7, #11
 802714c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027150:	9300      	str	r3, [sp, #0]
 8027152:	2301      	movs	r3, #1
 8027154:	2180      	movs	r1, #128	@ 0x80
 8027156:	6878      	ldr	r0, [r7, #4]
 8027158:	f7fc fa2c 	bl	80235b4 <HAL_I2C_Master_Transmit>
 802715c:	4603      	mov	r3, r0
 802715e:	2b00      	cmp	r3, #0
 8027160:	d001      	beq.n	8027166 <hdc1080_read_temperature+0x36>
      != HAL_OK) {
    return HDC_ERROR;
 8027162:	2301      	movs	r3, #1
 8027164:	e03f      	b.n	80271e6 <hdc1080_read_temperature+0xb6>
  }

  /* Delay to allow measurement to complete (Max 7ms, but 15ms for accuracy) */
  HAL_Delay(15);
 8027166:	200f      	movs	r0, #15
 8027168:	f7fb f88a 	bl	8022280 <HAL_Delay>

  /* Read 2 bytes for temperature */
  if (HAL_I2C_Master_Receive(hi2c_x, HDC_1080_ADD << 1, receive_data, 2, 1000)
 802716c:	f107 020c 	add.w	r2, r7, #12
 8027170:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027174:	9300      	str	r3, [sp, #0]
 8027176:	2302      	movs	r3, #2
 8027178:	2180      	movs	r1, #128	@ 0x80
 802717a:	6878      	ldr	r0, [r7, #4]
 802717c:	f7fc fb18 	bl	80237b0 <HAL_I2C_Master_Receive>
 8027180:	4603      	mov	r3, r0
 8027182:	2b00      	cmp	r3, #0
 8027184:	d001      	beq.n	802718a <hdc1080_read_temperature+0x5a>
      != HAL_OK) {
    return HDC_ERROR;
 8027186:	2301      	movs	r3, #1
 8027188:	e02d      	b.n	80271e6 <hdc1080_read_temperature+0xb6>
  }

  /* Convert raw ADC value to temperature in Celsius */
  temp_x = ((receive_data[0] << 8) | receive_data[1]);
 802718a:	7b3b      	ldrb	r3, [r7, #12]
 802718c:	b21b      	sxth	r3, r3
 802718e:	021b      	lsls	r3, r3, #8
 8027190:	b21a      	sxth	r2, r3
 8027192:	7b7b      	ldrb	r3, [r7, #13]
 8027194:	b21b      	sxth	r3, r3
 8027196:	4313      	orrs	r3, r2
 8027198:	b21b      	sxth	r3, r3
 802719a:	81fb      	strh	r3, [r7, #14]
  *temperature = ((temp_x / 65536.0) * 165.0) - 40.0;
 802719c:	89fb      	ldrh	r3, [r7, #14]
 802719e:	4618      	mov	r0, r3
 80271a0:	f7f9 f9e0 	bl	8020564 <__aeabi_i2d>
 80271a4:	f04f 0200 	mov.w	r2, #0
 80271a8:	4b13      	ldr	r3, [pc, #76]	@ (80271f8 <hdc1080_read_temperature+0xc8>)
 80271aa:	f7f9 fb6f 	bl	802088c <__aeabi_ddiv>
 80271ae:	4602      	mov	r2, r0
 80271b0:	460b      	mov	r3, r1
 80271b2:	4610      	mov	r0, r2
 80271b4:	4619      	mov	r1, r3
 80271b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80271f0 <hdc1080_read_temperature+0xc0>)
 80271b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271bc:	f7f9 fa3c 	bl	8020638 <__aeabi_dmul>
 80271c0:	4602      	mov	r2, r0
 80271c2:	460b      	mov	r3, r1
 80271c4:	4610      	mov	r0, r2
 80271c6:	4619      	mov	r1, r3
 80271c8:	f04f 0200 	mov.w	r2, #0
 80271cc:	4b0b      	ldr	r3, [pc, #44]	@ (80271fc <hdc1080_read_temperature+0xcc>)
 80271ce:	f7f9 f87b 	bl	80202c8 <__aeabi_dsub>
 80271d2:	4602      	mov	r2, r0
 80271d4:	460b      	mov	r3, r1
 80271d6:	4610      	mov	r0, r2
 80271d8:	4619      	mov	r1, r3
 80271da:	f7f9 fd25 	bl	8020c28 <__aeabi_d2f>
 80271de:	4602      	mov	r2, r0
 80271e0:	683b      	ldr	r3, [r7, #0]
 80271e2:	601a      	str	r2, [r3, #0]

  return HDC_OK;
 80271e4:	2300      	movs	r3, #0
}
 80271e6:	4618      	mov	r0, r3
 80271e8:	3710      	adds	r7, #16
 80271ea:	46bd      	mov	sp, r7
 80271ec:	bd80      	pop	{r7, pc}
 80271ee:	bf00      	nop
 80271f0:	00000000 	.word	0x00000000
 80271f4:	4064a000 	.word	0x4064a000
 80271f8:	40f00000 	.word	0x40f00000
 80271fc:	40440000 	.word	0x40440000

08027200 <hdc1080_read_humidity>:
 *
 * @param[in] hi2c_x Pointer to the I2C handle.
 * @param[out] humidity Pointer to store the humidity value in percentage (%RH).
 * @return hdc_status_t Returns HDC_OK on success, HDC_ERROR on failure.
 */
hdc_status_t hdc1080_read_humidity(I2C_HandleTypeDef *hi2c_x, uint8_t *humidity) {
 8027200:	b580      	push	{r7, lr}
 8027202:	b086      	sub	sp, #24
 8027204:	af02      	add	r7, sp, #8
 8027206:	6078      	str	r0, [r7, #4]
 8027208:	6039      	str	r1, [r7, #0]
  if (humidity == NULL) {
 802720a:	683b      	ldr	r3, [r7, #0]
 802720c:	2b00      	cmp	r3, #0
 802720e:	d101      	bne.n	8027214 <hdc1080_read_humidity+0x14>
    return HDC_ERROR;
 8027210:	2301      	movs	r3, #1
 8027212:	e048      	b.n	80272a6 <hdc1080_read_humidity+0xa6>
  }

  uint8_t receive_data[2];
  uint8_t send_data = Humidity_register_add;
 8027214:	2301      	movs	r3, #1
 8027216:	72fb      	strb	r3, [r7, #11]
  uint16_t humi_x;

  /* Request humidity measurement */
  if (HAL_I2C_Master_Transmit(hi2c_x, HDC_1080_ADD << 1, &send_data, 1, 1000)
 8027218:	f107 020b 	add.w	r2, r7, #11
 802721c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027220:	9300      	str	r3, [sp, #0]
 8027222:	2301      	movs	r3, #1
 8027224:	2180      	movs	r1, #128	@ 0x80
 8027226:	6878      	ldr	r0, [r7, #4]
 8027228:	f7fc f9c4 	bl	80235b4 <HAL_I2C_Master_Transmit>
 802722c:	4603      	mov	r3, r0
 802722e:	2b00      	cmp	r3, #0
 8027230:	d001      	beq.n	8027236 <hdc1080_read_humidity+0x36>
      != HAL_OK) {
    return HDC_ERROR;
 8027232:	2301      	movs	r3, #1
 8027234:	e037      	b.n	80272a6 <hdc1080_read_humidity+0xa6>
  }

  /* Delay to allow measurement to complete */
  HAL_Delay(15);
 8027236:	200f      	movs	r0, #15
 8027238:	f7fb f822 	bl	8022280 <HAL_Delay>

  /* Read 2 bytes for humidity */
  if (HAL_I2C_Master_Receive(hi2c_x, HDC_1080_ADD << 1, receive_data, 2, 1000)
 802723c:	f107 020c 	add.w	r2, r7, #12
 8027240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027244:	9300      	str	r3, [sp, #0]
 8027246:	2302      	movs	r3, #2
 8027248:	2180      	movs	r1, #128	@ 0x80
 802724a:	6878      	ldr	r0, [r7, #4]
 802724c:	f7fc fab0 	bl	80237b0 <HAL_I2C_Master_Receive>
 8027250:	4603      	mov	r3, r0
 8027252:	2b00      	cmp	r3, #0
 8027254:	d001      	beq.n	802725a <hdc1080_read_humidity+0x5a>
      != HAL_OK) {
    return HDC_ERROR;
 8027256:	2301      	movs	r3, #1
 8027258:	e025      	b.n	80272a6 <hdc1080_read_humidity+0xa6>
  }

  /* Convert raw ADC value to humidity in %RH */
  humi_x = ((receive_data[0] << 8) | receive_data[1]);
 802725a:	7b3b      	ldrb	r3, [r7, #12]
 802725c:	b21b      	sxth	r3, r3
 802725e:	021b      	lsls	r3, r3, #8
 8027260:	b21a      	sxth	r2, r3
 8027262:	7b7b      	ldrb	r3, [r7, #13]
 8027264:	b21b      	sxth	r3, r3
 8027266:	4313      	orrs	r3, r2
 8027268:	b21b      	sxth	r3, r3
 802726a:	81fb      	strh	r3, [r7, #14]
  *humidity = (uint8_t) ((humi_x / 65536.0) * 100.0);
 802726c:	89fb      	ldrh	r3, [r7, #14]
 802726e:	4618      	mov	r0, r3
 8027270:	f7f9 f978 	bl	8020564 <__aeabi_i2d>
 8027274:	f04f 0200 	mov.w	r2, #0
 8027278:	4b0d      	ldr	r3, [pc, #52]	@ (80272b0 <hdc1080_read_humidity+0xb0>)
 802727a:	f7f9 fb07 	bl	802088c <__aeabi_ddiv>
 802727e:	4602      	mov	r2, r0
 8027280:	460b      	mov	r3, r1
 8027282:	4610      	mov	r0, r2
 8027284:	4619      	mov	r1, r3
 8027286:	f04f 0200 	mov.w	r2, #0
 802728a:	4b0a      	ldr	r3, [pc, #40]	@ (80272b4 <hdc1080_read_humidity+0xb4>)
 802728c:	f7f9 f9d4 	bl	8020638 <__aeabi_dmul>
 8027290:	4602      	mov	r2, r0
 8027292:	460b      	mov	r3, r1
 8027294:	4610      	mov	r0, r2
 8027296:	4619      	mov	r1, r3
 8027298:	f7f9 fca6 	bl	8020be8 <__aeabi_d2uiz>
 802729c:	4603      	mov	r3, r0
 802729e:	b2da      	uxtb	r2, r3
 80272a0:	683b      	ldr	r3, [r7, #0]
 80272a2:	701a      	strb	r2, [r3, #0]

  return HDC_OK;
 80272a4:	2300      	movs	r3, #0
}
 80272a6:	4618      	mov	r0, r3
 80272a8:	3710      	adds	r7, #16
 80272aa:	46bd      	mov	sp, r7
 80272ac:	bd80      	pop	{r7, pc}
 80272ae:	bf00      	nop
 80272b0:	40f00000 	.word	0x40f00000
 80272b4:	40590000 	.word	0x40590000

080272b8 <get_temperature_reading>:
/**
 * @brief Reads the current temperature from the HDC1080 sensor.
 *
 * @param[out] temperature Pointer to store the read temperature value.
 */
void get_temperature_reading(float *temperature) {
 80272b8:	b580      	push	{r7, lr}
 80272ba:	b082      	sub	sp, #8
 80272bc:	af00      	add	r7, sp, #0
 80272be:	6078      	str	r0, [r7, #4]
  if (temperature == NULL ) {
 80272c0:	687b      	ldr	r3, [r7, #4]
 80272c2:	2b00      	cmp	r3, #0
 80272c4:	d10c      	bne.n	80272e0 <get_temperature_reading+0x28>
    LogError( ("Invalid NULL pointer for temperature read.") );
 80272c6:	4a13      	ldr	r2, [pc, #76]	@ (8027314 <get_temperature_reading+0x5c>)
 80272c8:	232b      	movs	r3, #43	@ 0x2b
 80272ca:	4913      	ldr	r1, [pc, #76]	@ (8027318 <get_temperature_reading+0x60>)
 80272cc:	4813      	ldr	r0, [pc, #76]	@ (802731c <get_temperature_reading+0x64>)
 80272ce:	f004 f9d9 	bl	802b684 <iprintf>
 80272d2:	4813      	ldr	r0, [pc, #76]	@ (8027320 <get_temperature_reading+0x68>)
 80272d4:	f004 f9d6 	bl	802b684 <iprintf>
 80272d8:	4812      	ldr	r0, [pc, #72]	@ (8027324 <get_temperature_reading+0x6c>)
 80272da:	f004 fa3b 	bl	802b754 <puts>
    return;
 80272de:	e016      	b.n	802730e <get_temperature_reading+0x56>
  }
  hdc1080_read_temperature(&hi2c1, temperature);
 80272e0:	6879      	ldr	r1, [r7, #4]
 80272e2:	4811      	ldr	r0, [pc, #68]	@ (8027328 <get_temperature_reading+0x70>)
 80272e4:	f7ff ff24 	bl	8027130 <hdc1080_read_temperature>
  LogInfo( ("Temperature: %.2f C,", *temperature) );
 80272e8:	4a0a      	ldr	r2, [pc, #40]	@ (8027314 <get_temperature_reading+0x5c>)
 80272ea:	232f      	movs	r3, #47	@ 0x2f
 80272ec:	490a      	ldr	r1, [pc, #40]	@ (8027318 <get_temperature_reading+0x60>)
 80272ee:	480f      	ldr	r0, [pc, #60]	@ (802732c <get_temperature_reading+0x74>)
 80272f0:	f004 f9c8 	bl	802b684 <iprintf>
 80272f4:	687b      	ldr	r3, [r7, #4]
 80272f6:	681b      	ldr	r3, [r3, #0]
 80272f8:	4618      	mov	r0, r3
 80272fa:	f7f9 f945 	bl	8020588 <__aeabi_f2d>
 80272fe:	4602      	mov	r2, r0
 8027300:	460b      	mov	r3, r1
 8027302:	480b      	ldr	r0, [pc, #44]	@ (8027330 <get_temperature_reading+0x78>)
 8027304:	f004 f9be 	bl	802b684 <iprintf>
 8027308:	4806      	ldr	r0, [pc, #24]	@ (8027324 <get_temperature_reading+0x6c>)
 802730a:	f004 fa23 	bl	802b754 <puts>
}
 802730e:	3708      	adds	r7, #8
 8027310:	46bd      	mov	sp, r7
 8027312:	bd80      	pop	{r7, pc}
 8027314:	0802f0e1 	.word	0x0802f0e1
 8027318:	0802f0f0 	.word	0x0802f0f0
 802731c:	0802f164 	.word	0x0802f164
 8027320:	0802f17c 	.word	0x0802f17c
 8027324:	0802f140 	.word	0x0802f140
 8027328:	200001f4 	.word	0x200001f4
 802732c:	0802f0f8 	.word	0x0802f0f8
 8027330:	0802f1a8 	.word	0x0802f1a8

08027334 <get_humidity_reading>:
/**
 * @brief Reads the current humidity from the HDC1080 sensor.
 *
 * @param[out] humidity Pointer to store the read humidity value.
 */
void get_humidity_reading(uint8_t *humidity) {
 8027334:	b580      	push	{r7, lr}
 8027336:	b082      	sub	sp, #8
 8027338:	af00      	add	r7, sp, #0
 802733a:	6078      	str	r0, [r7, #4]
  if ( humidity == NULL) {
 802733c:	687b      	ldr	r3, [r7, #4]
 802733e:	2b00      	cmp	r3, #0
 8027340:	d10c      	bne.n	802735c <get_humidity_reading+0x28>
    LogError( ("Invalid NULL pointer for humidity read.") );
 8027342:	4a11      	ldr	r2, [pc, #68]	@ (8027388 <get_humidity_reading+0x54>)
 8027344:	233a      	movs	r3, #58	@ 0x3a
 8027346:	4911      	ldr	r1, [pc, #68]	@ (802738c <get_humidity_reading+0x58>)
 8027348:	4811      	ldr	r0, [pc, #68]	@ (8027390 <get_humidity_reading+0x5c>)
 802734a:	f004 f99b 	bl	802b684 <iprintf>
 802734e:	4811      	ldr	r0, [pc, #68]	@ (8027394 <get_humidity_reading+0x60>)
 8027350:	f004 f998 	bl	802b684 <iprintf>
 8027354:	4810      	ldr	r0, [pc, #64]	@ (8027398 <get_humidity_reading+0x64>)
 8027356:	f004 f9fd 	bl	802b754 <puts>
    return;
 802735a:	e012      	b.n	8027382 <get_humidity_reading+0x4e>
  }
  hdc1080_read_humidity(&hi2c1, humidity);
 802735c:	6879      	ldr	r1, [r7, #4]
 802735e:	480f      	ldr	r0, [pc, #60]	@ (802739c <get_humidity_reading+0x68>)
 8027360:	f7ff ff4e 	bl	8027200 <hdc1080_read_humidity>
  LogInfo( ("Humidity: %u%%", *humidity) );
 8027364:	4a08      	ldr	r2, [pc, #32]	@ (8027388 <get_humidity_reading+0x54>)
 8027366:	233e      	movs	r3, #62	@ 0x3e
 8027368:	4908      	ldr	r1, [pc, #32]	@ (802738c <get_humidity_reading+0x58>)
 802736a:	480d      	ldr	r0, [pc, #52]	@ (80273a0 <get_humidity_reading+0x6c>)
 802736c:	f004 f98a 	bl	802b684 <iprintf>
 8027370:	687b      	ldr	r3, [r7, #4]
 8027372:	781b      	ldrb	r3, [r3, #0]
 8027374:	4619      	mov	r1, r3
 8027376:	480b      	ldr	r0, [pc, #44]	@ (80273a4 <get_humidity_reading+0x70>)
 8027378:	f004 f984 	bl	802b684 <iprintf>
 802737c:	4806      	ldr	r0, [pc, #24]	@ (8027398 <get_humidity_reading+0x64>)
 802737e:	f004 f9e9 	bl	802b754 <puts>
}
 8027382:	3708      	adds	r7, #8
 8027384:	46bd      	mov	sp, r7
 8027386:	bd80      	pop	{r7, pc}
 8027388:	0802f0e1 	.word	0x0802f0e1
 802738c:	0802f0f0 	.word	0x0802f0f0
 8027390:	0802f164 	.word	0x0802f164
 8027394:	0802f1c0 	.word	0x0802f1c0
 8027398:	0802f140 	.word	0x0802f140
 802739c:	200001f4 	.word	0x200001f4
 80273a0:	0802f0f8 	.word	0x0802f0f8
 80273a4:	0802f1e8 	.word	0x0802f1e8

080273a8 <vApplicationGetTimerTaskMemory>:

void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                     StackType_t ** ppxTimerTaskStackBuffer,
                                     uint32_t * pulTimerTaskStackSize )

{
 80273a8:	b480      	push	{r7}
 80273aa:	b085      	sub	sp, #20
 80273ac:	af00      	add	r7, sp, #0
 80273ae:	60f8      	str	r0, [r7, #12]
 80273b0:	60b9      	str	r1, [r7, #8]
 80273b2:	607a      	str	r2, [r7, #4]
    static StaticTask_t timerTaskTCB;
    static StackType_t timerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &timerTaskTCB;
 80273b4:	68fb      	ldr	r3, [r7, #12]
 80273b6:	4a07      	ldr	r2, [pc, #28]	@ (80273d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80273b8:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = timerTaskStack;
 80273ba:	68bb      	ldr	r3, [r7, #8]
 80273bc:	4a06      	ldr	r2, [pc, #24]	@ (80273d8 <vApplicationGetTimerTaskMemory+0x30>)
 80273be:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80273c0:	687b      	ldr	r3, [r7, #4]
 80273c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80273c6:	601a      	str	r2, [r3, #0]
}
 80273c8:	bf00      	nop
 80273ca:	3714      	adds	r7, #20
 80273cc:	46bd      	mov	sp, r7
 80273ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273d2:	4770      	bx	lr
 80273d4:	20003ae8 	.word	0x20003ae8
 80273d8:	20003b38 	.word	0x20003b38

080273dc <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                    StackType_t ** ppxIdleTaskStackBuffer,
                                    uint32_t * pulIdleTaskStackSize )

{
 80273dc:	b480      	push	{r7}
 80273de:	b085      	sub	sp, #20
 80273e0:	af00      	add	r7, sp, #0
 80273e2:	60f8      	str	r0, [r7, #12]
 80273e4:	60b9      	str	r1, [r7, #8]
 80273e6:	607a      	str	r2, [r7, #4]
    static StaticTask_t idleTaskTCB;
    static StackType_t idleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &idleTaskTCB;
 80273e8:	68fb      	ldr	r3, [r7, #12]
 80273ea:	4a07      	ldr	r2, [pc, #28]	@ (8027408 <vApplicationGetIdleTaskMemory+0x2c>)
 80273ec:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = idleTaskStack;
 80273ee:	68bb      	ldr	r3, [r7, #8]
 80273f0:	4a06      	ldr	r2, [pc, #24]	@ (802740c <vApplicationGetIdleTaskMemory+0x30>)
 80273f2:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80273f4:	687b      	ldr	r3, [r7, #4]
 80273f6:	2280      	movs	r2, #128	@ 0x80
 80273f8:	601a      	str	r2, [r3, #0]
}
 80273fa:	bf00      	nop
 80273fc:	3714      	adds	r7, #20
 80273fe:	46bd      	mov	sp, r7
 8027400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027404:	4770      	bx	lr
 8027406:	bf00      	nop
 8027408:	20003f38 	.word	0x20003f38
 802740c:	20003f88 	.word	0x20003f88

08027410 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8027410:	b480      	push	{r7}
 8027412:	b083      	sub	sp, #12
 8027414:	af00      	add	r7, sp, #0
 8027416:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8027418:	687b      	ldr	r3, [r7, #4]
 802741a:	f103 0208 	add.w	r2, r3, #8
 802741e:	687b      	ldr	r3, [r7, #4]
 8027420:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	f04f 32ff 	mov.w	r2, #4294967295
 8027428:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 802742a:	687b      	ldr	r3, [r7, #4]
 802742c:	f103 0208 	add.w	r2, r3, #8
 8027430:	687b      	ldr	r3, [r7, #4]
 8027432:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8027434:	687b      	ldr	r3, [r7, #4]
 8027436:	f103 0208 	add.w	r2, r3, #8
 802743a:	687b      	ldr	r3, [r7, #4]
 802743c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802743e:	687b      	ldr	r3, [r7, #4]
 8027440:	2200      	movs	r2, #0
 8027442:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8027444:	bf00      	nop
 8027446:	370c      	adds	r7, #12
 8027448:	46bd      	mov	sp, r7
 802744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802744e:	4770      	bx	lr

08027450 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8027450:	b480      	push	{r7}
 8027452:	b083      	sub	sp, #12
 8027454:	af00      	add	r7, sp, #0
 8027456:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8027458:	687b      	ldr	r3, [r7, #4]
 802745a:	2200      	movs	r2, #0
 802745c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 802745e:	bf00      	nop
 8027460:	370c      	adds	r7, #12
 8027462:	46bd      	mov	sp, r7
 8027464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027468:	4770      	bx	lr

0802746a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 802746a:	b480      	push	{r7}
 802746c:	b085      	sub	sp, #20
 802746e:	af00      	add	r7, sp, #0
 8027470:	6078      	str	r0, [r7, #4]
 8027472:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8027474:	683b      	ldr	r3, [r7, #0]
 8027476:	681b      	ldr	r3, [r3, #0]
 8027478:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 802747a:	68bb      	ldr	r3, [r7, #8]
 802747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027480:	d103      	bne.n	802748a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8027482:	687b      	ldr	r3, [r7, #4]
 8027484:	691b      	ldr	r3, [r3, #16]
 8027486:	60fb      	str	r3, [r7, #12]
 8027488:	e00c      	b.n	80274a4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 802748a:	687b      	ldr	r3, [r7, #4]
 802748c:	3308      	adds	r3, #8
 802748e:	60fb      	str	r3, [r7, #12]
 8027490:	e002      	b.n	8027498 <vListInsert+0x2e>
 8027492:	68fb      	ldr	r3, [r7, #12]
 8027494:	685b      	ldr	r3, [r3, #4]
 8027496:	60fb      	str	r3, [r7, #12]
 8027498:	68fb      	ldr	r3, [r7, #12]
 802749a:	685b      	ldr	r3, [r3, #4]
 802749c:	681b      	ldr	r3, [r3, #0]
 802749e:	68ba      	ldr	r2, [r7, #8]
 80274a0:	429a      	cmp	r2, r3
 80274a2:	d2f6      	bcs.n	8027492 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80274a4:	68fb      	ldr	r3, [r7, #12]
 80274a6:	685a      	ldr	r2, [r3, #4]
 80274a8:	683b      	ldr	r3, [r7, #0]
 80274aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80274ac:	683b      	ldr	r3, [r7, #0]
 80274ae:	685b      	ldr	r3, [r3, #4]
 80274b0:	683a      	ldr	r2, [r7, #0]
 80274b2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80274b4:	683b      	ldr	r3, [r7, #0]
 80274b6:	68fa      	ldr	r2, [r7, #12]
 80274b8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80274ba:	68fb      	ldr	r3, [r7, #12]
 80274bc:	683a      	ldr	r2, [r7, #0]
 80274be:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80274c0:	683b      	ldr	r3, [r7, #0]
 80274c2:	687a      	ldr	r2, [r7, #4]
 80274c4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80274c6:	687b      	ldr	r3, [r7, #4]
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	1c5a      	adds	r2, r3, #1
 80274cc:	687b      	ldr	r3, [r7, #4]
 80274ce:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80274d0:	bf00      	nop
 80274d2:	3714      	adds	r7, #20
 80274d4:	46bd      	mov	sp, r7
 80274d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274da:	4770      	bx	lr

080274dc <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80274dc:	b480      	push	{r7}
 80274de:	b085      	sub	sp, #20
 80274e0:	af00      	add	r7, sp, #0
 80274e2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80274e4:	687b      	ldr	r3, [r7, #4]
 80274e6:	691b      	ldr	r3, [r3, #16]
 80274e8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80274ea:	687b      	ldr	r3, [r7, #4]
 80274ec:	685b      	ldr	r3, [r3, #4]
 80274ee:	687a      	ldr	r2, [r7, #4]
 80274f0:	6892      	ldr	r2, [r2, #8]
 80274f2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	689b      	ldr	r3, [r3, #8]
 80274f8:	687a      	ldr	r2, [r7, #4]
 80274fa:	6852      	ldr	r2, [r2, #4]
 80274fc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80274fe:	68fb      	ldr	r3, [r7, #12]
 8027500:	685b      	ldr	r3, [r3, #4]
 8027502:	687a      	ldr	r2, [r7, #4]
 8027504:	429a      	cmp	r2, r3
 8027506:	d103      	bne.n	8027510 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8027508:	687b      	ldr	r3, [r7, #4]
 802750a:	689a      	ldr	r2, [r3, #8]
 802750c:	68fb      	ldr	r3, [r7, #12]
 802750e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8027510:	687b      	ldr	r3, [r7, #4]
 8027512:	2200      	movs	r2, #0
 8027514:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8027516:	68fb      	ldr	r3, [r7, #12]
 8027518:	681b      	ldr	r3, [r3, #0]
 802751a:	1e5a      	subs	r2, r3, #1
 802751c:	68fb      	ldr	r3, [r7, #12]
 802751e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8027520:	68fb      	ldr	r3, [r7, #12]
 8027522:	681b      	ldr	r3, [r3, #0]
}
 8027524:	4618      	mov	r0, r3
 8027526:	3714      	adds	r7, #20
 8027528:	46bd      	mov	sp, r7
 802752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802752e:	4770      	bx	lr

08027530 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8027530:	b580      	push	{r7, lr}
 8027532:	b086      	sub	sp, #24
 8027534:	af00      	add	r7, sp, #0
 8027536:	6078      	str	r0, [r7, #4]
 8027538:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 802753a:	2301      	movs	r3, #1
 802753c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8027542:	693b      	ldr	r3, [r7, #16]
 8027544:	2b00      	cmp	r3, #0
 8027546:	d10b      	bne.n	8027560 <xQueueGenericReset+0x30>
    __asm volatile
 8027548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802754c:	f383 8811 	msr	BASEPRI, r3
 8027550:	f3bf 8f6f 	isb	sy
 8027554:	f3bf 8f4f 	dsb	sy
 8027558:	60fb      	str	r3, [r7, #12]
}
 802755a:	bf00      	nop
 802755c:	bf00      	nop
 802755e:	e7fd      	b.n	802755c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8027560:	693b      	ldr	r3, [r7, #16]
 8027562:	2b00      	cmp	r3, #0
 8027564:	d05d      	beq.n	8027622 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8027566:	693b      	ldr	r3, [r7, #16]
 8027568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 802756a:	2b00      	cmp	r3, #0
 802756c:	d059      	beq.n	8027622 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 802756e:	693b      	ldr	r3, [r7, #16]
 8027570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8027572:	693b      	ldr	r3, [r7, #16]
 8027574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027576:	2100      	movs	r1, #0
 8027578:	fba3 2302 	umull	r2, r3, r3, r2
 802757c:	2b00      	cmp	r3, #0
 802757e:	d000      	beq.n	8027582 <xQueueGenericReset+0x52>
 8027580:	2101      	movs	r1, #1
 8027582:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8027584:	2b00      	cmp	r3, #0
 8027586:	d14c      	bne.n	8027622 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8027588:	f002 fa2c 	bl	80299e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 802758c:	693b      	ldr	r3, [r7, #16]
 802758e:	681a      	ldr	r2, [r3, #0]
 8027590:	693b      	ldr	r3, [r7, #16]
 8027592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027594:	6939      	ldr	r1, [r7, #16]
 8027596:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8027598:	fb01 f303 	mul.w	r3, r1, r3
 802759c:	441a      	add	r2, r3
 802759e:	693b      	ldr	r3, [r7, #16]
 80275a0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80275a2:	693b      	ldr	r3, [r7, #16]
 80275a4:	2200      	movs	r2, #0
 80275a6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80275a8:	693b      	ldr	r3, [r7, #16]
 80275aa:	681a      	ldr	r2, [r3, #0]
 80275ac:	693b      	ldr	r3, [r7, #16]
 80275ae:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80275b0:	693b      	ldr	r3, [r7, #16]
 80275b2:	681a      	ldr	r2, [r3, #0]
 80275b4:	693b      	ldr	r3, [r7, #16]
 80275b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80275b8:	3b01      	subs	r3, #1
 80275ba:	6939      	ldr	r1, [r7, #16]
 80275bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80275be:	fb01 f303 	mul.w	r3, r1, r3
 80275c2:	441a      	add	r2, r3
 80275c4:	693b      	ldr	r3, [r7, #16]
 80275c6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80275c8:	693b      	ldr	r3, [r7, #16]
 80275ca:	22ff      	movs	r2, #255	@ 0xff
 80275cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80275d0:	693b      	ldr	r3, [r7, #16]
 80275d2:	22ff      	movs	r2, #255	@ 0xff
 80275d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80275d8:	683b      	ldr	r3, [r7, #0]
 80275da:	2b00      	cmp	r3, #0
 80275dc:	d114      	bne.n	8027608 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80275de:	693b      	ldr	r3, [r7, #16]
 80275e0:	691b      	ldr	r3, [r3, #16]
 80275e2:	2b00      	cmp	r3, #0
 80275e4:	d01a      	beq.n	802761c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80275e6:	693b      	ldr	r3, [r7, #16]
 80275e8:	3310      	adds	r3, #16
 80275ea:	4618      	mov	r0, r3
 80275ec:	f001 fa26 	bl	8028a3c <xTaskRemoveFromEventList>
 80275f0:	4603      	mov	r3, r0
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d012      	beq.n	802761c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80275f6:	4b16      	ldr	r3, [pc, #88]	@ (8027650 <xQueueGenericReset+0x120>)
 80275f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80275fc:	601a      	str	r2, [r3, #0]
 80275fe:	f3bf 8f4f 	dsb	sy
 8027602:	f3bf 8f6f 	isb	sy
 8027606:	e009      	b.n	802761c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8027608:	693b      	ldr	r3, [r7, #16]
 802760a:	3310      	adds	r3, #16
 802760c:	4618      	mov	r0, r3
 802760e:	f7ff feff 	bl	8027410 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8027612:	693b      	ldr	r3, [r7, #16]
 8027614:	3324      	adds	r3, #36	@ 0x24
 8027616:	4618      	mov	r0, r3
 8027618:	f7ff fefa 	bl	8027410 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 802761c:	f002 fa14 	bl	8029a48 <vPortExitCritical>
 8027620:	e001      	b.n	8027626 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8027622:	2300      	movs	r3, #0
 8027624:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8027626:	697b      	ldr	r3, [r7, #20]
 8027628:	2b00      	cmp	r3, #0
 802762a:	d10b      	bne.n	8027644 <xQueueGenericReset+0x114>
    __asm volatile
 802762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027630:	f383 8811 	msr	BASEPRI, r3
 8027634:	f3bf 8f6f 	isb	sy
 8027638:	f3bf 8f4f 	dsb	sy
 802763c:	60bb      	str	r3, [r7, #8]
}
 802763e:	bf00      	nop
 8027640:	bf00      	nop
 8027642:	e7fd      	b.n	8027640 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8027644:	697b      	ldr	r3, [r7, #20]
}
 8027646:	4618      	mov	r0, r3
 8027648:	3718      	adds	r7, #24
 802764a:	46bd      	mov	sp, r7
 802764c:	bd80      	pop	{r7, pc}
 802764e:	bf00      	nop
 8027650:	e000ed04 	.word	0xe000ed04

08027654 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8027654:	b580      	push	{r7, lr}
 8027656:	b08c      	sub	sp, #48	@ 0x30
 8027658:	af02      	add	r7, sp, #8
 802765a:	60f8      	str	r0, [r7, #12]
 802765c:	60b9      	str	r1, [r7, #8]
 802765e:	607a      	str	r2, [r7, #4]
 8027660:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8027662:	2300      	movs	r3, #0
 8027664:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8027666:	683b      	ldr	r3, [r7, #0]
 8027668:	2b00      	cmp	r3, #0
 802766a:	d10b      	bne.n	8027684 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 802766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027670:	f383 8811 	msr	BASEPRI, r3
 8027674:	f3bf 8f6f 	isb	sy
 8027678:	f3bf 8f4f 	dsb	sy
 802767c:	623b      	str	r3, [r7, #32]
}
 802767e:	bf00      	nop
 8027680:	bf00      	nop
 8027682:	e7fd      	b.n	8027680 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8027684:	68fb      	ldr	r3, [r7, #12]
 8027686:	2b00      	cmp	r3, #0
 8027688:	d031      	beq.n	80276ee <xQueueGenericCreateStatic+0x9a>
 802768a:	683b      	ldr	r3, [r7, #0]
 802768c:	2b00      	cmp	r3, #0
 802768e:	d02e      	beq.n	80276ee <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8027690:	687b      	ldr	r3, [r7, #4]
 8027692:	2b00      	cmp	r3, #0
 8027694:	d002      	beq.n	802769c <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8027696:	68bb      	ldr	r3, [r7, #8]
 8027698:	2b00      	cmp	r3, #0
 802769a:	d028      	beq.n	80276ee <xQueueGenericCreateStatic+0x9a>
 802769c:	687b      	ldr	r3, [r7, #4]
 802769e:	2b00      	cmp	r3, #0
 80276a0:	d102      	bne.n	80276a8 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80276a2:	68bb      	ldr	r3, [r7, #8]
 80276a4:	2b00      	cmp	r3, #0
 80276a6:	d122      	bne.n	80276ee <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80276a8:	2348      	movs	r3, #72	@ 0x48
 80276aa:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80276ac:	697b      	ldr	r3, [r7, #20]
 80276ae:	2b48      	cmp	r3, #72	@ 0x48
 80276b0:	d00b      	beq.n	80276ca <xQueueGenericCreateStatic+0x76>
    __asm volatile
 80276b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80276b6:	f383 8811 	msr	BASEPRI, r3
 80276ba:	f3bf 8f6f 	isb	sy
 80276be:	f3bf 8f4f 	dsb	sy
 80276c2:	61fb      	str	r3, [r7, #28]
}
 80276c4:	bf00      	nop
 80276c6:	bf00      	nop
 80276c8:	e7fd      	b.n	80276c6 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80276ca:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80276cc:	683b      	ldr	r3, [r7, #0]
 80276ce:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80276d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80276d2:	2201      	movs	r2, #1
 80276d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80276d8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80276dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80276de:	9300      	str	r3, [sp, #0]
 80276e0:	4613      	mov	r3, r2
 80276e2:	687a      	ldr	r2, [r7, #4]
 80276e4:	68b9      	ldr	r1, [r7, #8]
 80276e6:	68f8      	ldr	r0, [r7, #12]
 80276e8:	f000 f868 	bl	80277bc <prvInitialiseNewQueue>
 80276ec:	e00e      	b.n	802770c <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80276ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80276f0:	2b00      	cmp	r3, #0
 80276f2:	d10b      	bne.n	802770c <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80276f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80276f8:	f383 8811 	msr	BASEPRI, r3
 80276fc:	f3bf 8f6f 	isb	sy
 8027700:	f3bf 8f4f 	dsb	sy
 8027704:	61bb      	str	r3, [r7, #24]
}
 8027706:	bf00      	nop
 8027708:	bf00      	nop
 802770a:	e7fd      	b.n	8027708 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 802770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 802770e:	4618      	mov	r0, r3
 8027710:	3728      	adds	r7, #40	@ 0x28
 8027712:	46bd      	mov	sp, r7
 8027714:	bd80      	pop	{r7, pc}

08027716 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8027716:	b580      	push	{r7, lr}
 8027718:	b08a      	sub	sp, #40	@ 0x28
 802771a:	af02      	add	r7, sp, #8
 802771c:	60f8      	str	r0, [r7, #12]
 802771e:	60b9      	str	r1, [r7, #8]
 8027720:	4613      	mov	r3, r2
 8027722:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8027724:	2300      	movs	r3, #0
 8027726:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8027728:	68fb      	ldr	r3, [r7, #12]
 802772a:	2b00      	cmp	r3, #0
 802772c:	d032      	beq.n	8027794 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 802772e:	2100      	movs	r1, #0
 8027730:	68ba      	ldr	r2, [r7, #8]
 8027732:	68fb      	ldr	r3, [r7, #12]
 8027734:	fba3 2302 	umull	r2, r3, r3, r2
 8027738:	2b00      	cmp	r3, #0
 802773a:	d000      	beq.n	802773e <xQueueGenericCreate+0x28>
 802773c:	2101      	movs	r1, #1
 802773e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8027740:	2b00      	cmp	r3, #0
 8027742:	d127      	bne.n	8027794 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8027744:	68fb      	ldr	r3, [r7, #12]
 8027746:	68ba      	ldr	r2, [r7, #8]
 8027748:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 802774c:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8027750:	d820      	bhi.n	8027794 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8027752:	68fb      	ldr	r3, [r7, #12]
 8027754:	68ba      	ldr	r2, [r7, #8]
 8027756:	fb02 f303 	mul.w	r3, r2, r3
 802775a:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 802775c:	69bb      	ldr	r3, [r7, #24]
 802775e:	3348      	adds	r3, #72	@ 0x48
 8027760:	4618      	mov	r0, r3
 8027762:	f002 fa23 	bl	8029bac <pvPortMalloc>
 8027766:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8027768:	69fb      	ldr	r3, [r7, #28]
 802776a:	2b00      	cmp	r3, #0
 802776c:	d021      	beq.n	80277b2 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 802776e:	69fb      	ldr	r3, [r7, #28]
 8027770:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8027772:	697b      	ldr	r3, [r7, #20]
 8027774:	3348      	adds	r3, #72	@ 0x48
 8027776:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8027778:	69fb      	ldr	r3, [r7, #28]
 802777a:	2200      	movs	r2, #0
 802777c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8027780:	79fa      	ldrb	r2, [r7, #7]
 8027782:	69fb      	ldr	r3, [r7, #28]
 8027784:	9300      	str	r3, [sp, #0]
 8027786:	4613      	mov	r3, r2
 8027788:	697a      	ldr	r2, [r7, #20]
 802778a:	68b9      	ldr	r1, [r7, #8]
 802778c:	68f8      	ldr	r0, [r7, #12]
 802778e:	f000 f815 	bl	80277bc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8027792:	e00e      	b.n	80277b2 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8027794:	69fb      	ldr	r3, [r7, #28]
 8027796:	2b00      	cmp	r3, #0
 8027798:	d10b      	bne.n	80277b2 <xQueueGenericCreate+0x9c>
    __asm volatile
 802779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802779e:	f383 8811 	msr	BASEPRI, r3
 80277a2:	f3bf 8f6f 	isb	sy
 80277a6:	f3bf 8f4f 	dsb	sy
 80277aa:	613b      	str	r3, [r7, #16]
}
 80277ac:	bf00      	nop
 80277ae:	bf00      	nop
 80277b0:	e7fd      	b.n	80277ae <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80277b2:	69fb      	ldr	r3, [r7, #28]
    }
 80277b4:	4618      	mov	r0, r3
 80277b6:	3720      	adds	r7, #32
 80277b8:	46bd      	mov	sp, r7
 80277ba:	bd80      	pop	{r7, pc}

080277bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80277bc:	b580      	push	{r7, lr}
 80277be:	b084      	sub	sp, #16
 80277c0:	af00      	add	r7, sp, #0
 80277c2:	60f8      	str	r0, [r7, #12]
 80277c4:	60b9      	str	r1, [r7, #8]
 80277c6:	607a      	str	r2, [r7, #4]
 80277c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80277ca:	68bb      	ldr	r3, [r7, #8]
 80277cc:	2b00      	cmp	r3, #0
 80277ce:	d103      	bne.n	80277d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80277d0:	69bb      	ldr	r3, [r7, #24]
 80277d2:	69ba      	ldr	r2, [r7, #24]
 80277d4:	601a      	str	r2, [r3, #0]
 80277d6:	e002      	b.n	80277de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80277d8:	69bb      	ldr	r3, [r7, #24]
 80277da:	687a      	ldr	r2, [r7, #4]
 80277dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80277de:	69bb      	ldr	r3, [r7, #24]
 80277e0:	68fa      	ldr	r2, [r7, #12]
 80277e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80277e4:	69bb      	ldr	r3, [r7, #24]
 80277e6:	68ba      	ldr	r2, [r7, #8]
 80277e8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80277ea:	2101      	movs	r1, #1
 80277ec:	69b8      	ldr	r0, [r7, #24]
 80277ee:	f7ff fe9f 	bl	8027530 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80277f2:	bf00      	nop
 80277f4:	3710      	adds	r7, #16
 80277f6:	46bd      	mov	sp, r7
 80277f8:	bd80      	pop	{r7, pc}
	...

080277fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80277fc:	b580      	push	{r7, lr}
 80277fe:	b08e      	sub	sp, #56	@ 0x38
 8027800:	af00      	add	r7, sp, #0
 8027802:	60f8      	str	r0, [r7, #12]
 8027804:	60b9      	str	r1, [r7, #8]
 8027806:	607a      	str	r2, [r7, #4]
 8027808:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802780a:	2300      	movs	r3, #0
 802780c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 802780e:	68fb      	ldr	r3, [r7, #12]
 8027810:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8027812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027814:	2b00      	cmp	r3, #0
 8027816:	d10b      	bne.n	8027830 <xQueueGenericSend+0x34>
    __asm volatile
 8027818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802781c:	f383 8811 	msr	BASEPRI, r3
 8027820:	f3bf 8f6f 	isb	sy
 8027824:	f3bf 8f4f 	dsb	sy
 8027828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 802782a:	bf00      	nop
 802782c:	bf00      	nop
 802782e:	e7fd      	b.n	802782c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027830:	68bb      	ldr	r3, [r7, #8]
 8027832:	2b00      	cmp	r3, #0
 8027834:	d103      	bne.n	802783e <xQueueGenericSend+0x42>
 8027836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802783a:	2b00      	cmp	r3, #0
 802783c:	d101      	bne.n	8027842 <xQueueGenericSend+0x46>
 802783e:	2301      	movs	r3, #1
 8027840:	e000      	b.n	8027844 <xQueueGenericSend+0x48>
 8027842:	2300      	movs	r3, #0
 8027844:	2b00      	cmp	r3, #0
 8027846:	d10b      	bne.n	8027860 <xQueueGenericSend+0x64>
    __asm volatile
 8027848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802784c:	f383 8811 	msr	BASEPRI, r3
 8027850:	f3bf 8f6f 	isb	sy
 8027854:	f3bf 8f4f 	dsb	sy
 8027858:	627b      	str	r3, [r7, #36]	@ 0x24
}
 802785a:	bf00      	nop
 802785c:	bf00      	nop
 802785e:	e7fd      	b.n	802785c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027860:	683b      	ldr	r3, [r7, #0]
 8027862:	2b02      	cmp	r3, #2
 8027864:	d103      	bne.n	802786e <xQueueGenericSend+0x72>
 8027866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802786a:	2b01      	cmp	r3, #1
 802786c:	d101      	bne.n	8027872 <xQueueGenericSend+0x76>
 802786e:	2301      	movs	r3, #1
 8027870:	e000      	b.n	8027874 <xQueueGenericSend+0x78>
 8027872:	2300      	movs	r3, #0
 8027874:	2b00      	cmp	r3, #0
 8027876:	d10b      	bne.n	8027890 <xQueueGenericSend+0x94>
    __asm volatile
 8027878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802787c:	f383 8811 	msr	BASEPRI, r3
 8027880:	f3bf 8f6f 	isb	sy
 8027884:	f3bf 8f4f 	dsb	sy
 8027888:	623b      	str	r3, [r7, #32]
}
 802788a:	bf00      	nop
 802788c:	bf00      	nop
 802788e:	e7fd      	b.n	802788c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8027890:	f001 fb1a 	bl	8028ec8 <xTaskGetSchedulerState>
 8027894:	4603      	mov	r3, r0
 8027896:	2b00      	cmp	r3, #0
 8027898:	d102      	bne.n	80278a0 <xQueueGenericSend+0xa4>
 802789a:	687b      	ldr	r3, [r7, #4]
 802789c:	2b00      	cmp	r3, #0
 802789e:	d101      	bne.n	80278a4 <xQueueGenericSend+0xa8>
 80278a0:	2301      	movs	r3, #1
 80278a2:	e000      	b.n	80278a6 <xQueueGenericSend+0xaa>
 80278a4:	2300      	movs	r3, #0
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	d10b      	bne.n	80278c2 <xQueueGenericSend+0xc6>
    __asm volatile
 80278aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80278ae:	f383 8811 	msr	BASEPRI, r3
 80278b2:	f3bf 8f6f 	isb	sy
 80278b6:	f3bf 8f4f 	dsb	sy
 80278ba:	61fb      	str	r3, [r7, #28]
}
 80278bc:	bf00      	nop
 80278be:	bf00      	nop
 80278c0:	e7fd      	b.n	80278be <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80278c2:	f002 f88f 	bl	80299e4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80278c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80278ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80278ce:	429a      	cmp	r2, r3
 80278d0:	d302      	bcc.n	80278d8 <xQueueGenericSend+0xdc>
 80278d2:	683b      	ldr	r3, [r7, #0]
 80278d4:	2b02      	cmp	r3, #2
 80278d6:	d129      	bne.n	802792c <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80278d8:	683a      	ldr	r2, [r7, #0]
 80278da:	68b9      	ldr	r1, [r7, #8]
 80278dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80278de:	f000 f971 	bl	8027bc4 <prvCopyDataToQueue>
 80278e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80278e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80278e8:	2b00      	cmp	r3, #0
 80278ea:	d010      	beq.n	802790e <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80278ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278ee:	3324      	adds	r3, #36	@ 0x24
 80278f0:	4618      	mov	r0, r3
 80278f2:	f001 f8a3 	bl	8028a3c <xTaskRemoveFromEventList>
 80278f6:	4603      	mov	r3, r0
 80278f8:	2b00      	cmp	r3, #0
 80278fa:	d013      	beq.n	8027924 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80278fc:	4b3f      	ldr	r3, [pc, #252]	@ (80279fc <xQueueGenericSend+0x200>)
 80278fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8027902:	601a      	str	r2, [r3, #0]
 8027904:	f3bf 8f4f 	dsb	sy
 8027908:	f3bf 8f6f 	isb	sy
 802790c:	e00a      	b.n	8027924 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 802790e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027910:	2b00      	cmp	r3, #0
 8027912:	d007      	beq.n	8027924 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8027914:	4b39      	ldr	r3, [pc, #228]	@ (80279fc <xQueueGenericSend+0x200>)
 8027916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802791a:	601a      	str	r2, [r3, #0]
 802791c:	f3bf 8f4f 	dsb	sy
 8027920:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8027924:	f002 f890 	bl	8029a48 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8027928:	2301      	movs	r3, #1
 802792a:	e063      	b.n	80279f4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 802792c:	687b      	ldr	r3, [r7, #4]
 802792e:	2b00      	cmp	r3, #0
 8027930:	d103      	bne.n	802793a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8027932:	f002 f889 	bl	8029a48 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8027936:	2300      	movs	r3, #0
 8027938:	e05c      	b.n	80279f4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 802793a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802793c:	2b00      	cmp	r3, #0
 802793e:	d106      	bne.n	802794e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8027940:	f107 0314 	add.w	r3, r7, #20
 8027944:	4618      	mov	r0, r3
 8027946:	f001 f953 	bl	8028bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 802794a:	2301      	movs	r3, #1
 802794c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 802794e:	f002 f87b 	bl	8029a48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8027952:	f000 fd69 	bl	8028428 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8027956:	f002 f845 	bl	80299e4 <vPortEnterCritical>
 802795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802795c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027960:	b25b      	sxtb	r3, r3
 8027962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027966:	d103      	bne.n	8027970 <xQueueGenericSend+0x174>
 8027968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802796a:	2200      	movs	r2, #0
 802796c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8027970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027976:	b25b      	sxtb	r3, r3
 8027978:	f1b3 3fff 	cmp.w	r3, #4294967295
 802797c:	d103      	bne.n	8027986 <xQueueGenericSend+0x18a>
 802797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027980:	2200      	movs	r2, #0
 8027982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8027986:	f002 f85f 	bl	8029a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802798a:	1d3a      	adds	r2, r7, #4
 802798c:	f107 0314 	add.w	r3, r7, #20
 8027990:	4611      	mov	r1, r2
 8027992:	4618      	mov	r0, r3
 8027994:	f001 f942 	bl	8028c1c <xTaskCheckForTimeOut>
 8027998:	4603      	mov	r3, r0
 802799a:	2b00      	cmp	r3, #0
 802799c:	d124      	bne.n	80279e8 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802799e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80279a0:	f000 fa08 	bl	8027db4 <prvIsQueueFull>
 80279a4:	4603      	mov	r3, r0
 80279a6:	2b00      	cmp	r3, #0
 80279a8:	d018      	beq.n	80279dc <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80279aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279ac:	3310      	adds	r3, #16
 80279ae:	687a      	ldr	r2, [r7, #4]
 80279b0:	4611      	mov	r1, r2
 80279b2:	4618      	mov	r0, r3
 80279b4:	f000 ffd6 	bl	8028964 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80279b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80279ba:	f000 f993 	bl	8027ce4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80279be:	f000 fd41 	bl	8028444 <xTaskResumeAll>
 80279c2:	4603      	mov	r3, r0
 80279c4:	2b00      	cmp	r3, #0
 80279c6:	f47f af7c 	bne.w	80278c2 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 80279ca:	4b0c      	ldr	r3, [pc, #48]	@ (80279fc <xQueueGenericSend+0x200>)
 80279cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80279d0:	601a      	str	r2, [r3, #0]
 80279d2:	f3bf 8f4f 	dsb	sy
 80279d6:	f3bf 8f6f 	isb	sy
 80279da:	e772      	b.n	80278c2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80279dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80279de:	f000 f981 	bl	8027ce4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80279e2:	f000 fd2f 	bl	8028444 <xTaskResumeAll>
 80279e6:	e76c      	b.n	80278c2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80279e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80279ea:	f000 f97b 	bl	8027ce4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80279ee:	f000 fd29 	bl	8028444 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80279f2:	2300      	movs	r3, #0
        }
    }
}
 80279f4:	4618      	mov	r0, r3
 80279f6:	3738      	adds	r7, #56	@ 0x38
 80279f8:	46bd      	mov	sp, r7
 80279fa:	bd80      	pop	{r7, pc}
 80279fc:	e000ed04 	.word	0xe000ed04

08027a00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8027a00:	b580      	push	{r7, lr}
 8027a02:	b08c      	sub	sp, #48	@ 0x30
 8027a04:	af00      	add	r7, sp, #0
 8027a06:	60f8      	str	r0, [r7, #12]
 8027a08:	60b9      	str	r1, [r7, #8]
 8027a0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8027a0c:	2300      	movs	r3, #0
 8027a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8027a10:	68fb      	ldr	r3, [r7, #12]
 8027a12:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8027a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027a16:	2b00      	cmp	r3, #0
 8027a18:	d10b      	bne.n	8027a32 <xQueueReceive+0x32>
    __asm volatile
 8027a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027a1e:	f383 8811 	msr	BASEPRI, r3
 8027a22:	f3bf 8f6f 	isb	sy
 8027a26:	f3bf 8f4f 	dsb	sy
 8027a2a:	623b      	str	r3, [r7, #32]
}
 8027a2c:	bf00      	nop
 8027a2e:	bf00      	nop
 8027a30:	e7fd      	b.n	8027a2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027a32:	68bb      	ldr	r3, [r7, #8]
 8027a34:	2b00      	cmp	r3, #0
 8027a36:	d103      	bne.n	8027a40 <xQueueReceive+0x40>
 8027a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a3c:	2b00      	cmp	r3, #0
 8027a3e:	d101      	bne.n	8027a44 <xQueueReceive+0x44>
 8027a40:	2301      	movs	r3, #1
 8027a42:	e000      	b.n	8027a46 <xQueueReceive+0x46>
 8027a44:	2300      	movs	r3, #0
 8027a46:	2b00      	cmp	r3, #0
 8027a48:	d10b      	bne.n	8027a62 <xQueueReceive+0x62>
    __asm volatile
 8027a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027a4e:	f383 8811 	msr	BASEPRI, r3
 8027a52:	f3bf 8f6f 	isb	sy
 8027a56:	f3bf 8f4f 	dsb	sy
 8027a5a:	61fb      	str	r3, [r7, #28]
}
 8027a5c:	bf00      	nop
 8027a5e:	bf00      	nop
 8027a60:	e7fd      	b.n	8027a5e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8027a62:	f001 fa31 	bl	8028ec8 <xTaskGetSchedulerState>
 8027a66:	4603      	mov	r3, r0
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d102      	bne.n	8027a72 <xQueueReceive+0x72>
 8027a6c:	687b      	ldr	r3, [r7, #4]
 8027a6e:	2b00      	cmp	r3, #0
 8027a70:	d101      	bne.n	8027a76 <xQueueReceive+0x76>
 8027a72:	2301      	movs	r3, #1
 8027a74:	e000      	b.n	8027a78 <xQueueReceive+0x78>
 8027a76:	2300      	movs	r3, #0
 8027a78:	2b00      	cmp	r3, #0
 8027a7a:	d10b      	bne.n	8027a94 <xQueueReceive+0x94>
    __asm volatile
 8027a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027a80:	f383 8811 	msr	BASEPRI, r3
 8027a84:	f3bf 8f6f 	isb	sy
 8027a88:	f3bf 8f4f 	dsb	sy
 8027a8c:	61bb      	str	r3, [r7, #24]
}
 8027a8e:	bf00      	nop
 8027a90:	bf00      	nop
 8027a92:	e7fd      	b.n	8027a90 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8027a94:	f001 ffa6 	bl	80299e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027a9c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8027a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027aa0:	2b00      	cmp	r3, #0
 8027aa2:	d01f      	beq.n	8027ae4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8027aa4:	68b9      	ldr	r1, [r7, #8]
 8027aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027aa8:	f000 f8f6 	bl	8027c98 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8027aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027aae:	1e5a      	subs	r2, r3, #1
 8027ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027ab2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027ab6:	691b      	ldr	r3, [r3, #16]
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	d00f      	beq.n	8027adc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027abe:	3310      	adds	r3, #16
 8027ac0:	4618      	mov	r0, r3
 8027ac2:	f000 ffbb 	bl	8028a3c <xTaskRemoveFromEventList>
 8027ac6:	4603      	mov	r3, r0
 8027ac8:	2b00      	cmp	r3, #0
 8027aca:	d007      	beq.n	8027adc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8027acc:	4b3c      	ldr	r3, [pc, #240]	@ (8027bc0 <xQueueReceive+0x1c0>)
 8027ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8027ad2:	601a      	str	r2, [r3, #0]
 8027ad4:	f3bf 8f4f 	dsb	sy
 8027ad8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8027adc:	f001 ffb4 	bl	8029a48 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8027ae0:	2301      	movs	r3, #1
 8027ae2:	e069      	b.n	8027bb8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8027ae4:	687b      	ldr	r3, [r7, #4]
 8027ae6:	2b00      	cmp	r3, #0
 8027ae8:	d103      	bne.n	8027af2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8027aea:	f001 ffad 	bl	8029a48 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8027aee:	2300      	movs	r3, #0
 8027af0:	e062      	b.n	8027bb8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8027af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d106      	bne.n	8027b06 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8027af8:	f107 0310 	add.w	r3, r7, #16
 8027afc:	4618      	mov	r0, r3
 8027afe:	f001 f877 	bl	8028bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8027b02:	2301      	movs	r3, #1
 8027b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8027b06:	f001 ff9f 	bl	8029a48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8027b0a:	f000 fc8d 	bl	8028428 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8027b0e:	f001 ff69 	bl	80299e4 <vPortEnterCritical>
 8027b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027b18:	b25b      	sxtb	r3, r3
 8027b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027b1e:	d103      	bne.n	8027b28 <xQueueReceive+0x128>
 8027b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b22:	2200      	movs	r2, #0
 8027b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8027b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027b2e:	b25b      	sxtb	r3, r3
 8027b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027b34:	d103      	bne.n	8027b3e <xQueueReceive+0x13e>
 8027b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b38:	2200      	movs	r2, #0
 8027b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8027b3e:	f001 ff83 	bl	8029a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8027b42:	1d3a      	adds	r2, r7, #4
 8027b44:	f107 0310 	add.w	r3, r7, #16
 8027b48:	4611      	mov	r1, r2
 8027b4a:	4618      	mov	r0, r3
 8027b4c:	f001 f866 	bl	8028c1c <xTaskCheckForTimeOut>
 8027b50:	4603      	mov	r3, r0
 8027b52:	2b00      	cmp	r3, #0
 8027b54:	d123      	bne.n	8027b9e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8027b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027b58:	f000 f916 	bl	8027d88 <prvIsQueueEmpty>
 8027b5c:	4603      	mov	r3, r0
 8027b5e:	2b00      	cmp	r3, #0
 8027b60:	d017      	beq.n	8027b92 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8027b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b64:	3324      	adds	r3, #36	@ 0x24
 8027b66:	687a      	ldr	r2, [r7, #4]
 8027b68:	4611      	mov	r1, r2
 8027b6a:	4618      	mov	r0, r3
 8027b6c:	f000 fefa 	bl	8028964 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8027b70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027b72:	f000 f8b7 	bl	8027ce4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8027b76:	f000 fc65 	bl	8028444 <xTaskResumeAll>
 8027b7a:	4603      	mov	r3, r0
 8027b7c:	2b00      	cmp	r3, #0
 8027b7e:	d189      	bne.n	8027a94 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8027b80:	4b0f      	ldr	r3, [pc, #60]	@ (8027bc0 <xQueueReceive+0x1c0>)
 8027b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8027b86:	601a      	str	r2, [r3, #0]
 8027b88:	f3bf 8f4f 	dsb	sy
 8027b8c:	f3bf 8f6f 	isb	sy
 8027b90:	e780      	b.n	8027a94 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8027b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027b94:	f000 f8a6 	bl	8027ce4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8027b98:	f000 fc54 	bl	8028444 <xTaskResumeAll>
 8027b9c:	e77a      	b.n	8027a94 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8027b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027ba0:	f000 f8a0 	bl	8027ce4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8027ba4:	f000 fc4e 	bl	8028444 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8027ba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027baa:	f000 f8ed 	bl	8027d88 <prvIsQueueEmpty>
 8027bae:	4603      	mov	r3, r0
 8027bb0:	2b00      	cmp	r3, #0
 8027bb2:	f43f af6f 	beq.w	8027a94 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8027bb6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8027bb8:	4618      	mov	r0, r3
 8027bba:	3730      	adds	r7, #48	@ 0x30
 8027bbc:	46bd      	mov	sp, r7
 8027bbe:	bd80      	pop	{r7, pc}
 8027bc0:	e000ed04 	.word	0xe000ed04

08027bc4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8027bc4:	b580      	push	{r7, lr}
 8027bc6:	b086      	sub	sp, #24
 8027bc8:	af00      	add	r7, sp, #0
 8027bca:	60f8      	str	r0, [r7, #12]
 8027bcc:	60b9      	str	r1, [r7, #8]
 8027bce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8027bd0:	2300      	movs	r3, #0
 8027bd2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027bd4:	68fb      	ldr	r3, [r7, #12]
 8027bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027bd8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8027bda:	68fb      	ldr	r3, [r7, #12]
 8027bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	d10d      	bne.n	8027bfe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	681b      	ldr	r3, [r3, #0]
 8027be6:	2b00      	cmp	r3, #0
 8027be8:	d14d      	bne.n	8027c86 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8027bea:	68fb      	ldr	r3, [r7, #12]
 8027bec:	689b      	ldr	r3, [r3, #8]
 8027bee:	4618      	mov	r0, r3
 8027bf0:	f001 f988 	bl	8028f04 <xTaskPriorityDisinherit>
 8027bf4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8027bf6:	68fb      	ldr	r3, [r7, #12]
 8027bf8:	2200      	movs	r2, #0
 8027bfa:	609a      	str	r2, [r3, #8]
 8027bfc:	e043      	b.n	8027c86 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	2b00      	cmp	r3, #0
 8027c02:	d119      	bne.n	8027c38 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8027c04:	68fb      	ldr	r3, [r7, #12]
 8027c06:	6858      	ldr	r0, [r3, #4]
 8027c08:	68fb      	ldr	r3, [r7, #12]
 8027c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027c0c:	461a      	mov	r2, r3
 8027c0e:	68b9      	ldr	r1, [r7, #8]
 8027c10:	f003 ffa9 	bl	802bb66 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8027c14:	68fb      	ldr	r3, [r7, #12]
 8027c16:	685a      	ldr	r2, [r3, #4]
 8027c18:	68fb      	ldr	r3, [r7, #12]
 8027c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027c1c:	441a      	add	r2, r3
 8027c1e:	68fb      	ldr	r3, [r7, #12]
 8027c20:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8027c22:	68fb      	ldr	r3, [r7, #12]
 8027c24:	685a      	ldr	r2, [r3, #4]
 8027c26:	68fb      	ldr	r3, [r7, #12]
 8027c28:	689b      	ldr	r3, [r3, #8]
 8027c2a:	429a      	cmp	r2, r3
 8027c2c:	d32b      	bcc.n	8027c86 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8027c2e:	68fb      	ldr	r3, [r7, #12]
 8027c30:	681a      	ldr	r2, [r3, #0]
 8027c32:	68fb      	ldr	r3, [r7, #12]
 8027c34:	605a      	str	r2, [r3, #4]
 8027c36:	e026      	b.n	8027c86 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8027c38:	68fb      	ldr	r3, [r7, #12]
 8027c3a:	68d8      	ldr	r0, [r3, #12]
 8027c3c:	68fb      	ldr	r3, [r7, #12]
 8027c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027c40:	461a      	mov	r2, r3
 8027c42:	68b9      	ldr	r1, [r7, #8]
 8027c44:	f003 ff8f 	bl	802bb66 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8027c48:	68fb      	ldr	r3, [r7, #12]
 8027c4a:	68da      	ldr	r2, [r3, #12]
 8027c4c:	68fb      	ldr	r3, [r7, #12]
 8027c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027c50:	425b      	negs	r3, r3
 8027c52:	441a      	add	r2, r3
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8027c58:	68fb      	ldr	r3, [r7, #12]
 8027c5a:	68da      	ldr	r2, [r3, #12]
 8027c5c:	68fb      	ldr	r3, [r7, #12]
 8027c5e:	681b      	ldr	r3, [r3, #0]
 8027c60:	429a      	cmp	r2, r3
 8027c62:	d207      	bcs.n	8027c74 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8027c64:	68fb      	ldr	r3, [r7, #12]
 8027c66:	689a      	ldr	r2, [r3, #8]
 8027c68:	68fb      	ldr	r3, [r7, #12]
 8027c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027c6c:	425b      	negs	r3, r3
 8027c6e:	441a      	add	r2, r3
 8027c70:	68fb      	ldr	r3, [r7, #12]
 8027c72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8027c74:	687b      	ldr	r3, [r7, #4]
 8027c76:	2b02      	cmp	r3, #2
 8027c78:	d105      	bne.n	8027c86 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8027c7a:	693b      	ldr	r3, [r7, #16]
 8027c7c:	2b00      	cmp	r3, #0
 8027c7e:	d002      	beq.n	8027c86 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8027c80:	693b      	ldr	r3, [r7, #16]
 8027c82:	3b01      	subs	r3, #1
 8027c84:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8027c86:	693b      	ldr	r3, [r7, #16]
 8027c88:	1c5a      	adds	r2, r3, #1
 8027c8a:	68fb      	ldr	r3, [r7, #12]
 8027c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8027c8e:	697b      	ldr	r3, [r7, #20]
}
 8027c90:	4618      	mov	r0, r3
 8027c92:	3718      	adds	r7, #24
 8027c94:	46bd      	mov	sp, r7
 8027c96:	bd80      	pop	{r7, pc}

08027c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8027c98:	b580      	push	{r7, lr}
 8027c9a:	b082      	sub	sp, #8
 8027c9c:	af00      	add	r7, sp, #0
 8027c9e:	6078      	str	r0, [r7, #4]
 8027ca0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8027ca2:	687b      	ldr	r3, [r7, #4]
 8027ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027ca6:	2b00      	cmp	r3, #0
 8027ca8:	d018      	beq.n	8027cdc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8027caa:	687b      	ldr	r3, [r7, #4]
 8027cac:	68da      	ldr	r2, [r3, #12]
 8027cae:	687b      	ldr	r3, [r7, #4]
 8027cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027cb2:	441a      	add	r2, r3
 8027cb4:	687b      	ldr	r3, [r7, #4]
 8027cb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8027cb8:	687b      	ldr	r3, [r7, #4]
 8027cba:	68da      	ldr	r2, [r3, #12]
 8027cbc:	687b      	ldr	r3, [r7, #4]
 8027cbe:	689b      	ldr	r3, [r3, #8]
 8027cc0:	429a      	cmp	r2, r3
 8027cc2:	d303      	bcc.n	8027ccc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8027cc4:	687b      	ldr	r3, [r7, #4]
 8027cc6:	681a      	ldr	r2, [r3, #0]
 8027cc8:	687b      	ldr	r3, [r7, #4]
 8027cca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8027ccc:	687b      	ldr	r3, [r7, #4]
 8027cce:	68d9      	ldr	r1, [r3, #12]
 8027cd0:	687b      	ldr	r3, [r7, #4]
 8027cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027cd4:	461a      	mov	r2, r3
 8027cd6:	6838      	ldr	r0, [r7, #0]
 8027cd8:	f003 ff45 	bl	802bb66 <memcpy>
    }
}
 8027cdc:	bf00      	nop
 8027cde:	3708      	adds	r7, #8
 8027ce0:	46bd      	mov	sp, r7
 8027ce2:	bd80      	pop	{r7, pc}

08027ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8027ce4:	b580      	push	{r7, lr}
 8027ce6:	b084      	sub	sp, #16
 8027ce8:	af00      	add	r7, sp, #0
 8027cea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8027cec:	f001 fe7a 	bl	80299e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8027cf0:	687b      	ldr	r3, [r7, #4]
 8027cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027cf6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8027cf8:	e011      	b.n	8027d1e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8027cfa:	687b      	ldr	r3, [r7, #4]
 8027cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	d012      	beq.n	8027d28 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027d02:	687b      	ldr	r3, [r7, #4]
 8027d04:	3324      	adds	r3, #36	@ 0x24
 8027d06:	4618      	mov	r0, r3
 8027d08:	f000 fe98 	bl	8028a3c <xTaskRemoveFromEventList>
 8027d0c:	4603      	mov	r3, r0
 8027d0e:	2b00      	cmp	r3, #0
 8027d10:	d001      	beq.n	8027d16 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8027d12:	f000 fffb 	bl	8028d0c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8027d16:	7bfb      	ldrb	r3, [r7, #15]
 8027d18:	3b01      	subs	r3, #1
 8027d1a:	b2db      	uxtb	r3, r3
 8027d1c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8027d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027d22:	2b00      	cmp	r3, #0
 8027d24:	dce9      	bgt.n	8027cfa <prvUnlockQueue+0x16>
 8027d26:	e000      	b.n	8027d2a <prvUnlockQueue+0x46>
                    break;
 8027d28:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8027d2a:	687b      	ldr	r3, [r7, #4]
 8027d2c:	22ff      	movs	r2, #255	@ 0xff
 8027d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8027d32:	f001 fe89 	bl	8029a48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8027d36:	f001 fe55 	bl	80299e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8027d3a:	687b      	ldr	r3, [r7, #4]
 8027d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027d40:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8027d42:	e011      	b.n	8027d68 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027d44:	687b      	ldr	r3, [r7, #4]
 8027d46:	691b      	ldr	r3, [r3, #16]
 8027d48:	2b00      	cmp	r3, #0
 8027d4a:	d012      	beq.n	8027d72 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027d4c:	687b      	ldr	r3, [r7, #4]
 8027d4e:	3310      	adds	r3, #16
 8027d50:	4618      	mov	r0, r3
 8027d52:	f000 fe73 	bl	8028a3c <xTaskRemoveFromEventList>
 8027d56:	4603      	mov	r3, r0
 8027d58:	2b00      	cmp	r3, #0
 8027d5a:	d001      	beq.n	8027d60 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8027d5c:	f000 ffd6 	bl	8028d0c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8027d60:	7bbb      	ldrb	r3, [r7, #14]
 8027d62:	3b01      	subs	r3, #1
 8027d64:	b2db      	uxtb	r3, r3
 8027d66:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8027d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8027d6c:	2b00      	cmp	r3, #0
 8027d6e:	dce9      	bgt.n	8027d44 <prvUnlockQueue+0x60>
 8027d70:	e000      	b.n	8027d74 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8027d72:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8027d74:	687b      	ldr	r3, [r7, #4]
 8027d76:	22ff      	movs	r2, #255	@ 0xff
 8027d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8027d7c:	f001 fe64 	bl	8029a48 <vPortExitCritical>
}
 8027d80:	bf00      	nop
 8027d82:	3710      	adds	r7, #16
 8027d84:	46bd      	mov	sp, r7
 8027d86:	bd80      	pop	{r7, pc}

08027d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8027d88:	b580      	push	{r7, lr}
 8027d8a:	b084      	sub	sp, #16
 8027d8c:	af00      	add	r7, sp, #0
 8027d8e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8027d90:	f001 fe28 	bl	80299e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8027d94:	687b      	ldr	r3, [r7, #4]
 8027d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	d102      	bne.n	8027da2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8027d9c:	2301      	movs	r3, #1
 8027d9e:	60fb      	str	r3, [r7, #12]
 8027da0:	e001      	b.n	8027da6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8027da2:	2300      	movs	r3, #0
 8027da4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8027da6:	f001 fe4f 	bl	8029a48 <vPortExitCritical>

    return xReturn;
 8027daa:	68fb      	ldr	r3, [r7, #12]
}
 8027dac:	4618      	mov	r0, r3
 8027dae:	3710      	adds	r7, #16
 8027db0:	46bd      	mov	sp, r7
 8027db2:	bd80      	pop	{r7, pc}

08027db4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8027db4:	b580      	push	{r7, lr}
 8027db6:	b084      	sub	sp, #16
 8027db8:	af00      	add	r7, sp, #0
 8027dba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8027dbc:	f001 fe12 	bl	80299e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8027dc0:	687b      	ldr	r3, [r7, #4]
 8027dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027dc8:	429a      	cmp	r2, r3
 8027dca:	d102      	bne.n	8027dd2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8027dcc:	2301      	movs	r3, #1
 8027dce:	60fb      	str	r3, [r7, #12]
 8027dd0:	e001      	b.n	8027dd6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8027dd2:	2300      	movs	r3, #0
 8027dd4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8027dd6:	f001 fe37 	bl	8029a48 <vPortExitCritical>

    return xReturn;
 8027dda:	68fb      	ldr	r3, [r7, #12]
}
 8027ddc:	4618      	mov	r0, r3
 8027dde:	3710      	adds	r7, #16
 8027de0:	46bd      	mov	sp, r7
 8027de2:	bd80      	pop	{r7, pc}

08027de4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8027de4:	b580      	push	{r7, lr}
 8027de6:	b086      	sub	sp, #24
 8027de8:	af00      	add	r7, sp, #0
 8027dea:	60f8      	str	r0, [r7, #12]
 8027dec:	60b9      	str	r1, [r7, #8]
 8027dee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8027df0:	68fb      	ldr	r3, [r7, #12]
 8027df2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8027df4:	f001 fdf6 	bl	80299e4 <vPortEnterCritical>
 8027df8:	697b      	ldr	r3, [r7, #20]
 8027dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8027dfe:	b25b      	sxtb	r3, r3
 8027e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e04:	d103      	bne.n	8027e0e <vQueueWaitForMessageRestricted+0x2a>
 8027e06:	697b      	ldr	r3, [r7, #20]
 8027e08:	2200      	movs	r2, #0
 8027e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8027e0e:	697b      	ldr	r3, [r7, #20]
 8027e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8027e14:	b25b      	sxtb	r3, r3
 8027e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e1a:	d103      	bne.n	8027e24 <vQueueWaitForMessageRestricted+0x40>
 8027e1c:	697b      	ldr	r3, [r7, #20]
 8027e1e:	2200      	movs	r2, #0
 8027e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8027e24:	f001 fe10 	bl	8029a48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8027e28:	697b      	ldr	r3, [r7, #20]
 8027e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	d106      	bne.n	8027e3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8027e30:	697b      	ldr	r3, [r7, #20]
 8027e32:	3324      	adds	r3, #36	@ 0x24
 8027e34:	687a      	ldr	r2, [r7, #4]
 8027e36:	68b9      	ldr	r1, [r7, #8]
 8027e38:	4618      	mov	r0, r3
 8027e3a:	f000 fdb9 	bl	80289b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8027e3e:	6978      	ldr	r0, [r7, #20]
 8027e40:	f7ff ff50 	bl	8027ce4 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8027e44:	bf00      	nop
 8027e46:	3718      	adds	r7, #24
 8027e48:	46bd      	mov	sp, r7
 8027e4a:	bd80      	pop	{r7, pc}

08027e4c <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8027e4c:	b580      	push	{r7, lr}
 8027e4e:	b08e      	sub	sp, #56	@ 0x38
 8027e50:	af04      	add	r7, sp, #16
 8027e52:	60f8      	str	r0, [r7, #12]
 8027e54:	60b9      	str	r1, [r7, #8]
 8027e56:	607a      	str	r2, [r7, #4]
 8027e58:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8027e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	d10b      	bne.n	8027e78 <prvCreateStaticTask+0x2c>
    __asm volatile
 8027e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027e64:	f383 8811 	msr	BASEPRI, r3
 8027e68:	f3bf 8f6f 	isb	sy
 8027e6c:	f3bf 8f4f 	dsb	sy
 8027e70:	623b      	str	r3, [r7, #32]
}
 8027e72:	bf00      	nop
 8027e74:	bf00      	nop
 8027e76:	e7fd      	b.n	8027e74 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8027e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027e7a:	2b00      	cmp	r3, #0
 8027e7c:	d10b      	bne.n	8027e96 <prvCreateStaticTask+0x4a>
    __asm volatile
 8027e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027e82:	f383 8811 	msr	BASEPRI, r3
 8027e86:	f3bf 8f6f 	isb	sy
 8027e8a:	f3bf 8f4f 	dsb	sy
 8027e8e:	61fb      	str	r3, [r7, #28]
}
 8027e90:	bf00      	nop
 8027e92:	bf00      	nop
 8027e94:	e7fd      	b.n	8027e92 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8027e96:	2350      	movs	r3, #80	@ 0x50
 8027e98:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8027e9a:	697b      	ldr	r3, [r7, #20]
 8027e9c:	2b50      	cmp	r3, #80	@ 0x50
 8027e9e:	d00b      	beq.n	8027eb8 <prvCreateStaticTask+0x6c>
    __asm volatile
 8027ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8027ea4:	f383 8811 	msr	BASEPRI, r3
 8027ea8:	f3bf 8f6f 	isb	sy
 8027eac:	f3bf 8f4f 	dsb	sy
 8027eb0:	61bb      	str	r3, [r7, #24]
}
 8027eb2:	bf00      	nop
 8027eb4:	bf00      	nop
 8027eb6:	e7fd      	b.n	8027eb4 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8027eb8:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8027eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ebc:	2b00      	cmp	r3, #0
 8027ebe:	d01f      	beq.n	8027f00 <prvCreateStaticTask+0xb4>
 8027ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d01c      	beq.n	8027f00 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8027ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8027eca:	2250      	movs	r2, #80	@ 0x50
 8027ecc:	2100      	movs	r1, #0
 8027ece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8027ed0:	f003 fd92 	bl	802b9f8 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8027ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027ed8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8027eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027edc:	2202      	movs	r2, #2
 8027ede:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8027ee2:	2300      	movs	r3, #0
 8027ee4:	9303      	str	r3, [sp, #12]
 8027ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027ee8:	9302      	str	r3, [sp, #8]
 8027eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027eec:	9301      	str	r3, [sp, #4]
 8027eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027ef0:	9300      	str	r3, [sp, #0]
 8027ef2:	683b      	ldr	r3, [r7, #0]
 8027ef4:	687a      	ldr	r2, [r7, #4]
 8027ef6:	68b9      	ldr	r1, [r7, #8]
 8027ef8:	68f8      	ldr	r0, [r7, #12]
 8027efa:	f000 f88f 	bl	802801c <prvInitialiseNewTask>
 8027efe:	e001      	b.n	8027f04 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8027f00:	2300      	movs	r3, #0
 8027f02:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8027f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8027f06:	4618      	mov	r0, r3
 8027f08:	3728      	adds	r7, #40	@ 0x28
 8027f0a:	46bd      	mov	sp, r7
 8027f0c:	bd80      	pop	{r7, pc}

08027f0e <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8027f0e:	b580      	push	{r7, lr}
 8027f10:	b08a      	sub	sp, #40	@ 0x28
 8027f12:	af04      	add	r7, sp, #16
 8027f14:	60f8      	str	r0, [r7, #12]
 8027f16:	60b9      	str	r1, [r7, #8]
 8027f18:	607a      	str	r2, [r7, #4]
 8027f1a:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8027f1c:	2300      	movs	r3, #0
 8027f1e:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8027f20:	f107 0310 	add.w	r3, r7, #16
 8027f24:	9303      	str	r3, [sp, #12]
 8027f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f28:	9302      	str	r3, [sp, #8]
 8027f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027f2c:	9301      	str	r3, [sp, #4]
 8027f2e:	6a3b      	ldr	r3, [r7, #32]
 8027f30:	9300      	str	r3, [sp, #0]
 8027f32:	683b      	ldr	r3, [r7, #0]
 8027f34:	687a      	ldr	r2, [r7, #4]
 8027f36:	68b9      	ldr	r1, [r7, #8]
 8027f38:	68f8      	ldr	r0, [r7, #12]
 8027f3a:	f7ff ff87 	bl	8027e4c <prvCreateStaticTask>
 8027f3e:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8027f40:	697b      	ldr	r3, [r7, #20]
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d002      	beq.n	8027f4c <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8027f46:	6978      	ldr	r0, [r7, #20]
 8027f48:	f000 f8f8 	bl	802813c <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 8027f4c:	693b      	ldr	r3, [r7, #16]
    }
 8027f4e:	4618      	mov	r0, r3
 8027f50:	3718      	adds	r7, #24
 8027f52:	46bd      	mov	sp, r7
 8027f54:	bd80      	pop	{r7, pc}

08027f56 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8027f56:	b580      	push	{r7, lr}
 8027f58:	b08a      	sub	sp, #40	@ 0x28
 8027f5a:	af04      	add	r7, sp, #16
 8027f5c:	60f8      	str	r0, [r7, #12]
 8027f5e:	60b9      	str	r1, [r7, #8]
 8027f60:	607a      	str	r2, [r7, #4]
 8027f62:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8027f64:	687b      	ldr	r3, [r7, #4]
 8027f66:	009b      	lsls	r3, r3, #2
 8027f68:	4618      	mov	r0, r3
 8027f6a:	f001 fe1f 	bl	8029bac <pvPortMalloc>
 8027f6e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8027f70:	693b      	ldr	r3, [r7, #16]
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d013      	beq.n	8027f9e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8027f76:	2050      	movs	r0, #80	@ 0x50
 8027f78:	f001 fe18 	bl	8029bac <pvPortMalloc>
 8027f7c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8027f7e:	697b      	ldr	r3, [r7, #20]
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	d008      	beq.n	8027f96 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8027f84:	2250      	movs	r2, #80	@ 0x50
 8027f86:	2100      	movs	r1, #0
 8027f88:	6978      	ldr	r0, [r7, #20]
 8027f8a:	f003 fd35 	bl	802b9f8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8027f8e:	697b      	ldr	r3, [r7, #20]
 8027f90:	693a      	ldr	r2, [r7, #16]
 8027f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8027f94:	e005      	b.n	8027fa2 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8027f96:	6938      	ldr	r0, [r7, #16]
 8027f98:	f001 ff3a 	bl	8029e10 <vPortFree>
 8027f9c:	e001      	b.n	8027fa2 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8027f9e:	2300      	movs	r3, #0
 8027fa0:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8027fa2:	697b      	ldr	r3, [r7, #20]
 8027fa4:	2b00      	cmp	r3, #0
 8027fa6:	d011      	beq.n	8027fcc <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8027fa8:	697b      	ldr	r3, [r7, #20]
 8027faa:	2200      	movs	r2, #0
 8027fac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8027fb0:	2300      	movs	r3, #0
 8027fb2:	9303      	str	r3, [sp, #12]
 8027fb4:	697b      	ldr	r3, [r7, #20]
 8027fb6:	9302      	str	r3, [sp, #8]
 8027fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027fba:	9301      	str	r3, [sp, #4]
 8027fbc:	6a3b      	ldr	r3, [r7, #32]
 8027fbe:	9300      	str	r3, [sp, #0]
 8027fc0:	683b      	ldr	r3, [r7, #0]
 8027fc2:	687a      	ldr	r2, [r7, #4]
 8027fc4:	68b9      	ldr	r1, [r7, #8]
 8027fc6:	68f8      	ldr	r0, [r7, #12]
 8027fc8:	f000 f828 	bl	802801c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8027fcc:	697b      	ldr	r3, [r7, #20]
    }
 8027fce:	4618      	mov	r0, r3
 8027fd0:	3718      	adds	r7, #24
 8027fd2:	46bd      	mov	sp, r7
 8027fd4:	bd80      	pop	{r7, pc}

08027fd6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8027fd6:	b580      	push	{r7, lr}
 8027fd8:	b088      	sub	sp, #32
 8027fda:	af02      	add	r7, sp, #8
 8027fdc:	60f8      	str	r0, [r7, #12]
 8027fde:	60b9      	str	r1, [r7, #8]
 8027fe0:	607a      	str	r2, [r7, #4]
 8027fe2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8027fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027fe6:	9301      	str	r3, [sp, #4]
 8027fe8:	6a3b      	ldr	r3, [r7, #32]
 8027fea:	9300      	str	r3, [sp, #0]
 8027fec:	683b      	ldr	r3, [r7, #0]
 8027fee:	687a      	ldr	r2, [r7, #4]
 8027ff0:	68b9      	ldr	r1, [r7, #8]
 8027ff2:	68f8      	ldr	r0, [r7, #12]
 8027ff4:	f7ff ffaf 	bl	8027f56 <prvCreateTask>
 8027ff8:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8027ffa:	693b      	ldr	r3, [r7, #16]
 8027ffc:	2b00      	cmp	r3, #0
 8027ffe:	d005      	beq.n	802800c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8028000:	6938      	ldr	r0, [r7, #16]
 8028002:	f000 f89b 	bl	802813c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8028006:	2301      	movs	r3, #1
 8028008:	617b      	str	r3, [r7, #20]
 802800a:	e002      	b.n	8028012 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 802800c:	f04f 33ff 	mov.w	r3, #4294967295
 8028010:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8028012:	697b      	ldr	r3, [r7, #20]
    }
 8028014:	4618      	mov	r0, r3
 8028016:	3718      	adds	r7, #24
 8028018:	46bd      	mov	sp, r7
 802801a:	bd80      	pop	{r7, pc}

0802801c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 802801c:	b580      	push	{r7, lr}
 802801e:	b088      	sub	sp, #32
 8028020:	af00      	add	r7, sp, #0
 8028022:	60f8      	str	r0, [r7, #12]
 8028024:	60b9      	str	r1, [r7, #8]
 8028026:	607a      	str	r2, [r7, #4]
 8028028:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 802802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802802c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 802802e:	687b      	ldr	r3, [r7, #4]
 8028030:	009b      	lsls	r3, r3, #2
 8028032:	461a      	mov	r2, r3
 8028034:	21a5      	movs	r1, #165	@ 0xa5
 8028036:	f003 fcdf 	bl	802b9f8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 802803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802803c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802803e:	687b      	ldr	r3, [r7, #4]
 8028040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028044:	3b01      	subs	r3, #1
 8028046:	009b      	lsls	r3, r3, #2
 8028048:	4413      	add	r3, r2
 802804a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 802804c:	69bb      	ldr	r3, [r7, #24]
 802804e:	f023 0307 	bic.w	r3, r3, #7
 8028052:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8028054:	69bb      	ldr	r3, [r7, #24]
 8028056:	f003 0307 	and.w	r3, r3, #7
 802805a:	2b00      	cmp	r3, #0
 802805c:	d00b      	beq.n	8028076 <prvInitialiseNewTask+0x5a>
    __asm volatile
 802805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028062:	f383 8811 	msr	BASEPRI, r3
 8028066:	f3bf 8f6f 	isb	sy
 802806a:	f3bf 8f4f 	dsb	sy
 802806e:	617b      	str	r3, [r7, #20]
}
 8028070:	bf00      	nop
 8028072:	bf00      	nop
 8028074:	e7fd      	b.n	8028072 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8028076:	68bb      	ldr	r3, [r7, #8]
 8028078:	2b00      	cmp	r3, #0
 802807a:	d01e      	beq.n	80280ba <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802807c:	2300      	movs	r3, #0
 802807e:	61fb      	str	r3, [r7, #28]
 8028080:	e012      	b.n	80280a8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8028082:	68ba      	ldr	r2, [r7, #8]
 8028084:	69fb      	ldr	r3, [r7, #28]
 8028086:	4413      	add	r3, r2
 8028088:	7819      	ldrb	r1, [r3, #0]
 802808a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802808c:	69fb      	ldr	r3, [r7, #28]
 802808e:	4413      	add	r3, r2
 8028090:	3334      	adds	r3, #52	@ 0x34
 8028092:	460a      	mov	r2, r1
 8028094:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8028096:	68ba      	ldr	r2, [r7, #8]
 8028098:	69fb      	ldr	r3, [r7, #28]
 802809a:	4413      	add	r3, r2
 802809c:	781b      	ldrb	r3, [r3, #0]
 802809e:	2b00      	cmp	r3, #0
 80280a0:	d006      	beq.n	80280b0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80280a2:	69fb      	ldr	r3, [r7, #28]
 80280a4:	3301      	adds	r3, #1
 80280a6:	61fb      	str	r3, [r7, #28]
 80280a8:	69fb      	ldr	r3, [r7, #28]
 80280aa:	2b0b      	cmp	r3, #11
 80280ac:	d9e9      	bls.n	8028082 <prvInitialiseNewTask+0x66>
 80280ae:	e000      	b.n	80280b2 <prvInitialiseNewTask+0x96>
            {
                break;
 80280b0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80280b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80280b4:	2200      	movs	r2, #0
 80280b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80280ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80280bc:	2b1f      	cmp	r3, #31
 80280be:	d90b      	bls.n	80280d8 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80280c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80280c4:	f383 8811 	msr	BASEPRI, r3
 80280c8:	f3bf 8f6f 	isb	sy
 80280cc:	f3bf 8f4f 	dsb	sy
 80280d0:	613b      	str	r3, [r7, #16]
}
 80280d2:	bf00      	nop
 80280d4:	bf00      	nop
 80280d6:	e7fd      	b.n	80280d4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80280d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80280da:	2b1f      	cmp	r3, #31
 80280dc:	d901      	bls.n	80280e2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80280de:	231f      	movs	r3, #31
 80280e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80280e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80280e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80280e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80280e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80280ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80280ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80280ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80280f0:	3304      	adds	r3, #4
 80280f2:	4618      	mov	r0, r3
 80280f4:	f7ff f9ac 	bl	8027450 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80280f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80280fa:	3318      	adds	r3, #24
 80280fc:	4618      	mov	r0, r3
 80280fe:	f7ff f9a7 	bl	8027450 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8028102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028106:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8028108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802810a:	f1c3 0220 	rsb	r2, r3, #32
 802810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028110:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8028112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028116:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8028118:	683a      	ldr	r2, [r7, #0]
 802811a:	68f9      	ldr	r1, [r7, #12]
 802811c:	69b8      	ldr	r0, [r7, #24]
 802811e:	f001 fae1 	bl	80296e4 <pxPortInitialiseStack>
 8028122:	4602      	mov	r2, r0
 8028124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028126:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8028128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802812a:	2b00      	cmp	r3, #0
 802812c:	d002      	beq.n	8028134 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802812e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028132:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8028134:	bf00      	nop
 8028136:	3720      	adds	r7, #32
 8028138:	46bd      	mov	sp, r7
 802813a:	bd80      	pop	{r7, pc}

0802813c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 802813c:	b580      	push	{r7, lr}
 802813e:	b084      	sub	sp, #16
 8028140:	af00      	add	r7, sp, #0
 8028142:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8028144:	f001 fc4e 	bl	80299e4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8028148:	4b3f      	ldr	r3, [pc, #252]	@ (8028248 <prvAddNewTaskToReadyList+0x10c>)
 802814a:	681b      	ldr	r3, [r3, #0]
 802814c:	3301      	adds	r3, #1
 802814e:	4a3e      	ldr	r2, [pc, #248]	@ (8028248 <prvAddNewTaskToReadyList+0x10c>)
 8028150:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8028152:	4b3e      	ldr	r3, [pc, #248]	@ (802824c <prvAddNewTaskToReadyList+0x110>)
 8028154:	681b      	ldr	r3, [r3, #0]
 8028156:	2b00      	cmp	r3, #0
 8028158:	d109      	bne.n	802816e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 802815a:	4a3c      	ldr	r2, [pc, #240]	@ (802824c <prvAddNewTaskToReadyList+0x110>)
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8028160:	4b39      	ldr	r3, [pc, #228]	@ (8028248 <prvAddNewTaskToReadyList+0x10c>)
 8028162:	681b      	ldr	r3, [r3, #0]
 8028164:	2b01      	cmp	r3, #1
 8028166:	d110      	bne.n	802818a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8028168:	f000 fdf4 	bl	8028d54 <prvInitialiseTaskLists>
 802816c:	e00d      	b.n	802818a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 802816e:	4b38      	ldr	r3, [pc, #224]	@ (8028250 <prvAddNewTaskToReadyList+0x114>)
 8028170:	681b      	ldr	r3, [r3, #0]
 8028172:	2b00      	cmp	r3, #0
 8028174:	d109      	bne.n	802818a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8028176:	4b35      	ldr	r3, [pc, #212]	@ (802824c <prvAddNewTaskToReadyList+0x110>)
 8028178:	681b      	ldr	r3, [r3, #0]
 802817a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028180:	429a      	cmp	r2, r3
 8028182:	d802      	bhi.n	802818a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8028184:	4a31      	ldr	r2, [pc, #196]	@ (802824c <prvAddNewTaskToReadyList+0x110>)
 8028186:	687b      	ldr	r3, [r7, #4]
 8028188:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 802818a:	4b32      	ldr	r3, [pc, #200]	@ (8028254 <prvAddNewTaskToReadyList+0x118>)
 802818c:	681b      	ldr	r3, [r3, #0]
 802818e:	3301      	adds	r3, #1
 8028190:	4a30      	ldr	r2, [pc, #192]	@ (8028254 <prvAddNewTaskToReadyList+0x118>)
 8028192:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028198:	2201      	movs	r2, #1
 802819a:	409a      	lsls	r2, r3
 802819c:	4b2e      	ldr	r3, [pc, #184]	@ (8028258 <prvAddNewTaskToReadyList+0x11c>)
 802819e:	681b      	ldr	r3, [r3, #0]
 80281a0:	4313      	orrs	r3, r2
 80281a2:	4a2d      	ldr	r2, [pc, #180]	@ (8028258 <prvAddNewTaskToReadyList+0x11c>)
 80281a4:	6013      	str	r3, [r2, #0]
 80281a6:	687b      	ldr	r3, [r7, #4]
 80281a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80281aa:	492c      	ldr	r1, [pc, #176]	@ (802825c <prvAddNewTaskToReadyList+0x120>)
 80281ac:	4613      	mov	r3, r2
 80281ae:	009b      	lsls	r3, r3, #2
 80281b0:	4413      	add	r3, r2
 80281b2:	009b      	lsls	r3, r3, #2
 80281b4:	440b      	add	r3, r1
 80281b6:	3304      	adds	r3, #4
 80281b8:	681b      	ldr	r3, [r3, #0]
 80281ba:	60fb      	str	r3, [r7, #12]
 80281bc:	687b      	ldr	r3, [r7, #4]
 80281be:	68fa      	ldr	r2, [r7, #12]
 80281c0:	609a      	str	r2, [r3, #8]
 80281c2:	68fb      	ldr	r3, [r7, #12]
 80281c4:	689a      	ldr	r2, [r3, #8]
 80281c6:	687b      	ldr	r3, [r7, #4]
 80281c8:	60da      	str	r2, [r3, #12]
 80281ca:	68fb      	ldr	r3, [r7, #12]
 80281cc:	689b      	ldr	r3, [r3, #8]
 80281ce:	687a      	ldr	r2, [r7, #4]
 80281d0:	3204      	adds	r2, #4
 80281d2:	605a      	str	r2, [r3, #4]
 80281d4:	687b      	ldr	r3, [r7, #4]
 80281d6:	1d1a      	adds	r2, r3, #4
 80281d8:	68fb      	ldr	r3, [r7, #12]
 80281da:	609a      	str	r2, [r3, #8]
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80281e0:	4613      	mov	r3, r2
 80281e2:	009b      	lsls	r3, r3, #2
 80281e4:	4413      	add	r3, r2
 80281e6:	009b      	lsls	r3, r3, #2
 80281e8:	4a1c      	ldr	r2, [pc, #112]	@ (802825c <prvAddNewTaskToReadyList+0x120>)
 80281ea:	441a      	add	r2, r3
 80281ec:	687b      	ldr	r3, [r7, #4]
 80281ee:	615a      	str	r2, [r3, #20]
 80281f0:	687b      	ldr	r3, [r7, #4]
 80281f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80281f4:	4919      	ldr	r1, [pc, #100]	@ (802825c <prvAddNewTaskToReadyList+0x120>)
 80281f6:	4613      	mov	r3, r2
 80281f8:	009b      	lsls	r3, r3, #2
 80281fa:	4413      	add	r3, r2
 80281fc:	009b      	lsls	r3, r3, #2
 80281fe:	440b      	add	r3, r1
 8028200:	681b      	ldr	r3, [r3, #0]
 8028202:	687a      	ldr	r2, [r7, #4]
 8028204:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8028206:	1c59      	adds	r1, r3, #1
 8028208:	4814      	ldr	r0, [pc, #80]	@ (802825c <prvAddNewTaskToReadyList+0x120>)
 802820a:	4613      	mov	r3, r2
 802820c:	009b      	lsls	r3, r3, #2
 802820e:	4413      	add	r3, r2
 8028210:	009b      	lsls	r3, r3, #2
 8028212:	4403      	add	r3, r0
 8028214:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8028216:	f001 fc17 	bl	8029a48 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 802821a:	4b0d      	ldr	r3, [pc, #52]	@ (8028250 <prvAddNewTaskToReadyList+0x114>)
 802821c:	681b      	ldr	r3, [r3, #0]
 802821e:	2b00      	cmp	r3, #0
 8028220:	d00e      	beq.n	8028240 <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8028222:	4b0a      	ldr	r3, [pc, #40]	@ (802824c <prvAddNewTaskToReadyList+0x110>)
 8028224:	681b      	ldr	r3, [r3, #0]
 8028226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028228:	687b      	ldr	r3, [r7, #4]
 802822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802822c:	429a      	cmp	r2, r3
 802822e:	d207      	bcs.n	8028240 <prvAddNewTaskToReadyList+0x104>
 8028230:	4b0b      	ldr	r3, [pc, #44]	@ (8028260 <prvAddNewTaskToReadyList+0x124>)
 8028232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8028236:	601a      	str	r2, [r3, #0]
 8028238:	f3bf 8f4f 	dsb	sy
 802823c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8028240:	bf00      	nop
 8028242:	3710      	adds	r7, #16
 8028244:	46bd      	mov	sp, r7
 8028246:	bd80      	pop	{r7, pc}
 8028248:	2000447c 	.word	0x2000447c
 802824c:	20004188 	.word	0x20004188
 8028250:	20004488 	.word	0x20004488
 8028254:	20004498 	.word	0x20004498
 8028258:	20004484 	.word	0x20004484
 802825c:	2000418c 	.word	0x2000418c
 8028260:	e000ed04 	.word	0xe000ed04

08028264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8028264:	b580      	push	{r7, lr}
 8028266:	b084      	sub	sp, #16
 8028268:	af00      	add	r7, sp, #0
 802826a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 802826c:	2300      	movs	r3, #0
 802826e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8028270:	687b      	ldr	r3, [r7, #4]
 8028272:	2b00      	cmp	r3, #0
 8028274:	d018      	beq.n	80282a8 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8028276:	f000 f8d7 	bl	8028428 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 802827a:	4b13      	ldr	r3, [pc, #76]	@ (80282c8 <vTaskDelay+0x64>)
 802827c:	681b      	ldr	r3, [r3, #0]
 802827e:	2b01      	cmp	r3, #1
 8028280:	d00b      	beq.n	802829a <vTaskDelay+0x36>
    __asm volatile
 8028282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028286:	f383 8811 	msr	BASEPRI, r3
 802828a:	f3bf 8f6f 	isb	sy
 802828e:	f3bf 8f4f 	dsb	sy
 8028292:	60bb      	str	r3, [r7, #8]
}
 8028294:	bf00      	nop
 8028296:	bf00      	nop
 8028298:	e7fd      	b.n	8028296 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802829a:	2100      	movs	r1, #0
 802829c:	6878      	ldr	r0, [r7, #4]
 802829e:	f000 fed9 	bl	8029054 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80282a2:	f000 f8cf 	bl	8028444 <xTaskResumeAll>
 80282a6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80282a8:	68fb      	ldr	r3, [r7, #12]
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	d107      	bne.n	80282be <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80282ae:	4b07      	ldr	r3, [pc, #28]	@ (80282cc <vTaskDelay+0x68>)
 80282b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80282b4:	601a      	str	r2, [r3, #0]
 80282b6:	f3bf 8f4f 	dsb	sy
 80282ba:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80282be:	bf00      	nop
 80282c0:	3710      	adds	r7, #16
 80282c2:	46bd      	mov	sp, r7
 80282c4:	bd80      	pop	{r7, pc}
 80282c6:	bf00      	nop
 80282c8:	200044a4 	.word	0x200044a4
 80282cc:	e000ed04 	.word	0xe000ed04

080282d0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80282d0:	b580      	push	{r7, lr}
 80282d2:	b08e      	sub	sp, #56	@ 0x38
 80282d4:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80282d6:	2301      	movs	r3, #1
 80282d8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80282da:	2300      	movs	r3, #0
 80282dc:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80282de:	2300      	movs	r3, #0
 80282e0:	61fb      	str	r3, [r7, #28]
 80282e2:	e013      	b.n	802830c <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80282e4:	4a2b      	ldr	r2, [pc, #172]	@ (8028394 <prvCreateIdleTasks+0xc4>)
 80282e6:	69fb      	ldr	r3, [r7, #28]
 80282e8:	4413      	add	r3, r2
 80282ea:	7819      	ldrb	r1, [r3, #0]
 80282ec:	f107 020c 	add.w	r2, r7, #12
 80282f0:	69fb      	ldr	r3, [r7, #28]
 80282f2:	4413      	add	r3, r2
 80282f4:	460a      	mov	r2, r1
 80282f6:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80282f8:	f107 020c 	add.w	r2, r7, #12
 80282fc:	69fb      	ldr	r3, [r7, #28]
 80282fe:	4413      	add	r3, r2
 8028300:	781b      	ldrb	r3, [r3, #0]
 8028302:	2b00      	cmp	r3, #0
 8028304:	d006      	beq.n	8028314 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8028306:	69fb      	ldr	r3, [r7, #28]
 8028308:	3301      	adds	r3, #1
 802830a:	61fb      	str	r3, [r7, #28]
 802830c:	69fb      	ldr	r3, [r7, #28]
 802830e:	2b0b      	cmp	r3, #11
 8028310:	dde8      	ble.n	80282e4 <prvCreateIdleTasks+0x14>
 8028312:	e000      	b.n	8028316 <prvCreateIdleTasks+0x46>
        {
            break;
 8028314:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8028316:	2300      	movs	r3, #0
 8028318:	623b      	str	r3, [r7, #32]
 802831a:	e030      	b.n	802837e <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 802831c:	4b1e      	ldr	r3, [pc, #120]	@ (8028398 <prvCreateIdleTasks+0xc8>)
 802831e:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8028320:	2300      	movs	r3, #0
 8028322:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8028324:	2300      	movs	r3, #0
 8028326:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8028328:	463a      	mov	r2, r7
 802832a:	1d39      	adds	r1, r7, #4
 802832c:	f107 0308 	add.w	r3, r7, #8
 8028330:	4618      	mov	r0, r3
 8028332:	f7ff f853 	bl	80273dc <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8028336:	6838      	ldr	r0, [r7, #0]
 8028338:	687b      	ldr	r3, [r7, #4]
 802833a:	68ba      	ldr	r2, [r7, #8]
 802833c:	f107 010c 	add.w	r1, r7, #12
 8028340:	9202      	str	r2, [sp, #8]
 8028342:	9301      	str	r3, [sp, #4]
 8028344:	2300      	movs	r3, #0
 8028346:	9300      	str	r3, [sp, #0]
 8028348:	2300      	movs	r3, #0
 802834a:	4602      	mov	r2, r0
 802834c:	69b8      	ldr	r0, [r7, #24]
 802834e:	f7ff fdde 	bl	8027f0e <xTaskCreateStatic>
 8028352:	4602      	mov	r2, r0
 8028354:	4911      	ldr	r1, [pc, #68]	@ (802839c <prvCreateIdleTasks+0xcc>)
 8028356:	6a3b      	ldr	r3, [r7, #32]
 8028358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 802835c:	4a0f      	ldr	r2, [pc, #60]	@ (802839c <prvCreateIdleTasks+0xcc>)
 802835e:	6a3b      	ldr	r3, [r7, #32]
 8028360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028364:	2b00      	cmp	r3, #0
 8028366:	d002      	beq.n	802836e <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 8028368:	2301      	movs	r3, #1
 802836a:	627b      	str	r3, [r7, #36]	@ 0x24
 802836c:	e001      	b.n	8028372 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 802836e:	2300      	movs	r3, #0
 8028370:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8028372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028374:	2b00      	cmp	r3, #0
 8028376:	d006      	beq.n	8028386 <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8028378:	6a3b      	ldr	r3, [r7, #32]
 802837a:	3301      	adds	r3, #1
 802837c:	623b      	str	r3, [r7, #32]
 802837e:	6a3b      	ldr	r3, [r7, #32]
 8028380:	2b00      	cmp	r3, #0
 8028382:	ddcb      	ble.n	802831c <prvCreateIdleTasks+0x4c>
 8028384:	e000      	b.n	8028388 <prvCreateIdleTasks+0xb8>
        {
            break;
 8028386:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8028388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802838a:	4618      	mov	r0, r3
 802838c:	3728      	adds	r7, #40	@ 0x28
 802838e:	46bd      	mov	sp, r7
 8028390:	bd80      	pop	{r7, pc}
 8028392:	bf00      	nop
 8028394:	0802f1f8 	.word	0x0802f1f8
 8028398:	08028d25 	.word	0x08028d25
 802839c:	200044a0 	.word	0x200044a0

080283a0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80283a0:	b580      	push	{r7, lr}
 80283a2:	b084      	sub	sp, #16
 80283a4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80283a6:	f7ff ff93 	bl	80282d0 <prvCreateIdleTasks>
 80283aa:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80283ac:	68fb      	ldr	r3, [r7, #12]
 80283ae:	2b01      	cmp	r3, #1
 80283b0:	d102      	bne.n	80283b8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80283b2:	f000 fed5 	bl	8029160 <xTimerCreateTimerTask>
 80283b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80283b8:	68fb      	ldr	r3, [r7, #12]
 80283ba:	2b01      	cmp	r3, #1
 80283bc:	d116      	bne.n	80283ec <vTaskStartScheduler+0x4c>
    __asm volatile
 80283be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80283c2:	f383 8811 	msr	BASEPRI, r3
 80283c6:	f3bf 8f6f 	isb	sy
 80283ca:	f3bf 8f4f 	dsb	sy
 80283ce:	60bb      	str	r3, [r7, #8]
}
 80283d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80283d2:	4b11      	ldr	r3, [pc, #68]	@ (8028418 <vTaskStartScheduler+0x78>)
 80283d4:	f04f 32ff 	mov.w	r2, #4294967295
 80283d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80283da:	4b10      	ldr	r3, [pc, #64]	@ (802841c <vTaskStartScheduler+0x7c>)
 80283dc:	2201      	movs	r2, #1
 80283de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80283e0:	4b0f      	ldr	r3, [pc, #60]	@ (8028420 <vTaskStartScheduler+0x80>)
 80283e2:	2200      	movs	r2, #0
 80283e4:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80283e6:	f001 fa0d 	bl	8029804 <xPortStartScheduler>
 80283ea:	e00f      	b.n	802840c <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80283ec:	68fb      	ldr	r3, [r7, #12]
 80283ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80283f2:	d10b      	bne.n	802840c <vTaskStartScheduler+0x6c>
    __asm volatile
 80283f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80283f8:	f383 8811 	msr	BASEPRI, r3
 80283fc:	f3bf 8f6f 	isb	sy
 8028400:	f3bf 8f4f 	dsb	sy
 8028404:	607b      	str	r3, [r7, #4]
}
 8028406:	bf00      	nop
 8028408:	bf00      	nop
 802840a:	e7fd      	b.n	8028408 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 802840c:	4b05      	ldr	r3, [pc, #20]	@ (8028424 <vTaskStartScheduler+0x84>)
 802840e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8028410:	bf00      	nop
 8028412:	3710      	adds	r7, #16
 8028414:	46bd      	mov	sp, r7
 8028416:	bd80      	pop	{r7, pc}
 8028418:	2000449c 	.word	0x2000449c
 802841c:	20004488 	.word	0x20004488
 8028420:	20004480 	.word	0x20004480
 8028424:	0802f264 	.word	0x0802f264

08028428 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8028428:	b480      	push	{r7}
 802842a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 802842c:	4b04      	ldr	r3, [pc, #16]	@ (8028440 <vTaskSuspendAll+0x18>)
 802842e:	681b      	ldr	r3, [r3, #0]
 8028430:	3301      	adds	r3, #1
 8028432:	4a03      	ldr	r2, [pc, #12]	@ (8028440 <vTaskSuspendAll+0x18>)
 8028434:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8028436:	bf00      	nop
 8028438:	46bd      	mov	sp, r7
 802843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802843e:	4770      	bx	lr
 8028440:	200044a4 	.word	0x200044a4

08028444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8028444:	b580      	push	{r7, lr}
 8028446:	b088      	sub	sp, #32
 8028448:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 802844a:	2300      	movs	r3, #0
 802844c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 802844e:	2300      	movs	r3, #0
 8028450:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8028452:	f001 fac7 	bl	80299e4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8028456:	2300      	movs	r3, #0
 8028458:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 802845a:	4b75      	ldr	r3, [pc, #468]	@ (8028630 <xTaskResumeAll+0x1ec>)
 802845c:	681b      	ldr	r3, [r3, #0]
 802845e:	2b00      	cmp	r3, #0
 8028460:	d10b      	bne.n	802847a <xTaskResumeAll+0x36>
    __asm volatile
 8028462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028466:	f383 8811 	msr	BASEPRI, r3
 802846a:	f3bf 8f6f 	isb	sy
 802846e:	f3bf 8f4f 	dsb	sy
 8028472:	603b      	str	r3, [r7, #0]
}
 8028474:	bf00      	nop
 8028476:	bf00      	nop
 8028478:	e7fd      	b.n	8028476 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 802847a:	4b6d      	ldr	r3, [pc, #436]	@ (8028630 <xTaskResumeAll+0x1ec>)
 802847c:	681b      	ldr	r3, [r3, #0]
 802847e:	3b01      	subs	r3, #1
 8028480:	4a6b      	ldr	r2, [pc, #428]	@ (8028630 <xTaskResumeAll+0x1ec>)
 8028482:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8028484:	4b6a      	ldr	r3, [pc, #424]	@ (8028630 <xTaskResumeAll+0x1ec>)
 8028486:	681b      	ldr	r3, [r3, #0]
 8028488:	2b00      	cmp	r3, #0
 802848a:	f040 80ca 	bne.w	8028622 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802848e:	4b69      	ldr	r3, [pc, #420]	@ (8028634 <xTaskResumeAll+0x1f0>)
 8028490:	681b      	ldr	r3, [r3, #0]
 8028492:	2b00      	cmp	r3, #0
 8028494:	f000 80c5 	beq.w	8028622 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8028498:	e08e      	b.n	80285b8 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 802849a:	4b67      	ldr	r3, [pc, #412]	@ (8028638 <xTaskResumeAll+0x1f4>)
 802849c:	68db      	ldr	r3, [r3, #12]
 802849e:	68db      	ldr	r3, [r3, #12]
 80284a0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80284a2:	69fb      	ldr	r3, [r7, #28]
 80284a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80284a6:	60fb      	str	r3, [r7, #12]
 80284a8:	69fb      	ldr	r3, [r7, #28]
 80284aa:	69db      	ldr	r3, [r3, #28]
 80284ac:	69fa      	ldr	r2, [r7, #28]
 80284ae:	6a12      	ldr	r2, [r2, #32]
 80284b0:	609a      	str	r2, [r3, #8]
 80284b2:	69fb      	ldr	r3, [r7, #28]
 80284b4:	6a1b      	ldr	r3, [r3, #32]
 80284b6:	69fa      	ldr	r2, [r7, #28]
 80284b8:	69d2      	ldr	r2, [r2, #28]
 80284ba:	605a      	str	r2, [r3, #4]
 80284bc:	68fb      	ldr	r3, [r7, #12]
 80284be:	685a      	ldr	r2, [r3, #4]
 80284c0:	69fb      	ldr	r3, [r7, #28]
 80284c2:	3318      	adds	r3, #24
 80284c4:	429a      	cmp	r2, r3
 80284c6:	d103      	bne.n	80284d0 <xTaskResumeAll+0x8c>
 80284c8:	69fb      	ldr	r3, [r7, #28]
 80284ca:	6a1a      	ldr	r2, [r3, #32]
 80284cc:	68fb      	ldr	r3, [r7, #12]
 80284ce:	605a      	str	r2, [r3, #4]
 80284d0:	69fb      	ldr	r3, [r7, #28]
 80284d2:	2200      	movs	r2, #0
 80284d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80284d6:	68fb      	ldr	r3, [r7, #12]
 80284d8:	681b      	ldr	r3, [r3, #0]
 80284da:	1e5a      	subs	r2, r3, #1
 80284dc:	68fb      	ldr	r3, [r7, #12]
 80284de:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80284e0:	69fb      	ldr	r3, [r7, #28]
 80284e2:	695b      	ldr	r3, [r3, #20]
 80284e4:	60bb      	str	r3, [r7, #8]
 80284e6:	69fb      	ldr	r3, [r7, #28]
 80284e8:	689b      	ldr	r3, [r3, #8]
 80284ea:	69fa      	ldr	r2, [r7, #28]
 80284ec:	68d2      	ldr	r2, [r2, #12]
 80284ee:	609a      	str	r2, [r3, #8]
 80284f0:	69fb      	ldr	r3, [r7, #28]
 80284f2:	68db      	ldr	r3, [r3, #12]
 80284f4:	69fa      	ldr	r2, [r7, #28]
 80284f6:	6892      	ldr	r2, [r2, #8]
 80284f8:	605a      	str	r2, [r3, #4]
 80284fa:	68bb      	ldr	r3, [r7, #8]
 80284fc:	685a      	ldr	r2, [r3, #4]
 80284fe:	69fb      	ldr	r3, [r7, #28]
 8028500:	3304      	adds	r3, #4
 8028502:	429a      	cmp	r2, r3
 8028504:	d103      	bne.n	802850e <xTaskResumeAll+0xca>
 8028506:	69fb      	ldr	r3, [r7, #28]
 8028508:	68da      	ldr	r2, [r3, #12]
 802850a:	68bb      	ldr	r3, [r7, #8]
 802850c:	605a      	str	r2, [r3, #4]
 802850e:	69fb      	ldr	r3, [r7, #28]
 8028510:	2200      	movs	r2, #0
 8028512:	615a      	str	r2, [r3, #20]
 8028514:	68bb      	ldr	r3, [r7, #8]
 8028516:	681b      	ldr	r3, [r3, #0]
 8028518:	1e5a      	subs	r2, r3, #1
 802851a:	68bb      	ldr	r3, [r7, #8]
 802851c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 802851e:	69fb      	ldr	r3, [r7, #28]
 8028520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028522:	2201      	movs	r2, #1
 8028524:	409a      	lsls	r2, r3
 8028526:	4b45      	ldr	r3, [pc, #276]	@ (802863c <xTaskResumeAll+0x1f8>)
 8028528:	681b      	ldr	r3, [r3, #0]
 802852a:	4313      	orrs	r3, r2
 802852c:	4a43      	ldr	r2, [pc, #268]	@ (802863c <xTaskResumeAll+0x1f8>)
 802852e:	6013      	str	r3, [r2, #0]
 8028530:	69fb      	ldr	r3, [r7, #28]
 8028532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028534:	4942      	ldr	r1, [pc, #264]	@ (8028640 <xTaskResumeAll+0x1fc>)
 8028536:	4613      	mov	r3, r2
 8028538:	009b      	lsls	r3, r3, #2
 802853a:	4413      	add	r3, r2
 802853c:	009b      	lsls	r3, r3, #2
 802853e:	440b      	add	r3, r1
 8028540:	3304      	adds	r3, #4
 8028542:	681b      	ldr	r3, [r3, #0]
 8028544:	607b      	str	r3, [r7, #4]
 8028546:	69fb      	ldr	r3, [r7, #28]
 8028548:	687a      	ldr	r2, [r7, #4]
 802854a:	609a      	str	r2, [r3, #8]
 802854c:	687b      	ldr	r3, [r7, #4]
 802854e:	689a      	ldr	r2, [r3, #8]
 8028550:	69fb      	ldr	r3, [r7, #28]
 8028552:	60da      	str	r2, [r3, #12]
 8028554:	687b      	ldr	r3, [r7, #4]
 8028556:	689b      	ldr	r3, [r3, #8]
 8028558:	69fa      	ldr	r2, [r7, #28]
 802855a:	3204      	adds	r2, #4
 802855c:	605a      	str	r2, [r3, #4]
 802855e:	69fb      	ldr	r3, [r7, #28]
 8028560:	1d1a      	adds	r2, r3, #4
 8028562:	687b      	ldr	r3, [r7, #4]
 8028564:	609a      	str	r2, [r3, #8]
 8028566:	69fb      	ldr	r3, [r7, #28]
 8028568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802856a:	4613      	mov	r3, r2
 802856c:	009b      	lsls	r3, r3, #2
 802856e:	4413      	add	r3, r2
 8028570:	009b      	lsls	r3, r3, #2
 8028572:	4a33      	ldr	r2, [pc, #204]	@ (8028640 <xTaskResumeAll+0x1fc>)
 8028574:	441a      	add	r2, r3
 8028576:	69fb      	ldr	r3, [r7, #28]
 8028578:	615a      	str	r2, [r3, #20]
 802857a:	69fb      	ldr	r3, [r7, #28]
 802857c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802857e:	4930      	ldr	r1, [pc, #192]	@ (8028640 <xTaskResumeAll+0x1fc>)
 8028580:	4613      	mov	r3, r2
 8028582:	009b      	lsls	r3, r3, #2
 8028584:	4413      	add	r3, r2
 8028586:	009b      	lsls	r3, r3, #2
 8028588:	440b      	add	r3, r1
 802858a:	681b      	ldr	r3, [r3, #0]
 802858c:	69fa      	ldr	r2, [r7, #28]
 802858e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8028590:	1c59      	adds	r1, r3, #1
 8028592:	482b      	ldr	r0, [pc, #172]	@ (8028640 <xTaskResumeAll+0x1fc>)
 8028594:	4613      	mov	r3, r2
 8028596:	009b      	lsls	r3, r3, #2
 8028598:	4413      	add	r3, r2
 802859a:	009b      	lsls	r3, r3, #2
 802859c:	4403      	add	r3, r0
 802859e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80285a0:	69fb      	ldr	r3, [r7, #28]
 80285a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80285a4:	4b27      	ldr	r3, [pc, #156]	@ (8028644 <xTaskResumeAll+0x200>)
 80285a6:	681b      	ldr	r3, [r3, #0]
 80285a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80285aa:	429a      	cmp	r2, r3
 80285ac:	d904      	bls.n	80285b8 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80285ae:	4a26      	ldr	r2, [pc, #152]	@ (8028648 <xTaskResumeAll+0x204>)
 80285b0:	693b      	ldr	r3, [r7, #16]
 80285b2:	2101      	movs	r1, #1
 80285b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80285b8:	4b1f      	ldr	r3, [pc, #124]	@ (8028638 <xTaskResumeAll+0x1f4>)
 80285ba:	681b      	ldr	r3, [r3, #0]
 80285bc:	2b00      	cmp	r3, #0
 80285be:	f47f af6c 	bne.w	802849a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80285c2:	69fb      	ldr	r3, [r7, #28]
 80285c4:	2b00      	cmp	r3, #0
 80285c6:	d001      	beq.n	80285cc <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80285c8:	f000 fc62 	bl	8028e90 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80285cc:	4b1f      	ldr	r3, [pc, #124]	@ (802864c <xTaskResumeAll+0x208>)
 80285ce:	681b      	ldr	r3, [r3, #0]
 80285d0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80285d2:	697b      	ldr	r3, [r7, #20]
 80285d4:	2b00      	cmp	r3, #0
 80285d6:	d012      	beq.n	80285fe <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80285d8:	f000 f84c 	bl	8028674 <xTaskIncrementTick>
 80285dc:	4603      	mov	r3, r0
 80285de:	2b00      	cmp	r3, #0
 80285e0:	d004      	beq.n	80285ec <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80285e2:	4a19      	ldr	r2, [pc, #100]	@ (8028648 <xTaskResumeAll+0x204>)
 80285e4:	693b      	ldr	r3, [r7, #16]
 80285e6:	2101      	movs	r1, #1
 80285e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80285ec:	697b      	ldr	r3, [r7, #20]
 80285ee:	3b01      	subs	r3, #1
 80285f0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80285f2:	697b      	ldr	r3, [r7, #20]
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d1ef      	bne.n	80285d8 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 80285f8:	4b14      	ldr	r3, [pc, #80]	@ (802864c <xTaskResumeAll+0x208>)
 80285fa:	2200      	movs	r2, #0
 80285fc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80285fe:	4a12      	ldr	r2, [pc, #72]	@ (8028648 <xTaskResumeAll+0x204>)
 8028600:	693b      	ldr	r3, [r7, #16]
 8028602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028606:	2b00      	cmp	r3, #0
 8028608:	d00b      	beq.n	8028622 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 802860a:	2301      	movs	r3, #1
 802860c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 802860e:	4b0d      	ldr	r3, [pc, #52]	@ (8028644 <xTaskResumeAll+0x200>)
 8028610:	681b      	ldr	r3, [r3, #0]
 8028612:	4b0f      	ldr	r3, [pc, #60]	@ (8028650 <xTaskResumeAll+0x20c>)
 8028614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8028618:	601a      	str	r2, [r3, #0]
 802861a:	f3bf 8f4f 	dsb	sy
 802861e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8028622:	f001 fa11 	bl	8029a48 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8028626:	69bb      	ldr	r3, [r7, #24]
}
 8028628:	4618      	mov	r0, r3
 802862a:	3720      	adds	r7, #32
 802862c:	46bd      	mov	sp, r7
 802862e:	bd80      	pop	{r7, pc}
 8028630:	200044a4 	.word	0x200044a4
 8028634:	2000447c 	.word	0x2000447c
 8028638:	2000443c 	.word	0x2000443c
 802863c:	20004484 	.word	0x20004484
 8028640:	2000418c 	.word	0x2000418c
 8028644:	20004188 	.word	0x20004188
 8028648:	20004490 	.word	0x20004490
 802864c:	2000448c 	.word	0x2000448c
 8028650:	e000ed04 	.word	0xe000ed04

08028654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8028654:	b480      	push	{r7}
 8028656:	b083      	sub	sp, #12
 8028658:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 802865a:	4b05      	ldr	r3, [pc, #20]	@ (8028670 <xTaskGetTickCount+0x1c>)
 802865c:	681b      	ldr	r3, [r3, #0]
 802865e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8028660:	687b      	ldr	r3, [r7, #4]
}
 8028662:	4618      	mov	r0, r3
 8028664:	370c      	adds	r7, #12
 8028666:	46bd      	mov	sp, r7
 8028668:	f85d 7b04 	ldr.w	r7, [sp], #4
 802866c:	4770      	bx	lr
 802866e:	bf00      	nop
 8028670:	20004480 	.word	0x20004480

08028674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8028674:	b580      	push	{r7, lr}
 8028676:	b08a      	sub	sp, #40	@ 0x28
 8028678:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 802867a:	2300      	movs	r3, #0
 802867c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 802867e:	4b7f      	ldr	r3, [pc, #508]	@ (802887c <xTaskIncrementTick+0x208>)
 8028680:	681b      	ldr	r3, [r3, #0]
 8028682:	2b00      	cmp	r3, #0
 8028684:	f040 80ef 	bne.w	8028866 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8028688:	4b7d      	ldr	r3, [pc, #500]	@ (8028880 <xTaskIncrementTick+0x20c>)
 802868a:	681b      	ldr	r3, [r3, #0]
 802868c:	3301      	adds	r3, #1
 802868e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8028690:	4a7b      	ldr	r2, [pc, #492]	@ (8028880 <xTaskIncrementTick+0x20c>)
 8028692:	6a3b      	ldr	r3, [r7, #32]
 8028694:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8028696:	6a3b      	ldr	r3, [r7, #32]
 8028698:	2b00      	cmp	r3, #0
 802869a:	d121      	bne.n	80286e0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 802869c:	4b79      	ldr	r3, [pc, #484]	@ (8028884 <xTaskIncrementTick+0x210>)
 802869e:	681b      	ldr	r3, [r3, #0]
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	2b00      	cmp	r3, #0
 80286a4:	d00b      	beq.n	80286be <xTaskIncrementTick+0x4a>
    __asm volatile
 80286a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80286aa:	f383 8811 	msr	BASEPRI, r3
 80286ae:	f3bf 8f6f 	isb	sy
 80286b2:	f3bf 8f4f 	dsb	sy
 80286b6:	607b      	str	r3, [r7, #4]
}
 80286b8:	bf00      	nop
 80286ba:	bf00      	nop
 80286bc:	e7fd      	b.n	80286ba <xTaskIncrementTick+0x46>
 80286be:	4b71      	ldr	r3, [pc, #452]	@ (8028884 <xTaskIncrementTick+0x210>)
 80286c0:	681b      	ldr	r3, [r3, #0]
 80286c2:	61fb      	str	r3, [r7, #28]
 80286c4:	4b70      	ldr	r3, [pc, #448]	@ (8028888 <xTaskIncrementTick+0x214>)
 80286c6:	681b      	ldr	r3, [r3, #0]
 80286c8:	4a6e      	ldr	r2, [pc, #440]	@ (8028884 <xTaskIncrementTick+0x210>)
 80286ca:	6013      	str	r3, [r2, #0]
 80286cc:	4a6e      	ldr	r2, [pc, #440]	@ (8028888 <xTaskIncrementTick+0x214>)
 80286ce:	69fb      	ldr	r3, [r7, #28]
 80286d0:	6013      	str	r3, [r2, #0]
 80286d2:	4b6e      	ldr	r3, [pc, #440]	@ (802888c <xTaskIncrementTick+0x218>)
 80286d4:	681b      	ldr	r3, [r3, #0]
 80286d6:	3301      	adds	r3, #1
 80286d8:	4a6c      	ldr	r2, [pc, #432]	@ (802888c <xTaskIncrementTick+0x218>)
 80286da:	6013      	str	r3, [r2, #0]
 80286dc:	f000 fbd8 	bl	8028e90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80286e0:	4b6b      	ldr	r3, [pc, #428]	@ (8028890 <xTaskIncrementTick+0x21c>)
 80286e2:	681b      	ldr	r3, [r3, #0]
 80286e4:	6a3a      	ldr	r2, [r7, #32]
 80286e6:	429a      	cmp	r2, r3
 80286e8:	f0c0 80a8 	bcc.w	802883c <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80286ec:	4b65      	ldr	r3, [pc, #404]	@ (8028884 <xTaskIncrementTick+0x210>)
 80286ee:	681b      	ldr	r3, [r3, #0]
 80286f0:	681b      	ldr	r3, [r3, #0]
 80286f2:	2b00      	cmp	r3, #0
 80286f4:	d104      	bne.n	8028700 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80286f6:	4b66      	ldr	r3, [pc, #408]	@ (8028890 <xTaskIncrementTick+0x21c>)
 80286f8:	f04f 32ff 	mov.w	r2, #4294967295
 80286fc:	601a      	str	r2, [r3, #0]
                    break;
 80286fe:	e09d      	b.n	802883c <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8028700:	4b60      	ldr	r3, [pc, #384]	@ (8028884 <xTaskIncrementTick+0x210>)
 8028702:	681b      	ldr	r3, [r3, #0]
 8028704:	68db      	ldr	r3, [r3, #12]
 8028706:	68db      	ldr	r3, [r3, #12]
 8028708:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802870a:	69bb      	ldr	r3, [r7, #24]
 802870c:	685b      	ldr	r3, [r3, #4]
 802870e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8028710:	6a3a      	ldr	r2, [r7, #32]
 8028712:	697b      	ldr	r3, [r7, #20]
 8028714:	429a      	cmp	r2, r3
 8028716:	d203      	bcs.n	8028720 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8028718:	4a5d      	ldr	r2, [pc, #372]	@ (8028890 <xTaskIncrementTick+0x21c>)
 802871a:	697b      	ldr	r3, [r7, #20]
 802871c:	6013      	str	r3, [r2, #0]
                        break;
 802871e:	e08d      	b.n	802883c <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8028720:	69bb      	ldr	r3, [r7, #24]
 8028722:	695b      	ldr	r3, [r3, #20]
 8028724:	613b      	str	r3, [r7, #16]
 8028726:	69bb      	ldr	r3, [r7, #24]
 8028728:	689b      	ldr	r3, [r3, #8]
 802872a:	69ba      	ldr	r2, [r7, #24]
 802872c:	68d2      	ldr	r2, [r2, #12]
 802872e:	609a      	str	r2, [r3, #8]
 8028730:	69bb      	ldr	r3, [r7, #24]
 8028732:	68db      	ldr	r3, [r3, #12]
 8028734:	69ba      	ldr	r2, [r7, #24]
 8028736:	6892      	ldr	r2, [r2, #8]
 8028738:	605a      	str	r2, [r3, #4]
 802873a:	693b      	ldr	r3, [r7, #16]
 802873c:	685a      	ldr	r2, [r3, #4]
 802873e:	69bb      	ldr	r3, [r7, #24]
 8028740:	3304      	adds	r3, #4
 8028742:	429a      	cmp	r2, r3
 8028744:	d103      	bne.n	802874e <xTaskIncrementTick+0xda>
 8028746:	69bb      	ldr	r3, [r7, #24]
 8028748:	68da      	ldr	r2, [r3, #12]
 802874a:	693b      	ldr	r3, [r7, #16]
 802874c:	605a      	str	r2, [r3, #4]
 802874e:	69bb      	ldr	r3, [r7, #24]
 8028750:	2200      	movs	r2, #0
 8028752:	615a      	str	r2, [r3, #20]
 8028754:	693b      	ldr	r3, [r7, #16]
 8028756:	681b      	ldr	r3, [r3, #0]
 8028758:	1e5a      	subs	r2, r3, #1
 802875a:	693b      	ldr	r3, [r7, #16]
 802875c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802875e:	69bb      	ldr	r3, [r7, #24]
 8028760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028762:	2b00      	cmp	r3, #0
 8028764:	d01e      	beq.n	80287a4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8028766:	69bb      	ldr	r3, [r7, #24]
 8028768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802876a:	60fb      	str	r3, [r7, #12]
 802876c:	69bb      	ldr	r3, [r7, #24]
 802876e:	69db      	ldr	r3, [r3, #28]
 8028770:	69ba      	ldr	r2, [r7, #24]
 8028772:	6a12      	ldr	r2, [r2, #32]
 8028774:	609a      	str	r2, [r3, #8]
 8028776:	69bb      	ldr	r3, [r7, #24]
 8028778:	6a1b      	ldr	r3, [r3, #32]
 802877a:	69ba      	ldr	r2, [r7, #24]
 802877c:	69d2      	ldr	r2, [r2, #28]
 802877e:	605a      	str	r2, [r3, #4]
 8028780:	68fb      	ldr	r3, [r7, #12]
 8028782:	685a      	ldr	r2, [r3, #4]
 8028784:	69bb      	ldr	r3, [r7, #24]
 8028786:	3318      	adds	r3, #24
 8028788:	429a      	cmp	r2, r3
 802878a:	d103      	bne.n	8028794 <xTaskIncrementTick+0x120>
 802878c:	69bb      	ldr	r3, [r7, #24]
 802878e:	6a1a      	ldr	r2, [r3, #32]
 8028790:	68fb      	ldr	r3, [r7, #12]
 8028792:	605a      	str	r2, [r3, #4]
 8028794:	69bb      	ldr	r3, [r7, #24]
 8028796:	2200      	movs	r2, #0
 8028798:	629a      	str	r2, [r3, #40]	@ 0x28
 802879a:	68fb      	ldr	r3, [r7, #12]
 802879c:	681b      	ldr	r3, [r3, #0]
 802879e:	1e5a      	subs	r2, r3, #1
 80287a0:	68fb      	ldr	r3, [r7, #12]
 80287a2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80287a4:	69bb      	ldr	r3, [r7, #24]
 80287a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80287a8:	2201      	movs	r2, #1
 80287aa:	409a      	lsls	r2, r3
 80287ac:	4b39      	ldr	r3, [pc, #228]	@ (8028894 <xTaskIncrementTick+0x220>)
 80287ae:	681b      	ldr	r3, [r3, #0]
 80287b0:	4313      	orrs	r3, r2
 80287b2:	4a38      	ldr	r2, [pc, #224]	@ (8028894 <xTaskIncrementTick+0x220>)
 80287b4:	6013      	str	r3, [r2, #0]
 80287b6:	69bb      	ldr	r3, [r7, #24]
 80287b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80287ba:	4937      	ldr	r1, [pc, #220]	@ (8028898 <xTaskIncrementTick+0x224>)
 80287bc:	4613      	mov	r3, r2
 80287be:	009b      	lsls	r3, r3, #2
 80287c0:	4413      	add	r3, r2
 80287c2:	009b      	lsls	r3, r3, #2
 80287c4:	440b      	add	r3, r1
 80287c6:	3304      	adds	r3, #4
 80287c8:	681b      	ldr	r3, [r3, #0]
 80287ca:	60bb      	str	r3, [r7, #8]
 80287cc:	69bb      	ldr	r3, [r7, #24]
 80287ce:	68ba      	ldr	r2, [r7, #8]
 80287d0:	609a      	str	r2, [r3, #8]
 80287d2:	68bb      	ldr	r3, [r7, #8]
 80287d4:	689a      	ldr	r2, [r3, #8]
 80287d6:	69bb      	ldr	r3, [r7, #24]
 80287d8:	60da      	str	r2, [r3, #12]
 80287da:	68bb      	ldr	r3, [r7, #8]
 80287dc:	689b      	ldr	r3, [r3, #8]
 80287de:	69ba      	ldr	r2, [r7, #24]
 80287e0:	3204      	adds	r2, #4
 80287e2:	605a      	str	r2, [r3, #4]
 80287e4:	69bb      	ldr	r3, [r7, #24]
 80287e6:	1d1a      	adds	r2, r3, #4
 80287e8:	68bb      	ldr	r3, [r7, #8]
 80287ea:	609a      	str	r2, [r3, #8]
 80287ec:	69bb      	ldr	r3, [r7, #24]
 80287ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80287f0:	4613      	mov	r3, r2
 80287f2:	009b      	lsls	r3, r3, #2
 80287f4:	4413      	add	r3, r2
 80287f6:	009b      	lsls	r3, r3, #2
 80287f8:	4a27      	ldr	r2, [pc, #156]	@ (8028898 <xTaskIncrementTick+0x224>)
 80287fa:	441a      	add	r2, r3
 80287fc:	69bb      	ldr	r3, [r7, #24]
 80287fe:	615a      	str	r2, [r3, #20]
 8028800:	69bb      	ldr	r3, [r7, #24]
 8028802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028804:	4924      	ldr	r1, [pc, #144]	@ (8028898 <xTaskIncrementTick+0x224>)
 8028806:	4613      	mov	r3, r2
 8028808:	009b      	lsls	r3, r3, #2
 802880a:	4413      	add	r3, r2
 802880c:	009b      	lsls	r3, r3, #2
 802880e:	440b      	add	r3, r1
 8028810:	681b      	ldr	r3, [r3, #0]
 8028812:	69ba      	ldr	r2, [r7, #24]
 8028814:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8028816:	1c59      	adds	r1, r3, #1
 8028818:	481f      	ldr	r0, [pc, #124]	@ (8028898 <xTaskIncrementTick+0x224>)
 802881a:	4613      	mov	r3, r2
 802881c:	009b      	lsls	r3, r3, #2
 802881e:	4413      	add	r3, r2
 8028820:	009b      	lsls	r3, r3, #2
 8028822:	4403      	add	r3, r0
 8028824:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8028826:	69bb      	ldr	r3, [r7, #24]
 8028828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802882a:	4b1c      	ldr	r3, [pc, #112]	@ (802889c <xTaskIncrementTick+0x228>)
 802882c:	681b      	ldr	r3, [r3, #0]
 802882e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028830:	429a      	cmp	r2, r3
 8028832:	f67f af5b 	bls.w	80286ec <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8028836:	2301      	movs	r3, #1
 8028838:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802883a:	e757      	b.n	80286ec <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 802883c:	4b17      	ldr	r3, [pc, #92]	@ (802889c <xTaskIncrementTick+0x228>)
 802883e:	681b      	ldr	r3, [r3, #0]
 8028840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028842:	4915      	ldr	r1, [pc, #84]	@ (8028898 <xTaskIncrementTick+0x224>)
 8028844:	4613      	mov	r3, r2
 8028846:	009b      	lsls	r3, r3, #2
 8028848:	4413      	add	r3, r2
 802884a:	009b      	lsls	r3, r3, #2
 802884c:	440b      	add	r3, r1
 802884e:	681b      	ldr	r3, [r3, #0]
 8028850:	2b01      	cmp	r3, #1
 8028852:	d901      	bls.n	8028858 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8028854:	2301      	movs	r3, #1
 8028856:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8028858:	4b11      	ldr	r3, [pc, #68]	@ (80288a0 <xTaskIncrementTick+0x22c>)
 802885a:	681b      	ldr	r3, [r3, #0]
 802885c:	2b00      	cmp	r3, #0
 802885e:	d007      	beq.n	8028870 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8028860:	2301      	movs	r3, #1
 8028862:	627b      	str	r3, [r7, #36]	@ 0x24
 8028864:	e004      	b.n	8028870 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8028866:	4b0f      	ldr	r3, [pc, #60]	@ (80288a4 <xTaskIncrementTick+0x230>)
 8028868:	681b      	ldr	r3, [r3, #0]
 802886a:	3301      	adds	r3, #1
 802886c:	4a0d      	ldr	r2, [pc, #52]	@ (80288a4 <xTaskIncrementTick+0x230>)
 802886e:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8028870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8028872:	4618      	mov	r0, r3
 8028874:	3728      	adds	r7, #40	@ 0x28
 8028876:	46bd      	mov	sp, r7
 8028878:	bd80      	pop	{r7, pc}
 802887a:	bf00      	nop
 802887c:	200044a4 	.word	0x200044a4
 8028880:	20004480 	.word	0x20004480
 8028884:	20004434 	.word	0x20004434
 8028888:	20004438 	.word	0x20004438
 802888c:	20004494 	.word	0x20004494
 8028890:	2000449c 	.word	0x2000449c
 8028894:	20004484 	.word	0x20004484
 8028898:	2000418c 	.word	0x2000418c
 802889c:	20004188 	.word	0x20004188
 80288a0:	20004490 	.word	0x20004490
 80288a4:	2000448c 	.word	0x2000448c

080288a8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80288a8:	b480      	push	{r7}
 80288aa:	b087      	sub	sp, #28
 80288ac:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80288ae:	4b28      	ldr	r3, [pc, #160]	@ (8028950 <vTaskSwitchContext+0xa8>)
 80288b0:	681b      	ldr	r3, [r3, #0]
 80288b2:	2b00      	cmp	r3, #0
 80288b4:	d003      	beq.n	80288be <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80288b6:	4b27      	ldr	r3, [pc, #156]	@ (8028954 <vTaskSwitchContext+0xac>)
 80288b8:	2201      	movs	r2, #1
 80288ba:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80288bc:	e041      	b.n	8028942 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80288be:	4b25      	ldr	r3, [pc, #148]	@ (8028954 <vTaskSwitchContext+0xac>)
 80288c0:	2200      	movs	r2, #0
 80288c2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80288c4:	4b24      	ldr	r3, [pc, #144]	@ (8028958 <vTaskSwitchContext+0xb0>)
 80288c6:	681b      	ldr	r3, [r3, #0]
 80288c8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80288ca:	68fb      	ldr	r3, [r7, #12]
 80288cc:	fab3 f383 	clz	r3, r3
 80288d0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80288d2:	7afb      	ldrb	r3, [r7, #11]
 80288d4:	f1c3 031f 	rsb	r3, r3, #31
 80288d8:	617b      	str	r3, [r7, #20]
 80288da:	4920      	ldr	r1, [pc, #128]	@ (802895c <vTaskSwitchContext+0xb4>)
 80288dc:	697a      	ldr	r2, [r7, #20]
 80288de:	4613      	mov	r3, r2
 80288e0:	009b      	lsls	r3, r3, #2
 80288e2:	4413      	add	r3, r2
 80288e4:	009b      	lsls	r3, r3, #2
 80288e6:	440b      	add	r3, r1
 80288e8:	681b      	ldr	r3, [r3, #0]
 80288ea:	2b00      	cmp	r3, #0
 80288ec:	d10b      	bne.n	8028906 <vTaskSwitchContext+0x5e>
    __asm volatile
 80288ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80288f2:	f383 8811 	msr	BASEPRI, r3
 80288f6:	f3bf 8f6f 	isb	sy
 80288fa:	f3bf 8f4f 	dsb	sy
 80288fe:	607b      	str	r3, [r7, #4]
}
 8028900:	bf00      	nop
 8028902:	bf00      	nop
 8028904:	e7fd      	b.n	8028902 <vTaskSwitchContext+0x5a>
 8028906:	697a      	ldr	r2, [r7, #20]
 8028908:	4613      	mov	r3, r2
 802890a:	009b      	lsls	r3, r3, #2
 802890c:	4413      	add	r3, r2
 802890e:	009b      	lsls	r3, r3, #2
 8028910:	4a12      	ldr	r2, [pc, #72]	@ (802895c <vTaskSwitchContext+0xb4>)
 8028912:	4413      	add	r3, r2
 8028914:	613b      	str	r3, [r7, #16]
 8028916:	693b      	ldr	r3, [r7, #16]
 8028918:	685b      	ldr	r3, [r3, #4]
 802891a:	685a      	ldr	r2, [r3, #4]
 802891c:	693b      	ldr	r3, [r7, #16]
 802891e:	605a      	str	r2, [r3, #4]
 8028920:	693b      	ldr	r3, [r7, #16]
 8028922:	685a      	ldr	r2, [r3, #4]
 8028924:	693b      	ldr	r3, [r7, #16]
 8028926:	3308      	adds	r3, #8
 8028928:	429a      	cmp	r2, r3
 802892a:	d103      	bne.n	8028934 <vTaskSwitchContext+0x8c>
 802892c:	693b      	ldr	r3, [r7, #16]
 802892e:	68da      	ldr	r2, [r3, #12]
 8028930:	693b      	ldr	r3, [r7, #16]
 8028932:	605a      	str	r2, [r3, #4]
 8028934:	693b      	ldr	r3, [r7, #16]
 8028936:	685b      	ldr	r3, [r3, #4]
 8028938:	68db      	ldr	r3, [r3, #12]
 802893a:	4a09      	ldr	r2, [pc, #36]	@ (8028960 <vTaskSwitchContext+0xb8>)
 802893c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 802893e:	4b08      	ldr	r3, [pc, #32]	@ (8028960 <vTaskSwitchContext+0xb8>)
 8028940:	681b      	ldr	r3, [r3, #0]
    }
 8028942:	bf00      	nop
 8028944:	371c      	adds	r7, #28
 8028946:	46bd      	mov	sp, r7
 8028948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802894c:	4770      	bx	lr
 802894e:	bf00      	nop
 8028950:	200044a4 	.word	0x200044a4
 8028954:	20004490 	.word	0x20004490
 8028958:	20004484 	.word	0x20004484
 802895c:	2000418c 	.word	0x2000418c
 8028960:	20004188 	.word	0x20004188

08028964 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8028964:	b580      	push	{r7, lr}
 8028966:	b084      	sub	sp, #16
 8028968:	af00      	add	r7, sp, #0
 802896a:	6078      	str	r0, [r7, #4]
 802896c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 802896e:	687b      	ldr	r3, [r7, #4]
 8028970:	2b00      	cmp	r3, #0
 8028972:	d10b      	bne.n	802898c <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8028974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028978:	f383 8811 	msr	BASEPRI, r3
 802897c:	f3bf 8f6f 	isb	sy
 8028980:	f3bf 8f4f 	dsb	sy
 8028984:	60fb      	str	r3, [r7, #12]
}
 8028986:	bf00      	nop
 8028988:	bf00      	nop
 802898a:	e7fd      	b.n	8028988 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802898c:	4b07      	ldr	r3, [pc, #28]	@ (80289ac <vTaskPlaceOnEventList+0x48>)
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	3318      	adds	r3, #24
 8028992:	4619      	mov	r1, r3
 8028994:	6878      	ldr	r0, [r7, #4]
 8028996:	f7fe fd68 	bl	802746a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802899a:	2101      	movs	r1, #1
 802899c:	6838      	ldr	r0, [r7, #0]
 802899e:	f000 fb59 	bl	8029054 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80289a2:	bf00      	nop
 80289a4:	3710      	adds	r7, #16
 80289a6:	46bd      	mov	sp, r7
 80289a8:	bd80      	pop	{r7, pc}
 80289aa:	bf00      	nop
 80289ac:	20004188 	.word	0x20004188

080289b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80289b0:	b580      	push	{r7, lr}
 80289b2:	b086      	sub	sp, #24
 80289b4:	af00      	add	r7, sp, #0
 80289b6:	60f8      	str	r0, [r7, #12]
 80289b8:	60b9      	str	r1, [r7, #8]
 80289ba:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80289bc:	68fb      	ldr	r3, [r7, #12]
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d10b      	bne.n	80289da <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80289c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80289c6:	f383 8811 	msr	BASEPRI, r3
 80289ca:	f3bf 8f6f 	isb	sy
 80289ce:	f3bf 8f4f 	dsb	sy
 80289d2:	613b      	str	r3, [r7, #16]
}
 80289d4:	bf00      	nop
 80289d6:	bf00      	nop
 80289d8:	e7fd      	b.n	80289d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80289da:	68fb      	ldr	r3, [r7, #12]
 80289dc:	685b      	ldr	r3, [r3, #4]
 80289de:	617b      	str	r3, [r7, #20]
 80289e0:	4b15      	ldr	r3, [pc, #84]	@ (8028a38 <vTaskPlaceOnEventListRestricted+0x88>)
 80289e2:	681b      	ldr	r3, [r3, #0]
 80289e4:	697a      	ldr	r2, [r7, #20]
 80289e6:	61da      	str	r2, [r3, #28]
 80289e8:	4b13      	ldr	r3, [pc, #76]	@ (8028a38 <vTaskPlaceOnEventListRestricted+0x88>)
 80289ea:	681b      	ldr	r3, [r3, #0]
 80289ec:	697a      	ldr	r2, [r7, #20]
 80289ee:	6892      	ldr	r2, [r2, #8]
 80289f0:	621a      	str	r2, [r3, #32]
 80289f2:	4b11      	ldr	r3, [pc, #68]	@ (8028a38 <vTaskPlaceOnEventListRestricted+0x88>)
 80289f4:	681a      	ldr	r2, [r3, #0]
 80289f6:	697b      	ldr	r3, [r7, #20]
 80289f8:	689b      	ldr	r3, [r3, #8]
 80289fa:	3218      	adds	r2, #24
 80289fc:	605a      	str	r2, [r3, #4]
 80289fe:	4b0e      	ldr	r3, [pc, #56]	@ (8028a38 <vTaskPlaceOnEventListRestricted+0x88>)
 8028a00:	681b      	ldr	r3, [r3, #0]
 8028a02:	f103 0218 	add.w	r2, r3, #24
 8028a06:	697b      	ldr	r3, [r7, #20]
 8028a08:	609a      	str	r2, [r3, #8]
 8028a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8028a38 <vTaskPlaceOnEventListRestricted+0x88>)
 8028a0c:	681b      	ldr	r3, [r3, #0]
 8028a0e:	68fa      	ldr	r2, [r7, #12]
 8028a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8028a12:	68fb      	ldr	r3, [r7, #12]
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	1c5a      	adds	r2, r3, #1
 8028a18:	68fb      	ldr	r3, [r7, #12]
 8028a1a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8028a1c:	687b      	ldr	r3, [r7, #4]
 8028a1e:	2b00      	cmp	r3, #0
 8028a20:	d002      	beq.n	8028a28 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8028a22:	f04f 33ff 	mov.w	r3, #4294967295
 8028a26:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8028a28:	6879      	ldr	r1, [r7, #4]
 8028a2a:	68b8      	ldr	r0, [r7, #8]
 8028a2c:	f000 fb12 	bl	8029054 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8028a30:	bf00      	nop
 8028a32:	3718      	adds	r7, #24
 8028a34:	46bd      	mov	sp, r7
 8028a36:	bd80      	pop	{r7, pc}
 8028a38:	20004188 	.word	0x20004188

08028a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8028a3c:	b480      	push	{r7}
 8028a3e:	b08b      	sub	sp, #44	@ 0x2c
 8028a40:	af00      	add	r7, sp, #0
 8028a42:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8028a44:	687b      	ldr	r3, [r7, #4]
 8028a46:	68db      	ldr	r3, [r3, #12]
 8028a48:	68db      	ldr	r3, [r3, #12]
 8028a4a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8028a4c:	6a3b      	ldr	r3, [r7, #32]
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	d10b      	bne.n	8028a6a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8028a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028a56:	f383 8811 	msr	BASEPRI, r3
 8028a5a:	f3bf 8f6f 	isb	sy
 8028a5e:	f3bf 8f4f 	dsb	sy
 8028a62:	60fb      	str	r3, [r7, #12]
}
 8028a64:	bf00      	nop
 8028a66:	bf00      	nop
 8028a68:	e7fd      	b.n	8028a66 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8028a6a:	6a3b      	ldr	r3, [r7, #32]
 8028a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028a6e:	61fb      	str	r3, [r7, #28]
 8028a70:	6a3b      	ldr	r3, [r7, #32]
 8028a72:	69db      	ldr	r3, [r3, #28]
 8028a74:	6a3a      	ldr	r2, [r7, #32]
 8028a76:	6a12      	ldr	r2, [r2, #32]
 8028a78:	609a      	str	r2, [r3, #8]
 8028a7a:	6a3b      	ldr	r3, [r7, #32]
 8028a7c:	6a1b      	ldr	r3, [r3, #32]
 8028a7e:	6a3a      	ldr	r2, [r7, #32]
 8028a80:	69d2      	ldr	r2, [r2, #28]
 8028a82:	605a      	str	r2, [r3, #4]
 8028a84:	69fb      	ldr	r3, [r7, #28]
 8028a86:	685a      	ldr	r2, [r3, #4]
 8028a88:	6a3b      	ldr	r3, [r7, #32]
 8028a8a:	3318      	adds	r3, #24
 8028a8c:	429a      	cmp	r2, r3
 8028a8e:	d103      	bne.n	8028a98 <xTaskRemoveFromEventList+0x5c>
 8028a90:	6a3b      	ldr	r3, [r7, #32]
 8028a92:	6a1a      	ldr	r2, [r3, #32]
 8028a94:	69fb      	ldr	r3, [r7, #28]
 8028a96:	605a      	str	r2, [r3, #4]
 8028a98:	6a3b      	ldr	r3, [r7, #32]
 8028a9a:	2200      	movs	r2, #0
 8028a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8028a9e:	69fb      	ldr	r3, [r7, #28]
 8028aa0:	681b      	ldr	r3, [r3, #0]
 8028aa2:	1e5a      	subs	r2, r3, #1
 8028aa4:	69fb      	ldr	r3, [r7, #28]
 8028aa6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8028aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8028bd8 <xTaskRemoveFromEventList+0x19c>)
 8028aaa:	681b      	ldr	r3, [r3, #0]
 8028aac:	2b00      	cmp	r3, #0
 8028aae:	d160      	bne.n	8028b72 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8028ab0:	6a3b      	ldr	r3, [r7, #32]
 8028ab2:	695b      	ldr	r3, [r3, #20]
 8028ab4:	617b      	str	r3, [r7, #20]
 8028ab6:	6a3b      	ldr	r3, [r7, #32]
 8028ab8:	689b      	ldr	r3, [r3, #8]
 8028aba:	6a3a      	ldr	r2, [r7, #32]
 8028abc:	68d2      	ldr	r2, [r2, #12]
 8028abe:	609a      	str	r2, [r3, #8]
 8028ac0:	6a3b      	ldr	r3, [r7, #32]
 8028ac2:	68db      	ldr	r3, [r3, #12]
 8028ac4:	6a3a      	ldr	r2, [r7, #32]
 8028ac6:	6892      	ldr	r2, [r2, #8]
 8028ac8:	605a      	str	r2, [r3, #4]
 8028aca:	697b      	ldr	r3, [r7, #20]
 8028acc:	685a      	ldr	r2, [r3, #4]
 8028ace:	6a3b      	ldr	r3, [r7, #32]
 8028ad0:	3304      	adds	r3, #4
 8028ad2:	429a      	cmp	r2, r3
 8028ad4:	d103      	bne.n	8028ade <xTaskRemoveFromEventList+0xa2>
 8028ad6:	6a3b      	ldr	r3, [r7, #32]
 8028ad8:	68da      	ldr	r2, [r3, #12]
 8028ada:	697b      	ldr	r3, [r7, #20]
 8028adc:	605a      	str	r2, [r3, #4]
 8028ade:	6a3b      	ldr	r3, [r7, #32]
 8028ae0:	2200      	movs	r2, #0
 8028ae2:	615a      	str	r2, [r3, #20]
 8028ae4:	697b      	ldr	r3, [r7, #20]
 8028ae6:	681b      	ldr	r3, [r3, #0]
 8028ae8:	1e5a      	subs	r2, r3, #1
 8028aea:	697b      	ldr	r3, [r7, #20]
 8028aec:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8028aee:	6a3b      	ldr	r3, [r7, #32]
 8028af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028af2:	2201      	movs	r2, #1
 8028af4:	409a      	lsls	r2, r3
 8028af6:	4b39      	ldr	r3, [pc, #228]	@ (8028bdc <xTaskRemoveFromEventList+0x1a0>)
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	4313      	orrs	r3, r2
 8028afc:	4a37      	ldr	r2, [pc, #220]	@ (8028bdc <xTaskRemoveFromEventList+0x1a0>)
 8028afe:	6013      	str	r3, [r2, #0]
 8028b00:	6a3b      	ldr	r3, [r7, #32]
 8028b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028b04:	4936      	ldr	r1, [pc, #216]	@ (8028be0 <xTaskRemoveFromEventList+0x1a4>)
 8028b06:	4613      	mov	r3, r2
 8028b08:	009b      	lsls	r3, r3, #2
 8028b0a:	4413      	add	r3, r2
 8028b0c:	009b      	lsls	r3, r3, #2
 8028b0e:	440b      	add	r3, r1
 8028b10:	3304      	adds	r3, #4
 8028b12:	681b      	ldr	r3, [r3, #0]
 8028b14:	613b      	str	r3, [r7, #16]
 8028b16:	6a3b      	ldr	r3, [r7, #32]
 8028b18:	693a      	ldr	r2, [r7, #16]
 8028b1a:	609a      	str	r2, [r3, #8]
 8028b1c:	693b      	ldr	r3, [r7, #16]
 8028b1e:	689a      	ldr	r2, [r3, #8]
 8028b20:	6a3b      	ldr	r3, [r7, #32]
 8028b22:	60da      	str	r2, [r3, #12]
 8028b24:	693b      	ldr	r3, [r7, #16]
 8028b26:	689b      	ldr	r3, [r3, #8]
 8028b28:	6a3a      	ldr	r2, [r7, #32]
 8028b2a:	3204      	adds	r2, #4
 8028b2c:	605a      	str	r2, [r3, #4]
 8028b2e:	6a3b      	ldr	r3, [r7, #32]
 8028b30:	1d1a      	adds	r2, r3, #4
 8028b32:	693b      	ldr	r3, [r7, #16]
 8028b34:	609a      	str	r2, [r3, #8]
 8028b36:	6a3b      	ldr	r3, [r7, #32]
 8028b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028b3a:	4613      	mov	r3, r2
 8028b3c:	009b      	lsls	r3, r3, #2
 8028b3e:	4413      	add	r3, r2
 8028b40:	009b      	lsls	r3, r3, #2
 8028b42:	4a27      	ldr	r2, [pc, #156]	@ (8028be0 <xTaskRemoveFromEventList+0x1a4>)
 8028b44:	441a      	add	r2, r3
 8028b46:	6a3b      	ldr	r3, [r7, #32]
 8028b48:	615a      	str	r2, [r3, #20]
 8028b4a:	6a3b      	ldr	r3, [r7, #32]
 8028b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028b4e:	4924      	ldr	r1, [pc, #144]	@ (8028be0 <xTaskRemoveFromEventList+0x1a4>)
 8028b50:	4613      	mov	r3, r2
 8028b52:	009b      	lsls	r3, r3, #2
 8028b54:	4413      	add	r3, r2
 8028b56:	009b      	lsls	r3, r3, #2
 8028b58:	440b      	add	r3, r1
 8028b5a:	681b      	ldr	r3, [r3, #0]
 8028b5c:	6a3a      	ldr	r2, [r7, #32]
 8028b5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8028b60:	1c59      	adds	r1, r3, #1
 8028b62:	481f      	ldr	r0, [pc, #124]	@ (8028be0 <xTaskRemoveFromEventList+0x1a4>)
 8028b64:	4613      	mov	r3, r2
 8028b66:	009b      	lsls	r3, r3, #2
 8028b68:	4413      	add	r3, r2
 8028b6a:	009b      	lsls	r3, r3, #2
 8028b6c:	4403      	add	r3, r0
 8028b6e:	6019      	str	r1, [r3, #0]
 8028b70:	e01b      	b.n	8028baa <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8028b72:	4b1c      	ldr	r3, [pc, #112]	@ (8028be4 <xTaskRemoveFromEventList+0x1a8>)
 8028b74:	685b      	ldr	r3, [r3, #4]
 8028b76:	61bb      	str	r3, [r7, #24]
 8028b78:	6a3b      	ldr	r3, [r7, #32]
 8028b7a:	69ba      	ldr	r2, [r7, #24]
 8028b7c:	61da      	str	r2, [r3, #28]
 8028b7e:	69bb      	ldr	r3, [r7, #24]
 8028b80:	689a      	ldr	r2, [r3, #8]
 8028b82:	6a3b      	ldr	r3, [r7, #32]
 8028b84:	621a      	str	r2, [r3, #32]
 8028b86:	69bb      	ldr	r3, [r7, #24]
 8028b88:	689b      	ldr	r3, [r3, #8]
 8028b8a:	6a3a      	ldr	r2, [r7, #32]
 8028b8c:	3218      	adds	r2, #24
 8028b8e:	605a      	str	r2, [r3, #4]
 8028b90:	6a3b      	ldr	r3, [r7, #32]
 8028b92:	f103 0218 	add.w	r2, r3, #24
 8028b96:	69bb      	ldr	r3, [r7, #24]
 8028b98:	609a      	str	r2, [r3, #8]
 8028b9a:	6a3b      	ldr	r3, [r7, #32]
 8028b9c:	4a11      	ldr	r2, [pc, #68]	@ (8028be4 <xTaskRemoveFromEventList+0x1a8>)
 8028b9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8028ba0:	4b10      	ldr	r3, [pc, #64]	@ (8028be4 <xTaskRemoveFromEventList+0x1a8>)
 8028ba2:	681b      	ldr	r3, [r3, #0]
 8028ba4:	3301      	adds	r3, #1
 8028ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8028be4 <xTaskRemoveFromEventList+0x1a8>)
 8028ba8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8028baa:	6a3b      	ldr	r3, [r7, #32]
 8028bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028bae:	4b0e      	ldr	r3, [pc, #56]	@ (8028be8 <xTaskRemoveFromEventList+0x1ac>)
 8028bb0:	681b      	ldr	r3, [r3, #0]
 8028bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028bb4:	429a      	cmp	r2, r3
 8028bb6:	d905      	bls.n	8028bc4 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8028bb8:	2301      	movs	r3, #1
 8028bba:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8028bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8028bec <xTaskRemoveFromEventList+0x1b0>)
 8028bbe:	2201      	movs	r2, #1
 8028bc0:	601a      	str	r2, [r3, #0]
 8028bc2:	e001      	b.n	8028bc8 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8028bc4:	2300      	movs	r3, #0
 8028bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8028bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8028bca:	4618      	mov	r0, r3
 8028bcc:	372c      	adds	r7, #44	@ 0x2c
 8028bce:	46bd      	mov	sp, r7
 8028bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bd4:	4770      	bx	lr
 8028bd6:	bf00      	nop
 8028bd8:	200044a4 	.word	0x200044a4
 8028bdc:	20004484 	.word	0x20004484
 8028be0:	2000418c 	.word	0x2000418c
 8028be4:	2000443c 	.word	0x2000443c
 8028be8:	20004188 	.word	0x20004188
 8028bec:	20004490 	.word	0x20004490

08028bf0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8028bf0:	b480      	push	{r7}
 8028bf2:	b083      	sub	sp, #12
 8028bf4:	af00      	add	r7, sp, #0
 8028bf6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8028bf8:	4b06      	ldr	r3, [pc, #24]	@ (8028c14 <vTaskInternalSetTimeOutState+0x24>)
 8028bfa:	681a      	ldr	r2, [r3, #0]
 8028bfc:	687b      	ldr	r3, [r7, #4]
 8028bfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8028c00:	4b05      	ldr	r3, [pc, #20]	@ (8028c18 <vTaskInternalSetTimeOutState+0x28>)
 8028c02:	681a      	ldr	r2, [r3, #0]
 8028c04:	687b      	ldr	r3, [r7, #4]
 8028c06:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8028c08:	bf00      	nop
 8028c0a:	370c      	adds	r7, #12
 8028c0c:	46bd      	mov	sp, r7
 8028c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c12:	4770      	bx	lr
 8028c14:	20004494 	.word	0x20004494
 8028c18:	20004480 	.word	0x20004480

08028c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8028c1c:	b580      	push	{r7, lr}
 8028c1e:	b088      	sub	sp, #32
 8028c20:	af00      	add	r7, sp, #0
 8028c22:	6078      	str	r0, [r7, #4]
 8028c24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8028c26:	687b      	ldr	r3, [r7, #4]
 8028c28:	2b00      	cmp	r3, #0
 8028c2a:	d10b      	bne.n	8028c44 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8028c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028c30:	f383 8811 	msr	BASEPRI, r3
 8028c34:	f3bf 8f6f 	isb	sy
 8028c38:	f3bf 8f4f 	dsb	sy
 8028c3c:	613b      	str	r3, [r7, #16]
}
 8028c3e:	bf00      	nop
 8028c40:	bf00      	nop
 8028c42:	e7fd      	b.n	8028c40 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8028c44:	683b      	ldr	r3, [r7, #0]
 8028c46:	2b00      	cmp	r3, #0
 8028c48:	d10b      	bne.n	8028c62 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8028c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028c4e:	f383 8811 	msr	BASEPRI, r3
 8028c52:	f3bf 8f6f 	isb	sy
 8028c56:	f3bf 8f4f 	dsb	sy
 8028c5a:	60fb      	str	r3, [r7, #12]
}
 8028c5c:	bf00      	nop
 8028c5e:	bf00      	nop
 8028c60:	e7fd      	b.n	8028c5e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8028c62:	f000 febf 	bl	80299e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8028c66:	4b26      	ldr	r3, [pc, #152]	@ (8028d00 <xTaskCheckForTimeOut+0xe4>)
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8028c6c:	687b      	ldr	r3, [r7, #4]
 8028c6e:	685b      	ldr	r3, [r3, #4]
 8028c70:	69ba      	ldr	r2, [r7, #24]
 8028c72:	1ad3      	subs	r3, r2, r3
 8028c74:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8028c76:	4b23      	ldr	r3, [pc, #140]	@ (8028d04 <xTaskCheckForTimeOut+0xe8>)
 8028c78:	681b      	ldr	r3, [r3, #0]
 8028c7a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8028c7e:	2b00      	cmp	r3, #0
 8028c80:	d007      	beq.n	8028c92 <xTaskCheckForTimeOut+0x76>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8028c82:	4b20      	ldr	r3, [pc, #128]	@ (8028d04 <xTaskCheckForTimeOut+0xe8>)
 8028c84:	681b      	ldr	r3, [r3, #0]
 8028c86:	2200      	movs	r2, #0
 8028c88:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
                xReturn = pdTRUE;
 8028c8c:	2301      	movs	r3, #1
 8028c8e:	61fb      	str	r3, [r7, #28]
 8028c90:	e02e      	b.n	8028cf0 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8028c92:	683b      	ldr	r3, [r7, #0]
 8028c94:	681b      	ldr	r3, [r3, #0]
 8028c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c9a:	d102      	bne.n	8028ca2 <xTaskCheckForTimeOut+0x86>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8028c9c:	2300      	movs	r3, #0
 8028c9e:	61fb      	str	r3, [r7, #28]
 8028ca0:	e026      	b.n	8028cf0 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8028ca2:	687b      	ldr	r3, [r7, #4]
 8028ca4:	681a      	ldr	r2, [r3, #0]
 8028ca6:	4b18      	ldr	r3, [pc, #96]	@ (8028d08 <xTaskCheckForTimeOut+0xec>)
 8028ca8:	681b      	ldr	r3, [r3, #0]
 8028caa:	429a      	cmp	r2, r3
 8028cac:	d00a      	beq.n	8028cc4 <xTaskCheckForTimeOut+0xa8>
 8028cae:	687b      	ldr	r3, [r7, #4]
 8028cb0:	685b      	ldr	r3, [r3, #4]
 8028cb2:	69ba      	ldr	r2, [r7, #24]
 8028cb4:	429a      	cmp	r2, r3
 8028cb6:	d305      	bcc.n	8028cc4 <xTaskCheckForTimeOut+0xa8>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8028cb8:	2301      	movs	r3, #1
 8028cba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8028cbc:	683b      	ldr	r3, [r7, #0]
 8028cbe:	2200      	movs	r2, #0
 8028cc0:	601a      	str	r2, [r3, #0]
 8028cc2:	e015      	b.n	8028cf0 <xTaskCheckForTimeOut+0xd4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8028cc4:	683b      	ldr	r3, [r7, #0]
 8028cc6:	681b      	ldr	r3, [r3, #0]
 8028cc8:	697a      	ldr	r2, [r7, #20]
 8028cca:	429a      	cmp	r2, r3
 8028ccc:	d20b      	bcs.n	8028ce6 <xTaskCheckForTimeOut+0xca>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8028cce:	683b      	ldr	r3, [r7, #0]
 8028cd0:	681a      	ldr	r2, [r3, #0]
 8028cd2:	697b      	ldr	r3, [r7, #20]
 8028cd4:	1ad2      	subs	r2, r2, r3
 8028cd6:	683b      	ldr	r3, [r7, #0]
 8028cd8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8028cda:	6878      	ldr	r0, [r7, #4]
 8028cdc:	f7ff ff88 	bl	8028bf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8028ce0:	2300      	movs	r3, #0
 8028ce2:	61fb      	str	r3, [r7, #28]
 8028ce4:	e004      	b.n	8028cf0 <xTaskCheckForTimeOut+0xd4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8028ce6:	683b      	ldr	r3, [r7, #0]
 8028ce8:	2200      	movs	r2, #0
 8028cea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8028cec:	2301      	movs	r3, #1
 8028cee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8028cf0:	f000 feaa 	bl	8029a48 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8028cf4:	69fb      	ldr	r3, [r7, #28]
}
 8028cf6:	4618      	mov	r0, r3
 8028cf8:	3720      	adds	r7, #32
 8028cfa:	46bd      	mov	sp, r7
 8028cfc:	bd80      	pop	{r7, pc}
 8028cfe:	bf00      	nop
 8028d00:	20004480 	.word	0x20004480
 8028d04:	20004188 	.word	0x20004188
 8028d08:	20004494 	.word	0x20004494

08028d0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8028d0c:	b480      	push	{r7}
 8028d0e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8028d10:	4b03      	ldr	r3, [pc, #12]	@ (8028d20 <vTaskMissedYield+0x14>)
 8028d12:	2201      	movs	r2, #1
 8028d14:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8028d16:	bf00      	nop
 8028d18:	46bd      	mov	sp, r7
 8028d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d1e:	4770      	bx	lr
 8028d20:	20004490 	.word	0x20004490

08028d24 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8028d24:	b580      	push	{r7, lr}
 8028d26:	b082      	sub	sp, #8
 8028d28:	af00      	add	r7, sp, #0
 8028d2a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8028d2c:	f000 f852 	bl	8028dd4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8028d30:	4b06      	ldr	r3, [pc, #24]	@ (8028d4c <prvIdleTask+0x28>)
 8028d32:	681b      	ldr	r3, [r3, #0]
 8028d34:	2b01      	cmp	r3, #1
 8028d36:	d9f9      	bls.n	8028d2c <prvIdleTask+0x8>
            {
                taskYIELD();
 8028d38:	4b05      	ldr	r3, [pc, #20]	@ (8028d50 <prvIdleTask+0x2c>)
 8028d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8028d3e:	601a      	str	r2, [r3, #0]
 8028d40:	f3bf 8f4f 	dsb	sy
 8028d44:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8028d48:	e7f0      	b.n	8028d2c <prvIdleTask+0x8>
 8028d4a:	bf00      	nop
 8028d4c:	2000418c 	.word	0x2000418c
 8028d50:	e000ed04 	.word	0xe000ed04

08028d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8028d54:	b580      	push	{r7, lr}
 8028d56:	b082      	sub	sp, #8
 8028d58:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8028d5a:	2300      	movs	r3, #0
 8028d5c:	607b      	str	r3, [r7, #4]
 8028d5e:	e00c      	b.n	8028d7a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8028d60:	687a      	ldr	r2, [r7, #4]
 8028d62:	4613      	mov	r3, r2
 8028d64:	009b      	lsls	r3, r3, #2
 8028d66:	4413      	add	r3, r2
 8028d68:	009b      	lsls	r3, r3, #2
 8028d6a:	4a12      	ldr	r2, [pc, #72]	@ (8028db4 <prvInitialiseTaskLists+0x60>)
 8028d6c:	4413      	add	r3, r2
 8028d6e:	4618      	mov	r0, r3
 8028d70:	f7fe fb4e 	bl	8027410 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8028d74:	687b      	ldr	r3, [r7, #4]
 8028d76:	3301      	adds	r3, #1
 8028d78:	607b      	str	r3, [r7, #4]
 8028d7a:	687b      	ldr	r3, [r7, #4]
 8028d7c:	2b1f      	cmp	r3, #31
 8028d7e:	d9ef      	bls.n	8028d60 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8028d80:	480d      	ldr	r0, [pc, #52]	@ (8028db8 <prvInitialiseTaskLists+0x64>)
 8028d82:	f7fe fb45 	bl	8027410 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8028d86:	480d      	ldr	r0, [pc, #52]	@ (8028dbc <prvInitialiseTaskLists+0x68>)
 8028d88:	f7fe fb42 	bl	8027410 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8028d8c:	480c      	ldr	r0, [pc, #48]	@ (8028dc0 <prvInitialiseTaskLists+0x6c>)
 8028d8e:	f7fe fb3f 	bl	8027410 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8028d92:	480c      	ldr	r0, [pc, #48]	@ (8028dc4 <prvInitialiseTaskLists+0x70>)
 8028d94:	f7fe fb3c 	bl	8027410 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8028d98:	480b      	ldr	r0, [pc, #44]	@ (8028dc8 <prvInitialiseTaskLists+0x74>)
 8028d9a:	f7fe fb39 	bl	8027410 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8028d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8028dcc <prvInitialiseTaskLists+0x78>)
 8028da0:	4a05      	ldr	r2, [pc, #20]	@ (8028db8 <prvInitialiseTaskLists+0x64>)
 8028da2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8028da4:	4b0a      	ldr	r3, [pc, #40]	@ (8028dd0 <prvInitialiseTaskLists+0x7c>)
 8028da6:	4a05      	ldr	r2, [pc, #20]	@ (8028dbc <prvInitialiseTaskLists+0x68>)
 8028da8:	601a      	str	r2, [r3, #0]
}
 8028daa:	bf00      	nop
 8028dac:	3708      	adds	r7, #8
 8028dae:	46bd      	mov	sp, r7
 8028db0:	bd80      	pop	{r7, pc}
 8028db2:	bf00      	nop
 8028db4:	2000418c 	.word	0x2000418c
 8028db8:	2000440c 	.word	0x2000440c
 8028dbc:	20004420 	.word	0x20004420
 8028dc0:	2000443c 	.word	0x2000443c
 8028dc4:	20004450 	.word	0x20004450
 8028dc8:	20004468 	.word	0x20004468
 8028dcc:	20004434 	.word	0x20004434
 8028dd0:	20004438 	.word	0x20004438

08028dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8028dd4:	b580      	push	{r7, lr}
 8028dd6:	b082      	sub	sp, #8
 8028dd8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8028dda:	e019      	b.n	8028e10 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8028ddc:	f000 fe02 	bl	80299e4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8028de0:	4b10      	ldr	r3, [pc, #64]	@ (8028e24 <prvCheckTasksWaitingTermination+0x50>)
 8028de2:	68db      	ldr	r3, [r3, #12]
 8028de4:	68db      	ldr	r3, [r3, #12]
 8028de6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8028de8:	687b      	ldr	r3, [r7, #4]
 8028dea:	3304      	adds	r3, #4
 8028dec:	4618      	mov	r0, r3
 8028dee:	f7fe fb75 	bl	80274dc <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8028df2:	4b0d      	ldr	r3, [pc, #52]	@ (8028e28 <prvCheckTasksWaitingTermination+0x54>)
 8028df4:	681b      	ldr	r3, [r3, #0]
 8028df6:	3b01      	subs	r3, #1
 8028df8:	4a0b      	ldr	r2, [pc, #44]	@ (8028e28 <prvCheckTasksWaitingTermination+0x54>)
 8028dfa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8028dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8028e2c <prvCheckTasksWaitingTermination+0x58>)
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	3b01      	subs	r3, #1
 8028e02:	4a0a      	ldr	r2, [pc, #40]	@ (8028e2c <prvCheckTasksWaitingTermination+0x58>)
 8028e04:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8028e06:	f000 fe1f 	bl	8029a48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8028e0a:	6878      	ldr	r0, [r7, #4]
 8028e0c:	f000 f810 	bl	8028e30 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8028e10:	4b06      	ldr	r3, [pc, #24]	@ (8028e2c <prvCheckTasksWaitingTermination+0x58>)
 8028e12:	681b      	ldr	r3, [r3, #0]
 8028e14:	2b00      	cmp	r3, #0
 8028e16:	d1e1      	bne.n	8028ddc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8028e18:	bf00      	nop
 8028e1a:	bf00      	nop
 8028e1c:	3708      	adds	r7, #8
 8028e1e:	46bd      	mov	sp, r7
 8028e20:	bd80      	pop	{r7, pc}
 8028e22:	bf00      	nop
 8028e24:	20004450 	.word	0x20004450
 8028e28:	2000447c 	.word	0x2000447c
 8028e2c:	20004464 	.word	0x20004464

08028e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8028e30:	b580      	push	{r7, lr}
 8028e32:	b084      	sub	sp, #16
 8028e34:	af00      	add	r7, sp, #0
 8028e36:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8028e38:	687b      	ldr	r3, [r7, #4]
 8028e3a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8028e3e:	2b00      	cmp	r3, #0
 8028e40:	d108      	bne.n	8028e54 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8028e42:	687b      	ldr	r3, [r7, #4]
 8028e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028e46:	4618      	mov	r0, r3
 8028e48:	f000 ffe2 	bl	8029e10 <vPortFree>
                vPortFree( pxTCB );
 8028e4c:	6878      	ldr	r0, [r7, #4]
 8028e4e:	f000 ffdf 	bl	8029e10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8028e52:	e019      	b.n	8028e88 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8028e5a:	2b01      	cmp	r3, #1
 8028e5c:	d103      	bne.n	8028e66 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8028e5e:	6878      	ldr	r0, [r7, #4]
 8028e60:	f000 ffd6 	bl	8029e10 <vPortFree>
    }
 8028e64:	e010      	b.n	8028e88 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8028e66:	687b      	ldr	r3, [r7, #4]
 8028e68:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8028e6c:	2b02      	cmp	r3, #2
 8028e6e:	d00b      	beq.n	8028e88 <prvDeleteTCB+0x58>
    __asm volatile
 8028e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028e74:	f383 8811 	msr	BASEPRI, r3
 8028e78:	f3bf 8f6f 	isb	sy
 8028e7c:	f3bf 8f4f 	dsb	sy
 8028e80:	60fb      	str	r3, [r7, #12]
}
 8028e82:	bf00      	nop
 8028e84:	bf00      	nop
 8028e86:	e7fd      	b.n	8028e84 <prvDeleteTCB+0x54>
    }
 8028e88:	bf00      	nop
 8028e8a:	3710      	adds	r7, #16
 8028e8c:	46bd      	mov	sp, r7
 8028e8e:	bd80      	pop	{r7, pc}

08028e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8028e90:	b480      	push	{r7}
 8028e92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8028e94:	4b0a      	ldr	r3, [pc, #40]	@ (8028ec0 <prvResetNextTaskUnblockTime+0x30>)
 8028e96:	681b      	ldr	r3, [r3, #0]
 8028e98:	681b      	ldr	r3, [r3, #0]
 8028e9a:	2b00      	cmp	r3, #0
 8028e9c:	d104      	bne.n	8028ea8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8028e9e:	4b09      	ldr	r3, [pc, #36]	@ (8028ec4 <prvResetNextTaskUnblockTime+0x34>)
 8028ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8028ea4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8028ea6:	e005      	b.n	8028eb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8028ea8:	4b05      	ldr	r3, [pc, #20]	@ (8028ec0 <prvResetNextTaskUnblockTime+0x30>)
 8028eaa:	681b      	ldr	r3, [r3, #0]
 8028eac:	68db      	ldr	r3, [r3, #12]
 8028eae:	681b      	ldr	r3, [r3, #0]
 8028eb0:	4a04      	ldr	r2, [pc, #16]	@ (8028ec4 <prvResetNextTaskUnblockTime+0x34>)
 8028eb2:	6013      	str	r3, [r2, #0]
}
 8028eb4:	bf00      	nop
 8028eb6:	46bd      	mov	sp, r7
 8028eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ebc:	4770      	bx	lr
 8028ebe:	bf00      	nop
 8028ec0:	20004434 	.word	0x20004434
 8028ec4:	2000449c 	.word	0x2000449c

08028ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8028ec8:	b480      	push	{r7}
 8028eca:	b083      	sub	sp, #12
 8028ecc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8028ece:	4b0b      	ldr	r3, [pc, #44]	@ (8028efc <xTaskGetSchedulerState+0x34>)
 8028ed0:	681b      	ldr	r3, [r3, #0]
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d102      	bne.n	8028edc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8028ed6:	2301      	movs	r3, #1
 8028ed8:	607b      	str	r3, [r7, #4]
 8028eda:	e008      	b.n	8028eee <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8028edc:	4b08      	ldr	r3, [pc, #32]	@ (8028f00 <xTaskGetSchedulerState+0x38>)
 8028ede:	681b      	ldr	r3, [r3, #0]
 8028ee0:	2b00      	cmp	r3, #0
 8028ee2:	d102      	bne.n	8028eea <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8028ee4:	2302      	movs	r3, #2
 8028ee6:	607b      	str	r3, [r7, #4]
 8028ee8:	e001      	b.n	8028eee <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8028eea:	2300      	movs	r3, #0
 8028eec:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8028eee:	687b      	ldr	r3, [r7, #4]
    }
 8028ef0:	4618      	mov	r0, r3
 8028ef2:	370c      	adds	r7, #12
 8028ef4:	46bd      	mov	sp, r7
 8028ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028efa:	4770      	bx	lr
 8028efc:	20004488 	.word	0x20004488
 8028f00:	200044a4 	.word	0x200044a4

08028f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8028f04:	b580      	push	{r7, lr}
 8028f06:	b088      	sub	sp, #32
 8028f08:	af00      	add	r7, sp, #0
 8028f0a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8028f10:	2300      	movs	r3, #0
 8028f12:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	f000 8090 	beq.w	802903c <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8028f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8029048 <xTaskPriorityDisinherit+0x144>)
 8028f1e:	681b      	ldr	r3, [r3, #0]
 8028f20:	69ba      	ldr	r2, [r7, #24]
 8028f22:	429a      	cmp	r2, r3
 8028f24:	d00b      	beq.n	8028f3e <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8028f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028f2a:	f383 8811 	msr	BASEPRI, r3
 8028f2e:	f3bf 8f6f 	isb	sy
 8028f32:	f3bf 8f4f 	dsb	sy
 8028f36:	613b      	str	r3, [r7, #16]
}
 8028f38:	bf00      	nop
 8028f3a:	bf00      	nop
 8028f3c:	e7fd      	b.n	8028f3a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8028f3e:	69bb      	ldr	r3, [r7, #24]
 8028f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028f42:	2b00      	cmp	r3, #0
 8028f44:	d10b      	bne.n	8028f5e <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8028f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8028f4a:	f383 8811 	msr	BASEPRI, r3
 8028f4e:	f3bf 8f6f 	isb	sy
 8028f52:	f3bf 8f4f 	dsb	sy
 8028f56:	60fb      	str	r3, [r7, #12]
}
 8028f58:	bf00      	nop
 8028f5a:	bf00      	nop
 8028f5c:	e7fd      	b.n	8028f5a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8028f5e:	69bb      	ldr	r3, [r7, #24]
 8028f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028f62:	1e5a      	subs	r2, r3, #1
 8028f64:	69bb      	ldr	r3, [r7, #24]
 8028f66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8028f68:	69bb      	ldr	r3, [r7, #24]
 8028f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028f6c:	69bb      	ldr	r3, [r7, #24]
 8028f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028f70:	429a      	cmp	r2, r3
 8028f72:	d063      	beq.n	802903c <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8028f74:	69bb      	ldr	r3, [r7, #24]
 8028f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028f78:	2b00      	cmp	r3, #0
 8028f7a:	d15f      	bne.n	802903c <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028f7c:	69bb      	ldr	r3, [r7, #24]
 8028f7e:	3304      	adds	r3, #4
 8028f80:	4618      	mov	r0, r3
 8028f82:	f7fe faab 	bl	80274dc <uxListRemove>
 8028f86:	4603      	mov	r3, r0
 8028f88:	2b00      	cmp	r3, #0
 8028f8a:	d10a      	bne.n	8028fa2 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8028f8c:	69bb      	ldr	r3, [r7, #24]
 8028f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028f90:	2201      	movs	r2, #1
 8028f92:	fa02 f303 	lsl.w	r3, r2, r3
 8028f96:	43da      	mvns	r2, r3
 8028f98:	4b2c      	ldr	r3, [pc, #176]	@ (802904c <xTaskPriorityDisinherit+0x148>)
 8028f9a:	681b      	ldr	r3, [r3, #0]
 8028f9c:	4013      	ands	r3, r2
 8028f9e:	4a2b      	ldr	r2, [pc, #172]	@ (802904c <xTaskPriorityDisinherit+0x148>)
 8028fa0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8028fa2:	69bb      	ldr	r3, [r7, #24]
 8028fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8028fa6:	69bb      	ldr	r3, [r7, #24]
 8028fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8028faa:	69bb      	ldr	r3, [r7, #24]
 8028fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028fae:	f1c3 0220 	rsb	r2, r3, #32
 8028fb2:	69bb      	ldr	r3, [r7, #24]
 8028fb4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8028fb6:	69bb      	ldr	r3, [r7, #24]
 8028fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028fba:	2201      	movs	r2, #1
 8028fbc:	409a      	lsls	r2, r3
 8028fbe:	4b23      	ldr	r3, [pc, #140]	@ (802904c <xTaskPriorityDisinherit+0x148>)
 8028fc0:	681b      	ldr	r3, [r3, #0]
 8028fc2:	4313      	orrs	r3, r2
 8028fc4:	4a21      	ldr	r2, [pc, #132]	@ (802904c <xTaskPriorityDisinherit+0x148>)
 8028fc6:	6013      	str	r3, [r2, #0]
 8028fc8:	69bb      	ldr	r3, [r7, #24]
 8028fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028fcc:	4920      	ldr	r1, [pc, #128]	@ (8029050 <xTaskPriorityDisinherit+0x14c>)
 8028fce:	4613      	mov	r3, r2
 8028fd0:	009b      	lsls	r3, r3, #2
 8028fd2:	4413      	add	r3, r2
 8028fd4:	009b      	lsls	r3, r3, #2
 8028fd6:	440b      	add	r3, r1
 8028fd8:	3304      	adds	r3, #4
 8028fda:	681b      	ldr	r3, [r3, #0]
 8028fdc:	617b      	str	r3, [r7, #20]
 8028fde:	69bb      	ldr	r3, [r7, #24]
 8028fe0:	697a      	ldr	r2, [r7, #20]
 8028fe2:	609a      	str	r2, [r3, #8]
 8028fe4:	697b      	ldr	r3, [r7, #20]
 8028fe6:	689a      	ldr	r2, [r3, #8]
 8028fe8:	69bb      	ldr	r3, [r7, #24]
 8028fea:	60da      	str	r2, [r3, #12]
 8028fec:	697b      	ldr	r3, [r7, #20]
 8028fee:	689b      	ldr	r3, [r3, #8]
 8028ff0:	69ba      	ldr	r2, [r7, #24]
 8028ff2:	3204      	adds	r2, #4
 8028ff4:	605a      	str	r2, [r3, #4]
 8028ff6:	69bb      	ldr	r3, [r7, #24]
 8028ff8:	1d1a      	adds	r2, r3, #4
 8028ffa:	697b      	ldr	r3, [r7, #20]
 8028ffc:	609a      	str	r2, [r3, #8]
 8028ffe:	69bb      	ldr	r3, [r7, #24]
 8029000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8029002:	4613      	mov	r3, r2
 8029004:	009b      	lsls	r3, r3, #2
 8029006:	4413      	add	r3, r2
 8029008:	009b      	lsls	r3, r3, #2
 802900a:	4a11      	ldr	r2, [pc, #68]	@ (8029050 <xTaskPriorityDisinherit+0x14c>)
 802900c:	441a      	add	r2, r3
 802900e:	69bb      	ldr	r3, [r7, #24]
 8029010:	615a      	str	r2, [r3, #20]
 8029012:	69bb      	ldr	r3, [r7, #24]
 8029014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8029016:	490e      	ldr	r1, [pc, #56]	@ (8029050 <xTaskPriorityDisinherit+0x14c>)
 8029018:	4613      	mov	r3, r2
 802901a:	009b      	lsls	r3, r3, #2
 802901c:	4413      	add	r3, r2
 802901e:	009b      	lsls	r3, r3, #2
 8029020:	440b      	add	r3, r1
 8029022:	681b      	ldr	r3, [r3, #0]
 8029024:	69ba      	ldr	r2, [r7, #24]
 8029026:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8029028:	1c59      	adds	r1, r3, #1
 802902a:	4809      	ldr	r0, [pc, #36]	@ (8029050 <xTaskPriorityDisinherit+0x14c>)
 802902c:	4613      	mov	r3, r2
 802902e:	009b      	lsls	r3, r3, #2
 8029030:	4413      	add	r3, r2
 8029032:	009b      	lsls	r3, r3, #2
 8029034:	4403      	add	r3, r0
 8029036:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8029038:	2301      	movs	r3, #1
 802903a:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 802903c:	69fb      	ldr	r3, [r7, #28]
    }
 802903e:	4618      	mov	r0, r3
 8029040:	3720      	adds	r7, #32
 8029042:	46bd      	mov	sp, r7
 8029044:	bd80      	pop	{r7, pc}
 8029046:	bf00      	nop
 8029048:	20004188 	.word	0x20004188
 802904c:	20004484 	.word	0x20004484
 8029050:	2000418c 	.word	0x2000418c

08029054 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8029054:	b580      	push	{r7, lr}
 8029056:	b088      	sub	sp, #32
 8029058:	af00      	add	r7, sp, #0
 802905a:	6078      	str	r0, [r7, #4]
 802905c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 802905e:	4b39      	ldr	r3, [pc, #228]	@ (8029144 <prvAddCurrentTaskToDelayedList+0xf0>)
 8029060:	681b      	ldr	r3, [r3, #0]
 8029062:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8029064:	4b38      	ldr	r3, [pc, #224]	@ (8029148 <prvAddCurrentTaskToDelayedList+0xf4>)
 8029066:	681b      	ldr	r3, [r3, #0]
 8029068:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 802906a:	4b38      	ldr	r3, [pc, #224]	@ (802914c <prvAddCurrentTaskToDelayedList+0xf8>)
 802906c:	681b      	ldr	r3, [r3, #0]
 802906e:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8029070:	4b37      	ldr	r3, [pc, #220]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 8029072:	681b      	ldr	r3, [r3, #0]
 8029074:	2200      	movs	r2, #0
 8029076:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802907a:	4b35      	ldr	r3, [pc, #212]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 802907c:	681b      	ldr	r3, [r3, #0]
 802907e:	3304      	adds	r3, #4
 8029080:	4618      	mov	r0, r3
 8029082:	f7fe fa2b 	bl	80274dc <uxListRemove>
 8029086:	4603      	mov	r3, r0
 8029088:	2b00      	cmp	r3, #0
 802908a:	d10b      	bne.n	80290a4 <prvAddCurrentTaskToDelayedList+0x50>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 802908c:	4b30      	ldr	r3, [pc, #192]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029092:	2201      	movs	r2, #1
 8029094:	fa02 f303 	lsl.w	r3, r2, r3
 8029098:	43da      	mvns	r2, r3
 802909a:	4b2e      	ldr	r3, [pc, #184]	@ (8029154 <prvAddCurrentTaskToDelayedList+0x100>)
 802909c:	681b      	ldr	r3, [r3, #0]
 802909e:	4013      	ands	r3, r2
 80290a0:	4a2c      	ldr	r2, [pc, #176]	@ (8029154 <prvAddCurrentTaskToDelayedList+0x100>)
 80290a2:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80290a4:	687b      	ldr	r3, [r7, #4]
 80290a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290aa:	d124      	bne.n	80290f6 <prvAddCurrentTaskToDelayedList+0xa2>
 80290ac:	683b      	ldr	r3, [r7, #0]
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	d021      	beq.n	80290f6 <prvAddCurrentTaskToDelayedList+0xa2>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80290b2:	4b29      	ldr	r3, [pc, #164]	@ (8029158 <prvAddCurrentTaskToDelayedList+0x104>)
 80290b4:	685b      	ldr	r3, [r3, #4]
 80290b6:	613b      	str	r3, [r7, #16]
 80290b8:	4b25      	ldr	r3, [pc, #148]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	693a      	ldr	r2, [r7, #16]
 80290be:	609a      	str	r2, [r3, #8]
 80290c0:	4b23      	ldr	r3, [pc, #140]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 80290c2:	681b      	ldr	r3, [r3, #0]
 80290c4:	693a      	ldr	r2, [r7, #16]
 80290c6:	6892      	ldr	r2, [r2, #8]
 80290c8:	60da      	str	r2, [r3, #12]
 80290ca:	4b21      	ldr	r3, [pc, #132]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 80290cc:	681a      	ldr	r2, [r3, #0]
 80290ce:	693b      	ldr	r3, [r7, #16]
 80290d0:	689b      	ldr	r3, [r3, #8]
 80290d2:	3204      	adds	r2, #4
 80290d4:	605a      	str	r2, [r3, #4]
 80290d6:	4b1e      	ldr	r3, [pc, #120]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	1d1a      	adds	r2, r3, #4
 80290dc:	693b      	ldr	r3, [r7, #16]
 80290de:	609a      	str	r2, [r3, #8]
 80290e0:	4b1b      	ldr	r3, [pc, #108]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 80290e2:	681b      	ldr	r3, [r3, #0]
 80290e4:	4a1c      	ldr	r2, [pc, #112]	@ (8029158 <prvAddCurrentTaskToDelayedList+0x104>)
 80290e6:	615a      	str	r2, [r3, #20]
 80290e8:	4b1b      	ldr	r3, [pc, #108]	@ (8029158 <prvAddCurrentTaskToDelayedList+0x104>)
 80290ea:	681b      	ldr	r3, [r3, #0]
 80290ec:	3301      	adds	r3, #1
 80290ee:	4a1a      	ldr	r2, [pc, #104]	@ (8029158 <prvAddCurrentTaskToDelayedList+0x104>)
 80290f0:	6013      	str	r3, [r2, #0]
 80290f2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80290f4:	e022      	b.n	802913c <prvAddCurrentTaskToDelayedList+0xe8>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80290f6:	69fa      	ldr	r2, [r7, #28]
 80290f8:	687b      	ldr	r3, [r7, #4]
 80290fa:	4413      	add	r3, r2
 80290fc:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80290fe:	4b14      	ldr	r3, [pc, #80]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 8029100:	681b      	ldr	r3, [r3, #0]
 8029102:	68fa      	ldr	r2, [r7, #12]
 8029104:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8029106:	68fa      	ldr	r2, [r7, #12]
 8029108:	69fb      	ldr	r3, [r7, #28]
 802910a:	429a      	cmp	r2, r3
 802910c:	d207      	bcs.n	802911e <prvAddCurrentTaskToDelayedList+0xca>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 802910e:	4b10      	ldr	r3, [pc, #64]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	3304      	adds	r3, #4
 8029114:	4619      	mov	r1, r3
 8029116:	6978      	ldr	r0, [r7, #20]
 8029118:	f7fe f9a7 	bl	802746a <vListInsert>
}
 802911c:	e00e      	b.n	802913c <prvAddCurrentTaskToDelayedList+0xe8>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 802911e:	4b0c      	ldr	r3, [pc, #48]	@ (8029150 <prvAddCurrentTaskToDelayedList+0xfc>)
 8029120:	681b      	ldr	r3, [r3, #0]
 8029122:	3304      	adds	r3, #4
 8029124:	4619      	mov	r1, r3
 8029126:	69b8      	ldr	r0, [r7, #24]
 8029128:	f7fe f99f 	bl	802746a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 802912c:	4b0b      	ldr	r3, [pc, #44]	@ (802915c <prvAddCurrentTaskToDelayedList+0x108>)
 802912e:	681b      	ldr	r3, [r3, #0]
 8029130:	68fa      	ldr	r2, [r7, #12]
 8029132:	429a      	cmp	r2, r3
 8029134:	d202      	bcs.n	802913c <prvAddCurrentTaskToDelayedList+0xe8>
                    xNextTaskUnblockTime = xTimeToWake;
 8029136:	4a09      	ldr	r2, [pc, #36]	@ (802915c <prvAddCurrentTaskToDelayedList+0x108>)
 8029138:	68fb      	ldr	r3, [r7, #12]
 802913a:	6013      	str	r3, [r2, #0]
}
 802913c:	bf00      	nop
 802913e:	3720      	adds	r7, #32
 8029140:	46bd      	mov	sp, r7
 8029142:	bd80      	pop	{r7, pc}
 8029144:	20004480 	.word	0x20004480
 8029148:	20004434 	.word	0x20004434
 802914c:	20004438 	.word	0x20004438
 8029150:	20004188 	.word	0x20004188
 8029154:	20004484 	.word	0x20004484
 8029158:	20004468 	.word	0x20004468
 802915c:	2000449c 	.word	0x2000449c

08029160 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8029160:	b580      	push	{r7, lr}
 8029162:	b08a      	sub	sp, #40	@ 0x28
 8029164:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8029166:	2300      	movs	r3, #0
 8029168:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 802916a:	f000 fa87 	bl	802967c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 802916e:	4b1d      	ldr	r3, [pc, #116]	@ (80291e4 <xTimerCreateTimerTask+0x84>)
 8029170:	681b      	ldr	r3, [r3, #0]
 8029172:	2b00      	cmp	r3, #0
 8029174:	d021      	beq.n	80291ba <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8029176:	2300      	movs	r3, #0
 8029178:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 802917a:	2300      	movs	r3, #0
 802917c:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 802917e:	1d3a      	adds	r2, r7, #4
 8029180:	f107 0108 	add.w	r1, r7, #8
 8029184:	f107 030c 	add.w	r3, r7, #12
 8029188:	4618      	mov	r0, r3
 802918a:	f7fe f90d 	bl	80273a8 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 802918e:	6879      	ldr	r1, [r7, #4]
 8029190:	68bb      	ldr	r3, [r7, #8]
 8029192:	68fa      	ldr	r2, [r7, #12]
 8029194:	9202      	str	r2, [sp, #8]
 8029196:	9301      	str	r3, [sp, #4]
 8029198:	231f      	movs	r3, #31
 802919a:	9300      	str	r3, [sp, #0]
 802919c:	2300      	movs	r3, #0
 802919e:	460a      	mov	r2, r1
 80291a0:	4911      	ldr	r1, [pc, #68]	@ (80291e8 <xTimerCreateTimerTask+0x88>)
 80291a2:	4812      	ldr	r0, [pc, #72]	@ (80291ec <xTimerCreateTimerTask+0x8c>)
 80291a4:	f7fe feb3 	bl	8027f0e <xTaskCreateStatic>
 80291a8:	4603      	mov	r3, r0
 80291aa:	4a11      	ldr	r2, [pc, #68]	@ (80291f0 <xTimerCreateTimerTask+0x90>)
 80291ac:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80291ae:	4b10      	ldr	r3, [pc, #64]	@ (80291f0 <xTimerCreateTimerTask+0x90>)
 80291b0:	681b      	ldr	r3, [r3, #0]
 80291b2:	2b00      	cmp	r3, #0
 80291b4:	d001      	beq.n	80291ba <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80291b6:	2301      	movs	r3, #1
 80291b8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80291ba:	697b      	ldr	r3, [r7, #20]
 80291bc:	2b00      	cmp	r3, #0
 80291be:	d10b      	bne.n	80291d8 <xTimerCreateTimerTask+0x78>
    __asm volatile
 80291c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80291c4:	f383 8811 	msr	BASEPRI, r3
 80291c8:	f3bf 8f6f 	isb	sy
 80291cc:	f3bf 8f4f 	dsb	sy
 80291d0:	613b      	str	r3, [r7, #16]
}
 80291d2:	bf00      	nop
 80291d4:	bf00      	nop
 80291d6:	e7fd      	b.n	80291d4 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80291d8:	697b      	ldr	r3, [r7, #20]
    }
 80291da:	4618      	mov	r0, r3
 80291dc:	3718      	adds	r7, #24
 80291de:	46bd      	mov	sp, r7
 80291e0:	bd80      	pop	{r7, pc}
 80291e2:	bf00      	nop
 80291e4:	200044d8 	.word	0x200044d8
 80291e8:	0802f200 	.word	0x0802f200
 80291ec:	08029299 	.word	0x08029299
 80291f0:	200044dc 	.word	0x200044dc

080291f4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80291f4:	b580      	push	{r7, lr}
 80291f6:	b084      	sub	sp, #16
 80291f8:	af00      	add	r7, sp, #0
 80291fa:	60f8      	str	r0, [r7, #12]
 80291fc:	60b9      	str	r1, [r7, #8]
 80291fe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8029200:	e008      	b.n	8029214 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8029202:	68fb      	ldr	r3, [r7, #12]
 8029204:	699b      	ldr	r3, [r3, #24]
 8029206:	68ba      	ldr	r2, [r7, #8]
 8029208:	4413      	add	r3, r2
 802920a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802920c:	68fb      	ldr	r3, [r7, #12]
 802920e:	6a1b      	ldr	r3, [r3, #32]
 8029210:	68f8      	ldr	r0, [r7, #12]
 8029212:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8029214:	68fb      	ldr	r3, [r7, #12]
 8029216:	699a      	ldr	r2, [r3, #24]
 8029218:	68bb      	ldr	r3, [r7, #8]
 802921a:	18d1      	adds	r1, r2, r3
 802921c:	68bb      	ldr	r3, [r7, #8]
 802921e:	687a      	ldr	r2, [r7, #4]
 8029220:	68f8      	ldr	r0, [r7, #12]
 8029222:	f000 f8df 	bl	80293e4 <prvInsertTimerInActiveList>
 8029226:	4603      	mov	r3, r0
 8029228:	2b00      	cmp	r3, #0
 802922a:	d1ea      	bne.n	8029202 <prvReloadTimer+0xe>
        }
    }
 802922c:	bf00      	nop
 802922e:	bf00      	nop
 8029230:	3710      	adds	r7, #16
 8029232:	46bd      	mov	sp, r7
 8029234:	bd80      	pop	{r7, pc}
	...

08029238 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8029238:	b580      	push	{r7, lr}
 802923a:	b084      	sub	sp, #16
 802923c:	af00      	add	r7, sp, #0
 802923e:	6078      	str	r0, [r7, #4]
 8029240:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8029242:	4b14      	ldr	r3, [pc, #80]	@ (8029294 <prvProcessExpiredTimer+0x5c>)
 8029244:	681b      	ldr	r3, [r3, #0]
 8029246:	68db      	ldr	r3, [r3, #12]
 8029248:	68db      	ldr	r3, [r3, #12]
 802924a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802924c:	68fb      	ldr	r3, [r7, #12]
 802924e:	3304      	adds	r3, #4
 8029250:	4618      	mov	r0, r3
 8029252:	f7fe f943 	bl	80274dc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8029256:	68fb      	ldr	r3, [r7, #12]
 8029258:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 802925c:	f003 0304 	and.w	r3, r3, #4
 8029260:	2b00      	cmp	r3, #0
 8029262:	d005      	beq.n	8029270 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8029264:	683a      	ldr	r2, [r7, #0]
 8029266:	6879      	ldr	r1, [r7, #4]
 8029268:	68f8      	ldr	r0, [r7, #12]
 802926a:	f7ff ffc3 	bl	80291f4 <prvReloadTimer>
 802926e:	e008      	b.n	8029282 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8029270:	68fb      	ldr	r3, [r7, #12]
 8029272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8029276:	f023 0301 	bic.w	r3, r3, #1
 802927a:	b2da      	uxtb	r2, r3
 802927c:	68fb      	ldr	r3, [r7, #12]
 802927e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8029282:	68fb      	ldr	r3, [r7, #12]
 8029284:	6a1b      	ldr	r3, [r3, #32]
 8029286:	68f8      	ldr	r0, [r7, #12]
 8029288:	4798      	blx	r3
    }
 802928a:	bf00      	nop
 802928c:	3710      	adds	r7, #16
 802928e:	46bd      	mov	sp, r7
 8029290:	bd80      	pop	{r7, pc}
 8029292:	bf00      	nop
 8029294:	200044d0 	.word	0x200044d0

08029298 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8029298:	b580      	push	{r7, lr}
 802929a:	b084      	sub	sp, #16
 802929c:	af00      	add	r7, sp, #0
 802929e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80292a0:	f107 0308 	add.w	r3, r7, #8
 80292a4:	4618      	mov	r0, r3
 80292a6:	f000 f859 	bl	802935c <prvGetNextExpireTime>
 80292aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80292ac:	68bb      	ldr	r3, [r7, #8]
 80292ae:	4619      	mov	r1, r3
 80292b0:	68f8      	ldr	r0, [r7, #12]
 80292b2:	f000 f805 	bl	80292c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80292b6:	f000 f8d7 	bl	8029468 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80292ba:	bf00      	nop
 80292bc:	e7f0      	b.n	80292a0 <prvTimerTask+0x8>
	...

080292c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80292c0:	b580      	push	{r7, lr}
 80292c2:	b084      	sub	sp, #16
 80292c4:	af00      	add	r7, sp, #0
 80292c6:	6078      	str	r0, [r7, #4]
 80292c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80292ca:	f7ff f8ad 	bl	8028428 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80292ce:	f107 0308 	add.w	r3, r7, #8
 80292d2:	4618      	mov	r0, r3
 80292d4:	f000 f866 	bl	80293a4 <prvSampleTimeNow>
 80292d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80292da:	68bb      	ldr	r3, [r7, #8]
 80292dc:	2b00      	cmp	r3, #0
 80292de:	d130      	bne.n	8029342 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80292e0:	683b      	ldr	r3, [r7, #0]
 80292e2:	2b00      	cmp	r3, #0
 80292e4:	d10a      	bne.n	80292fc <prvProcessTimerOrBlockTask+0x3c>
 80292e6:	687a      	ldr	r2, [r7, #4]
 80292e8:	68fb      	ldr	r3, [r7, #12]
 80292ea:	429a      	cmp	r2, r3
 80292ec:	d806      	bhi.n	80292fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80292ee:	f7ff f8a9 	bl	8028444 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80292f2:	68f9      	ldr	r1, [r7, #12]
 80292f4:	6878      	ldr	r0, [r7, #4]
 80292f6:	f7ff ff9f 	bl	8029238 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80292fa:	e024      	b.n	8029346 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80292fc:	683b      	ldr	r3, [r7, #0]
 80292fe:	2b00      	cmp	r3, #0
 8029300:	d008      	beq.n	8029314 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8029302:	4b13      	ldr	r3, [pc, #76]	@ (8029350 <prvProcessTimerOrBlockTask+0x90>)
 8029304:	681b      	ldr	r3, [r3, #0]
 8029306:	681b      	ldr	r3, [r3, #0]
 8029308:	2b00      	cmp	r3, #0
 802930a:	d101      	bne.n	8029310 <prvProcessTimerOrBlockTask+0x50>
 802930c:	2301      	movs	r3, #1
 802930e:	e000      	b.n	8029312 <prvProcessTimerOrBlockTask+0x52>
 8029310:	2300      	movs	r3, #0
 8029312:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8029314:	4b0f      	ldr	r3, [pc, #60]	@ (8029354 <prvProcessTimerOrBlockTask+0x94>)
 8029316:	6818      	ldr	r0, [r3, #0]
 8029318:	687a      	ldr	r2, [r7, #4]
 802931a:	68fb      	ldr	r3, [r7, #12]
 802931c:	1ad3      	subs	r3, r2, r3
 802931e:	683a      	ldr	r2, [r7, #0]
 8029320:	4619      	mov	r1, r3
 8029322:	f7fe fd5f 	bl	8027de4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8029326:	f7ff f88d 	bl	8028444 <xTaskResumeAll>
 802932a:	4603      	mov	r3, r0
 802932c:	2b00      	cmp	r3, #0
 802932e:	d10a      	bne.n	8029346 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8029330:	4b09      	ldr	r3, [pc, #36]	@ (8029358 <prvProcessTimerOrBlockTask+0x98>)
 8029332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8029336:	601a      	str	r2, [r3, #0]
 8029338:	f3bf 8f4f 	dsb	sy
 802933c:	f3bf 8f6f 	isb	sy
    }
 8029340:	e001      	b.n	8029346 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8029342:	f7ff f87f 	bl	8028444 <xTaskResumeAll>
    }
 8029346:	bf00      	nop
 8029348:	3710      	adds	r7, #16
 802934a:	46bd      	mov	sp, r7
 802934c:	bd80      	pop	{r7, pc}
 802934e:	bf00      	nop
 8029350:	200044d4 	.word	0x200044d4
 8029354:	200044d8 	.word	0x200044d8
 8029358:	e000ed04 	.word	0xe000ed04

0802935c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 802935c:	b480      	push	{r7}
 802935e:	b085      	sub	sp, #20
 8029360:	af00      	add	r7, sp, #0
 8029362:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8029364:	4b0e      	ldr	r3, [pc, #56]	@ (80293a0 <prvGetNextExpireTime+0x44>)
 8029366:	681b      	ldr	r3, [r3, #0]
 8029368:	681b      	ldr	r3, [r3, #0]
 802936a:	2b00      	cmp	r3, #0
 802936c:	d101      	bne.n	8029372 <prvGetNextExpireTime+0x16>
 802936e:	2201      	movs	r2, #1
 8029370:	e000      	b.n	8029374 <prvGetNextExpireTime+0x18>
 8029372:	2200      	movs	r2, #0
 8029374:	687b      	ldr	r3, [r7, #4]
 8029376:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8029378:	687b      	ldr	r3, [r7, #4]
 802937a:	681b      	ldr	r3, [r3, #0]
 802937c:	2b00      	cmp	r3, #0
 802937e:	d105      	bne.n	802938c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8029380:	4b07      	ldr	r3, [pc, #28]	@ (80293a0 <prvGetNextExpireTime+0x44>)
 8029382:	681b      	ldr	r3, [r3, #0]
 8029384:	68db      	ldr	r3, [r3, #12]
 8029386:	681b      	ldr	r3, [r3, #0]
 8029388:	60fb      	str	r3, [r7, #12]
 802938a:	e001      	b.n	8029390 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 802938c:	2300      	movs	r3, #0
 802938e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8029390:	68fb      	ldr	r3, [r7, #12]
    }
 8029392:	4618      	mov	r0, r3
 8029394:	3714      	adds	r7, #20
 8029396:	46bd      	mov	sp, r7
 8029398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802939c:	4770      	bx	lr
 802939e:	bf00      	nop
 80293a0:	200044d0 	.word	0x200044d0

080293a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80293a4:	b580      	push	{r7, lr}
 80293a6:	b084      	sub	sp, #16
 80293a8:	af00      	add	r7, sp, #0
 80293aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80293ac:	f7ff f952 	bl	8028654 <xTaskGetTickCount>
 80293b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80293b2:	4b0b      	ldr	r3, [pc, #44]	@ (80293e0 <prvSampleTimeNow+0x3c>)
 80293b4:	681b      	ldr	r3, [r3, #0]
 80293b6:	68fa      	ldr	r2, [r7, #12]
 80293b8:	429a      	cmp	r2, r3
 80293ba:	d205      	bcs.n	80293c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80293bc:	f000 f938 	bl	8029630 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80293c0:	687b      	ldr	r3, [r7, #4]
 80293c2:	2201      	movs	r2, #1
 80293c4:	601a      	str	r2, [r3, #0]
 80293c6:	e002      	b.n	80293ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80293c8:	687b      	ldr	r3, [r7, #4]
 80293ca:	2200      	movs	r2, #0
 80293cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80293ce:	4a04      	ldr	r2, [pc, #16]	@ (80293e0 <prvSampleTimeNow+0x3c>)
 80293d0:	68fb      	ldr	r3, [r7, #12]
 80293d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80293d4:	68fb      	ldr	r3, [r7, #12]
    }
 80293d6:	4618      	mov	r0, r3
 80293d8:	3710      	adds	r7, #16
 80293da:	46bd      	mov	sp, r7
 80293dc:	bd80      	pop	{r7, pc}
 80293de:	bf00      	nop
 80293e0:	200044e0 	.word	0x200044e0

080293e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80293e4:	b580      	push	{r7, lr}
 80293e6:	b086      	sub	sp, #24
 80293e8:	af00      	add	r7, sp, #0
 80293ea:	60f8      	str	r0, [r7, #12]
 80293ec:	60b9      	str	r1, [r7, #8]
 80293ee:	607a      	str	r2, [r7, #4]
 80293f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80293f2:	2300      	movs	r3, #0
 80293f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80293f6:	68fb      	ldr	r3, [r7, #12]
 80293f8:	68ba      	ldr	r2, [r7, #8]
 80293fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80293fc:	68fb      	ldr	r3, [r7, #12]
 80293fe:	68fa      	ldr	r2, [r7, #12]
 8029400:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8029402:	68ba      	ldr	r2, [r7, #8]
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	429a      	cmp	r2, r3
 8029408:	d812      	bhi.n	8029430 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 802940a:	687a      	ldr	r2, [r7, #4]
 802940c:	683b      	ldr	r3, [r7, #0]
 802940e:	1ad2      	subs	r2, r2, r3
 8029410:	68fb      	ldr	r3, [r7, #12]
 8029412:	699b      	ldr	r3, [r3, #24]
 8029414:	429a      	cmp	r2, r3
 8029416:	d302      	bcc.n	802941e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8029418:	2301      	movs	r3, #1
 802941a:	617b      	str	r3, [r7, #20]
 802941c:	e01b      	b.n	8029456 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802941e:	4b10      	ldr	r3, [pc, #64]	@ (8029460 <prvInsertTimerInActiveList+0x7c>)
 8029420:	681a      	ldr	r2, [r3, #0]
 8029422:	68fb      	ldr	r3, [r7, #12]
 8029424:	3304      	adds	r3, #4
 8029426:	4619      	mov	r1, r3
 8029428:	4610      	mov	r0, r2
 802942a:	f7fe f81e 	bl	802746a <vListInsert>
 802942e:	e012      	b.n	8029456 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8029430:	687a      	ldr	r2, [r7, #4]
 8029432:	683b      	ldr	r3, [r7, #0]
 8029434:	429a      	cmp	r2, r3
 8029436:	d206      	bcs.n	8029446 <prvInsertTimerInActiveList+0x62>
 8029438:	68ba      	ldr	r2, [r7, #8]
 802943a:	683b      	ldr	r3, [r7, #0]
 802943c:	429a      	cmp	r2, r3
 802943e:	d302      	bcc.n	8029446 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8029440:	2301      	movs	r3, #1
 8029442:	617b      	str	r3, [r7, #20]
 8029444:	e007      	b.n	8029456 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8029446:	4b07      	ldr	r3, [pc, #28]	@ (8029464 <prvInsertTimerInActiveList+0x80>)
 8029448:	681a      	ldr	r2, [r3, #0]
 802944a:	68fb      	ldr	r3, [r7, #12]
 802944c:	3304      	adds	r3, #4
 802944e:	4619      	mov	r1, r3
 8029450:	4610      	mov	r0, r2
 8029452:	f7fe f80a 	bl	802746a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8029456:	697b      	ldr	r3, [r7, #20]
    }
 8029458:	4618      	mov	r0, r3
 802945a:	3718      	adds	r7, #24
 802945c:	46bd      	mov	sp, r7
 802945e:	bd80      	pop	{r7, pc}
 8029460:	200044d4 	.word	0x200044d4
 8029464:	200044d0 	.word	0x200044d0

08029468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8029468:	b580      	push	{r7, lr}
 802946a:	b08a      	sub	sp, #40	@ 0x28
 802946c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 802946e:	1d3b      	adds	r3, r7, #4
 8029470:	2200      	movs	r2, #0
 8029472:	601a      	str	r2, [r3, #0]
 8029474:	605a      	str	r2, [r3, #4]
 8029476:	609a      	str	r2, [r3, #8]
 8029478:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 802947a:	e0c7      	b.n	802960c <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	2b00      	cmp	r3, #0
 8029480:	da19      	bge.n	80294b6 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8029482:	1d3b      	adds	r3, r7, #4
 8029484:	3304      	adds	r3, #4
 8029486:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8029488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802948a:	2b00      	cmp	r3, #0
 802948c:	d10b      	bne.n	80294a6 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 802948e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029492:	f383 8811 	msr	BASEPRI, r3
 8029496:	f3bf 8f6f 	isb	sy
 802949a:	f3bf 8f4f 	dsb	sy
 802949e:	61bb      	str	r3, [r7, #24]
}
 80294a0:	bf00      	nop
 80294a2:	bf00      	nop
 80294a4:	e7fd      	b.n	80294a2 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80294a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80294a8:	681b      	ldr	r3, [r3, #0]
 80294aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80294ac:	6850      	ldr	r0, [r2, #4]
 80294ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80294b0:	6892      	ldr	r2, [r2, #8]
 80294b2:	4611      	mov	r1, r2
 80294b4:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80294b6:	687b      	ldr	r3, [r7, #4]
 80294b8:	2b00      	cmp	r3, #0
 80294ba:	f2c0 80a7 	blt.w	802960c <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80294be:	68fb      	ldr	r3, [r7, #12]
 80294c0:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80294c2:	6a3b      	ldr	r3, [r7, #32]
 80294c4:	695b      	ldr	r3, [r3, #20]
 80294c6:	2b00      	cmp	r3, #0
 80294c8:	d004      	beq.n	80294d4 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80294ca:	6a3b      	ldr	r3, [r7, #32]
 80294cc:	3304      	adds	r3, #4
 80294ce:	4618      	mov	r0, r3
 80294d0:	f7fe f804 	bl	80274dc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80294d4:	463b      	mov	r3, r7
 80294d6:	4618      	mov	r0, r3
 80294d8:	f7ff ff64 	bl	80293a4 <prvSampleTimeNow>
 80294dc:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	3b01      	subs	r3, #1
 80294e2:	2b08      	cmp	r3, #8
 80294e4:	f200 808f 	bhi.w	8029606 <prvProcessReceivedCommands+0x19e>
 80294e8:	a201      	add	r2, pc, #4	@ (adr r2, 80294f0 <prvProcessReceivedCommands+0x88>)
 80294ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80294ee:	bf00      	nop
 80294f0:	08029515 	.word	0x08029515
 80294f4:	08029515 	.word	0x08029515
 80294f8:	0802957d 	.word	0x0802957d
 80294fc:	08029591 	.word	0x08029591
 8029500:	080295dd 	.word	0x080295dd
 8029504:	08029515 	.word	0x08029515
 8029508:	08029515 	.word	0x08029515
 802950c:	0802957d 	.word	0x0802957d
 8029510:	08029591 	.word	0x08029591
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8029514:	6a3b      	ldr	r3, [r7, #32]
 8029516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 802951a:	f043 0301 	orr.w	r3, r3, #1
 802951e:	b2da      	uxtb	r2, r3
 8029520:	6a3b      	ldr	r3, [r7, #32]
 8029522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8029526:	68ba      	ldr	r2, [r7, #8]
 8029528:	6a3b      	ldr	r3, [r7, #32]
 802952a:	699b      	ldr	r3, [r3, #24]
 802952c:	18d1      	adds	r1, r2, r3
 802952e:	68bb      	ldr	r3, [r7, #8]
 8029530:	69fa      	ldr	r2, [r7, #28]
 8029532:	6a38      	ldr	r0, [r7, #32]
 8029534:	f7ff ff56 	bl	80293e4 <prvInsertTimerInActiveList>
 8029538:	4603      	mov	r3, r0
 802953a:	2b00      	cmp	r3, #0
 802953c:	d065      	beq.n	802960a <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 802953e:	6a3b      	ldr	r3, [r7, #32]
 8029540:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8029544:	f003 0304 	and.w	r3, r3, #4
 8029548:	2b00      	cmp	r3, #0
 802954a:	d009      	beq.n	8029560 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 802954c:	68ba      	ldr	r2, [r7, #8]
 802954e:	6a3b      	ldr	r3, [r7, #32]
 8029550:	699b      	ldr	r3, [r3, #24]
 8029552:	4413      	add	r3, r2
 8029554:	69fa      	ldr	r2, [r7, #28]
 8029556:	4619      	mov	r1, r3
 8029558:	6a38      	ldr	r0, [r7, #32]
 802955a:	f7ff fe4b 	bl	80291f4 <prvReloadTimer>
 802955e:	e008      	b.n	8029572 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8029560:	6a3b      	ldr	r3, [r7, #32]
 8029562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8029566:	f023 0301 	bic.w	r3, r3, #1
 802956a:	b2da      	uxtb	r2, r3
 802956c:	6a3b      	ldr	r3, [r7, #32]
 802956e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8029572:	6a3b      	ldr	r3, [r7, #32]
 8029574:	6a1b      	ldr	r3, [r3, #32]
 8029576:	6a38      	ldr	r0, [r7, #32]
 8029578:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 802957a:	e046      	b.n	802960a <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 802957c:	6a3b      	ldr	r3, [r7, #32]
 802957e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8029582:	f023 0301 	bic.w	r3, r3, #1
 8029586:	b2da      	uxtb	r2, r3
 8029588:	6a3b      	ldr	r3, [r7, #32]
 802958a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 802958e:	e03d      	b.n	802960c <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8029590:	6a3b      	ldr	r3, [r7, #32]
 8029592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8029596:	f043 0301 	orr.w	r3, r3, #1
 802959a:	b2da      	uxtb	r2, r3
 802959c:	6a3b      	ldr	r3, [r7, #32]
 802959e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80295a2:	68ba      	ldr	r2, [r7, #8]
 80295a4:	6a3b      	ldr	r3, [r7, #32]
 80295a6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80295a8:	6a3b      	ldr	r3, [r7, #32]
 80295aa:	699b      	ldr	r3, [r3, #24]
 80295ac:	2b00      	cmp	r3, #0
 80295ae:	d10b      	bne.n	80295c8 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80295b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80295b4:	f383 8811 	msr	BASEPRI, r3
 80295b8:	f3bf 8f6f 	isb	sy
 80295bc:	f3bf 8f4f 	dsb	sy
 80295c0:	617b      	str	r3, [r7, #20]
}
 80295c2:	bf00      	nop
 80295c4:	bf00      	nop
 80295c6:	e7fd      	b.n	80295c4 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80295c8:	6a3b      	ldr	r3, [r7, #32]
 80295ca:	699a      	ldr	r2, [r3, #24]
 80295cc:	69fb      	ldr	r3, [r7, #28]
 80295ce:	18d1      	adds	r1, r2, r3
 80295d0:	69fb      	ldr	r3, [r7, #28]
 80295d2:	69fa      	ldr	r2, [r7, #28]
 80295d4:	6a38      	ldr	r0, [r7, #32]
 80295d6:	f7ff ff05 	bl	80293e4 <prvInsertTimerInActiveList>
                        break;
 80295da:	e017      	b.n	802960c <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80295dc:	6a3b      	ldr	r3, [r7, #32]
 80295de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80295e2:	f003 0302 	and.w	r3, r3, #2
 80295e6:	2b00      	cmp	r3, #0
 80295e8:	d103      	bne.n	80295f2 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 80295ea:	6a38      	ldr	r0, [r7, #32]
 80295ec:	f000 fc10 	bl	8029e10 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80295f0:	e00c      	b.n	802960c <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80295f2:	6a3b      	ldr	r3, [r7, #32]
 80295f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80295f8:	f023 0301 	bic.w	r3, r3, #1
 80295fc:	b2da      	uxtb	r2, r3
 80295fe:	6a3b      	ldr	r3, [r7, #32]
 8029600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8029604:	e002      	b.n	802960c <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8029606:	bf00      	nop
 8029608:	e000      	b.n	802960c <prvProcessReceivedCommands+0x1a4>
                        break;
 802960a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 802960c:	4b07      	ldr	r3, [pc, #28]	@ (802962c <prvProcessReceivedCommands+0x1c4>)
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	1d39      	adds	r1, r7, #4
 8029612:	2200      	movs	r2, #0
 8029614:	4618      	mov	r0, r3
 8029616:	f7fe f9f3 	bl	8027a00 <xQueueReceive>
 802961a:	4603      	mov	r3, r0
 802961c:	2b00      	cmp	r3, #0
 802961e:	f47f af2d 	bne.w	802947c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8029622:	bf00      	nop
 8029624:	bf00      	nop
 8029626:	3728      	adds	r7, #40	@ 0x28
 8029628:	46bd      	mov	sp, r7
 802962a:	bd80      	pop	{r7, pc}
 802962c:	200044d8 	.word	0x200044d8

08029630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8029630:	b580      	push	{r7, lr}
 8029632:	b082      	sub	sp, #8
 8029634:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8029636:	e009      	b.n	802964c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8029638:	4b0e      	ldr	r3, [pc, #56]	@ (8029674 <prvSwitchTimerLists+0x44>)
 802963a:	681b      	ldr	r3, [r3, #0]
 802963c:	68db      	ldr	r3, [r3, #12]
 802963e:	681b      	ldr	r3, [r3, #0]
 8029640:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8029642:	f04f 31ff 	mov.w	r1, #4294967295
 8029646:	6838      	ldr	r0, [r7, #0]
 8029648:	f7ff fdf6 	bl	8029238 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802964c:	4b09      	ldr	r3, [pc, #36]	@ (8029674 <prvSwitchTimerLists+0x44>)
 802964e:	681b      	ldr	r3, [r3, #0]
 8029650:	681b      	ldr	r3, [r3, #0]
 8029652:	2b00      	cmp	r3, #0
 8029654:	d1f0      	bne.n	8029638 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8029656:	4b07      	ldr	r3, [pc, #28]	@ (8029674 <prvSwitchTimerLists+0x44>)
 8029658:	681b      	ldr	r3, [r3, #0]
 802965a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 802965c:	4b06      	ldr	r3, [pc, #24]	@ (8029678 <prvSwitchTimerLists+0x48>)
 802965e:	681b      	ldr	r3, [r3, #0]
 8029660:	4a04      	ldr	r2, [pc, #16]	@ (8029674 <prvSwitchTimerLists+0x44>)
 8029662:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8029664:	4a04      	ldr	r2, [pc, #16]	@ (8029678 <prvSwitchTimerLists+0x48>)
 8029666:	687b      	ldr	r3, [r7, #4]
 8029668:	6013      	str	r3, [r2, #0]
    }
 802966a:	bf00      	nop
 802966c:	3708      	adds	r7, #8
 802966e:	46bd      	mov	sp, r7
 8029670:	bd80      	pop	{r7, pc}
 8029672:	bf00      	nop
 8029674:	200044d0 	.word	0x200044d0
 8029678:	200044d4 	.word	0x200044d4

0802967c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 802967c:	b580      	push	{r7, lr}
 802967e:	b082      	sub	sp, #8
 8029680:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8029682:	f000 f9af 	bl	80299e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8029686:	4b10      	ldr	r3, [pc, #64]	@ (80296c8 <prvCheckForValidListAndQueue+0x4c>)
 8029688:	681b      	ldr	r3, [r3, #0]
 802968a:	2b00      	cmp	r3, #0
 802968c:	d116      	bne.n	80296bc <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 802968e:	480f      	ldr	r0, [pc, #60]	@ (80296cc <prvCheckForValidListAndQueue+0x50>)
 8029690:	f7fd febe 	bl	8027410 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8029694:	480e      	ldr	r0, [pc, #56]	@ (80296d0 <prvCheckForValidListAndQueue+0x54>)
 8029696:	f7fd febb 	bl	8027410 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 802969a:	4b0e      	ldr	r3, [pc, #56]	@ (80296d4 <prvCheckForValidListAndQueue+0x58>)
 802969c:	4a0b      	ldr	r2, [pc, #44]	@ (80296cc <prvCheckForValidListAndQueue+0x50>)
 802969e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80296a0:	4b0d      	ldr	r3, [pc, #52]	@ (80296d8 <prvCheckForValidListAndQueue+0x5c>)
 80296a2:	4a0b      	ldr	r2, [pc, #44]	@ (80296d0 <prvCheckForValidListAndQueue+0x54>)
 80296a4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80296a6:	2300      	movs	r3, #0
 80296a8:	9300      	str	r3, [sp, #0]
 80296aa:	4b0c      	ldr	r3, [pc, #48]	@ (80296dc <prvCheckForValidListAndQueue+0x60>)
 80296ac:	4a0c      	ldr	r2, [pc, #48]	@ (80296e0 <prvCheckForValidListAndQueue+0x64>)
 80296ae:	2110      	movs	r1, #16
 80296b0:	2014      	movs	r0, #20
 80296b2:	f7fd ffcf 	bl	8027654 <xQueueGenericCreateStatic>
 80296b6:	4603      	mov	r3, r0
 80296b8:	4a03      	ldr	r2, [pc, #12]	@ (80296c8 <prvCheckForValidListAndQueue+0x4c>)
 80296ba:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80296bc:	f000 f9c4 	bl	8029a48 <vPortExitCritical>
    }
 80296c0:	bf00      	nop
 80296c2:	46bd      	mov	sp, r7
 80296c4:	bd80      	pop	{r7, pc}
 80296c6:	bf00      	nop
 80296c8:	200044d8 	.word	0x200044d8
 80296cc:	200044a8 	.word	0x200044a8
 80296d0:	200044bc 	.word	0x200044bc
 80296d4:	200044d0 	.word	0x200044d0
 80296d8:	200044d4 	.word	0x200044d4
 80296dc:	20004624 	.word	0x20004624
 80296e0:	200044e4 	.word	0x200044e4

080296e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80296e4:	b480      	push	{r7}
 80296e6:	b085      	sub	sp, #20
 80296e8:	af00      	add	r7, sp, #0
 80296ea:	60f8      	str	r0, [r7, #12]
 80296ec:	60b9      	str	r1, [r7, #8]
 80296ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80296f0:	68fb      	ldr	r3, [r7, #12]
 80296f2:	3b04      	subs	r3, #4
 80296f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80296f6:	68fb      	ldr	r3, [r7, #12]
 80296f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80296fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80296fe:	68fb      	ldr	r3, [r7, #12]
 8029700:	3b04      	subs	r3, #4
 8029702:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8029704:	68bb      	ldr	r3, [r7, #8]
 8029706:	f023 0201 	bic.w	r2, r3, #1
 802970a:	68fb      	ldr	r3, [r7, #12]
 802970c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 802970e:	68fb      	ldr	r3, [r7, #12]
 8029710:	3b04      	subs	r3, #4
 8029712:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8029714:	4a0c      	ldr	r2, [pc, #48]	@ (8029748 <pxPortInitialiseStack+0x64>)
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 802971a:	68fb      	ldr	r3, [r7, #12]
 802971c:	3b14      	subs	r3, #20
 802971e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8029720:	687a      	ldr	r2, [r7, #4]
 8029722:	68fb      	ldr	r3, [r7, #12]
 8029724:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8029726:	68fb      	ldr	r3, [r7, #12]
 8029728:	3b04      	subs	r3, #4
 802972a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 802972c:	68fb      	ldr	r3, [r7, #12]
 802972e:	f06f 0202 	mvn.w	r2, #2
 8029732:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8029734:	68fb      	ldr	r3, [r7, #12]
 8029736:	3b20      	subs	r3, #32
 8029738:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 802973a:	68fb      	ldr	r3, [r7, #12]
}
 802973c:	4618      	mov	r0, r3
 802973e:	3714      	adds	r7, #20
 8029740:	46bd      	mov	sp, r7
 8029742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029746:	4770      	bx	lr
 8029748:	0802974d 	.word	0x0802974d

0802974c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802974c:	b480      	push	{r7}
 802974e:	b085      	sub	sp, #20
 8029750:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8029752:	2300      	movs	r3, #0
 8029754:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8029756:	4b13      	ldr	r3, [pc, #76]	@ (80297a4 <prvTaskExitError+0x58>)
 8029758:	681b      	ldr	r3, [r3, #0]
 802975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802975e:	d00b      	beq.n	8029778 <prvTaskExitError+0x2c>
    __asm volatile
 8029760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029764:	f383 8811 	msr	BASEPRI, r3
 8029768:	f3bf 8f6f 	isb	sy
 802976c:	f3bf 8f4f 	dsb	sy
 8029770:	60fb      	str	r3, [r7, #12]
}
 8029772:	bf00      	nop
 8029774:	bf00      	nop
 8029776:	e7fd      	b.n	8029774 <prvTaskExitError+0x28>
    __asm volatile
 8029778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802977c:	f383 8811 	msr	BASEPRI, r3
 8029780:	f3bf 8f6f 	isb	sy
 8029784:	f3bf 8f4f 	dsb	sy
 8029788:	60bb      	str	r3, [r7, #8]
}
 802978a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 802978c:	bf00      	nop
 802978e:	687b      	ldr	r3, [r7, #4]
 8029790:	2b00      	cmp	r3, #0
 8029792:	d0fc      	beq.n	802978e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8029794:	bf00      	nop
 8029796:	bf00      	nop
 8029798:	3714      	adds	r7, #20
 802979a:	46bd      	mov	sp, r7
 802979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297a0:	4770      	bx	lr
 80297a2:	bf00      	nop
 80297a4:	2000000c 	.word	0x2000000c
	...

080297b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80297b0:	4b07      	ldr	r3, [pc, #28]	@ (80297d0 <pxCurrentTCBConst2>)
 80297b2:	6819      	ldr	r1, [r3, #0]
 80297b4:	6808      	ldr	r0, [r1, #0]
 80297b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297ba:	f380 8809 	msr	PSP, r0
 80297be:	f3bf 8f6f 	isb	sy
 80297c2:	f04f 0000 	mov.w	r0, #0
 80297c6:	f380 8811 	msr	BASEPRI, r0
 80297ca:	4770      	bx	lr
 80297cc:	f3af 8000 	nop.w

080297d0 <pxCurrentTCBConst2>:
 80297d0:	20004188 	.word	0x20004188
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80297d4:	bf00      	nop
 80297d6:	bf00      	nop

080297d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80297d8:	4808      	ldr	r0, [pc, #32]	@ (80297fc <prvPortStartFirstTask+0x24>)
 80297da:	6800      	ldr	r0, [r0, #0]
 80297dc:	6800      	ldr	r0, [r0, #0]
 80297de:	f380 8808 	msr	MSP, r0
 80297e2:	f04f 0000 	mov.w	r0, #0
 80297e6:	f380 8814 	msr	CONTROL, r0
 80297ea:	b662      	cpsie	i
 80297ec:	b661      	cpsie	f
 80297ee:	f3bf 8f4f 	dsb	sy
 80297f2:	f3bf 8f6f 	isb	sy
 80297f6:	df00      	svc	0
 80297f8:	bf00      	nop
 80297fa:	0000      	.short	0x0000
 80297fc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8029800:	bf00      	nop
 8029802:	bf00      	nop

08029804 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8029804:	b580      	push	{r7, lr}
 8029806:	b08c      	sub	sp, #48	@ 0x30
 8029808:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802980a:	4b69      	ldr	r3, [pc, #420]	@ (80299b0 <xPortStartScheduler+0x1ac>)
 802980c:	681b      	ldr	r3, [r3, #0]
 802980e:	4a69      	ldr	r2, [pc, #420]	@ (80299b4 <xPortStartScheduler+0x1b0>)
 8029810:	4293      	cmp	r3, r2
 8029812:	d10b      	bne.n	802982c <xPortStartScheduler+0x28>
    __asm volatile
 8029814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029818:	f383 8811 	msr	BASEPRI, r3
 802981c:	f3bf 8f6f 	isb	sy
 8029820:	f3bf 8f4f 	dsb	sy
 8029824:	623b      	str	r3, [r7, #32]
}
 8029826:	bf00      	nop
 8029828:	bf00      	nop
 802982a:	e7fd      	b.n	8029828 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802982c:	4b60      	ldr	r3, [pc, #384]	@ (80299b0 <xPortStartScheduler+0x1ac>)
 802982e:	681b      	ldr	r3, [r3, #0]
 8029830:	4a61      	ldr	r2, [pc, #388]	@ (80299b8 <xPortStartScheduler+0x1b4>)
 8029832:	4293      	cmp	r3, r2
 8029834:	d10b      	bne.n	802984e <xPortStartScheduler+0x4a>
    __asm volatile
 8029836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802983a:	f383 8811 	msr	BASEPRI, r3
 802983e:	f3bf 8f6f 	isb	sy
 8029842:	f3bf 8f4f 	dsb	sy
 8029846:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8029848:	bf00      	nop
 802984a:	bf00      	nop
 802984c:	e7fd      	b.n	802984a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 802984e:	4b5b      	ldr	r3, [pc, #364]	@ (80299bc <xPortStartScheduler+0x1b8>)
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8029854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029856:	332c      	adds	r3, #44	@ 0x2c
 8029858:	681b      	ldr	r3, [r3, #0]
 802985a:	4a59      	ldr	r2, [pc, #356]	@ (80299c0 <xPortStartScheduler+0x1bc>)
 802985c:	4293      	cmp	r3, r2
 802985e:	d00b      	beq.n	8029878 <xPortStartScheduler+0x74>
    __asm volatile
 8029860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029864:	f383 8811 	msr	BASEPRI, r3
 8029868:	f3bf 8f6f 	isb	sy
 802986c:	f3bf 8f4f 	dsb	sy
 8029870:	61fb      	str	r3, [r7, #28]
}
 8029872:	bf00      	nop
 8029874:	bf00      	nop
 8029876:	e7fd      	b.n	8029874 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8029878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802987a:	3338      	adds	r3, #56	@ 0x38
 802987c:	681b      	ldr	r3, [r3, #0]
 802987e:	4a51      	ldr	r2, [pc, #324]	@ (80299c4 <xPortStartScheduler+0x1c0>)
 8029880:	4293      	cmp	r3, r2
 8029882:	d00b      	beq.n	802989c <xPortStartScheduler+0x98>
    __asm volatile
 8029884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029888:	f383 8811 	msr	BASEPRI, r3
 802988c:	f3bf 8f6f 	isb	sy
 8029890:	f3bf 8f4f 	dsb	sy
 8029894:	61bb      	str	r3, [r7, #24]
}
 8029896:	bf00      	nop
 8029898:	bf00      	nop
 802989a:	e7fd      	b.n	8029898 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 802989c:	2300      	movs	r3, #0
 802989e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80298a0:	4b49      	ldr	r3, [pc, #292]	@ (80299c8 <xPortStartScheduler+0x1c4>)
 80298a2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80298a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80298a6:	781b      	ldrb	r3, [r3, #0]
 80298a8:	b2db      	uxtb	r3, r3
 80298aa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80298ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80298ae:	22ff      	movs	r2, #255	@ 0xff
 80298b0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80298b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80298b4:	781b      	ldrb	r3, [r3, #0]
 80298b6:	b2db      	uxtb	r3, r3
 80298b8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80298ba:	79fb      	ldrb	r3, [r7, #7]
 80298bc:	b2db      	uxtb	r3, r3
 80298be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80298c2:	b2da      	uxtb	r2, r3
 80298c4:	4b41      	ldr	r3, [pc, #260]	@ (80299cc <xPortStartScheduler+0x1c8>)
 80298c6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80298c8:	4b40      	ldr	r3, [pc, #256]	@ (80299cc <xPortStartScheduler+0x1c8>)
 80298ca:	781b      	ldrb	r3, [r3, #0]
 80298cc:	2b00      	cmp	r3, #0
 80298ce:	d10b      	bne.n	80298e8 <xPortStartScheduler+0xe4>
    __asm volatile
 80298d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80298d4:	f383 8811 	msr	BASEPRI, r3
 80298d8:	f3bf 8f6f 	isb	sy
 80298dc:	f3bf 8f4f 	dsb	sy
 80298e0:	617b      	str	r3, [r7, #20]
}
 80298e2:	bf00      	nop
 80298e4:	bf00      	nop
 80298e6:	e7fd      	b.n	80298e4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80298e8:	79fb      	ldrb	r3, [r7, #7]
 80298ea:	b2db      	uxtb	r3, r3
 80298ec:	43db      	mvns	r3, r3
 80298ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	d013      	beq.n	802991e <xPortStartScheduler+0x11a>
    __asm volatile
 80298f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80298fa:	f383 8811 	msr	BASEPRI, r3
 80298fe:	f3bf 8f6f 	isb	sy
 8029902:	f3bf 8f4f 	dsb	sy
 8029906:	613b      	str	r3, [r7, #16]
}
 8029908:	bf00      	nop
 802990a:	bf00      	nop
 802990c:	e7fd      	b.n	802990a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 802990e:	68bb      	ldr	r3, [r7, #8]
 8029910:	3301      	adds	r3, #1
 8029912:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8029914:	79fb      	ldrb	r3, [r7, #7]
 8029916:	b2db      	uxtb	r3, r3
 8029918:	005b      	lsls	r3, r3, #1
 802991a:	b2db      	uxtb	r3, r3
 802991c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802991e:	79fb      	ldrb	r3, [r7, #7]
 8029920:	b2db      	uxtb	r3, r3
 8029922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8029926:	2b80      	cmp	r3, #128	@ 0x80
 8029928:	d0f1      	beq.n	802990e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 802992a:	68bb      	ldr	r3, [r7, #8]
 802992c:	2b08      	cmp	r3, #8
 802992e:	d103      	bne.n	8029938 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8029930:	4b27      	ldr	r3, [pc, #156]	@ (80299d0 <xPortStartScheduler+0x1cc>)
 8029932:	2200      	movs	r2, #0
 8029934:	601a      	str	r2, [r3, #0]
 8029936:	e004      	b.n	8029942 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8029938:	68bb      	ldr	r3, [r7, #8]
 802993a:	f1c3 0307 	rsb	r3, r3, #7
 802993e:	4a24      	ldr	r2, [pc, #144]	@ (80299d0 <xPortStartScheduler+0x1cc>)
 8029940:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8029942:	4b23      	ldr	r3, [pc, #140]	@ (80299d0 <xPortStartScheduler+0x1cc>)
 8029944:	681b      	ldr	r3, [r3, #0]
 8029946:	021b      	lsls	r3, r3, #8
 8029948:	4a21      	ldr	r2, [pc, #132]	@ (80299d0 <xPortStartScheduler+0x1cc>)
 802994a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802994c:	4b20      	ldr	r3, [pc, #128]	@ (80299d0 <xPortStartScheduler+0x1cc>)
 802994e:	681b      	ldr	r3, [r3, #0]
 8029950:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8029954:	4a1e      	ldr	r2, [pc, #120]	@ (80299d0 <xPortStartScheduler+0x1cc>)
 8029956:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8029958:	7bfb      	ldrb	r3, [r7, #15]
 802995a:	b2da      	uxtb	r2, r3
 802995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802995e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8029960:	4b1c      	ldr	r3, [pc, #112]	@ (80299d4 <xPortStartScheduler+0x1d0>)
 8029962:	681b      	ldr	r3, [r3, #0]
 8029964:	4a1b      	ldr	r2, [pc, #108]	@ (80299d4 <xPortStartScheduler+0x1d0>)
 8029966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 802996a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 802996c:	4b19      	ldr	r3, [pc, #100]	@ (80299d4 <xPortStartScheduler+0x1d0>)
 802996e:	681b      	ldr	r3, [r3, #0]
 8029970:	4a18      	ldr	r2, [pc, #96]	@ (80299d4 <xPortStartScheduler+0x1d0>)
 8029972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8029976:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8029978:	4b17      	ldr	r3, [pc, #92]	@ (80299d8 <xPortStartScheduler+0x1d4>)
 802997a:	2200      	movs	r2, #0
 802997c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 802997e:	f000 f8e5 	bl	8029b4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8029982:	4b16      	ldr	r3, [pc, #88]	@ (80299dc <xPortStartScheduler+0x1d8>)
 8029984:	2200      	movs	r2, #0
 8029986:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8029988:	f000 f904 	bl	8029b94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802998c:	4b14      	ldr	r3, [pc, #80]	@ (80299e0 <xPortStartScheduler+0x1dc>)
 802998e:	681b      	ldr	r3, [r3, #0]
 8029990:	4a13      	ldr	r2, [pc, #76]	@ (80299e0 <xPortStartScheduler+0x1dc>)
 8029992:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8029996:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8029998:	f7ff ff1e 	bl	80297d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 802999c:	f7fe ff84 	bl	80288a8 <vTaskSwitchContext>
    prvTaskExitError();
 80299a0:	f7ff fed4 	bl	802974c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80299a4:	2300      	movs	r3, #0
}
 80299a6:	4618      	mov	r0, r3
 80299a8:	3730      	adds	r7, #48	@ 0x30
 80299aa:	46bd      	mov	sp, r7
 80299ac:	bd80      	pop	{r7, pc}
 80299ae:	bf00      	nop
 80299b0:	e000ed00 	.word	0xe000ed00
 80299b4:	410fc271 	.word	0x410fc271
 80299b8:	410fc270 	.word	0x410fc270
 80299bc:	e000ed08 	.word	0xe000ed08
 80299c0:	080297b1 	.word	0x080297b1
 80299c4:	08029aa1 	.word	0x08029aa1
 80299c8:	e000e400 	.word	0xe000e400
 80299cc:	2000466c 	.word	0x2000466c
 80299d0:	20004670 	.word	0x20004670
 80299d4:	e000ed20 	.word	0xe000ed20
 80299d8:	e000ed1c 	.word	0xe000ed1c
 80299dc:	2000000c 	.word	0x2000000c
 80299e0:	e000ef34 	.word	0xe000ef34

080299e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80299e4:	b480      	push	{r7}
 80299e6:	b083      	sub	sp, #12
 80299e8:	af00      	add	r7, sp, #0
    __asm volatile
 80299ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80299ee:	f383 8811 	msr	BASEPRI, r3
 80299f2:	f3bf 8f6f 	isb	sy
 80299f6:	f3bf 8f4f 	dsb	sy
 80299fa:	607b      	str	r3, [r7, #4]
}
 80299fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80299fe:	4b10      	ldr	r3, [pc, #64]	@ (8029a40 <vPortEnterCritical+0x5c>)
 8029a00:	681b      	ldr	r3, [r3, #0]
 8029a02:	3301      	adds	r3, #1
 8029a04:	4a0e      	ldr	r2, [pc, #56]	@ (8029a40 <vPortEnterCritical+0x5c>)
 8029a06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8029a08:	4b0d      	ldr	r3, [pc, #52]	@ (8029a40 <vPortEnterCritical+0x5c>)
 8029a0a:	681b      	ldr	r3, [r3, #0]
 8029a0c:	2b01      	cmp	r3, #1
 8029a0e:	d110      	bne.n	8029a32 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8029a10:	4b0c      	ldr	r3, [pc, #48]	@ (8029a44 <vPortEnterCritical+0x60>)
 8029a12:	681b      	ldr	r3, [r3, #0]
 8029a14:	b2db      	uxtb	r3, r3
 8029a16:	2b00      	cmp	r3, #0
 8029a18:	d00b      	beq.n	8029a32 <vPortEnterCritical+0x4e>
    __asm volatile
 8029a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029a1e:	f383 8811 	msr	BASEPRI, r3
 8029a22:	f3bf 8f6f 	isb	sy
 8029a26:	f3bf 8f4f 	dsb	sy
 8029a2a:	603b      	str	r3, [r7, #0]
}
 8029a2c:	bf00      	nop
 8029a2e:	bf00      	nop
 8029a30:	e7fd      	b.n	8029a2e <vPortEnterCritical+0x4a>
    }
}
 8029a32:	bf00      	nop
 8029a34:	370c      	adds	r7, #12
 8029a36:	46bd      	mov	sp, r7
 8029a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a3c:	4770      	bx	lr
 8029a3e:	bf00      	nop
 8029a40:	2000000c 	.word	0x2000000c
 8029a44:	e000ed04 	.word	0xe000ed04

08029a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8029a48:	b480      	push	{r7}
 8029a4a:	b083      	sub	sp, #12
 8029a4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8029a4e:	4b12      	ldr	r3, [pc, #72]	@ (8029a98 <vPortExitCritical+0x50>)
 8029a50:	681b      	ldr	r3, [r3, #0]
 8029a52:	2b00      	cmp	r3, #0
 8029a54:	d10b      	bne.n	8029a6e <vPortExitCritical+0x26>
    __asm volatile
 8029a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029a5a:	f383 8811 	msr	BASEPRI, r3
 8029a5e:	f3bf 8f6f 	isb	sy
 8029a62:	f3bf 8f4f 	dsb	sy
 8029a66:	607b      	str	r3, [r7, #4]
}
 8029a68:	bf00      	nop
 8029a6a:	bf00      	nop
 8029a6c:	e7fd      	b.n	8029a6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8029a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8029a98 <vPortExitCritical+0x50>)
 8029a70:	681b      	ldr	r3, [r3, #0]
 8029a72:	3b01      	subs	r3, #1
 8029a74:	4a08      	ldr	r2, [pc, #32]	@ (8029a98 <vPortExitCritical+0x50>)
 8029a76:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8029a78:	4b07      	ldr	r3, [pc, #28]	@ (8029a98 <vPortExitCritical+0x50>)
 8029a7a:	681b      	ldr	r3, [r3, #0]
 8029a7c:	2b00      	cmp	r3, #0
 8029a7e:	d105      	bne.n	8029a8c <vPortExitCritical+0x44>
 8029a80:	2300      	movs	r3, #0
 8029a82:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8029a84:	683b      	ldr	r3, [r7, #0]
 8029a86:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8029a8a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8029a8c:	bf00      	nop
 8029a8e:	370c      	adds	r7, #12
 8029a90:	46bd      	mov	sp, r7
 8029a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a96:	4770      	bx	lr
 8029a98:	2000000c 	.word	0x2000000c
 8029a9c:	00000000 	.word	0x00000000

08029aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8029aa0:	f3ef 8009 	mrs	r0, PSP
 8029aa4:	f3bf 8f6f 	isb	sy
 8029aa8:	4b15      	ldr	r3, [pc, #84]	@ (8029b00 <pxCurrentTCBConst>)
 8029aaa:	681a      	ldr	r2, [r3, #0]
 8029aac:	f01e 0f10 	tst.w	lr, #16
 8029ab0:	bf08      	it	eq
 8029ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8029ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029aba:	6010      	str	r0, [r2, #0]
 8029abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8029ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8029ac4:	f380 8811 	msr	BASEPRI, r0
 8029ac8:	f3bf 8f4f 	dsb	sy
 8029acc:	f3bf 8f6f 	isb	sy
 8029ad0:	f7fe feea 	bl	80288a8 <vTaskSwitchContext>
 8029ad4:	f04f 0000 	mov.w	r0, #0
 8029ad8:	f380 8811 	msr	BASEPRI, r0
 8029adc:	bc09      	pop	{r0, r3}
 8029ade:	6819      	ldr	r1, [r3, #0]
 8029ae0:	6808      	ldr	r0, [r1, #0]
 8029ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ae6:	f01e 0f10 	tst.w	lr, #16
 8029aea:	bf08      	it	eq
 8029aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8029af0:	f380 8809 	msr	PSP, r0
 8029af4:	f3bf 8f6f 	isb	sy
 8029af8:	4770      	bx	lr
 8029afa:	bf00      	nop
 8029afc:	f3af 8000 	nop.w

08029b00 <pxCurrentTCBConst>:
 8029b00:	20004188 	.word	0x20004188
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8029b04:	bf00      	nop
 8029b06:	bf00      	nop

08029b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8029b08:	b580      	push	{r7, lr}
 8029b0a:	b082      	sub	sp, #8
 8029b0c:	af00      	add	r7, sp, #0
    __asm volatile
 8029b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029b12:	f383 8811 	msr	BASEPRI, r3
 8029b16:	f3bf 8f6f 	isb	sy
 8029b1a:	f3bf 8f4f 	dsb	sy
 8029b1e:	607b      	str	r3, [r7, #4]
}
 8029b20:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8029b22:	f7fe fda7 	bl	8028674 <xTaskIncrementTick>
 8029b26:	4603      	mov	r3, r0
 8029b28:	2b00      	cmp	r3, #0
 8029b2a:	d003      	beq.n	8029b34 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8029b2c:	4b06      	ldr	r3, [pc, #24]	@ (8029b48 <SysTick_Handler+0x40>)
 8029b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8029b32:	601a      	str	r2, [r3, #0]
 8029b34:	2300      	movs	r3, #0
 8029b36:	603b      	str	r3, [r7, #0]
    __asm volatile
 8029b38:	683b      	ldr	r3, [r7, #0]
 8029b3a:	f383 8811 	msr	BASEPRI, r3
}
 8029b3e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8029b40:	bf00      	nop
 8029b42:	3708      	adds	r7, #8
 8029b44:	46bd      	mov	sp, r7
 8029b46:	bd80      	pop	{r7, pc}
 8029b48:	e000ed04 	.word	0xe000ed04

08029b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8029b4c:	b480      	push	{r7}
 8029b4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8029b50:	4b0b      	ldr	r3, [pc, #44]	@ (8029b80 <vPortSetupTimerInterrupt+0x34>)
 8029b52:	2200      	movs	r2, #0
 8029b54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8029b56:	4b0b      	ldr	r3, [pc, #44]	@ (8029b84 <vPortSetupTimerInterrupt+0x38>)
 8029b58:	2200      	movs	r2, #0
 8029b5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8029b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8029b88 <vPortSetupTimerInterrupt+0x3c>)
 8029b5e:	681b      	ldr	r3, [r3, #0]
 8029b60:	4a0a      	ldr	r2, [pc, #40]	@ (8029b8c <vPortSetupTimerInterrupt+0x40>)
 8029b62:	fba2 2303 	umull	r2, r3, r2, r3
 8029b66:	099b      	lsrs	r3, r3, #6
 8029b68:	4a09      	ldr	r2, [pc, #36]	@ (8029b90 <vPortSetupTimerInterrupt+0x44>)
 8029b6a:	3b01      	subs	r3, #1
 8029b6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8029b6e:	4b04      	ldr	r3, [pc, #16]	@ (8029b80 <vPortSetupTimerInterrupt+0x34>)
 8029b70:	2207      	movs	r2, #7
 8029b72:	601a      	str	r2, [r3, #0]
}
 8029b74:	bf00      	nop
 8029b76:	46bd      	mov	sp, r7
 8029b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b7c:	4770      	bx	lr
 8029b7e:	bf00      	nop
 8029b80:	e000e010 	.word	0xe000e010
 8029b84:	e000e018 	.word	0xe000e018
 8029b88:	20000000 	.word	0x20000000
 8029b8c:	10624dd3 	.word	0x10624dd3
 8029b90:	e000e014 	.word	0xe000e014

08029b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8029b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8029ba4 <vPortEnableVFP+0x10>
 8029b98:	6801      	ldr	r1, [r0, #0]
 8029b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8029b9e:	6001      	str	r1, [r0, #0]
 8029ba0:	4770      	bx	lr
 8029ba2:	0000      	.short	0x0000
 8029ba4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8029ba8:	bf00      	nop
 8029baa:	bf00      	nop

08029bac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8029bac:	b580      	push	{r7, lr}
 8029bae:	b08e      	sub	sp, #56	@ 0x38
 8029bb0:	af00      	add	r7, sp, #0
 8029bb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8029bb4:	2300      	movs	r3, #0
 8029bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8029bb8:	687b      	ldr	r3, [r7, #4]
 8029bba:	2b00      	cmp	r3, #0
 8029bbc:	d022      	beq.n	8029c04 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8029bbe:	2308      	movs	r3, #8
 8029bc0:	43db      	mvns	r3, r3
 8029bc2:	687a      	ldr	r2, [r7, #4]
 8029bc4:	429a      	cmp	r2, r3
 8029bc6:	d81b      	bhi.n	8029c00 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8029bc8:	2208      	movs	r2, #8
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	4413      	add	r3, r2
 8029bce:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8029bd0:	687b      	ldr	r3, [r7, #4]
 8029bd2:	f003 0307 	and.w	r3, r3, #7
 8029bd6:	2b00      	cmp	r3, #0
 8029bd8:	d014      	beq.n	8029c04 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8029bda:	687b      	ldr	r3, [r7, #4]
 8029bdc:	f003 0307 	and.w	r3, r3, #7
 8029be0:	f1c3 0308 	rsb	r3, r3, #8
 8029be4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8029be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029be8:	43db      	mvns	r3, r3
 8029bea:	687a      	ldr	r2, [r7, #4]
 8029bec:	429a      	cmp	r2, r3
 8029bee:	d804      	bhi.n	8029bfa <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8029bf0:	687a      	ldr	r2, [r7, #4]
 8029bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029bf4:	4413      	add	r3, r2
 8029bf6:	607b      	str	r3, [r7, #4]
 8029bf8:	e004      	b.n	8029c04 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8029bfa:	2300      	movs	r3, #0
 8029bfc:	607b      	str	r3, [r7, #4]
 8029bfe:	e001      	b.n	8029c04 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8029c00:	2300      	movs	r3, #0
 8029c02:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8029c04:	f7fe fc10 	bl	8028428 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8029c08:	4b7a      	ldr	r3, [pc, #488]	@ (8029df4 <pvPortMalloc+0x248>)
 8029c0a:	681b      	ldr	r3, [r3, #0]
 8029c0c:	2b00      	cmp	r3, #0
 8029c0e:	d101      	bne.n	8029c14 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8029c10:	f000 f974 	bl	8029efc <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8029c14:	687b      	ldr	r3, [r7, #4]
 8029c16:	2b00      	cmp	r3, #0
 8029c18:	f2c0 80d3 	blt.w	8029dc2 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8029c1c:	687b      	ldr	r3, [r7, #4]
 8029c1e:	2b00      	cmp	r3, #0
 8029c20:	f000 80cf 	beq.w	8029dc2 <pvPortMalloc+0x216>
 8029c24:	4b74      	ldr	r3, [pc, #464]	@ (8029df8 <pvPortMalloc+0x24c>)
 8029c26:	681b      	ldr	r3, [r3, #0]
 8029c28:	687a      	ldr	r2, [r7, #4]
 8029c2a:	429a      	cmp	r2, r3
 8029c2c:	f200 80c9 	bhi.w	8029dc2 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8029c30:	4b72      	ldr	r3, [pc, #456]	@ (8029dfc <pvPortMalloc+0x250>)
 8029c32:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8029c34:	4b71      	ldr	r3, [pc, #452]	@ (8029dfc <pvPortMalloc+0x250>)
 8029c36:	681b      	ldr	r3, [r3, #0]
 8029c38:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8029c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c3c:	4a70      	ldr	r2, [pc, #448]	@ (8029e00 <pvPortMalloc+0x254>)
 8029c3e:	4293      	cmp	r3, r2
 8029c40:	d305      	bcc.n	8029c4e <pvPortMalloc+0xa2>
 8029c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c44:	4a6f      	ldr	r2, [pc, #444]	@ (8029e04 <pvPortMalloc+0x258>)
 8029c46:	4293      	cmp	r3, r2
 8029c48:	d801      	bhi.n	8029c4e <pvPortMalloc+0xa2>
 8029c4a:	2301      	movs	r3, #1
 8029c4c:	e000      	b.n	8029c50 <pvPortMalloc+0xa4>
 8029c4e:	2300      	movs	r3, #0
 8029c50:	2b00      	cmp	r3, #0
 8029c52:	d129      	bne.n	8029ca8 <pvPortMalloc+0xfc>
    __asm volatile
 8029c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029c58:	f383 8811 	msr	BASEPRI, r3
 8029c5c:	f3bf 8f6f 	isb	sy
 8029c60:	f3bf 8f4f 	dsb	sy
 8029c64:	623b      	str	r3, [r7, #32]
}
 8029c66:	bf00      	nop
 8029c68:	bf00      	nop
 8029c6a:	e7fd      	b.n	8029c68 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8029c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c6e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8029c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c72:	681b      	ldr	r3, [r3, #0]
 8029c74:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8029c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c78:	4a61      	ldr	r2, [pc, #388]	@ (8029e00 <pvPortMalloc+0x254>)
 8029c7a:	4293      	cmp	r3, r2
 8029c7c:	d305      	bcc.n	8029c8a <pvPortMalloc+0xde>
 8029c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029c80:	4a60      	ldr	r2, [pc, #384]	@ (8029e04 <pvPortMalloc+0x258>)
 8029c82:	4293      	cmp	r3, r2
 8029c84:	d801      	bhi.n	8029c8a <pvPortMalloc+0xde>
 8029c86:	2301      	movs	r3, #1
 8029c88:	e000      	b.n	8029c8c <pvPortMalloc+0xe0>
 8029c8a:	2300      	movs	r3, #0
 8029c8c:	2b00      	cmp	r3, #0
 8029c8e:	d10b      	bne.n	8029ca8 <pvPortMalloc+0xfc>
    __asm volatile
 8029c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029c94:	f383 8811 	msr	BASEPRI, r3
 8029c98:	f3bf 8f6f 	isb	sy
 8029c9c:	f3bf 8f4f 	dsb	sy
 8029ca0:	61fb      	str	r3, [r7, #28]
}
 8029ca2:	bf00      	nop
 8029ca4:	bf00      	nop
 8029ca6:	e7fd      	b.n	8029ca4 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8029ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029caa:	685b      	ldr	r3, [r3, #4]
 8029cac:	687a      	ldr	r2, [r7, #4]
 8029cae:	429a      	cmp	r2, r3
 8029cb0:	d903      	bls.n	8029cba <pvPortMalloc+0x10e>
 8029cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029cb4:	681b      	ldr	r3, [r3, #0]
 8029cb6:	2b00      	cmp	r3, #0
 8029cb8:	d1d8      	bne.n	8029c6c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8029cba:	4b4e      	ldr	r3, [pc, #312]	@ (8029df4 <pvPortMalloc+0x248>)
 8029cbc:	681b      	ldr	r3, [r3, #0]
 8029cbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029cc0:	429a      	cmp	r2, r3
 8029cc2:	d07e      	beq.n	8029dc2 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8029cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029cc6:	681b      	ldr	r3, [r3, #0]
 8029cc8:	2208      	movs	r2, #8
 8029cca:	4413      	add	r3, r2
 8029ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8029cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8029e00 <pvPortMalloc+0x254>)
 8029cd2:	4293      	cmp	r3, r2
 8029cd4:	d305      	bcc.n	8029ce2 <pvPortMalloc+0x136>
 8029cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8029e04 <pvPortMalloc+0x258>)
 8029cda:	4293      	cmp	r3, r2
 8029cdc:	d801      	bhi.n	8029ce2 <pvPortMalloc+0x136>
 8029cde:	2301      	movs	r3, #1
 8029ce0:	e000      	b.n	8029ce4 <pvPortMalloc+0x138>
 8029ce2:	2300      	movs	r3, #0
 8029ce4:	2b00      	cmp	r3, #0
 8029ce6:	d10b      	bne.n	8029d00 <pvPortMalloc+0x154>
    __asm volatile
 8029ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029cec:	f383 8811 	msr	BASEPRI, r3
 8029cf0:	f3bf 8f6f 	isb	sy
 8029cf4:	f3bf 8f4f 	dsb	sy
 8029cf8:	61bb      	str	r3, [r7, #24]
}
 8029cfa:	bf00      	nop
 8029cfc:	bf00      	nop
 8029cfe:	e7fd      	b.n	8029cfc <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8029d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d02:	681a      	ldr	r2, [r3, #0]
 8029d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029d06:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8029d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d0a:	685b      	ldr	r3, [r3, #4]
 8029d0c:	687a      	ldr	r2, [r7, #4]
 8029d0e:	429a      	cmp	r2, r3
 8029d10:	d90b      	bls.n	8029d2a <pvPortMalloc+0x17e>
    __asm volatile
 8029d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029d16:	f383 8811 	msr	BASEPRI, r3
 8029d1a:	f3bf 8f6f 	isb	sy
 8029d1e:	f3bf 8f4f 	dsb	sy
 8029d22:	617b      	str	r3, [r7, #20]
}
 8029d24:	bf00      	nop
 8029d26:	bf00      	nop
 8029d28:	e7fd      	b.n	8029d26 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8029d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d2c:	685a      	ldr	r2, [r3, #4]
 8029d2e:	687b      	ldr	r3, [r7, #4]
 8029d30:	1ad2      	subs	r2, r2, r3
 8029d32:	2308      	movs	r3, #8
 8029d34:	005b      	lsls	r3, r3, #1
 8029d36:	429a      	cmp	r2, r3
 8029d38:	d924      	bls.n	8029d84 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8029d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029d3c:	687b      	ldr	r3, [r7, #4]
 8029d3e:	4413      	add	r3, r2
 8029d40:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8029d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029d44:	f003 0307 	and.w	r3, r3, #7
 8029d48:	2b00      	cmp	r3, #0
 8029d4a:	d00b      	beq.n	8029d64 <pvPortMalloc+0x1b8>
    __asm volatile
 8029d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029d50:	f383 8811 	msr	BASEPRI, r3
 8029d54:	f3bf 8f6f 	isb	sy
 8029d58:	f3bf 8f4f 	dsb	sy
 8029d5c:	613b      	str	r3, [r7, #16]
}
 8029d5e:	bf00      	nop
 8029d60:	bf00      	nop
 8029d62:	e7fd      	b.n	8029d60 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8029d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d66:	685a      	ldr	r2, [r3, #4]
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	1ad2      	subs	r2, r2, r3
 8029d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029d6e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8029d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d72:	687a      	ldr	r2, [r7, #4]
 8029d74:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8029d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029d78:	681a      	ldr	r2, [r3, #0]
 8029d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029d7c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8029d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8029d82:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8029d84:	4b1c      	ldr	r3, [pc, #112]	@ (8029df8 <pvPortMalloc+0x24c>)
 8029d86:	681a      	ldr	r2, [r3, #0]
 8029d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d8a:	685b      	ldr	r3, [r3, #4]
 8029d8c:	1ad3      	subs	r3, r2, r3
 8029d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8029df8 <pvPortMalloc+0x24c>)
 8029d90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8029d92:	4b19      	ldr	r3, [pc, #100]	@ (8029df8 <pvPortMalloc+0x24c>)
 8029d94:	681a      	ldr	r2, [r3, #0]
 8029d96:	4b1c      	ldr	r3, [pc, #112]	@ (8029e08 <pvPortMalloc+0x25c>)
 8029d98:	681b      	ldr	r3, [r3, #0]
 8029d9a:	429a      	cmp	r2, r3
 8029d9c:	d203      	bcs.n	8029da6 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8029d9e:	4b16      	ldr	r3, [pc, #88]	@ (8029df8 <pvPortMalloc+0x24c>)
 8029da0:	681b      	ldr	r3, [r3, #0]
 8029da2:	4a19      	ldr	r2, [pc, #100]	@ (8029e08 <pvPortMalloc+0x25c>)
 8029da4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8029da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029da8:	685b      	ldr	r3, [r3, #4]
 8029daa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8029dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029db0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8029db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029db4:	2200      	movs	r2, #0
 8029db6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8029db8:	4b14      	ldr	r3, [pc, #80]	@ (8029e0c <pvPortMalloc+0x260>)
 8029dba:	681b      	ldr	r3, [r3, #0]
 8029dbc:	3301      	adds	r3, #1
 8029dbe:	4a13      	ldr	r2, [pc, #76]	@ (8029e0c <pvPortMalloc+0x260>)
 8029dc0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8029dc2:	f7fe fb3f 	bl	8028444 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8029dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029dc8:	f003 0307 	and.w	r3, r3, #7
 8029dcc:	2b00      	cmp	r3, #0
 8029dce:	d00b      	beq.n	8029de8 <pvPortMalloc+0x23c>
    __asm volatile
 8029dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029dd4:	f383 8811 	msr	BASEPRI, r3
 8029dd8:	f3bf 8f6f 	isb	sy
 8029ddc:	f3bf 8f4f 	dsb	sy
 8029de0:	60fb      	str	r3, [r7, #12]
}
 8029de2:	bf00      	nop
 8029de4:	bf00      	nop
 8029de6:	e7fd      	b.n	8029de4 <pvPortMalloc+0x238>
    return pvReturn;
 8029de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8029dea:	4618      	mov	r0, r3
 8029dec:	3738      	adds	r7, #56	@ 0x38
 8029dee:	46bd      	mov	sp, r7
 8029df0:	bd80      	pop	{r7, pc}
 8029df2:	bf00      	nop
 8029df4:	2000e67c 	.word	0x2000e67c
 8029df8:	2000e680 	.word	0x2000e680
 8029dfc:	2000e674 	.word	0x2000e674
 8029e00:	20004674 	.word	0x20004674
 8029e04:	2000e673 	.word	0x2000e673
 8029e08:	2000e684 	.word	0x2000e684
 8029e0c:	2000e688 	.word	0x2000e688

08029e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8029e10:	b580      	push	{r7, lr}
 8029e12:	b088      	sub	sp, #32
 8029e14:	af00      	add	r7, sp, #0
 8029e16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8029e18:	687b      	ldr	r3, [r7, #4]
 8029e1a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8029e1c:	687b      	ldr	r3, [r7, #4]
 8029e1e:	2b00      	cmp	r3, #0
 8029e20:	d060      	beq.n	8029ee4 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8029e22:	2308      	movs	r3, #8
 8029e24:	425b      	negs	r3, r3
 8029e26:	69fa      	ldr	r2, [r7, #28]
 8029e28:	4413      	add	r3, r2
 8029e2a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8029e2c:	69fb      	ldr	r3, [r7, #28]
 8029e2e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8029e30:	69bb      	ldr	r3, [r7, #24]
 8029e32:	4a2e      	ldr	r2, [pc, #184]	@ (8029eec <vPortFree+0xdc>)
 8029e34:	4293      	cmp	r3, r2
 8029e36:	d305      	bcc.n	8029e44 <vPortFree+0x34>
 8029e38:	69bb      	ldr	r3, [r7, #24]
 8029e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8029ef0 <vPortFree+0xe0>)
 8029e3c:	4293      	cmp	r3, r2
 8029e3e:	d801      	bhi.n	8029e44 <vPortFree+0x34>
 8029e40:	2301      	movs	r3, #1
 8029e42:	e000      	b.n	8029e46 <vPortFree+0x36>
 8029e44:	2300      	movs	r3, #0
 8029e46:	2b00      	cmp	r3, #0
 8029e48:	d10b      	bne.n	8029e62 <vPortFree+0x52>
    __asm volatile
 8029e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029e4e:	f383 8811 	msr	BASEPRI, r3
 8029e52:	f3bf 8f6f 	isb	sy
 8029e56:	f3bf 8f4f 	dsb	sy
 8029e5a:	617b      	str	r3, [r7, #20]
}
 8029e5c:	bf00      	nop
 8029e5e:	bf00      	nop
 8029e60:	e7fd      	b.n	8029e5e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8029e62:	69bb      	ldr	r3, [r7, #24]
 8029e64:	685b      	ldr	r3, [r3, #4]
 8029e66:	2b00      	cmp	r3, #0
 8029e68:	db0b      	blt.n	8029e82 <vPortFree+0x72>
    __asm volatile
 8029e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029e6e:	f383 8811 	msr	BASEPRI, r3
 8029e72:	f3bf 8f6f 	isb	sy
 8029e76:	f3bf 8f4f 	dsb	sy
 8029e7a:	613b      	str	r3, [r7, #16]
}
 8029e7c:	bf00      	nop
 8029e7e:	bf00      	nop
 8029e80:	e7fd      	b.n	8029e7e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8029e82:	69bb      	ldr	r3, [r7, #24]
 8029e84:	681b      	ldr	r3, [r3, #0]
 8029e86:	2b00      	cmp	r3, #0
 8029e88:	d00b      	beq.n	8029ea2 <vPortFree+0x92>
    __asm volatile
 8029e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029e8e:	f383 8811 	msr	BASEPRI, r3
 8029e92:	f3bf 8f6f 	isb	sy
 8029e96:	f3bf 8f4f 	dsb	sy
 8029e9a:	60fb      	str	r3, [r7, #12]
}
 8029e9c:	bf00      	nop
 8029e9e:	bf00      	nop
 8029ea0:	e7fd      	b.n	8029e9e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8029ea2:	69bb      	ldr	r3, [r7, #24]
 8029ea4:	685b      	ldr	r3, [r3, #4]
 8029ea6:	2b00      	cmp	r3, #0
 8029ea8:	da1c      	bge.n	8029ee4 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8029eaa:	69bb      	ldr	r3, [r7, #24]
 8029eac:	681b      	ldr	r3, [r3, #0]
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	d118      	bne.n	8029ee4 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8029eb2:	69bb      	ldr	r3, [r7, #24]
 8029eb4:	685b      	ldr	r3, [r3, #4]
 8029eb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8029eba:	69bb      	ldr	r3, [r7, #24]
 8029ebc:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8029ebe:	f7fe fab3 	bl	8028428 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8029ec2:	69bb      	ldr	r3, [r7, #24]
 8029ec4:	685a      	ldr	r2, [r3, #4]
 8029ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8029ef4 <vPortFree+0xe4>)
 8029ec8:	681b      	ldr	r3, [r3, #0]
 8029eca:	4413      	add	r3, r2
 8029ecc:	4a09      	ldr	r2, [pc, #36]	@ (8029ef4 <vPortFree+0xe4>)
 8029ece:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8029ed0:	69b8      	ldr	r0, [r7, #24]
 8029ed2:	f000 f86d 	bl	8029fb0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8029ed6:	4b08      	ldr	r3, [pc, #32]	@ (8029ef8 <vPortFree+0xe8>)
 8029ed8:	681b      	ldr	r3, [r3, #0]
 8029eda:	3301      	adds	r3, #1
 8029edc:	4a06      	ldr	r2, [pc, #24]	@ (8029ef8 <vPortFree+0xe8>)
 8029ede:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8029ee0:	f7fe fab0 	bl	8028444 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8029ee4:	bf00      	nop
 8029ee6:	3720      	adds	r7, #32
 8029ee8:	46bd      	mov	sp, r7
 8029eea:	bd80      	pop	{r7, pc}
 8029eec:	20004674 	.word	0x20004674
 8029ef0:	2000e673 	.word	0x2000e673
 8029ef4:	2000e680 	.word	0x2000e680
 8029ef8:	2000e68c 	.word	0x2000e68c

08029efc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8029efc:	b480      	push	{r7}
 8029efe:	b085      	sub	sp, #20
 8029f00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8029f02:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8029f06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8029f08:	4b24      	ldr	r3, [pc, #144]	@ (8029f9c <prvHeapInit+0xa0>)
 8029f0a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8029f0c:	68fb      	ldr	r3, [r7, #12]
 8029f0e:	f003 0307 	and.w	r3, r3, #7
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	d00c      	beq.n	8029f30 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8029f16:	68fb      	ldr	r3, [r7, #12]
 8029f18:	3307      	adds	r3, #7
 8029f1a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8029f1c:	68fb      	ldr	r3, [r7, #12]
 8029f1e:	f023 0307 	bic.w	r3, r3, #7
 8029f22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8029f24:	68ba      	ldr	r2, [r7, #8]
 8029f26:	68fb      	ldr	r3, [r7, #12]
 8029f28:	1ad3      	subs	r3, r2, r3
 8029f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8029f9c <prvHeapInit+0xa0>)
 8029f2c:	4413      	add	r3, r2
 8029f2e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8029f30:	68fb      	ldr	r3, [r7, #12]
 8029f32:	4a1b      	ldr	r2, [pc, #108]	@ (8029fa0 <prvHeapInit+0xa4>)
 8029f34:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8029f36:	4b1a      	ldr	r3, [pc, #104]	@ (8029fa0 <prvHeapInit+0xa4>)
 8029f38:	2200      	movs	r2, #0
 8029f3a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8029f3c:	68fa      	ldr	r2, [r7, #12]
 8029f3e:	68bb      	ldr	r3, [r7, #8]
 8029f40:	4413      	add	r3, r2
 8029f42:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8029f44:	2208      	movs	r2, #8
 8029f46:	687b      	ldr	r3, [r7, #4]
 8029f48:	1a9b      	subs	r3, r3, r2
 8029f4a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8029f4c:	687b      	ldr	r3, [r7, #4]
 8029f4e:	f023 0307 	bic.w	r3, r3, #7
 8029f52:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8029f54:	687b      	ldr	r3, [r7, #4]
 8029f56:	4a13      	ldr	r2, [pc, #76]	@ (8029fa4 <prvHeapInit+0xa8>)
 8029f58:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8029f5a:	4b12      	ldr	r3, [pc, #72]	@ (8029fa4 <prvHeapInit+0xa8>)
 8029f5c:	681b      	ldr	r3, [r3, #0]
 8029f5e:	2200      	movs	r2, #0
 8029f60:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8029f62:	4b10      	ldr	r3, [pc, #64]	@ (8029fa4 <prvHeapInit+0xa8>)
 8029f64:	681b      	ldr	r3, [r3, #0]
 8029f66:	2200      	movs	r2, #0
 8029f68:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8029f6a:	68fb      	ldr	r3, [r7, #12]
 8029f6c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8029f6e:	683b      	ldr	r3, [r7, #0]
 8029f70:	687a      	ldr	r2, [r7, #4]
 8029f72:	1ad2      	subs	r2, r2, r3
 8029f74:	683b      	ldr	r3, [r7, #0]
 8029f76:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8029f78:	4b0a      	ldr	r3, [pc, #40]	@ (8029fa4 <prvHeapInit+0xa8>)
 8029f7a:	681a      	ldr	r2, [r3, #0]
 8029f7c:	683b      	ldr	r3, [r7, #0]
 8029f7e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8029f80:	683b      	ldr	r3, [r7, #0]
 8029f82:	685b      	ldr	r3, [r3, #4]
 8029f84:	4a08      	ldr	r2, [pc, #32]	@ (8029fa8 <prvHeapInit+0xac>)
 8029f86:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8029f88:	683b      	ldr	r3, [r7, #0]
 8029f8a:	685b      	ldr	r3, [r3, #4]
 8029f8c:	4a07      	ldr	r2, [pc, #28]	@ (8029fac <prvHeapInit+0xb0>)
 8029f8e:	6013      	str	r3, [r2, #0]
}
 8029f90:	bf00      	nop
 8029f92:	3714      	adds	r7, #20
 8029f94:	46bd      	mov	sp, r7
 8029f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f9a:	4770      	bx	lr
 8029f9c:	20004674 	.word	0x20004674
 8029fa0:	2000e674 	.word	0x2000e674
 8029fa4:	2000e67c 	.word	0x2000e67c
 8029fa8:	2000e684 	.word	0x2000e684
 8029fac:	2000e680 	.word	0x2000e680

08029fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8029fb0:	b480      	push	{r7}
 8029fb2:	b087      	sub	sp, #28
 8029fb4:	af00      	add	r7, sp, #0
 8029fb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8029fb8:	4b36      	ldr	r3, [pc, #216]	@ (802a094 <prvInsertBlockIntoFreeList+0xe4>)
 8029fba:	617b      	str	r3, [r7, #20]
 8029fbc:	e002      	b.n	8029fc4 <prvInsertBlockIntoFreeList+0x14>
 8029fbe:	697b      	ldr	r3, [r7, #20]
 8029fc0:	681b      	ldr	r3, [r3, #0]
 8029fc2:	617b      	str	r3, [r7, #20]
 8029fc4:	697b      	ldr	r3, [r7, #20]
 8029fc6:	681b      	ldr	r3, [r3, #0]
 8029fc8:	687a      	ldr	r2, [r7, #4]
 8029fca:	429a      	cmp	r2, r3
 8029fcc:	d8f7      	bhi.n	8029fbe <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8029fce:	697b      	ldr	r3, [r7, #20]
 8029fd0:	4a30      	ldr	r2, [pc, #192]	@ (802a094 <prvInsertBlockIntoFreeList+0xe4>)
 8029fd2:	4293      	cmp	r3, r2
 8029fd4:	d018      	beq.n	802a008 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8029fd6:	697b      	ldr	r3, [r7, #20]
 8029fd8:	4a2f      	ldr	r2, [pc, #188]	@ (802a098 <prvInsertBlockIntoFreeList+0xe8>)
 8029fda:	4293      	cmp	r3, r2
 8029fdc:	d305      	bcc.n	8029fea <prvInsertBlockIntoFreeList+0x3a>
 8029fde:	697b      	ldr	r3, [r7, #20]
 8029fe0:	4a2e      	ldr	r2, [pc, #184]	@ (802a09c <prvInsertBlockIntoFreeList+0xec>)
 8029fe2:	4293      	cmp	r3, r2
 8029fe4:	d801      	bhi.n	8029fea <prvInsertBlockIntoFreeList+0x3a>
 8029fe6:	2301      	movs	r3, #1
 8029fe8:	e000      	b.n	8029fec <prvInsertBlockIntoFreeList+0x3c>
 8029fea:	2300      	movs	r3, #0
 8029fec:	2b00      	cmp	r3, #0
 8029fee:	d10b      	bne.n	802a008 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8029ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8029ff4:	f383 8811 	msr	BASEPRI, r3
 8029ff8:	f3bf 8f6f 	isb	sy
 8029ffc:	f3bf 8f4f 	dsb	sy
 802a000:	60fb      	str	r3, [r7, #12]
}
 802a002:	bf00      	nop
 802a004:	bf00      	nop
 802a006:	e7fd      	b.n	802a004 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 802a008:	697b      	ldr	r3, [r7, #20]
 802a00a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802a00c:	697b      	ldr	r3, [r7, #20]
 802a00e:	685b      	ldr	r3, [r3, #4]
 802a010:	693a      	ldr	r2, [r7, #16]
 802a012:	4413      	add	r3, r2
 802a014:	687a      	ldr	r2, [r7, #4]
 802a016:	429a      	cmp	r2, r3
 802a018:	d108      	bne.n	802a02c <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802a01a:	697b      	ldr	r3, [r7, #20]
 802a01c:	685a      	ldr	r2, [r3, #4]
 802a01e:	687b      	ldr	r3, [r7, #4]
 802a020:	685b      	ldr	r3, [r3, #4]
 802a022:	441a      	add	r2, r3
 802a024:	697b      	ldr	r3, [r7, #20]
 802a026:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 802a028:	697b      	ldr	r3, [r7, #20]
 802a02a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 802a02c:	687b      	ldr	r3, [r7, #4]
 802a02e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 802a030:	687b      	ldr	r3, [r7, #4]
 802a032:	685b      	ldr	r3, [r3, #4]
 802a034:	693a      	ldr	r2, [r7, #16]
 802a036:	441a      	add	r2, r3
 802a038:	697b      	ldr	r3, [r7, #20]
 802a03a:	681b      	ldr	r3, [r3, #0]
 802a03c:	429a      	cmp	r2, r3
 802a03e:	d118      	bne.n	802a072 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 802a040:	697b      	ldr	r3, [r7, #20]
 802a042:	681a      	ldr	r2, [r3, #0]
 802a044:	4b16      	ldr	r3, [pc, #88]	@ (802a0a0 <prvInsertBlockIntoFreeList+0xf0>)
 802a046:	681b      	ldr	r3, [r3, #0]
 802a048:	429a      	cmp	r2, r3
 802a04a:	d00d      	beq.n	802a068 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 802a04c:	687b      	ldr	r3, [r7, #4]
 802a04e:	685a      	ldr	r2, [r3, #4]
 802a050:	697b      	ldr	r3, [r7, #20]
 802a052:	681b      	ldr	r3, [r3, #0]
 802a054:	685b      	ldr	r3, [r3, #4]
 802a056:	441a      	add	r2, r3
 802a058:	687b      	ldr	r3, [r7, #4]
 802a05a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 802a05c:	697b      	ldr	r3, [r7, #20]
 802a05e:	681b      	ldr	r3, [r3, #0]
 802a060:	681a      	ldr	r2, [r3, #0]
 802a062:	687b      	ldr	r3, [r7, #4]
 802a064:	601a      	str	r2, [r3, #0]
 802a066:	e008      	b.n	802a07a <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 802a068:	4b0d      	ldr	r3, [pc, #52]	@ (802a0a0 <prvInsertBlockIntoFreeList+0xf0>)
 802a06a:	681a      	ldr	r2, [r3, #0]
 802a06c:	687b      	ldr	r3, [r7, #4]
 802a06e:	601a      	str	r2, [r3, #0]
 802a070:	e003      	b.n	802a07a <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802a072:	697b      	ldr	r3, [r7, #20]
 802a074:	681a      	ldr	r2, [r3, #0]
 802a076:	687b      	ldr	r3, [r7, #4]
 802a078:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 802a07a:	697a      	ldr	r2, [r7, #20]
 802a07c:	687b      	ldr	r3, [r7, #4]
 802a07e:	429a      	cmp	r2, r3
 802a080:	d002      	beq.n	802a088 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 802a082:	697b      	ldr	r3, [r7, #20]
 802a084:	687a      	ldr	r2, [r7, #4]
 802a086:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 802a088:	bf00      	nop
 802a08a:	371c      	adds	r7, #28
 802a08c:	46bd      	mov	sp, r7
 802a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a092:	4770      	bx	lr
 802a094:	2000e674 	.word	0x2000e674
 802a098:	20004674 	.word	0x20004674
 802a09c:	2000e673 	.word	0x2000e673
 802a0a0:	2000e67c 	.word	0x2000e67c

0802a0a4 <mqtt_publish>:

    mqtt_conn_status = MQTT_CONNECTED;
    return true;
}

mqtt_status_t mqtt_publish(char *topic, size_t topic_length, uint8_t *message, size_t message_length) {
 802a0a4:	b580      	push	{r7, lr}
 802a0a6:	b08a      	sub	sp, #40	@ 0x28
 802a0a8:	af00      	add	r7, sp, #0
 802a0aa:	60f8      	str	r0, [r7, #12]
 802a0ac:	60b9      	str	r1, [r7, #8]
 802a0ae:	607a      	str	r2, [r7, #4]
 802a0b0:	603b      	str	r3, [r7, #0]
    if (!topic || !message || topic_length == 0 || message_length == 0) {
 802a0b2:	68fb      	ldr	r3, [r7, #12]
 802a0b4:	2b00      	cmp	r3, #0
 802a0b6:	d008      	beq.n	802a0ca <mqtt_publish+0x26>
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	2b00      	cmp	r3, #0
 802a0bc:	d005      	beq.n	802a0ca <mqtt_publish+0x26>
 802a0be:	68bb      	ldr	r3, [r7, #8]
 802a0c0:	2b00      	cmp	r3, #0
 802a0c2:	d002      	beq.n	802a0ca <mqtt_publish+0x26>
 802a0c4:	683b      	ldr	r3, [r7, #0]
 802a0c6:	2b00      	cmp	r3, #0
 802a0c8:	d101      	bne.n	802a0ce <mqtt_publish+0x2a>
        return false;
 802a0ca:	2300      	movs	r3, #0
 802a0cc:	e027      	b.n	802a11e <mqtt_publish+0x7a>
    }

    mqtt_publish_t pub_args = {0};
 802a0ce:	f107 0310 	add.w	r3, r7, #16
 802a0d2:	2200      	movs	r2, #0
 802a0d4:	601a      	str	r2, [r3, #0]
 802a0d6:	605a      	str	r2, [r3, #4]
 802a0d8:	609a      	str	r2, [r3, #8]
 802a0da:	60da      	str	r2, [r3, #12]
 802a0dc:	611a      	str	r2, [r3, #16]
    esp32_status_t status = ESP32_OK;
 802a0de:	2300      	movs	r3, #0
 802a0e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pub_args.p_payload = (const char *)message;
 802a0e4:	687b      	ldr	r3, [r7, #4]
 802a0e6:	61bb      	str	r3, [r7, #24]
    pub_args.payload_length = message_length;
 802a0e8:	683b      	ldr	r3, [r7, #0]
 802a0ea:	61fb      	str	r3, [r7, #28]
    pub_args.qos = 0;
 802a0ec:	2300      	movs	r3, #0
 802a0ee:	f887 3020 	strb.w	r3, [r7, #32]
    pub_args.retain = 0;
 802a0f2:	2300      	movs	r3, #0
 802a0f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    pub_args.p_topic = topic;
 802a0f8:	68fb      	ldr	r3, [r7, #12]
 802a0fa:	613b      	str	r3, [r7, #16]
    pub_args.topic_length = topic_length;
 802a0fc:	68bb      	ldr	r3, [r7, #8]
 802a0fe:	617b      	str	r3, [r7, #20]

    status = esp32_mqtt_publish(&pub_args);
 802a100:	f107 0310 	add.w	r3, r7, #16
 802a104:	4618      	mov	r0, r3
 802a106:	f7fc fce3 	bl	8026ad0 <esp32_mqtt_publish>
 802a10a:	4603      	mov	r3, r0
 802a10c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != ESP32_OK) {
 802a110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802a114:	2b00      	cmp	r3, #0
 802a116:	d001      	beq.n	802a11c <mqtt_publish+0x78>
        return false;
 802a118:	2300      	movs	r3, #0
 802a11a:	e000      	b.n	802a11e <mqtt_publish+0x7a>
    }
    return true;
 802a11c:	2301      	movs	r3, #1
}
 802a11e:	4618      	mov	r0, r3
 802a120:	3728      	adds	r7, #40	@ 0x28
 802a122:	46bd      	mov	sp, r7
 802a124:	bd80      	pop	{r7, pc}

0802a126 <mqtt_subscribe>:

mqtt_status_t mqtt_subscribe(char *topic, size_t topic_length) {
 802a126:	b580      	push	{r7, lr}
 802a128:	b086      	sub	sp, #24
 802a12a:	af00      	add	r7, sp, #0
 802a12c:	6078      	str	r0, [r7, #4]
 802a12e:	6039      	str	r1, [r7, #0]
    if (!topic || topic_length == 0) {
 802a130:	687b      	ldr	r3, [r7, #4]
 802a132:	2b00      	cmp	r3, #0
 802a134:	d002      	beq.n	802a13c <mqtt_subscribe+0x16>
 802a136:	683b      	ldr	r3, [r7, #0]
 802a138:	2b00      	cmp	r3, #0
 802a13a:	d101      	bne.n	802a140 <mqtt_subscribe+0x1a>
        return false;
 802a13c:	2300      	movs	r3, #0
 802a13e:	e018      	b.n	802a172 <mqtt_subscribe+0x4c>
    }

    mqtt_subscribe_t sub_args = {0};
 802a140:	f107 0308 	add.w	r3, r7, #8
 802a144:	2200      	movs	r2, #0
 802a146:	601a      	str	r2, [r3, #0]
 802a148:	605a      	str	r2, [r3, #4]
 802a14a:	609a      	str	r2, [r3, #8]
    sub_args.p_topic_filter = topic;
 802a14c:	687b      	ldr	r3, [r7, #4]
 802a14e:	60bb      	str	r3, [r7, #8]
    sub_args.qos = 1;
 802a150:	2301      	movs	r3, #1
 802a152:	743b      	strb	r3, [r7, #16]
    sub_args.topic_filter_length = topic_length;
 802a154:	683b      	ldr	r3, [r7, #0]
 802a156:	60fb      	str	r3, [r7, #12]

    esp32_status_t status = esp32_mqtt_subscribe(&sub_args);
 802a158:	f107 0308 	add.w	r3, r7, #8
 802a15c:	4618      	mov	r0, r3
 802a15e:	f7fc fc89 	bl	8026a74 <esp32_mqtt_subscribe>
 802a162:	4603      	mov	r3, r0
 802a164:	75fb      	strb	r3, [r7, #23]
    if (status != ESP32_OK) {
 802a166:	7dfb      	ldrb	r3, [r7, #23]
 802a168:	2b00      	cmp	r3, #0
 802a16a:	d001      	beq.n	802a170 <mqtt_subscribe+0x4a>
        return false;
 802a16c:	2300      	movs	r3, #0
 802a16e:	e000      	b.n	802a172 <mqtt_subscribe+0x4c>
    }
    return true;
 802a170:	2301      	movs	r3, #1
}
 802a172:	4618      	mov	r0, r3
 802a174:	3718      	adds	r7, #24
 802a176:	46bd      	mov	sp, r7
 802a178:	bd80      	pop	{r7, pc}
	...

0802a17c <__assert_func>:
 802a17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a17e:	4614      	mov	r4, r2
 802a180:	461a      	mov	r2, r3
 802a182:	4b09      	ldr	r3, [pc, #36]	@ (802a1a8 <__assert_func+0x2c>)
 802a184:	681b      	ldr	r3, [r3, #0]
 802a186:	4605      	mov	r5, r0
 802a188:	68d8      	ldr	r0, [r3, #12]
 802a18a:	b14c      	cbz	r4, 802a1a0 <__assert_func+0x24>
 802a18c:	4b07      	ldr	r3, [pc, #28]	@ (802a1ac <__assert_func+0x30>)
 802a18e:	9100      	str	r1, [sp, #0]
 802a190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a194:	4906      	ldr	r1, [pc, #24]	@ (802a1b0 <__assert_func+0x34>)
 802a196:	462b      	mov	r3, r5
 802a198:	f001 fa44 	bl	802b624 <fiprintf>
 802a19c:	f001 fcf8 	bl	802bb90 <abort>
 802a1a0:	4b04      	ldr	r3, [pc, #16]	@ (802a1b4 <__assert_func+0x38>)
 802a1a2:	461c      	mov	r4, r3
 802a1a4:	e7f3      	b.n	802a18e <__assert_func+0x12>
 802a1a6:	bf00      	nop
 802a1a8:	2000001c 	.word	0x2000001c
 802a1ac:	0802f268 	.word	0x0802f268
 802a1b0:	0802f275 	.word	0x0802f275
 802a1b4:	0802f2a3 	.word	0x0802f2a3

0802a1b8 <atoi>:
 802a1b8:	220a      	movs	r2, #10
 802a1ba:	2100      	movs	r1, #0
 802a1bc:	f000 b932 	b.w	802a424 <strtol>

0802a1c0 <malloc>:
 802a1c0:	4b02      	ldr	r3, [pc, #8]	@ (802a1cc <malloc+0xc>)
 802a1c2:	4601      	mov	r1, r0
 802a1c4:	6818      	ldr	r0, [r3, #0]
 802a1c6:	f000 b825 	b.w	802a214 <_malloc_r>
 802a1ca:	bf00      	nop
 802a1cc:	2000001c 	.word	0x2000001c

0802a1d0 <sbrk_aligned>:
 802a1d0:	b570      	push	{r4, r5, r6, lr}
 802a1d2:	4e0f      	ldr	r6, [pc, #60]	@ (802a210 <sbrk_aligned+0x40>)
 802a1d4:	460c      	mov	r4, r1
 802a1d6:	6831      	ldr	r1, [r6, #0]
 802a1d8:	4605      	mov	r5, r0
 802a1da:	b911      	cbnz	r1, 802a1e2 <sbrk_aligned+0x12>
 802a1dc:	f001 fc74 	bl	802bac8 <_sbrk_r>
 802a1e0:	6030      	str	r0, [r6, #0]
 802a1e2:	4621      	mov	r1, r4
 802a1e4:	4628      	mov	r0, r5
 802a1e6:	f001 fc6f 	bl	802bac8 <_sbrk_r>
 802a1ea:	1c43      	adds	r3, r0, #1
 802a1ec:	d103      	bne.n	802a1f6 <sbrk_aligned+0x26>
 802a1ee:	f04f 34ff 	mov.w	r4, #4294967295
 802a1f2:	4620      	mov	r0, r4
 802a1f4:	bd70      	pop	{r4, r5, r6, pc}
 802a1f6:	1cc4      	adds	r4, r0, #3
 802a1f8:	f024 0403 	bic.w	r4, r4, #3
 802a1fc:	42a0      	cmp	r0, r4
 802a1fe:	d0f8      	beq.n	802a1f2 <sbrk_aligned+0x22>
 802a200:	1a21      	subs	r1, r4, r0
 802a202:	4628      	mov	r0, r5
 802a204:	f001 fc60 	bl	802bac8 <_sbrk_r>
 802a208:	3001      	adds	r0, #1
 802a20a:	d1f2      	bne.n	802a1f2 <sbrk_aligned+0x22>
 802a20c:	e7ef      	b.n	802a1ee <sbrk_aligned+0x1e>
 802a20e:	bf00      	nop
 802a210:	2000e690 	.word	0x2000e690

0802a214 <_malloc_r>:
 802a214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a218:	1ccd      	adds	r5, r1, #3
 802a21a:	f025 0503 	bic.w	r5, r5, #3
 802a21e:	3508      	adds	r5, #8
 802a220:	2d0c      	cmp	r5, #12
 802a222:	bf38      	it	cc
 802a224:	250c      	movcc	r5, #12
 802a226:	2d00      	cmp	r5, #0
 802a228:	4606      	mov	r6, r0
 802a22a:	db01      	blt.n	802a230 <_malloc_r+0x1c>
 802a22c:	42a9      	cmp	r1, r5
 802a22e:	d904      	bls.n	802a23a <_malloc_r+0x26>
 802a230:	230c      	movs	r3, #12
 802a232:	6033      	str	r3, [r6, #0]
 802a234:	2000      	movs	r0, #0
 802a236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a23a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a310 <_malloc_r+0xfc>
 802a23e:	f000 f869 	bl	802a314 <__malloc_lock>
 802a242:	f8d8 3000 	ldr.w	r3, [r8]
 802a246:	461c      	mov	r4, r3
 802a248:	bb44      	cbnz	r4, 802a29c <_malloc_r+0x88>
 802a24a:	4629      	mov	r1, r5
 802a24c:	4630      	mov	r0, r6
 802a24e:	f7ff ffbf 	bl	802a1d0 <sbrk_aligned>
 802a252:	1c43      	adds	r3, r0, #1
 802a254:	4604      	mov	r4, r0
 802a256:	d158      	bne.n	802a30a <_malloc_r+0xf6>
 802a258:	f8d8 4000 	ldr.w	r4, [r8]
 802a25c:	4627      	mov	r7, r4
 802a25e:	2f00      	cmp	r7, #0
 802a260:	d143      	bne.n	802a2ea <_malloc_r+0xd6>
 802a262:	2c00      	cmp	r4, #0
 802a264:	d04b      	beq.n	802a2fe <_malloc_r+0xea>
 802a266:	6823      	ldr	r3, [r4, #0]
 802a268:	4639      	mov	r1, r7
 802a26a:	4630      	mov	r0, r6
 802a26c:	eb04 0903 	add.w	r9, r4, r3
 802a270:	f001 fc2a 	bl	802bac8 <_sbrk_r>
 802a274:	4581      	cmp	r9, r0
 802a276:	d142      	bne.n	802a2fe <_malloc_r+0xea>
 802a278:	6821      	ldr	r1, [r4, #0]
 802a27a:	1a6d      	subs	r5, r5, r1
 802a27c:	4629      	mov	r1, r5
 802a27e:	4630      	mov	r0, r6
 802a280:	f7ff ffa6 	bl	802a1d0 <sbrk_aligned>
 802a284:	3001      	adds	r0, #1
 802a286:	d03a      	beq.n	802a2fe <_malloc_r+0xea>
 802a288:	6823      	ldr	r3, [r4, #0]
 802a28a:	442b      	add	r3, r5
 802a28c:	6023      	str	r3, [r4, #0]
 802a28e:	f8d8 3000 	ldr.w	r3, [r8]
 802a292:	685a      	ldr	r2, [r3, #4]
 802a294:	bb62      	cbnz	r2, 802a2f0 <_malloc_r+0xdc>
 802a296:	f8c8 7000 	str.w	r7, [r8]
 802a29a:	e00f      	b.n	802a2bc <_malloc_r+0xa8>
 802a29c:	6822      	ldr	r2, [r4, #0]
 802a29e:	1b52      	subs	r2, r2, r5
 802a2a0:	d420      	bmi.n	802a2e4 <_malloc_r+0xd0>
 802a2a2:	2a0b      	cmp	r2, #11
 802a2a4:	d917      	bls.n	802a2d6 <_malloc_r+0xc2>
 802a2a6:	1961      	adds	r1, r4, r5
 802a2a8:	42a3      	cmp	r3, r4
 802a2aa:	6025      	str	r5, [r4, #0]
 802a2ac:	bf18      	it	ne
 802a2ae:	6059      	strne	r1, [r3, #4]
 802a2b0:	6863      	ldr	r3, [r4, #4]
 802a2b2:	bf08      	it	eq
 802a2b4:	f8c8 1000 	streq.w	r1, [r8]
 802a2b8:	5162      	str	r2, [r4, r5]
 802a2ba:	604b      	str	r3, [r1, #4]
 802a2bc:	4630      	mov	r0, r6
 802a2be:	f000 f82f 	bl	802a320 <__malloc_unlock>
 802a2c2:	f104 000b 	add.w	r0, r4, #11
 802a2c6:	1d23      	adds	r3, r4, #4
 802a2c8:	f020 0007 	bic.w	r0, r0, #7
 802a2cc:	1ac2      	subs	r2, r0, r3
 802a2ce:	bf1c      	itt	ne
 802a2d0:	1a1b      	subne	r3, r3, r0
 802a2d2:	50a3      	strne	r3, [r4, r2]
 802a2d4:	e7af      	b.n	802a236 <_malloc_r+0x22>
 802a2d6:	6862      	ldr	r2, [r4, #4]
 802a2d8:	42a3      	cmp	r3, r4
 802a2da:	bf0c      	ite	eq
 802a2dc:	f8c8 2000 	streq.w	r2, [r8]
 802a2e0:	605a      	strne	r2, [r3, #4]
 802a2e2:	e7eb      	b.n	802a2bc <_malloc_r+0xa8>
 802a2e4:	4623      	mov	r3, r4
 802a2e6:	6864      	ldr	r4, [r4, #4]
 802a2e8:	e7ae      	b.n	802a248 <_malloc_r+0x34>
 802a2ea:	463c      	mov	r4, r7
 802a2ec:	687f      	ldr	r7, [r7, #4]
 802a2ee:	e7b6      	b.n	802a25e <_malloc_r+0x4a>
 802a2f0:	461a      	mov	r2, r3
 802a2f2:	685b      	ldr	r3, [r3, #4]
 802a2f4:	42a3      	cmp	r3, r4
 802a2f6:	d1fb      	bne.n	802a2f0 <_malloc_r+0xdc>
 802a2f8:	2300      	movs	r3, #0
 802a2fa:	6053      	str	r3, [r2, #4]
 802a2fc:	e7de      	b.n	802a2bc <_malloc_r+0xa8>
 802a2fe:	230c      	movs	r3, #12
 802a300:	6033      	str	r3, [r6, #0]
 802a302:	4630      	mov	r0, r6
 802a304:	f000 f80c 	bl	802a320 <__malloc_unlock>
 802a308:	e794      	b.n	802a234 <_malloc_r+0x20>
 802a30a:	6005      	str	r5, [r0, #0]
 802a30c:	e7d6      	b.n	802a2bc <_malloc_r+0xa8>
 802a30e:	bf00      	nop
 802a310:	2000e694 	.word	0x2000e694

0802a314 <__malloc_lock>:
 802a314:	4801      	ldr	r0, [pc, #4]	@ (802a31c <__malloc_lock+0x8>)
 802a316:	f001 bc24 	b.w	802bb62 <__retarget_lock_acquire_recursive>
 802a31a:	bf00      	nop
 802a31c:	2000e7d8 	.word	0x2000e7d8

0802a320 <__malloc_unlock>:
 802a320:	4801      	ldr	r0, [pc, #4]	@ (802a328 <__malloc_unlock+0x8>)
 802a322:	f001 bc1f 	b.w	802bb64 <__retarget_lock_release_recursive>
 802a326:	bf00      	nop
 802a328:	2000e7d8 	.word	0x2000e7d8

0802a32c <_strtol_l.isra.0>:
 802a32c:	2b24      	cmp	r3, #36	@ 0x24
 802a32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a332:	4686      	mov	lr, r0
 802a334:	4690      	mov	r8, r2
 802a336:	d801      	bhi.n	802a33c <_strtol_l.isra.0+0x10>
 802a338:	2b01      	cmp	r3, #1
 802a33a:	d106      	bne.n	802a34a <_strtol_l.isra.0+0x1e>
 802a33c:	f001 fbe6 	bl	802bb0c <__errno>
 802a340:	2316      	movs	r3, #22
 802a342:	6003      	str	r3, [r0, #0]
 802a344:	2000      	movs	r0, #0
 802a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a34a:	4834      	ldr	r0, [pc, #208]	@ (802a41c <_strtol_l.isra.0+0xf0>)
 802a34c:	460d      	mov	r5, r1
 802a34e:	462a      	mov	r2, r5
 802a350:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a354:	5d06      	ldrb	r6, [r0, r4]
 802a356:	f016 0608 	ands.w	r6, r6, #8
 802a35a:	d1f8      	bne.n	802a34e <_strtol_l.isra.0+0x22>
 802a35c:	2c2d      	cmp	r4, #45	@ 0x2d
 802a35e:	d110      	bne.n	802a382 <_strtol_l.isra.0+0x56>
 802a360:	782c      	ldrb	r4, [r5, #0]
 802a362:	2601      	movs	r6, #1
 802a364:	1c95      	adds	r5, r2, #2
 802a366:	f033 0210 	bics.w	r2, r3, #16
 802a36a:	d115      	bne.n	802a398 <_strtol_l.isra.0+0x6c>
 802a36c:	2c30      	cmp	r4, #48	@ 0x30
 802a36e:	d10d      	bne.n	802a38c <_strtol_l.isra.0+0x60>
 802a370:	782a      	ldrb	r2, [r5, #0]
 802a372:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802a376:	2a58      	cmp	r2, #88	@ 0x58
 802a378:	d108      	bne.n	802a38c <_strtol_l.isra.0+0x60>
 802a37a:	786c      	ldrb	r4, [r5, #1]
 802a37c:	3502      	adds	r5, #2
 802a37e:	2310      	movs	r3, #16
 802a380:	e00a      	b.n	802a398 <_strtol_l.isra.0+0x6c>
 802a382:	2c2b      	cmp	r4, #43	@ 0x2b
 802a384:	bf04      	itt	eq
 802a386:	782c      	ldrbeq	r4, [r5, #0]
 802a388:	1c95      	addeq	r5, r2, #2
 802a38a:	e7ec      	b.n	802a366 <_strtol_l.isra.0+0x3a>
 802a38c:	2b00      	cmp	r3, #0
 802a38e:	d1f6      	bne.n	802a37e <_strtol_l.isra.0+0x52>
 802a390:	2c30      	cmp	r4, #48	@ 0x30
 802a392:	bf14      	ite	ne
 802a394:	230a      	movne	r3, #10
 802a396:	2308      	moveq	r3, #8
 802a398:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802a39c:	f10c 3cff 	add.w	ip, ip, #4294967295
 802a3a0:	2200      	movs	r2, #0
 802a3a2:	fbbc f9f3 	udiv	r9, ip, r3
 802a3a6:	4610      	mov	r0, r2
 802a3a8:	fb03 ca19 	mls	sl, r3, r9, ip
 802a3ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802a3b0:	2f09      	cmp	r7, #9
 802a3b2:	d80f      	bhi.n	802a3d4 <_strtol_l.isra.0+0xa8>
 802a3b4:	463c      	mov	r4, r7
 802a3b6:	42a3      	cmp	r3, r4
 802a3b8:	dd1b      	ble.n	802a3f2 <_strtol_l.isra.0+0xc6>
 802a3ba:	1c57      	adds	r7, r2, #1
 802a3bc:	d007      	beq.n	802a3ce <_strtol_l.isra.0+0xa2>
 802a3be:	4581      	cmp	r9, r0
 802a3c0:	d314      	bcc.n	802a3ec <_strtol_l.isra.0+0xc0>
 802a3c2:	d101      	bne.n	802a3c8 <_strtol_l.isra.0+0x9c>
 802a3c4:	45a2      	cmp	sl, r4
 802a3c6:	db11      	blt.n	802a3ec <_strtol_l.isra.0+0xc0>
 802a3c8:	fb00 4003 	mla	r0, r0, r3, r4
 802a3cc:	2201      	movs	r2, #1
 802a3ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a3d2:	e7eb      	b.n	802a3ac <_strtol_l.isra.0+0x80>
 802a3d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802a3d8:	2f19      	cmp	r7, #25
 802a3da:	d801      	bhi.n	802a3e0 <_strtol_l.isra.0+0xb4>
 802a3dc:	3c37      	subs	r4, #55	@ 0x37
 802a3de:	e7ea      	b.n	802a3b6 <_strtol_l.isra.0+0x8a>
 802a3e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802a3e4:	2f19      	cmp	r7, #25
 802a3e6:	d804      	bhi.n	802a3f2 <_strtol_l.isra.0+0xc6>
 802a3e8:	3c57      	subs	r4, #87	@ 0x57
 802a3ea:	e7e4      	b.n	802a3b6 <_strtol_l.isra.0+0x8a>
 802a3ec:	f04f 32ff 	mov.w	r2, #4294967295
 802a3f0:	e7ed      	b.n	802a3ce <_strtol_l.isra.0+0xa2>
 802a3f2:	1c53      	adds	r3, r2, #1
 802a3f4:	d108      	bne.n	802a408 <_strtol_l.isra.0+0xdc>
 802a3f6:	2322      	movs	r3, #34	@ 0x22
 802a3f8:	f8ce 3000 	str.w	r3, [lr]
 802a3fc:	4660      	mov	r0, ip
 802a3fe:	f1b8 0f00 	cmp.w	r8, #0
 802a402:	d0a0      	beq.n	802a346 <_strtol_l.isra.0+0x1a>
 802a404:	1e69      	subs	r1, r5, #1
 802a406:	e006      	b.n	802a416 <_strtol_l.isra.0+0xea>
 802a408:	b106      	cbz	r6, 802a40c <_strtol_l.isra.0+0xe0>
 802a40a:	4240      	negs	r0, r0
 802a40c:	f1b8 0f00 	cmp.w	r8, #0
 802a410:	d099      	beq.n	802a346 <_strtol_l.isra.0+0x1a>
 802a412:	2a00      	cmp	r2, #0
 802a414:	d1f6      	bne.n	802a404 <_strtol_l.isra.0+0xd8>
 802a416:	f8c8 1000 	str.w	r1, [r8]
 802a41a:	e794      	b.n	802a346 <_strtol_l.isra.0+0x1a>
 802a41c:	0802f43f 	.word	0x0802f43f

0802a420 <_strtol_r>:
 802a420:	f7ff bf84 	b.w	802a32c <_strtol_l.isra.0>

0802a424 <strtol>:
 802a424:	4613      	mov	r3, r2
 802a426:	460a      	mov	r2, r1
 802a428:	4601      	mov	r1, r0
 802a42a:	4802      	ldr	r0, [pc, #8]	@ (802a434 <strtol+0x10>)
 802a42c:	6800      	ldr	r0, [r0, #0]
 802a42e:	f7ff bf7d 	b.w	802a32c <_strtol_l.isra.0>
 802a432:	bf00      	nop
 802a434:	2000001c 	.word	0x2000001c

0802a438 <__cvt>:
 802a438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a43c:	ec57 6b10 	vmov	r6, r7, d0
 802a440:	2f00      	cmp	r7, #0
 802a442:	460c      	mov	r4, r1
 802a444:	4619      	mov	r1, r3
 802a446:	463b      	mov	r3, r7
 802a448:	bfbb      	ittet	lt
 802a44a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 802a44e:	461f      	movlt	r7, r3
 802a450:	2300      	movge	r3, #0
 802a452:	232d      	movlt	r3, #45	@ 0x2d
 802a454:	700b      	strb	r3, [r1, #0]
 802a456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a458:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 802a45c:	4691      	mov	r9, r2
 802a45e:	f023 0820 	bic.w	r8, r3, #32
 802a462:	bfbc      	itt	lt
 802a464:	4632      	movlt	r2, r6
 802a466:	4616      	movlt	r6, r2
 802a468:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802a46c:	d005      	beq.n	802a47a <__cvt+0x42>
 802a46e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802a472:	d100      	bne.n	802a476 <__cvt+0x3e>
 802a474:	3401      	adds	r4, #1
 802a476:	2102      	movs	r1, #2
 802a478:	e000      	b.n	802a47c <__cvt+0x44>
 802a47a:	2103      	movs	r1, #3
 802a47c:	ab03      	add	r3, sp, #12
 802a47e:	9301      	str	r3, [sp, #4]
 802a480:	ab02      	add	r3, sp, #8
 802a482:	9300      	str	r3, [sp, #0]
 802a484:	ec47 6b10 	vmov	d0, r6, r7
 802a488:	4653      	mov	r3, sl
 802a48a:	4622      	mov	r2, r4
 802a48c:	f001 fc10 	bl	802bcb0 <_dtoa_r>
 802a490:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 802a494:	4605      	mov	r5, r0
 802a496:	d119      	bne.n	802a4cc <__cvt+0x94>
 802a498:	f019 0f01 	tst.w	r9, #1
 802a49c:	d00e      	beq.n	802a4bc <__cvt+0x84>
 802a49e:	eb00 0904 	add.w	r9, r0, r4
 802a4a2:	2200      	movs	r2, #0
 802a4a4:	2300      	movs	r3, #0
 802a4a6:	4630      	mov	r0, r6
 802a4a8:	4639      	mov	r1, r7
 802a4aa:	f7f6 fb2d 	bl	8020b08 <__aeabi_dcmpeq>
 802a4ae:	b108      	cbz	r0, 802a4b4 <__cvt+0x7c>
 802a4b0:	f8cd 900c 	str.w	r9, [sp, #12]
 802a4b4:	2230      	movs	r2, #48	@ 0x30
 802a4b6:	9b03      	ldr	r3, [sp, #12]
 802a4b8:	454b      	cmp	r3, r9
 802a4ba:	d31e      	bcc.n	802a4fa <__cvt+0xc2>
 802a4bc:	9b03      	ldr	r3, [sp, #12]
 802a4be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a4c0:	1b5b      	subs	r3, r3, r5
 802a4c2:	4628      	mov	r0, r5
 802a4c4:	6013      	str	r3, [r2, #0]
 802a4c6:	b004      	add	sp, #16
 802a4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a4cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802a4d0:	eb00 0904 	add.w	r9, r0, r4
 802a4d4:	d1e5      	bne.n	802a4a2 <__cvt+0x6a>
 802a4d6:	7803      	ldrb	r3, [r0, #0]
 802a4d8:	2b30      	cmp	r3, #48	@ 0x30
 802a4da:	d10a      	bne.n	802a4f2 <__cvt+0xba>
 802a4dc:	2200      	movs	r2, #0
 802a4de:	2300      	movs	r3, #0
 802a4e0:	4630      	mov	r0, r6
 802a4e2:	4639      	mov	r1, r7
 802a4e4:	f7f6 fb10 	bl	8020b08 <__aeabi_dcmpeq>
 802a4e8:	b918      	cbnz	r0, 802a4f2 <__cvt+0xba>
 802a4ea:	f1c4 0401 	rsb	r4, r4, #1
 802a4ee:	f8ca 4000 	str.w	r4, [sl]
 802a4f2:	f8da 3000 	ldr.w	r3, [sl]
 802a4f6:	4499      	add	r9, r3
 802a4f8:	e7d3      	b.n	802a4a2 <__cvt+0x6a>
 802a4fa:	1c59      	adds	r1, r3, #1
 802a4fc:	9103      	str	r1, [sp, #12]
 802a4fe:	701a      	strb	r2, [r3, #0]
 802a500:	e7d9      	b.n	802a4b6 <__cvt+0x7e>

0802a502 <__exponent>:
 802a502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a504:	2900      	cmp	r1, #0
 802a506:	bfba      	itte	lt
 802a508:	4249      	neglt	r1, r1
 802a50a:	232d      	movlt	r3, #45	@ 0x2d
 802a50c:	232b      	movge	r3, #43	@ 0x2b
 802a50e:	2909      	cmp	r1, #9
 802a510:	7002      	strb	r2, [r0, #0]
 802a512:	7043      	strb	r3, [r0, #1]
 802a514:	dd29      	ble.n	802a56a <__exponent+0x68>
 802a516:	f10d 0307 	add.w	r3, sp, #7
 802a51a:	461d      	mov	r5, r3
 802a51c:	270a      	movs	r7, #10
 802a51e:	461a      	mov	r2, r3
 802a520:	fbb1 f6f7 	udiv	r6, r1, r7
 802a524:	fb07 1416 	mls	r4, r7, r6, r1
 802a528:	3430      	adds	r4, #48	@ 0x30
 802a52a:	f802 4c01 	strb.w	r4, [r2, #-1]
 802a52e:	460c      	mov	r4, r1
 802a530:	2c63      	cmp	r4, #99	@ 0x63
 802a532:	f103 33ff 	add.w	r3, r3, #4294967295
 802a536:	4631      	mov	r1, r6
 802a538:	dcf1      	bgt.n	802a51e <__exponent+0x1c>
 802a53a:	3130      	adds	r1, #48	@ 0x30
 802a53c:	1e94      	subs	r4, r2, #2
 802a53e:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a542:	1c41      	adds	r1, r0, #1
 802a544:	4623      	mov	r3, r4
 802a546:	42ab      	cmp	r3, r5
 802a548:	d30a      	bcc.n	802a560 <__exponent+0x5e>
 802a54a:	f10d 0309 	add.w	r3, sp, #9
 802a54e:	1a9b      	subs	r3, r3, r2
 802a550:	42ac      	cmp	r4, r5
 802a552:	bf88      	it	hi
 802a554:	2300      	movhi	r3, #0
 802a556:	3302      	adds	r3, #2
 802a558:	4403      	add	r3, r0
 802a55a:	1a18      	subs	r0, r3, r0
 802a55c:	b003      	add	sp, #12
 802a55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a560:	f813 6b01 	ldrb.w	r6, [r3], #1
 802a564:	f801 6f01 	strb.w	r6, [r1, #1]!
 802a568:	e7ed      	b.n	802a546 <__exponent+0x44>
 802a56a:	2330      	movs	r3, #48	@ 0x30
 802a56c:	3130      	adds	r1, #48	@ 0x30
 802a56e:	7083      	strb	r3, [r0, #2]
 802a570:	70c1      	strb	r1, [r0, #3]
 802a572:	1d03      	adds	r3, r0, #4
 802a574:	e7f1      	b.n	802a55a <__exponent+0x58>
	...

0802a578 <_printf_float>:
 802a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a57c:	b08d      	sub	sp, #52	@ 0x34
 802a57e:	460c      	mov	r4, r1
 802a580:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802a584:	4616      	mov	r6, r2
 802a586:	461f      	mov	r7, r3
 802a588:	4605      	mov	r5, r0
 802a58a:	f001 fa65 	bl	802ba58 <_localeconv_r>
 802a58e:	6803      	ldr	r3, [r0, #0]
 802a590:	9304      	str	r3, [sp, #16]
 802a592:	4618      	mov	r0, r3
 802a594:	f7f5 fe8c 	bl	80202b0 <strlen>
 802a598:	2300      	movs	r3, #0
 802a59a:	930a      	str	r3, [sp, #40]	@ 0x28
 802a59c:	f8d8 3000 	ldr.w	r3, [r8]
 802a5a0:	9005      	str	r0, [sp, #20]
 802a5a2:	3307      	adds	r3, #7
 802a5a4:	f023 0307 	bic.w	r3, r3, #7
 802a5a8:	f103 0208 	add.w	r2, r3, #8
 802a5ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 802a5b0:	f8d4 b000 	ldr.w	fp, [r4]
 802a5b4:	f8c8 2000 	str.w	r2, [r8]
 802a5b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 802a5bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802a5c0:	9307      	str	r3, [sp, #28]
 802a5c2:	f8cd 8018 	str.w	r8, [sp, #24]
 802a5c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 802a5ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a5ce:	4b9c      	ldr	r3, [pc, #624]	@ (802a840 <_printf_float+0x2c8>)
 802a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 802a5d4:	f7f6 faca 	bl	8020b6c <__aeabi_dcmpun>
 802a5d8:	bb70      	cbnz	r0, 802a638 <_printf_float+0xc0>
 802a5da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a5de:	4b98      	ldr	r3, [pc, #608]	@ (802a840 <_printf_float+0x2c8>)
 802a5e0:	f04f 32ff 	mov.w	r2, #4294967295
 802a5e4:	f7f6 faa4 	bl	8020b30 <__aeabi_dcmple>
 802a5e8:	bb30      	cbnz	r0, 802a638 <_printf_float+0xc0>
 802a5ea:	2200      	movs	r2, #0
 802a5ec:	2300      	movs	r3, #0
 802a5ee:	4640      	mov	r0, r8
 802a5f0:	4649      	mov	r1, r9
 802a5f2:	f7f6 fa93 	bl	8020b1c <__aeabi_dcmplt>
 802a5f6:	b110      	cbz	r0, 802a5fe <_printf_float+0x86>
 802a5f8:	232d      	movs	r3, #45	@ 0x2d
 802a5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a5fe:	4a91      	ldr	r2, [pc, #580]	@ (802a844 <_printf_float+0x2cc>)
 802a600:	4b91      	ldr	r3, [pc, #580]	@ (802a848 <_printf_float+0x2d0>)
 802a602:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802a606:	bf8c      	ite	hi
 802a608:	4690      	movhi	r8, r2
 802a60a:	4698      	movls	r8, r3
 802a60c:	2303      	movs	r3, #3
 802a60e:	6123      	str	r3, [r4, #16]
 802a610:	f02b 0304 	bic.w	r3, fp, #4
 802a614:	6023      	str	r3, [r4, #0]
 802a616:	f04f 0900 	mov.w	r9, #0
 802a61a:	9700      	str	r7, [sp, #0]
 802a61c:	4633      	mov	r3, r6
 802a61e:	aa0b      	add	r2, sp, #44	@ 0x2c
 802a620:	4621      	mov	r1, r4
 802a622:	4628      	mov	r0, r5
 802a624:	f000 fb14 	bl	802ac50 <_printf_common>
 802a628:	3001      	adds	r0, #1
 802a62a:	f040 808d 	bne.w	802a748 <_printf_float+0x1d0>
 802a62e:	f04f 30ff 	mov.w	r0, #4294967295
 802a632:	b00d      	add	sp, #52	@ 0x34
 802a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a638:	4642      	mov	r2, r8
 802a63a:	464b      	mov	r3, r9
 802a63c:	4640      	mov	r0, r8
 802a63e:	4649      	mov	r1, r9
 802a640:	f7f6 fa94 	bl	8020b6c <__aeabi_dcmpun>
 802a644:	b140      	cbz	r0, 802a658 <_printf_float+0xe0>
 802a646:	464b      	mov	r3, r9
 802a648:	2b00      	cmp	r3, #0
 802a64a:	bfbc      	itt	lt
 802a64c:	232d      	movlt	r3, #45	@ 0x2d
 802a64e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802a652:	4a7e      	ldr	r2, [pc, #504]	@ (802a84c <_printf_float+0x2d4>)
 802a654:	4b7e      	ldr	r3, [pc, #504]	@ (802a850 <_printf_float+0x2d8>)
 802a656:	e7d4      	b.n	802a602 <_printf_float+0x8a>
 802a658:	6863      	ldr	r3, [r4, #4]
 802a65a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 802a65e:	9206      	str	r2, [sp, #24]
 802a660:	1c5a      	adds	r2, r3, #1
 802a662:	d13b      	bne.n	802a6dc <_printf_float+0x164>
 802a664:	2306      	movs	r3, #6
 802a666:	6063      	str	r3, [r4, #4]
 802a668:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 802a66c:	2300      	movs	r3, #0
 802a66e:	6022      	str	r2, [r4, #0]
 802a670:	9303      	str	r3, [sp, #12]
 802a672:	ab0a      	add	r3, sp, #40	@ 0x28
 802a674:	e9cd a301 	strd	sl, r3, [sp, #4]
 802a678:	ab09      	add	r3, sp, #36	@ 0x24
 802a67a:	9300      	str	r3, [sp, #0]
 802a67c:	6861      	ldr	r1, [r4, #4]
 802a67e:	ec49 8b10 	vmov	d0, r8, r9
 802a682:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802a686:	4628      	mov	r0, r5
 802a688:	f7ff fed6 	bl	802a438 <__cvt>
 802a68c:	9b06      	ldr	r3, [sp, #24]
 802a68e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a690:	2b47      	cmp	r3, #71	@ 0x47
 802a692:	4680      	mov	r8, r0
 802a694:	d129      	bne.n	802a6ea <_printf_float+0x172>
 802a696:	1cc8      	adds	r0, r1, #3
 802a698:	db02      	blt.n	802a6a0 <_printf_float+0x128>
 802a69a:	6863      	ldr	r3, [r4, #4]
 802a69c:	4299      	cmp	r1, r3
 802a69e:	dd41      	ble.n	802a724 <_printf_float+0x1ac>
 802a6a0:	f1aa 0a02 	sub.w	sl, sl, #2
 802a6a4:	fa5f fa8a 	uxtb.w	sl, sl
 802a6a8:	3901      	subs	r1, #1
 802a6aa:	4652      	mov	r2, sl
 802a6ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802a6b0:	9109      	str	r1, [sp, #36]	@ 0x24
 802a6b2:	f7ff ff26 	bl	802a502 <__exponent>
 802a6b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a6b8:	1813      	adds	r3, r2, r0
 802a6ba:	2a01      	cmp	r2, #1
 802a6bc:	4681      	mov	r9, r0
 802a6be:	6123      	str	r3, [r4, #16]
 802a6c0:	dc02      	bgt.n	802a6c8 <_printf_float+0x150>
 802a6c2:	6822      	ldr	r2, [r4, #0]
 802a6c4:	07d2      	lsls	r2, r2, #31
 802a6c6:	d501      	bpl.n	802a6cc <_printf_float+0x154>
 802a6c8:	3301      	adds	r3, #1
 802a6ca:	6123      	str	r3, [r4, #16]
 802a6cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802a6d0:	2b00      	cmp	r3, #0
 802a6d2:	d0a2      	beq.n	802a61a <_printf_float+0xa2>
 802a6d4:	232d      	movs	r3, #45	@ 0x2d
 802a6d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a6da:	e79e      	b.n	802a61a <_printf_float+0xa2>
 802a6dc:	9a06      	ldr	r2, [sp, #24]
 802a6de:	2a47      	cmp	r2, #71	@ 0x47
 802a6e0:	d1c2      	bne.n	802a668 <_printf_float+0xf0>
 802a6e2:	2b00      	cmp	r3, #0
 802a6e4:	d1c0      	bne.n	802a668 <_printf_float+0xf0>
 802a6e6:	2301      	movs	r3, #1
 802a6e8:	e7bd      	b.n	802a666 <_printf_float+0xee>
 802a6ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802a6ee:	d9db      	bls.n	802a6a8 <_printf_float+0x130>
 802a6f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 802a6f4:	d118      	bne.n	802a728 <_printf_float+0x1b0>
 802a6f6:	2900      	cmp	r1, #0
 802a6f8:	6863      	ldr	r3, [r4, #4]
 802a6fa:	dd0b      	ble.n	802a714 <_printf_float+0x19c>
 802a6fc:	6121      	str	r1, [r4, #16]
 802a6fe:	b913      	cbnz	r3, 802a706 <_printf_float+0x18e>
 802a700:	6822      	ldr	r2, [r4, #0]
 802a702:	07d0      	lsls	r0, r2, #31
 802a704:	d502      	bpl.n	802a70c <_printf_float+0x194>
 802a706:	3301      	adds	r3, #1
 802a708:	440b      	add	r3, r1
 802a70a:	6123      	str	r3, [r4, #16]
 802a70c:	65a1      	str	r1, [r4, #88]	@ 0x58
 802a70e:	f04f 0900 	mov.w	r9, #0
 802a712:	e7db      	b.n	802a6cc <_printf_float+0x154>
 802a714:	b913      	cbnz	r3, 802a71c <_printf_float+0x1a4>
 802a716:	6822      	ldr	r2, [r4, #0]
 802a718:	07d2      	lsls	r2, r2, #31
 802a71a:	d501      	bpl.n	802a720 <_printf_float+0x1a8>
 802a71c:	3302      	adds	r3, #2
 802a71e:	e7f4      	b.n	802a70a <_printf_float+0x192>
 802a720:	2301      	movs	r3, #1
 802a722:	e7f2      	b.n	802a70a <_printf_float+0x192>
 802a724:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802a728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a72a:	4299      	cmp	r1, r3
 802a72c:	db05      	blt.n	802a73a <_printf_float+0x1c2>
 802a72e:	6823      	ldr	r3, [r4, #0]
 802a730:	6121      	str	r1, [r4, #16]
 802a732:	07d8      	lsls	r0, r3, #31
 802a734:	d5ea      	bpl.n	802a70c <_printf_float+0x194>
 802a736:	1c4b      	adds	r3, r1, #1
 802a738:	e7e7      	b.n	802a70a <_printf_float+0x192>
 802a73a:	2900      	cmp	r1, #0
 802a73c:	bfd4      	ite	le
 802a73e:	f1c1 0202 	rsble	r2, r1, #2
 802a742:	2201      	movgt	r2, #1
 802a744:	4413      	add	r3, r2
 802a746:	e7e0      	b.n	802a70a <_printf_float+0x192>
 802a748:	6823      	ldr	r3, [r4, #0]
 802a74a:	055a      	lsls	r2, r3, #21
 802a74c:	d407      	bmi.n	802a75e <_printf_float+0x1e6>
 802a74e:	6923      	ldr	r3, [r4, #16]
 802a750:	4642      	mov	r2, r8
 802a752:	4631      	mov	r1, r6
 802a754:	4628      	mov	r0, r5
 802a756:	47b8      	blx	r7
 802a758:	3001      	adds	r0, #1
 802a75a:	d12b      	bne.n	802a7b4 <_printf_float+0x23c>
 802a75c:	e767      	b.n	802a62e <_printf_float+0xb6>
 802a75e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802a762:	f240 80dd 	bls.w	802a920 <_printf_float+0x3a8>
 802a766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802a76a:	2200      	movs	r2, #0
 802a76c:	2300      	movs	r3, #0
 802a76e:	f7f6 f9cb 	bl	8020b08 <__aeabi_dcmpeq>
 802a772:	2800      	cmp	r0, #0
 802a774:	d033      	beq.n	802a7de <_printf_float+0x266>
 802a776:	4a37      	ldr	r2, [pc, #220]	@ (802a854 <_printf_float+0x2dc>)
 802a778:	2301      	movs	r3, #1
 802a77a:	4631      	mov	r1, r6
 802a77c:	4628      	mov	r0, r5
 802a77e:	47b8      	blx	r7
 802a780:	3001      	adds	r0, #1
 802a782:	f43f af54 	beq.w	802a62e <_printf_float+0xb6>
 802a786:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802a78a:	4543      	cmp	r3, r8
 802a78c:	db02      	blt.n	802a794 <_printf_float+0x21c>
 802a78e:	6823      	ldr	r3, [r4, #0]
 802a790:	07d8      	lsls	r0, r3, #31
 802a792:	d50f      	bpl.n	802a7b4 <_printf_float+0x23c>
 802a794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a798:	4631      	mov	r1, r6
 802a79a:	4628      	mov	r0, r5
 802a79c:	47b8      	blx	r7
 802a79e:	3001      	adds	r0, #1
 802a7a0:	f43f af45 	beq.w	802a62e <_printf_float+0xb6>
 802a7a4:	f04f 0900 	mov.w	r9, #0
 802a7a8:	f108 38ff 	add.w	r8, r8, #4294967295
 802a7ac:	f104 0a1a 	add.w	sl, r4, #26
 802a7b0:	45c8      	cmp	r8, r9
 802a7b2:	dc09      	bgt.n	802a7c8 <_printf_float+0x250>
 802a7b4:	6823      	ldr	r3, [r4, #0]
 802a7b6:	079b      	lsls	r3, r3, #30
 802a7b8:	f100 8103 	bmi.w	802a9c2 <_printf_float+0x44a>
 802a7bc:	68e0      	ldr	r0, [r4, #12]
 802a7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a7c0:	4298      	cmp	r0, r3
 802a7c2:	bfb8      	it	lt
 802a7c4:	4618      	movlt	r0, r3
 802a7c6:	e734      	b.n	802a632 <_printf_float+0xba>
 802a7c8:	2301      	movs	r3, #1
 802a7ca:	4652      	mov	r2, sl
 802a7cc:	4631      	mov	r1, r6
 802a7ce:	4628      	mov	r0, r5
 802a7d0:	47b8      	blx	r7
 802a7d2:	3001      	adds	r0, #1
 802a7d4:	f43f af2b 	beq.w	802a62e <_printf_float+0xb6>
 802a7d8:	f109 0901 	add.w	r9, r9, #1
 802a7dc:	e7e8      	b.n	802a7b0 <_printf_float+0x238>
 802a7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a7e0:	2b00      	cmp	r3, #0
 802a7e2:	dc39      	bgt.n	802a858 <_printf_float+0x2e0>
 802a7e4:	4a1b      	ldr	r2, [pc, #108]	@ (802a854 <_printf_float+0x2dc>)
 802a7e6:	2301      	movs	r3, #1
 802a7e8:	4631      	mov	r1, r6
 802a7ea:	4628      	mov	r0, r5
 802a7ec:	47b8      	blx	r7
 802a7ee:	3001      	adds	r0, #1
 802a7f0:	f43f af1d 	beq.w	802a62e <_printf_float+0xb6>
 802a7f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802a7f8:	ea59 0303 	orrs.w	r3, r9, r3
 802a7fc:	d102      	bne.n	802a804 <_printf_float+0x28c>
 802a7fe:	6823      	ldr	r3, [r4, #0]
 802a800:	07d9      	lsls	r1, r3, #31
 802a802:	d5d7      	bpl.n	802a7b4 <_printf_float+0x23c>
 802a804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a808:	4631      	mov	r1, r6
 802a80a:	4628      	mov	r0, r5
 802a80c:	47b8      	blx	r7
 802a80e:	3001      	adds	r0, #1
 802a810:	f43f af0d 	beq.w	802a62e <_printf_float+0xb6>
 802a814:	f04f 0a00 	mov.w	sl, #0
 802a818:	f104 0b1a 	add.w	fp, r4, #26
 802a81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a81e:	425b      	negs	r3, r3
 802a820:	4553      	cmp	r3, sl
 802a822:	dc01      	bgt.n	802a828 <_printf_float+0x2b0>
 802a824:	464b      	mov	r3, r9
 802a826:	e793      	b.n	802a750 <_printf_float+0x1d8>
 802a828:	2301      	movs	r3, #1
 802a82a:	465a      	mov	r2, fp
 802a82c:	4631      	mov	r1, r6
 802a82e:	4628      	mov	r0, r5
 802a830:	47b8      	blx	r7
 802a832:	3001      	adds	r0, #1
 802a834:	f43f aefb 	beq.w	802a62e <_printf_float+0xb6>
 802a838:	f10a 0a01 	add.w	sl, sl, #1
 802a83c:	e7ee      	b.n	802a81c <_printf_float+0x2a4>
 802a83e:	bf00      	nop
 802a840:	7fefffff 	.word	0x7fefffff
 802a844:	0802f2a8 	.word	0x0802f2a8
 802a848:	0802f2a4 	.word	0x0802f2a4
 802a84c:	0802f2b0 	.word	0x0802f2b0
 802a850:	0802f2ac 	.word	0x0802f2ac
 802a854:	0802f2b4 	.word	0x0802f2b4
 802a858:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a85a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802a85e:	4553      	cmp	r3, sl
 802a860:	bfa8      	it	ge
 802a862:	4653      	movge	r3, sl
 802a864:	2b00      	cmp	r3, #0
 802a866:	4699      	mov	r9, r3
 802a868:	dc36      	bgt.n	802a8d8 <_printf_float+0x360>
 802a86a:	f04f 0b00 	mov.w	fp, #0
 802a86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a872:	f104 021a 	add.w	r2, r4, #26
 802a876:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a878:	9306      	str	r3, [sp, #24]
 802a87a:	eba3 0309 	sub.w	r3, r3, r9
 802a87e:	455b      	cmp	r3, fp
 802a880:	dc31      	bgt.n	802a8e6 <_printf_float+0x36e>
 802a882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a884:	459a      	cmp	sl, r3
 802a886:	dc3a      	bgt.n	802a8fe <_printf_float+0x386>
 802a888:	6823      	ldr	r3, [r4, #0]
 802a88a:	07da      	lsls	r2, r3, #31
 802a88c:	d437      	bmi.n	802a8fe <_printf_float+0x386>
 802a88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a890:	ebaa 0903 	sub.w	r9, sl, r3
 802a894:	9b06      	ldr	r3, [sp, #24]
 802a896:	ebaa 0303 	sub.w	r3, sl, r3
 802a89a:	4599      	cmp	r9, r3
 802a89c:	bfa8      	it	ge
 802a89e:	4699      	movge	r9, r3
 802a8a0:	f1b9 0f00 	cmp.w	r9, #0
 802a8a4:	dc33      	bgt.n	802a90e <_printf_float+0x396>
 802a8a6:	f04f 0800 	mov.w	r8, #0
 802a8aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a8ae:	f104 0b1a 	add.w	fp, r4, #26
 802a8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8b4:	ebaa 0303 	sub.w	r3, sl, r3
 802a8b8:	eba3 0309 	sub.w	r3, r3, r9
 802a8bc:	4543      	cmp	r3, r8
 802a8be:	f77f af79 	ble.w	802a7b4 <_printf_float+0x23c>
 802a8c2:	2301      	movs	r3, #1
 802a8c4:	465a      	mov	r2, fp
 802a8c6:	4631      	mov	r1, r6
 802a8c8:	4628      	mov	r0, r5
 802a8ca:	47b8      	blx	r7
 802a8cc:	3001      	adds	r0, #1
 802a8ce:	f43f aeae 	beq.w	802a62e <_printf_float+0xb6>
 802a8d2:	f108 0801 	add.w	r8, r8, #1
 802a8d6:	e7ec      	b.n	802a8b2 <_printf_float+0x33a>
 802a8d8:	4642      	mov	r2, r8
 802a8da:	4631      	mov	r1, r6
 802a8dc:	4628      	mov	r0, r5
 802a8de:	47b8      	blx	r7
 802a8e0:	3001      	adds	r0, #1
 802a8e2:	d1c2      	bne.n	802a86a <_printf_float+0x2f2>
 802a8e4:	e6a3      	b.n	802a62e <_printf_float+0xb6>
 802a8e6:	2301      	movs	r3, #1
 802a8e8:	4631      	mov	r1, r6
 802a8ea:	4628      	mov	r0, r5
 802a8ec:	9206      	str	r2, [sp, #24]
 802a8ee:	47b8      	blx	r7
 802a8f0:	3001      	adds	r0, #1
 802a8f2:	f43f ae9c 	beq.w	802a62e <_printf_float+0xb6>
 802a8f6:	9a06      	ldr	r2, [sp, #24]
 802a8f8:	f10b 0b01 	add.w	fp, fp, #1
 802a8fc:	e7bb      	b.n	802a876 <_printf_float+0x2fe>
 802a8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a902:	4631      	mov	r1, r6
 802a904:	4628      	mov	r0, r5
 802a906:	47b8      	blx	r7
 802a908:	3001      	adds	r0, #1
 802a90a:	d1c0      	bne.n	802a88e <_printf_float+0x316>
 802a90c:	e68f      	b.n	802a62e <_printf_float+0xb6>
 802a90e:	9a06      	ldr	r2, [sp, #24]
 802a910:	464b      	mov	r3, r9
 802a912:	4442      	add	r2, r8
 802a914:	4631      	mov	r1, r6
 802a916:	4628      	mov	r0, r5
 802a918:	47b8      	blx	r7
 802a91a:	3001      	adds	r0, #1
 802a91c:	d1c3      	bne.n	802a8a6 <_printf_float+0x32e>
 802a91e:	e686      	b.n	802a62e <_printf_float+0xb6>
 802a920:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802a924:	f1ba 0f01 	cmp.w	sl, #1
 802a928:	dc01      	bgt.n	802a92e <_printf_float+0x3b6>
 802a92a:	07db      	lsls	r3, r3, #31
 802a92c:	d536      	bpl.n	802a99c <_printf_float+0x424>
 802a92e:	2301      	movs	r3, #1
 802a930:	4642      	mov	r2, r8
 802a932:	4631      	mov	r1, r6
 802a934:	4628      	mov	r0, r5
 802a936:	47b8      	blx	r7
 802a938:	3001      	adds	r0, #1
 802a93a:	f43f ae78 	beq.w	802a62e <_printf_float+0xb6>
 802a93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a942:	4631      	mov	r1, r6
 802a944:	4628      	mov	r0, r5
 802a946:	47b8      	blx	r7
 802a948:	3001      	adds	r0, #1
 802a94a:	f43f ae70 	beq.w	802a62e <_printf_float+0xb6>
 802a94e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802a952:	2200      	movs	r2, #0
 802a954:	2300      	movs	r3, #0
 802a956:	f10a 3aff 	add.w	sl, sl, #4294967295
 802a95a:	f7f6 f8d5 	bl	8020b08 <__aeabi_dcmpeq>
 802a95e:	b9c0      	cbnz	r0, 802a992 <_printf_float+0x41a>
 802a960:	4653      	mov	r3, sl
 802a962:	f108 0201 	add.w	r2, r8, #1
 802a966:	4631      	mov	r1, r6
 802a968:	4628      	mov	r0, r5
 802a96a:	47b8      	blx	r7
 802a96c:	3001      	adds	r0, #1
 802a96e:	d10c      	bne.n	802a98a <_printf_float+0x412>
 802a970:	e65d      	b.n	802a62e <_printf_float+0xb6>
 802a972:	2301      	movs	r3, #1
 802a974:	465a      	mov	r2, fp
 802a976:	4631      	mov	r1, r6
 802a978:	4628      	mov	r0, r5
 802a97a:	47b8      	blx	r7
 802a97c:	3001      	adds	r0, #1
 802a97e:	f43f ae56 	beq.w	802a62e <_printf_float+0xb6>
 802a982:	f108 0801 	add.w	r8, r8, #1
 802a986:	45d0      	cmp	r8, sl
 802a988:	dbf3      	blt.n	802a972 <_printf_float+0x3fa>
 802a98a:	464b      	mov	r3, r9
 802a98c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 802a990:	e6df      	b.n	802a752 <_printf_float+0x1da>
 802a992:	f04f 0800 	mov.w	r8, #0
 802a996:	f104 0b1a 	add.w	fp, r4, #26
 802a99a:	e7f4      	b.n	802a986 <_printf_float+0x40e>
 802a99c:	2301      	movs	r3, #1
 802a99e:	4642      	mov	r2, r8
 802a9a0:	e7e1      	b.n	802a966 <_printf_float+0x3ee>
 802a9a2:	2301      	movs	r3, #1
 802a9a4:	464a      	mov	r2, r9
 802a9a6:	4631      	mov	r1, r6
 802a9a8:	4628      	mov	r0, r5
 802a9aa:	47b8      	blx	r7
 802a9ac:	3001      	adds	r0, #1
 802a9ae:	f43f ae3e 	beq.w	802a62e <_printf_float+0xb6>
 802a9b2:	f108 0801 	add.w	r8, r8, #1
 802a9b6:	68e3      	ldr	r3, [r4, #12]
 802a9b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a9ba:	1a5b      	subs	r3, r3, r1
 802a9bc:	4543      	cmp	r3, r8
 802a9be:	dcf0      	bgt.n	802a9a2 <_printf_float+0x42a>
 802a9c0:	e6fc      	b.n	802a7bc <_printf_float+0x244>
 802a9c2:	f04f 0800 	mov.w	r8, #0
 802a9c6:	f104 0919 	add.w	r9, r4, #25
 802a9ca:	e7f4      	b.n	802a9b6 <_printf_float+0x43e>

0802a9cc <__sfputc_r>:
 802a9cc:	6893      	ldr	r3, [r2, #8]
 802a9ce:	3b01      	subs	r3, #1
 802a9d0:	2b00      	cmp	r3, #0
 802a9d2:	b410      	push	{r4}
 802a9d4:	6093      	str	r3, [r2, #8]
 802a9d6:	da08      	bge.n	802a9ea <__sfputc_r+0x1e>
 802a9d8:	6994      	ldr	r4, [r2, #24]
 802a9da:	42a3      	cmp	r3, r4
 802a9dc:	db01      	blt.n	802a9e2 <__sfputc_r+0x16>
 802a9de:	290a      	cmp	r1, #10
 802a9e0:	d103      	bne.n	802a9ea <__sfputc_r+0x1e>
 802a9e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a9e6:	f000 bf58 	b.w	802b89a <__swbuf_r>
 802a9ea:	6813      	ldr	r3, [r2, #0]
 802a9ec:	1c58      	adds	r0, r3, #1
 802a9ee:	6010      	str	r0, [r2, #0]
 802a9f0:	7019      	strb	r1, [r3, #0]
 802a9f2:	4608      	mov	r0, r1
 802a9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a9f8:	4770      	bx	lr

0802a9fa <__sfputs_r>:
 802a9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a9fc:	4606      	mov	r6, r0
 802a9fe:	460f      	mov	r7, r1
 802aa00:	4614      	mov	r4, r2
 802aa02:	18d5      	adds	r5, r2, r3
 802aa04:	42ac      	cmp	r4, r5
 802aa06:	d101      	bne.n	802aa0c <__sfputs_r+0x12>
 802aa08:	2000      	movs	r0, #0
 802aa0a:	e007      	b.n	802aa1c <__sfputs_r+0x22>
 802aa0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa10:	463a      	mov	r2, r7
 802aa12:	4630      	mov	r0, r6
 802aa14:	f7ff ffda 	bl	802a9cc <__sfputc_r>
 802aa18:	1c43      	adds	r3, r0, #1
 802aa1a:	d1f3      	bne.n	802aa04 <__sfputs_r+0xa>
 802aa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802aa20 <_vfiprintf_r>:
 802aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa24:	460d      	mov	r5, r1
 802aa26:	b09d      	sub	sp, #116	@ 0x74
 802aa28:	4614      	mov	r4, r2
 802aa2a:	4698      	mov	r8, r3
 802aa2c:	4606      	mov	r6, r0
 802aa2e:	b118      	cbz	r0, 802aa38 <_vfiprintf_r+0x18>
 802aa30:	6a03      	ldr	r3, [r0, #32]
 802aa32:	b90b      	cbnz	r3, 802aa38 <_vfiprintf_r+0x18>
 802aa34:	f000 fdde 	bl	802b5f4 <__sinit>
 802aa38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802aa3a:	07d9      	lsls	r1, r3, #31
 802aa3c:	d405      	bmi.n	802aa4a <_vfiprintf_r+0x2a>
 802aa3e:	89ab      	ldrh	r3, [r5, #12]
 802aa40:	059a      	lsls	r2, r3, #22
 802aa42:	d402      	bmi.n	802aa4a <_vfiprintf_r+0x2a>
 802aa44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802aa46:	f001 f88c 	bl	802bb62 <__retarget_lock_acquire_recursive>
 802aa4a:	89ab      	ldrh	r3, [r5, #12]
 802aa4c:	071b      	lsls	r3, r3, #28
 802aa4e:	d501      	bpl.n	802aa54 <_vfiprintf_r+0x34>
 802aa50:	692b      	ldr	r3, [r5, #16]
 802aa52:	b99b      	cbnz	r3, 802aa7c <_vfiprintf_r+0x5c>
 802aa54:	4629      	mov	r1, r5
 802aa56:	4630      	mov	r0, r6
 802aa58:	f000 ff5e 	bl	802b918 <__swsetup_r>
 802aa5c:	b170      	cbz	r0, 802aa7c <_vfiprintf_r+0x5c>
 802aa5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802aa60:	07dc      	lsls	r4, r3, #31
 802aa62:	d504      	bpl.n	802aa6e <_vfiprintf_r+0x4e>
 802aa64:	f04f 30ff 	mov.w	r0, #4294967295
 802aa68:	b01d      	add	sp, #116	@ 0x74
 802aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa6e:	89ab      	ldrh	r3, [r5, #12]
 802aa70:	0598      	lsls	r0, r3, #22
 802aa72:	d4f7      	bmi.n	802aa64 <_vfiprintf_r+0x44>
 802aa74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802aa76:	f001 f875 	bl	802bb64 <__retarget_lock_release_recursive>
 802aa7a:	e7f3      	b.n	802aa64 <_vfiprintf_r+0x44>
 802aa7c:	2300      	movs	r3, #0
 802aa7e:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa80:	2320      	movs	r3, #32
 802aa82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802aa86:	f8cd 800c 	str.w	r8, [sp, #12]
 802aa8a:	2330      	movs	r3, #48	@ 0x30
 802aa8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802ac3c <_vfiprintf_r+0x21c>
 802aa90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802aa94:	f04f 0901 	mov.w	r9, #1
 802aa98:	4623      	mov	r3, r4
 802aa9a:	469a      	mov	sl, r3
 802aa9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802aaa0:	b10a      	cbz	r2, 802aaa6 <_vfiprintf_r+0x86>
 802aaa2:	2a25      	cmp	r2, #37	@ 0x25
 802aaa4:	d1f9      	bne.n	802aa9a <_vfiprintf_r+0x7a>
 802aaa6:	ebba 0b04 	subs.w	fp, sl, r4
 802aaaa:	d00b      	beq.n	802aac4 <_vfiprintf_r+0xa4>
 802aaac:	465b      	mov	r3, fp
 802aaae:	4622      	mov	r2, r4
 802aab0:	4629      	mov	r1, r5
 802aab2:	4630      	mov	r0, r6
 802aab4:	f7ff ffa1 	bl	802a9fa <__sfputs_r>
 802aab8:	3001      	adds	r0, #1
 802aaba:	f000 80a7 	beq.w	802ac0c <_vfiprintf_r+0x1ec>
 802aabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802aac0:	445a      	add	r2, fp
 802aac2:	9209      	str	r2, [sp, #36]	@ 0x24
 802aac4:	f89a 3000 	ldrb.w	r3, [sl]
 802aac8:	2b00      	cmp	r3, #0
 802aaca:	f000 809f 	beq.w	802ac0c <_vfiprintf_r+0x1ec>
 802aace:	2300      	movs	r3, #0
 802aad0:	f04f 32ff 	mov.w	r2, #4294967295
 802aad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aad8:	f10a 0a01 	add.w	sl, sl, #1
 802aadc:	9304      	str	r3, [sp, #16]
 802aade:	9307      	str	r3, [sp, #28]
 802aae0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802aae4:	931a      	str	r3, [sp, #104]	@ 0x68
 802aae6:	4654      	mov	r4, sl
 802aae8:	2205      	movs	r2, #5
 802aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aaee:	4853      	ldr	r0, [pc, #332]	@ (802ac3c <_vfiprintf_r+0x21c>)
 802aaf0:	f7f5 fb8e 	bl	8020210 <memchr>
 802aaf4:	9a04      	ldr	r2, [sp, #16]
 802aaf6:	b9d8      	cbnz	r0, 802ab30 <_vfiprintf_r+0x110>
 802aaf8:	06d1      	lsls	r1, r2, #27
 802aafa:	bf44      	itt	mi
 802aafc:	2320      	movmi	r3, #32
 802aafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ab02:	0713      	lsls	r3, r2, #28
 802ab04:	bf44      	itt	mi
 802ab06:	232b      	movmi	r3, #43	@ 0x2b
 802ab08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ab0c:	f89a 3000 	ldrb.w	r3, [sl]
 802ab10:	2b2a      	cmp	r3, #42	@ 0x2a
 802ab12:	d015      	beq.n	802ab40 <_vfiprintf_r+0x120>
 802ab14:	9a07      	ldr	r2, [sp, #28]
 802ab16:	4654      	mov	r4, sl
 802ab18:	2000      	movs	r0, #0
 802ab1a:	f04f 0c0a 	mov.w	ip, #10
 802ab1e:	4621      	mov	r1, r4
 802ab20:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ab24:	3b30      	subs	r3, #48	@ 0x30
 802ab26:	2b09      	cmp	r3, #9
 802ab28:	d94b      	bls.n	802abc2 <_vfiprintf_r+0x1a2>
 802ab2a:	b1b0      	cbz	r0, 802ab5a <_vfiprintf_r+0x13a>
 802ab2c:	9207      	str	r2, [sp, #28]
 802ab2e:	e014      	b.n	802ab5a <_vfiprintf_r+0x13a>
 802ab30:	eba0 0308 	sub.w	r3, r0, r8
 802ab34:	fa09 f303 	lsl.w	r3, r9, r3
 802ab38:	4313      	orrs	r3, r2
 802ab3a:	9304      	str	r3, [sp, #16]
 802ab3c:	46a2      	mov	sl, r4
 802ab3e:	e7d2      	b.n	802aae6 <_vfiprintf_r+0xc6>
 802ab40:	9b03      	ldr	r3, [sp, #12]
 802ab42:	1d19      	adds	r1, r3, #4
 802ab44:	681b      	ldr	r3, [r3, #0]
 802ab46:	9103      	str	r1, [sp, #12]
 802ab48:	2b00      	cmp	r3, #0
 802ab4a:	bfbb      	ittet	lt
 802ab4c:	425b      	neglt	r3, r3
 802ab4e:	f042 0202 	orrlt.w	r2, r2, #2
 802ab52:	9307      	strge	r3, [sp, #28]
 802ab54:	9307      	strlt	r3, [sp, #28]
 802ab56:	bfb8      	it	lt
 802ab58:	9204      	strlt	r2, [sp, #16]
 802ab5a:	7823      	ldrb	r3, [r4, #0]
 802ab5c:	2b2e      	cmp	r3, #46	@ 0x2e
 802ab5e:	d10a      	bne.n	802ab76 <_vfiprintf_r+0x156>
 802ab60:	7863      	ldrb	r3, [r4, #1]
 802ab62:	2b2a      	cmp	r3, #42	@ 0x2a
 802ab64:	d132      	bne.n	802abcc <_vfiprintf_r+0x1ac>
 802ab66:	9b03      	ldr	r3, [sp, #12]
 802ab68:	1d1a      	adds	r2, r3, #4
 802ab6a:	681b      	ldr	r3, [r3, #0]
 802ab6c:	9203      	str	r2, [sp, #12]
 802ab6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ab72:	3402      	adds	r4, #2
 802ab74:	9305      	str	r3, [sp, #20]
 802ab76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802ac4c <_vfiprintf_r+0x22c>
 802ab7a:	7821      	ldrb	r1, [r4, #0]
 802ab7c:	2203      	movs	r2, #3
 802ab7e:	4650      	mov	r0, sl
 802ab80:	f7f5 fb46 	bl	8020210 <memchr>
 802ab84:	b138      	cbz	r0, 802ab96 <_vfiprintf_r+0x176>
 802ab86:	9b04      	ldr	r3, [sp, #16]
 802ab88:	eba0 000a 	sub.w	r0, r0, sl
 802ab8c:	2240      	movs	r2, #64	@ 0x40
 802ab8e:	4082      	lsls	r2, r0
 802ab90:	4313      	orrs	r3, r2
 802ab92:	3401      	adds	r4, #1
 802ab94:	9304      	str	r3, [sp, #16]
 802ab96:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ab9a:	4829      	ldr	r0, [pc, #164]	@ (802ac40 <_vfiprintf_r+0x220>)
 802ab9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802aba0:	2206      	movs	r2, #6
 802aba2:	f7f5 fb35 	bl	8020210 <memchr>
 802aba6:	2800      	cmp	r0, #0
 802aba8:	d03f      	beq.n	802ac2a <_vfiprintf_r+0x20a>
 802abaa:	4b26      	ldr	r3, [pc, #152]	@ (802ac44 <_vfiprintf_r+0x224>)
 802abac:	bb1b      	cbnz	r3, 802abf6 <_vfiprintf_r+0x1d6>
 802abae:	9b03      	ldr	r3, [sp, #12]
 802abb0:	3307      	adds	r3, #7
 802abb2:	f023 0307 	bic.w	r3, r3, #7
 802abb6:	3308      	adds	r3, #8
 802abb8:	9303      	str	r3, [sp, #12]
 802abba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802abbc:	443b      	add	r3, r7
 802abbe:	9309      	str	r3, [sp, #36]	@ 0x24
 802abc0:	e76a      	b.n	802aa98 <_vfiprintf_r+0x78>
 802abc2:	fb0c 3202 	mla	r2, ip, r2, r3
 802abc6:	460c      	mov	r4, r1
 802abc8:	2001      	movs	r0, #1
 802abca:	e7a8      	b.n	802ab1e <_vfiprintf_r+0xfe>
 802abcc:	2300      	movs	r3, #0
 802abce:	3401      	adds	r4, #1
 802abd0:	9305      	str	r3, [sp, #20]
 802abd2:	4619      	mov	r1, r3
 802abd4:	f04f 0c0a 	mov.w	ip, #10
 802abd8:	4620      	mov	r0, r4
 802abda:	f810 2b01 	ldrb.w	r2, [r0], #1
 802abde:	3a30      	subs	r2, #48	@ 0x30
 802abe0:	2a09      	cmp	r2, #9
 802abe2:	d903      	bls.n	802abec <_vfiprintf_r+0x1cc>
 802abe4:	2b00      	cmp	r3, #0
 802abe6:	d0c6      	beq.n	802ab76 <_vfiprintf_r+0x156>
 802abe8:	9105      	str	r1, [sp, #20]
 802abea:	e7c4      	b.n	802ab76 <_vfiprintf_r+0x156>
 802abec:	fb0c 2101 	mla	r1, ip, r1, r2
 802abf0:	4604      	mov	r4, r0
 802abf2:	2301      	movs	r3, #1
 802abf4:	e7f0      	b.n	802abd8 <_vfiprintf_r+0x1b8>
 802abf6:	ab03      	add	r3, sp, #12
 802abf8:	9300      	str	r3, [sp, #0]
 802abfa:	462a      	mov	r2, r5
 802abfc:	4b12      	ldr	r3, [pc, #72]	@ (802ac48 <_vfiprintf_r+0x228>)
 802abfe:	a904      	add	r1, sp, #16
 802ac00:	4630      	mov	r0, r6
 802ac02:	f7ff fcb9 	bl	802a578 <_printf_float>
 802ac06:	4607      	mov	r7, r0
 802ac08:	1c78      	adds	r0, r7, #1
 802ac0a:	d1d6      	bne.n	802abba <_vfiprintf_r+0x19a>
 802ac0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ac0e:	07d9      	lsls	r1, r3, #31
 802ac10:	d405      	bmi.n	802ac1e <_vfiprintf_r+0x1fe>
 802ac12:	89ab      	ldrh	r3, [r5, #12]
 802ac14:	059a      	lsls	r2, r3, #22
 802ac16:	d402      	bmi.n	802ac1e <_vfiprintf_r+0x1fe>
 802ac18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ac1a:	f000 ffa3 	bl	802bb64 <__retarget_lock_release_recursive>
 802ac1e:	89ab      	ldrh	r3, [r5, #12]
 802ac20:	065b      	lsls	r3, r3, #25
 802ac22:	f53f af1f 	bmi.w	802aa64 <_vfiprintf_r+0x44>
 802ac26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802ac28:	e71e      	b.n	802aa68 <_vfiprintf_r+0x48>
 802ac2a:	ab03      	add	r3, sp, #12
 802ac2c:	9300      	str	r3, [sp, #0]
 802ac2e:	462a      	mov	r2, r5
 802ac30:	4b05      	ldr	r3, [pc, #20]	@ (802ac48 <_vfiprintf_r+0x228>)
 802ac32:	a904      	add	r1, sp, #16
 802ac34:	4630      	mov	r0, r6
 802ac36:	f000 f879 	bl	802ad2c <_printf_i>
 802ac3a:	e7e4      	b.n	802ac06 <_vfiprintf_r+0x1e6>
 802ac3c:	0802f2b6 	.word	0x0802f2b6
 802ac40:	0802f2c0 	.word	0x0802f2c0
 802ac44:	0802a579 	.word	0x0802a579
 802ac48:	0802a9fb 	.word	0x0802a9fb
 802ac4c:	0802f2bc 	.word	0x0802f2bc

0802ac50 <_printf_common>:
 802ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ac54:	4616      	mov	r6, r2
 802ac56:	4698      	mov	r8, r3
 802ac58:	688a      	ldr	r2, [r1, #8]
 802ac5a:	690b      	ldr	r3, [r1, #16]
 802ac5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802ac60:	4293      	cmp	r3, r2
 802ac62:	bfb8      	it	lt
 802ac64:	4613      	movlt	r3, r2
 802ac66:	6033      	str	r3, [r6, #0]
 802ac68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802ac6c:	4607      	mov	r7, r0
 802ac6e:	460c      	mov	r4, r1
 802ac70:	b10a      	cbz	r2, 802ac76 <_printf_common+0x26>
 802ac72:	3301      	adds	r3, #1
 802ac74:	6033      	str	r3, [r6, #0]
 802ac76:	6823      	ldr	r3, [r4, #0]
 802ac78:	0699      	lsls	r1, r3, #26
 802ac7a:	bf42      	ittt	mi
 802ac7c:	6833      	ldrmi	r3, [r6, #0]
 802ac7e:	3302      	addmi	r3, #2
 802ac80:	6033      	strmi	r3, [r6, #0]
 802ac82:	6825      	ldr	r5, [r4, #0]
 802ac84:	f015 0506 	ands.w	r5, r5, #6
 802ac88:	d106      	bne.n	802ac98 <_printf_common+0x48>
 802ac8a:	f104 0a19 	add.w	sl, r4, #25
 802ac8e:	68e3      	ldr	r3, [r4, #12]
 802ac90:	6832      	ldr	r2, [r6, #0]
 802ac92:	1a9b      	subs	r3, r3, r2
 802ac94:	42ab      	cmp	r3, r5
 802ac96:	dc26      	bgt.n	802ace6 <_printf_common+0x96>
 802ac98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802ac9c:	6822      	ldr	r2, [r4, #0]
 802ac9e:	3b00      	subs	r3, #0
 802aca0:	bf18      	it	ne
 802aca2:	2301      	movne	r3, #1
 802aca4:	0692      	lsls	r2, r2, #26
 802aca6:	d42b      	bmi.n	802ad00 <_printf_common+0xb0>
 802aca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802acac:	4641      	mov	r1, r8
 802acae:	4638      	mov	r0, r7
 802acb0:	47c8      	blx	r9
 802acb2:	3001      	adds	r0, #1
 802acb4:	d01e      	beq.n	802acf4 <_printf_common+0xa4>
 802acb6:	6823      	ldr	r3, [r4, #0]
 802acb8:	6922      	ldr	r2, [r4, #16]
 802acba:	f003 0306 	and.w	r3, r3, #6
 802acbe:	2b04      	cmp	r3, #4
 802acc0:	bf02      	ittt	eq
 802acc2:	68e5      	ldreq	r5, [r4, #12]
 802acc4:	6833      	ldreq	r3, [r6, #0]
 802acc6:	1aed      	subeq	r5, r5, r3
 802acc8:	68a3      	ldr	r3, [r4, #8]
 802acca:	bf0c      	ite	eq
 802accc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802acd0:	2500      	movne	r5, #0
 802acd2:	4293      	cmp	r3, r2
 802acd4:	bfc4      	itt	gt
 802acd6:	1a9b      	subgt	r3, r3, r2
 802acd8:	18ed      	addgt	r5, r5, r3
 802acda:	2600      	movs	r6, #0
 802acdc:	341a      	adds	r4, #26
 802acde:	42b5      	cmp	r5, r6
 802ace0:	d11a      	bne.n	802ad18 <_printf_common+0xc8>
 802ace2:	2000      	movs	r0, #0
 802ace4:	e008      	b.n	802acf8 <_printf_common+0xa8>
 802ace6:	2301      	movs	r3, #1
 802ace8:	4652      	mov	r2, sl
 802acea:	4641      	mov	r1, r8
 802acec:	4638      	mov	r0, r7
 802acee:	47c8      	blx	r9
 802acf0:	3001      	adds	r0, #1
 802acf2:	d103      	bne.n	802acfc <_printf_common+0xac>
 802acf4:	f04f 30ff 	mov.w	r0, #4294967295
 802acf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802acfc:	3501      	adds	r5, #1
 802acfe:	e7c6      	b.n	802ac8e <_printf_common+0x3e>
 802ad00:	18e1      	adds	r1, r4, r3
 802ad02:	1c5a      	adds	r2, r3, #1
 802ad04:	2030      	movs	r0, #48	@ 0x30
 802ad06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802ad0a:	4422      	add	r2, r4
 802ad0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802ad10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802ad14:	3302      	adds	r3, #2
 802ad16:	e7c7      	b.n	802aca8 <_printf_common+0x58>
 802ad18:	2301      	movs	r3, #1
 802ad1a:	4622      	mov	r2, r4
 802ad1c:	4641      	mov	r1, r8
 802ad1e:	4638      	mov	r0, r7
 802ad20:	47c8      	blx	r9
 802ad22:	3001      	adds	r0, #1
 802ad24:	d0e6      	beq.n	802acf4 <_printf_common+0xa4>
 802ad26:	3601      	adds	r6, #1
 802ad28:	e7d9      	b.n	802acde <_printf_common+0x8e>
	...

0802ad2c <_printf_i>:
 802ad2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ad30:	7e0f      	ldrb	r7, [r1, #24]
 802ad32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802ad34:	2f78      	cmp	r7, #120	@ 0x78
 802ad36:	4691      	mov	r9, r2
 802ad38:	4680      	mov	r8, r0
 802ad3a:	460c      	mov	r4, r1
 802ad3c:	469a      	mov	sl, r3
 802ad3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802ad42:	d807      	bhi.n	802ad54 <_printf_i+0x28>
 802ad44:	2f62      	cmp	r7, #98	@ 0x62
 802ad46:	d80a      	bhi.n	802ad5e <_printf_i+0x32>
 802ad48:	2f00      	cmp	r7, #0
 802ad4a:	f000 80d1 	beq.w	802aef0 <_printf_i+0x1c4>
 802ad4e:	2f58      	cmp	r7, #88	@ 0x58
 802ad50:	f000 80b8 	beq.w	802aec4 <_printf_i+0x198>
 802ad54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ad58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802ad5c:	e03a      	b.n	802add4 <_printf_i+0xa8>
 802ad5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802ad62:	2b15      	cmp	r3, #21
 802ad64:	d8f6      	bhi.n	802ad54 <_printf_i+0x28>
 802ad66:	a101      	add	r1, pc, #4	@ (adr r1, 802ad6c <_printf_i+0x40>)
 802ad68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ad6c:	0802adc5 	.word	0x0802adc5
 802ad70:	0802add9 	.word	0x0802add9
 802ad74:	0802ad55 	.word	0x0802ad55
 802ad78:	0802ad55 	.word	0x0802ad55
 802ad7c:	0802ad55 	.word	0x0802ad55
 802ad80:	0802ad55 	.word	0x0802ad55
 802ad84:	0802add9 	.word	0x0802add9
 802ad88:	0802ad55 	.word	0x0802ad55
 802ad8c:	0802ad55 	.word	0x0802ad55
 802ad90:	0802ad55 	.word	0x0802ad55
 802ad94:	0802ad55 	.word	0x0802ad55
 802ad98:	0802aed7 	.word	0x0802aed7
 802ad9c:	0802ae03 	.word	0x0802ae03
 802ada0:	0802ae91 	.word	0x0802ae91
 802ada4:	0802ad55 	.word	0x0802ad55
 802ada8:	0802ad55 	.word	0x0802ad55
 802adac:	0802aef9 	.word	0x0802aef9
 802adb0:	0802ad55 	.word	0x0802ad55
 802adb4:	0802ae03 	.word	0x0802ae03
 802adb8:	0802ad55 	.word	0x0802ad55
 802adbc:	0802ad55 	.word	0x0802ad55
 802adc0:	0802ae99 	.word	0x0802ae99
 802adc4:	6833      	ldr	r3, [r6, #0]
 802adc6:	1d1a      	adds	r2, r3, #4
 802adc8:	681b      	ldr	r3, [r3, #0]
 802adca:	6032      	str	r2, [r6, #0]
 802adcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802add0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802add4:	2301      	movs	r3, #1
 802add6:	e09c      	b.n	802af12 <_printf_i+0x1e6>
 802add8:	6833      	ldr	r3, [r6, #0]
 802adda:	6820      	ldr	r0, [r4, #0]
 802addc:	1d19      	adds	r1, r3, #4
 802adde:	6031      	str	r1, [r6, #0]
 802ade0:	0606      	lsls	r6, r0, #24
 802ade2:	d501      	bpl.n	802ade8 <_printf_i+0xbc>
 802ade4:	681d      	ldr	r5, [r3, #0]
 802ade6:	e003      	b.n	802adf0 <_printf_i+0xc4>
 802ade8:	0645      	lsls	r5, r0, #25
 802adea:	d5fb      	bpl.n	802ade4 <_printf_i+0xb8>
 802adec:	f9b3 5000 	ldrsh.w	r5, [r3]
 802adf0:	2d00      	cmp	r5, #0
 802adf2:	da03      	bge.n	802adfc <_printf_i+0xd0>
 802adf4:	232d      	movs	r3, #45	@ 0x2d
 802adf6:	426d      	negs	r5, r5
 802adf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802adfc:	4858      	ldr	r0, [pc, #352]	@ (802af60 <_printf_i+0x234>)
 802adfe:	230a      	movs	r3, #10
 802ae00:	e011      	b.n	802ae26 <_printf_i+0xfa>
 802ae02:	6821      	ldr	r1, [r4, #0]
 802ae04:	6833      	ldr	r3, [r6, #0]
 802ae06:	0608      	lsls	r0, r1, #24
 802ae08:	f853 5b04 	ldr.w	r5, [r3], #4
 802ae0c:	d402      	bmi.n	802ae14 <_printf_i+0xe8>
 802ae0e:	0649      	lsls	r1, r1, #25
 802ae10:	bf48      	it	mi
 802ae12:	b2ad      	uxthmi	r5, r5
 802ae14:	2f6f      	cmp	r7, #111	@ 0x6f
 802ae16:	4852      	ldr	r0, [pc, #328]	@ (802af60 <_printf_i+0x234>)
 802ae18:	6033      	str	r3, [r6, #0]
 802ae1a:	bf14      	ite	ne
 802ae1c:	230a      	movne	r3, #10
 802ae1e:	2308      	moveq	r3, #8
 802ae20:	2100      	movs	r1, #0
 802ae22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802ae26:	6866      	ldr	r6, [r4, #4]
 802ae28:	60a6      	str	r6, [r4, #8]
 802ae2a:	2e00      	cmp	r6, #0
 802ae2c:	db05      	blt.n	802ae3a <_printf_i+0x10e>
 802ae2e:	6821      	ldr	r1, [r4, #0]
 802ae30:	432e      	orrs	r6, r5
 802ae32:	f021 0104 	bic.w	r1, r1, #4
 802ae36:	6021      	str	r1, [r4, #0]
 802ae38:	d04b      	beq.n	802aed2 <_printf_i+0x1a6>
 802ae3a:	4616      	mov	r6, r2
 802ae3c:	fbb5 f1f3 	udiv	r1, r5, r3
 802ae40:	fb03 5711 	mls	r7, r3, r1, r5
 802ae44:	5dc7      	ldrb	r7, [r0, r7]
 802ae46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802ae4a:	462f      	mov	r7, r5
 802ae4c:	42bb      	cmp	r3, r7
 802ae4e:	460d      	mov	r5, r1
 802ae50:	d9f4      	bls.n	802ae3c <_printf_i+0x110>
 802ae52:	2b08      	cmp	r3, #8
 802ae54:	d10b      	bne.n	802ae6e <_printf_i+0x142>
 802ae56:	6823      	ldr	r3, [r4, #0]
 802ae58:	07df      	lsls	r7, r3, #31
 802ae5a:	d508      	bpl.n	802ae6e <_printf_i+0x142>
 802ae5c:	6923      	ldr	r3, [r4, #16]
 802ae5e:	6861      	ldr	r1, [r4, #4]
 802ae60:	4299      	cmp	r1, r3
 802ae62:	bfde      	ittt	le
 802ae64:	2330      	movle	r3, #48	@ 0x30
 802ae66:	f806 3c01 	strble.w	r3, [r6, #-1]
 802ae6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 802ae6e:	1b92      	subs	r2, r2, r6
 802ae70:	6122      	str	r2, [r4, #16]
 802ae72:	f8cd a000 	str.w	sl, [sp]
 802ae76:	464b      	mov	r3, r9
 802ae78:	aa03      	add	r2, sp, #12
 802ae7a:	4621      	mov	r1, r4
 802ae7c:	4640      	mov	r0, r8
 802ae7e:	f7ff fee7 	bl	802ac50 <_printf_common>
 802ae82:	3001      	adds	r0, #1
 802ae84:	d14a      	bne.n	802af1c <_printf_i+0x1f0>
 802ae86:	f04f 30ff 	mov.w	r0, #4294967295
 802ae8a:	b004      	add	sp, #16
 802ae8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ae90:	6823      	ldr	r3, [r4, #0]
 802ae92:	f043 0320 	orr.w	r3, r3, #32
 802ae96:	6023      	str	r3, [r4, #0]
 802ae98:	4832      	ldr	r0, [pc, #200]	@ (802af64 <_printf_i+0x238>)
 802ae9a:	2778      	movs	r7, #120	@ 0x78
 802ae9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802aea0:	6823      	ldr	r3, [r4, #0]
 802aea2:	6831      	ldr	r1, [r6, #0]
 802aea4:	061f      	lsls	r7, r3, #24
 802aea6:	f851 5b04 	ldr.w	r5, [r1], #4
 802aeaa:	d402      	bmi.n	802aeb2 <_printf_i+0x186>
 802aeac:	065f      	lsls	r7, r3, #25
 802aeae:	bf48      	it	mi
 802aeb0:	b2ad      	uxthmi	r5, r5
 802aeb2:	6031      	str	r1, [r6, #0]
 802aeb4:	07d9      	lsls	r1, r3, #31
 802aeb6:	bf44      	itt	mi
 802aeb8:	f043 0320 	orrmi.w	r3, r3, #32
 802aebc:	6023      	strmi	r3, [r4, #0]
 802aebe:	b11d      	cbz	r5, 802aec8 <_printf_i+0x19c>
 802aec0:	2310      	movs	r3, #16
 802aec2:	e7ad      	b.n	802ae20 <_printf_i+0xf4>
 802aec4:	4826      	ldr	r0, [pc, #152]	@ (802af60 <_printf_i+0x234>)
 802aec6:	e7e9      	b.n	802ae9c <_printf_i+0x170>
 802aec8:	6823      	ldr	r3, [r4, #0]
 802aeca:	f023 0320 	bic.w	r3, r3, #32
 802aece:	6023      	str	r3, [r4, #0]
 802aed0:	e7f6      	b.n	802aec0 <_printf_i+0x194>
 802aed2:	4616      	mov	r6, r2
 802aed4:	e7bd      	b.n	802ae52 <_printf_i+0x126>
 802aed6:	6833      	ldr	r3, [r6, #0]
 802aed8:	6825      	ldr	r5, [r4, #0]
 802aeda:	6961      	ldr	r1, [r4, #20]
 802aedc:	1d18      	adds	r0, r3, #4
 802aede:	6030      	str	r0, [r6, #0]
 802aee0:	062e      	lsls	r6, r5, #24
 802aee2:	681b      	ldr	r3, [r3, #0]
 802aee4:	d501      	bpl.n	802aeea <_printf_i+0x1be>
 802aee6:	6019      	str	r1, [r3, #0]
 802aee8:	e002      	b.n	802aef0 <_printf_i+0x1c4>
 802aeea:	0668      	lsls	r0, r5, #25
 802aeec:	d5fb      	bpl.n	802aee6 <_printf_i+0x1ba>
 802aeee:	8019      	strh	r1, [r3, #0]
 802aef0:	2300      	movs	r3, #0
 802aef2:	6123      	str	r3, [r4, #16]
 802aef4:	4616      	mov	r6, r2
 802aef6:	e7bc      	b.n	802ae72 <_printf_i+0x146>
 802aef8:	6833      	ldr	r3, [r6, #0]
 802aefa:	1d1a      	adds	r2, r3, #4
 802aefc:	6032      	str	r2, [r6, #0]
 802aefe:	681e      	ldr	r6, [r3, #0]
 802af00:	6862      	ldr	r2, [r4, #4]
 802af02:	2100      	movs	r1, #0
 802af04:	4630      	mov	r0, r6
 802af06:	f7f5 f983 	bl	8020210 <memchr>
 802af0a:	b108      	cbz	r0, 802af10 <_printf_i+0x1e4>
 802af0c:	1b80      	subs	r0, r0, r6
 802af0e:	6060      	str	r0, [r4, #4]
 802af10:	6863      	ldr	r3, [r4, #4]
 802af12:	6123      	str	r3, [r4, #16]
 802af14:	2300      	movs	r3, #0
 802af16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802af1a:	e7aa      	b.n	802ae72 <_printf_i+0x146>
 802af1c:	6923      	ldr	r3, [r4, #16]
 802af1e:	4632      	mov	r2, r6
 802af20:	4649      	mov	r1, r9
 802af22:	4640      	mov	r0, r8
 802af24:	47d0      	blx	sl
 802af26:	3001      	adds	r0, #1
 802af28:	d0ad      	beq.n	802ae86 <_printf_i+0x15a>
 802af2a:	6823      	ldr	r3, [r4, #0]
 802af2c:	079b      	lsls	r3, r3, #30
 802af2e:	d413      	bmi.n	802af58 <_printf_i+0x22c>
 802af30:	68e0      	ldr	r0, [r4, #12]
 802af32:	9b03      	ldr	r3, [sp, #12]
 802af34:	4298      	cmp	r0, r3
 802af36:	bfb8      	it	lt
 802af38:	4618      	movlt	r0, r3
 802af3a:	e7a6      	b.n	802ae8a <_printf_i+0x15e>
 802af3c:	2301      	movs	r3, #1
 802af3e:	4632      	mov	r2, r6
 802af40:	4649      	mov	r1, r9
 802af42:	4640      	mov	r0, r8
 802af44:	47d0      	blx	sl
 802af46:	3001      	adds	r0, #1
 802af48:	d09d      	beq.n	802ae86 <_printf_i+0x15a>
 802af4a:	3501      	adds	r5, #1
 802af4c:	68e3      	ldr	r3, [r4, #12]
 802af4e:	9903      	ldr	r1, [sp, #12]
 802af50:	1a5b      	subs	r3, r3, r1
 802af52:	42ab      	cmp	r3, r5
 802af54:	dcf2      	bgt.n	802af3c <_printf_i+0x210>
 802af56:	e7eb      	b.n	802af30 <_printf_i+0x204>
 802af58:	2500      	movs	r5, #0
 802af5a:	f104 0619 	add.w	r6, r4, #25
 802af5e:	e7f5      	b.n	802af4c <_printf_i+0x220>
 802af60:	0802f2c7 	.word	0x0802f2c7
 802af64:	0802f2d8 	.word	0x0802f2d8

0802af68 <_scanf_float>:
 802af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af6c:	b087      	sub	sp, #28
 802af6e:	4691      	mov	r9, r2
 802af70:	9303      	str	r3, [sp, #12]
 802af72:	688b      	ldr	r3, [r1, #8]
 802af74:	1e5a      	subs	r2, r3, #1
 802af76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802af7a:	bf81      	itttt	hi
 802af7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802af80:	eb03 0b05 	addhi.w	fp, r3, r5
 802af84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802af88:	608b      	strhi	r3, [r1, #8]
 802af8a:	680b      	ldr	r3, [r1, #0]
 802af8c:	460a      	mov	r2, r1
 802af8e:	f04f 0500 	mov.w	r5, #0
 802af92:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 802af96:	f842 3b1c 	str.w	r3, [r2], #28
 802af9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802af9e:	4680      	mov	r8, r0
 802afa0:	460c      	mov	r4, r1
 802afa2:	bf98      	it	ls
 802afa4:	f04f 0b00 	movls.w	fp, #0
 802afa8:	9201      	str	r2, [sp, #4]
 802afaa:	4616      	mov	r6, r2
 802afac:	46aa      	mov	sl, r5
 802afae:	462f      	mov	r7, r5
 802afb0:	9502      	str	r5, [sp, #8]
 802afb2:	68a2      	ldr	r2, [r4, #8]
 802afb4:	b15a      	cbz	r2, 802afce <_scanf_float+0x66>
 802afb6:	f8d9 3000 	ldr.w	r3, [r9]
 802afba:	781b      	ldrb	r3, [r3, #0]
 802afbc:	2b4e      	cmp	r3, #78	@ 0x4e
 802afbe:	d863      	bhi.n	802b088 <_scanf_float+0x120>
 802afc0:	2b40      	cmp	r3, #64	@ 0x40
 802afc2:	d83b      	bhi.n	802b03c <_scanf_float+0xd4>
 802afc4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802afc8:	b2c8      	uxtb	r0, r1
 802afca:	280e      	cmp	r0, #14
 802afcc:	d939      	bls.n	802b042 <_scanf_float+0xda>
 802afce:	b11f      	cbz	r7, 802afd8 <_scanf_float+0x70>
 802afd0:	6823      	ldr	r3, [r4, #0]
 802afd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802afd6:	6023      	str	r3, [r4, #0]
 802afd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 802afdc:	f1ba 0f01 	cmp.w	sl, #1
 802afe0:	f200 8114 	bhi.w	802b20c <_scanf_float+0x2a4>
 802afe4:	9b01      	ldr	r3, [sp, #4]
 802afe6:	429e      	cmp	r6, r3
 802afe8:	f200 8105 	bhi.w	802b1f6 <_scanf_float+0x28e>
 802afec:	2001      	movs	r0, #1
 802afee:	b007      	add	sp, #28
 802aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aff4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 802aff8:	2a0d      	cmp	r2, #13
 802affa:	d8e8      	bhi.n	802afce <_scanf_float+0x66>
 802affc:	a101      	add	r1, pc, #4	@ (adr r1, 802b004 <_scanf_float+0x9c>)
 802affe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802b002:	bf00      	nop
 802b004:	0802b14d 	.word	0x0802b14d
 802b008:	0802afcf 	.word	0x0802afcf
 802b00c:	0802afcf 	.word	0x0802afcf
 802b010:	0802afcf 	.word	0x0802afcf
 802b014:	0802b1a9 	.word	0x0802b1a9
 802b018:	0802b183 	.word	0x0802b183
 802b01c:	0802afcf 	.word	0x0802afcf
 802b020:	0802afcf 	.word	0x0802afcf
 802b024:	0802b15b 	.word	0x0802b15b
 802b028:	0802afcf 	.word	0x0802afcf
 802b02c:	0802afcf 	.word	0x0802afcf
 802b030:	0802afcf 	.word	0x0802afcf
 802b034:	0802afcf 	.word	0x0802afcf
 802b038:	0802b117 	.word	0x0802b117
 802b03c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 802b040:	e7da      	b.n	802aff8 <_scanf_float+0x90>
 802b042:	290e      	cmp	r1, #14
 802b044:	d8c3      	bhi.n	802afce <_scanf_float+0x66>
 802b046:	a001      	add	r0, pc, #4	@ (adr r0, 802b04c <_scanf_float+0xe4>)
 802b048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802b04c:	0802b107 	.word	0x0802b107
 802b050:	0802afcf 	.word	0x0802afcf
 802b054:	0802b107 	.word	0x0802b107
 802b058:	0802b197 	.word	0x0802b197
 802b05c:	0802afcf 	.word	0x0802afcf
 802b060:	0802b0a9 	.word	0x0802b0a9
 802b064:	0802b0ed 	.word	0x0802b0ed
 802b068:	0802b0ed 	.word	0x0802b0ed
 802b06c:	0802b0ed 	.word	0x0802b0ed
 802b070:	0802b0ed 	.word	0x0802b0ed
 802b074:	0802b0ed 	.word	0x0802b0ed
 802b078:	0802b0ed 	.word	0x0802b0ed
 802b07c:	0802b0ed 	.word	0x0802b0ed
 802b080:	0802b0ed 	.word	0x0802b0ed
 802b084:	0802b0ed 	.word	0x0802b0ed
 802b088:	2b6e      	cmp	r3, #110	@ 0x6e
 802b08a:	d809      	bhi.n	802b0a0 <_scanf_float+0x138>
 802b08c:	2b60      	cmp	r3, #96	@ 0x60
 802b08e:	d8b1      	bhi.n	802aff4 <_scanf_float+0x8c>
 802b090:	2b54      	cmp	r3, #84	@ 0x54
 802b092:	d07b      	beq.n	802b18c <_scanf_float+0x224>
 802b094:	2b59      	cmp	r3, #89	@ 0x59
 802b096:	d19a      	bne.n	802afce <_scanf_float+0x66>
 802b098:	2d07      	cmp	r5, #7
 802b09a:	d198      	bne.n	802afce <_scanf_float+0x66>
 802b09c:	2508      	movs	r5, #8
 802b09e:	e02f      	b.n	802b100 <_scanf_float+0x198>
 802b0a0:	2b74      	cmp	r3, #116	@ 0x74
 802b0a2:	d073      	beq.n	802b18c <_scanf_float+0x224>
 802b0a4:	2b79      	cmp	r3, #121	@ 0x79
 802b0a6:	e7f6      	b.n	802b096 <_scanf_float+0x12e>
 802b0a8:	6821      	ldr	r1, [r4, #0]
 802b0aa:	05c8      	lsls	r0, r1, #23
 802b0ac:	d51e      	bpl.n	802b0ec <_scanf_float+0x184>
 802b0ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802b0b2:	6021      	str	r1, [r4, #0]
 802b0b4:	3701      	adds	r7, #1
 802b0b6:	f1bb 0f00 	cmp.w	fp, #0
 802b0ba:	d003      	beq.n	802b0c4 <_scanf_float+0x15c>
 802b0bc:	3201      	adds	r2, #1
 802b0be:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b0c2:	60a2      	str	r2, [r4, #8]
 802b0c4:	68a3      	ldr	r3, [r4, #8]
 802b0c6:	3b01      	subs	r3, #1
 802b0c8:	60a3      	str	r3, [r4, #8]
 802b0ca:	6923      	ldr	r3, [r4, #16]
 802b0cc:	3301      	adds	r3, #1
 802b0ce:	6123      	str	r3, [r4, #16]
 802b0d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802b0d4:	3b01      	subs	r3, #1
 802b0d6:	2b00      	cmp	r3, #0
 802b0d8:	f8c9 3004 	str.w	r3, [r9, #4]
 802b0dc:	f340 8082 	ble.w	802b1e4 <_scanf_float+0x27c>
 802b0e0:	f8d9 3000 	ldr.w	r3, [r9]
 802b0e4:	3301      	adds	r3, #1
 802b0e6:	f8c9 3000 	str.w	r3, [r9]
 802b0ea:	e762      	b.n	802afb2 <_scanf_float+0x4a>
 802b0ec:	eb1a 0105 	adds.w	r1, sl, r5
 802b0f0:	f47f af6d 	bne.w	802afce <_scanf_float+0x66>
 802b0f4:	6822      	ldr	r2, [r4, #0]
 802b0f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 802b0fa:	6022      	str	r2, [r4, #0]
 802b0fc:	460d      	mov	r5, r1
 802b0fe:	468a      	mov	sl, r1
 802b100:	f806 3b01 	strb.w	r3, [r6], #1
 802b104:	e7de      	b.n	802b0c4 <_scanf_float+0x15c>
 802b106:	6822      	ldr	r2, [r4, #0]
 802b108:	0610      	lsls	r0, r2, #24
 802b10a:	f57f af60 	bpl.w	802afce <_scanf_float+0x66>
 802b10e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802b112:	6022      	str	r2, [r4, #0]
 802b114:	e7f4      	b.n	802b100 <_scanf_float+0x198>
 802b116:	f1ba 0f00 	cmp.w	sl, #0
 802b11a:	d10c      	bne.n	802b136 <_scanf_float+0x1ce>
 802b11c:	b977      	cbnz	r7, 802b13c <_scanf_float+0x1d4>
 802b11e:	6822      	ldr	r2, [r4, #0]
 802b120:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 802b124:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802b128:	d108      	bne.n	802b13c <_scanf_float+0x1d4>
 802b12a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802b12e:	6022      	str	r2, [r4, #0]
 802b130:	f04f 0a01 	mov.w	sl, #1
 802b134:	e7e4      	b.n	802b100 <_scanf_float+0x198>
 802b136:	f1ba 0f02 	cmp.w	sl, #2
 802b13a:	d050      	beq.n	802b1de <_scanf_float+0x276>
 802b13c:	2d01      	cmp	r5, #1
 802b13e:	d002      	beq.n	802b146 <_scanf_float+0x1de>
 802b140:	2d04      	cmp	r5, #4
 802b142:	f47f af44 	bne.w	802afce <_scanf_float+0x66>
 802b146:	3501      	adds	r5, #1
 802b148:	b2ed      	uxtb	r5, r5
 802b14a:	e7d9      	b.n	802b100 <_scanf_float+0x198>
 802b14c:	f1ba 0f01 	cmp.w	sl, #1
 802b150:	f47f af3d 	bne.w	802afce <_scanf_float+0x66>
 802b154:	f04f 0a02 	mov.w	sl, #2
 802b158:	e7d2      	b.n	802b100 <_scanf_float+0x198>
 802b15a:	b975      	cbnz	r5, 802b17a <_scanf_float+0x212>
 802b15c:	2f00      	cmp	r7, #0
 802b15e:	f47f af37 	bne.w	802afd0 <_scanf_float+0x68>
 802b162:	6822      	ldr	r2, [r4, #0]
 802b164:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 802b168:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802b16c:	f040 8103 	bne.w	802b376 <_scanf_float+0x40e>
 802b170:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802b174:	6022      	str	r2, [r4, #0]
 802b176:	2501      	movs	r5, #1
 802b178:	e7c2      	b.n	802b100 <_scanf_float+0x198>
 802b17a:	2d03      	cmp	r5, #3
 802b17c:	d0e3      	beq.n	802b146 <_scanf_float+0x1de>
 802b17e:	2d05      	cmp	r5, #5
 802b180:	e7df      	b.n	802b142 <_scanf_float+0x1da>
 802b182:	2d02      	cmp	r5, #2
 802b184:	f47f af23 	bne.w	802afce <_scanf_float+0x66>
 802b188:	2503      	movs	r5, #3
 802b18a:	e7b9      	b.n	802b100 <_scanf_float+0x198>
 802b18c:	2d06      	cmp	r5, #6
 802b18e:	f47f af1e 	bne.w	802afce <_scanf_float+0x66>
 802b192:	2507      	movs	r5, #7
 802b194:	e7b4      	b.n	802b100 <_scanf_float+0x198>
 802b196:	6822      	ldr	r2, [r4, #0]
 802b198:	0591      	lsls	r1, r2, #22
 802b19a:	f57f af18 	bpl.w	802afce <_scanf_float+0x66>
 802b19e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 802b1a2:	6022      	str	r2, [r4, #0]
 802b1a4:	9702      	str	r7, [sp, #8]
 802b1a6:	e7ab      	b.n	802b100 <_scanf_float+0x198>
 802b1a8:	6822      	ldr	r2, [r4, #0]
 802b1aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 802b1ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 802b1b2:	d005      	beq.n	802b1c0 <_scanf_float+0x258>
 802b1b4:	0550      	lsls	r0, r2, #21
 802b1b6:	f57f af0a 	bpl.w	802afce <_scanf_float+0x66>
 802b1ba:	2f00      	cmp	r7, #0
 802b1bc:	f000 80db 	beq.w	802b376 <_scanf_float+0x40e>
 802b1c0:	0591      	lsls	r1, r2, #22
 802b1c2:	bf58      	it	pl
 802b1c4:	9902      	ldrpl	r1, [sp, #8]
 802b1c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802b1ca:	bf58      	it	pl
 802b1cc:	1a79      	subpl	r1, r7, r1
 802b1ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 802b1d2:	bf58      	it	pl
 802b1d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802b1d8:	6022      	str	r2, [r4, #0]
 802b1da:	2700      	movs	r7, #0
 802b1dc:	e790      	b.n	802b100 <_scanf_float+0x198>
 802b1de:	f04f 0a03 	mov.w	sl, #3
 802b1e2:	e78d      	b.n	802b100 <_scanf_float+0x198>
 802b1e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802b1e8:	4649      	mov	r1, r9
 802b1ea:	4640      	mov	r0, r8
 802b1ec:	4798      	blx	r3
 802b1ee:	2800      	cmp	r0, #0
 802b1f0:	f43f aedf 	beq.w	802afb2 <_scanf_float+0x4a>
 802b1f4:	e6eb      	b.n	802afce <_scanf_float+0x66>
 802b1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b1fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802b1fe:	464a      	mov	r2, r9
 802b200:	4640      	mov	r0, r8
 802b202:	4798      	blx	r3
 802b204:	6923      	ldr	r3, [r4, #16]
 802b206:	3b01      	subs	r3, #1
 802b208:	6123      	str	r3, [r4, #16]
 802b20a:	e6eb      	b.n	802afe4 <_scanf_float+0x7c>
 802b20c:	1e6b      	subs	r3, r5, #1
 802b20e:	2b06      	cmp	r3, #6
 802b210:	d824      	bhi.n	802b25c <_scanf_float+0x2f4>
 802b212:	2d02      	cmp	r5, #2
 802b214:	d836      	bhi.n	802b284 <_scanf_float+0x31c>
 802b216:	9b01      	ldr	r3, [sp, #4]
 802b218:	429e      	cmp	r6, r3
 802b21a:	f67f aee7 	bls.w	802afec <_scanf_float+0x84>
 802b21e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802b226:	464a      	mov	r2, r9
 802b228:	4640      	mov	r0, r8
 802b22a:	4798      	blx	r3
 802b22c:	6923      	ldr	r3, [r4, #16]
 802b22e:	3b01      	subs	r3, #1
 802b230:	6123      	str	r3, [r4, #16]
 802b232:	e7f0      	b.n	802b216 <_scanf_float+0x2ae>
 802b234:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b238:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 802b23c:	464a      	mov	r2, r9
 802b23e:	4640      	mov	r0, r8
 802b240:	4798      	blx	r3
 802b242:	6923      	ldr	r3, [r4, #16]
 802b244:	3b01      	subs	r3, #1
 802b246:	6123      	str	r3, [r4, #16]
 802b248:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b24c:	fa5f fa8a 	uxtb.w	sl, sl
 802b250:	f1ba 0f02 	cmp.w	sl, #2
 802b254:	d1ee      	bne.n	802b234 <_scanf_float+0x2cc>
 802b256:	3d03      	subs	r5, #3
 802b258:	b2ed      	uxtb	r5, r5
 802b25a:	1b76      	subs	r6, r6, r5
 802b25c:	6823      	ldr	r3, [r4, #0]
 802b25e:	05da      	lsls	r2, r3, #23
 802b260:	d530      	bpl.n	802b2c4 <_scanf_float+0x35c>
 802b262:	055b      	lsls	r3, r3, #21
 802b264:	d511      	bpl.n	802b28a <_scanf_float+0x322>
 802b266:	9b01      	ldr	r3, [sp, #4]
 802b268:	429e      	cmp	r6, r3
 802b26a:	f67f aebf 	bls.w	802afec <_scanf_float+0x84>
 802b26e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b272:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802b276:	464a      	mov	r2, r9
 802b278:	4640      	mov	r0, r8
 802b27a:	4798      	blx	r3
 802b27c:	6923      	ldr	r3, [r4, #16]
 802b27e:	3b01      	subs	r3, #1
 802b280:	6123      	str	r3, [r4, #16]
 802b282:	e7f0      	b.n	802b266 <_scanf_float+0x2fe>
 802b284:	46aa      	mov	sl, r5
 802b286:	46b3      	mov	fp, r6
 802b288:	e7de      	b.n	802b248 <_scanf_float+0x2e0>
 802b28a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802b28e:	6923      	ldr	r3, [r4, #16]
 802b290:	2965      	cmp	r1, #101	@ 0x65
 802b292:	f103 33ff 	add.w	r3, r3, #4294967295
 802b296:	f106 35ff 	add.w	r5, r6, #4294967295
 802b29a:	6123      	str	r3, [r4, #16]
 802b29c:	d00c      	beq.n	802b2b8 <_scanf_float+0x350>
 802b29e:	2945      	cmp	r1, #69	@ 0x45
 802b2a0:	d00a      	beq.n	802b2b8 <_scanf_float+0x350>
 802b2a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b2a6:	464a      	mov	r2, r9
 802b2a8:	4640      	mov	r0, r8
 802b2aa:	4798      	blx	r3
 802b2ac:	6923      	ldr	r3, [r4, #16]
 802b2ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802b2b2:	3b01      	subs	r3, #1
 802b2b4:	1eb5      	subs	r5, r6, #2
 802b2b6:	6123      	str	r3, [r4, #16]
 802b2b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b2bc:	464a      	mov	r2, r9
 802b2be:	4640      	mov	r0, r8
 802b2c0:	4798      	blx	r3
 802b2c2:	462e      	mov	r6, r5
 802b2c4:	6822      	ldr	r2, [r4, #0]
 802b2c6:	f012 0210 	ands.w	r2, r2, #16
 802b2ca:	d001      	beq.n	802b2d0 <_scanf_float+0x368>
 802b2cc:	2000      	movs	r0, #0
 802b2ce:	e68e      	b.n	802afee <_scanf_float+0x86>
 802b2d0:	7032      	strb	r2, [r6, #0]
 802b2d2:	6823      	ldr	r3, [r4, #0]
 802b2d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 802b2d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802b2dc:	d125      	bne.n	802b32a <_scanf_float+0x3c2>
 802b2de:	9b02      	ldr	r3, [sp, #8]
 802b2e0:	429f      	cmp	r7, r3
 802b2e2:	d00a      	beq.n	802b2fa <_scanf_float+0x392>
 802b2e4:	1bda      	subs	r2, r3, r7
 802b2e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 802b2ea:	429e      	cmp	r6, r3
 802b2ec:	bf28      	it	cs
 802b2ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 802b2f2:	4922      	ldr	r1, [pc, #136]	@ (802b37c <_scanf_float+0x414>)
 802b2f4:	4630      	mov	r0, r6
 802b2f6:	f000 fa6b 	bl	802b7d0 <siprintf>
 802b2fa:	9901      	ldr	r1, [sp, #4]
 802b2fc:	2200      	movs	r2, #0
 802b2fe:	4640      	mov	r0, r8
 802b300:	f002 fdca 	bl	802de98 <_strtod_r>
 802b304:	9b03      	ldr	r3, [sp, #12]
 802b306:	6821      	ldr	r1, [r4, #0]
 802b308:	681b      	ldr	r3, [r3, #0]
 802b30a:	f011 0f02 	tst.w	r1, #2
 802b30e:	ec57 6b10 	vmov	r6, r7, d0
 802b312:	f103 0204 	add.w	r2, r3, #4
 802b316:	d015      	beq.n	802b344 <_scanf_float+0x3dc>
 802b318:	9903      	ldr	r1, [sp, #12]
 802b31a:	600a      	str	r2, [r1, #0]
 802b31c:	681b      	ldr	r3, [r3, #0]
 802b31e:	e9c3 6700 	strd	r6, r7, [r3]
 802b322:	68e3      	ldr	r3, [r4, #12]
 802b324:	3301      	adds	r3, #1
 802b326:	60e3      	str	r3, [r4, #12]
 802b328:	e7d0      	b.n	802b2cc <_scanf_float+0x364>
 802b32a:	9b04      	ldr	r3, [sp, #16]
 802b32c:	2b00      	cmp	r3, #0
 802b32e:	d0e4      	beq.n	802b2fa <_scanf_float+0x392>
 802b330:	9905      	ldr	r1, [sp, #20]
 802b332:	230a      	movs	r3, #10
 802b334:	3101      	adds	r1, #1
 802b336:	4640      	mov	r0, r8
 802b338:	f7ff f872 	bl	802a420 <_strtol_r>
 802b33c:	9b04      	ldr	r3, [sp, #16]
 802b33e:	9e05      	ldr	r6, [sp, #20]
 802b340:	1ac2      	subs	r2, r0, r3
 802b342:	e7d0      	b.n	802b2e6 <_scanf_float+0x37e>
 802b344:	f011 0f04 	tst.w	r1, #4
 802b348:	9903      	ldr	r1, [sp, #12]
 802b34a:	600a      	str	r2, [r1, #0]
 802b34c:	d1e6      	bne.n	802b31c <_scanf_float+0x3b4>
 802b34e:	681d      	ldr	r5, [r3, #0]
 802b350:	4632      	mov	r2, r6
 802b352:	463b      	mov	r3, r7
 802b354:	4630      	mov	r0, r6
 802b356:	4639      	mov	r1, r7
 802b358:	f7f5 fc08 	bl	8020b6c <__aeabi_dcmpun>
 802b35c:	b128      	cbz	r0, 802b36a <_scanf_float+0x402>
 802b35e:	4808      	ldr	r0, [pc, #32]	@ (802b380 <_scanf_float+0x418>)
 802b360:	f000 fc10 	bl	802bb84 <nanf>
 802b364:	ed85 0a00 	vstr	s0, [r5]
 802b368:	e7db      	b.n	802b322 <_scanf_float+0x3ba>
 802b36a:	4630      	mov	r0, r6
 802b36c:	4639      	mov	r1, r7
 802b36e:	f7f5 fc5b 	bl	8020c28 <__aeabi_d2f>
 802b372:	6028      	str	r0, [r5, #0]
 802b374:	e7d5      	b.n	802b322 <_scanf_float+0x3ba>
 802b376:	2700      	movs	r7, #0
 802b378:	e62e      	b.n	802afd8 <_scanf_float+0x70>
 802b37a:	bf00      	nop
 802b37c:	0802f2e9 	.word	0x0802f2e9
 802b380:	0802f2a3 	.word	0x0802f2a3

0802b384 <__sflush_r>:
 802b384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b38c:	0716      	lsls	r6, r2, #28
 802b38e:	4605      	mov	r5, r0
 802b390:	460c      	mov	r4, r1
 802b392:	d454      	bmi.n	802b43e <__sflush_r+0xba>
 802b394:	684b      	ldr	r3, [r1, #4]
 802b396:	2b00      	cmp	r3, #0
 802b398:	dc02      	bgt.n	802b3a0 <__sflush_r+0x1c>
 802b39a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b39c:	2b00      	cmp	r3, #0
 802b39e:	dd48      	ble.n	802b432 <__sflush_r+0xae>
 802b3a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b3a2:	2e00      	cmp	r6, #0
 802b3a4:	d045      	beq.n	802b432 <__sflush_r+0xae>
 802b3a6:	2300      	movs	r3, #0
 802b3a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b3ac:	682f      	ldr	r7, [r5, #0]
 802b3ae:	6a21      	ldr	r1, [r4, #32]
 802b3b0:	602b      	str	r3, [r5, #0]
 802b3b2:	d030      	beq.n	802b416 <__sflush_r+0x92>
 802b3b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b3b6:	89a3      	ldrh	r3, [r4, #12]
 802b3b8:	0759      	lsls	r1, r3, #29
 802b3ba:	d505      	bpl.n	802b3c8 <__sflush_r+0x44>
 802b3bc:	6863      	ldr	r3, [r4, #4]
 802b3be:	1ad2      	subs	r2, r2, r3
 802b3c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b3c2:	b10b      	cbz	r3, 802b3c8 <__sflush_r+0x44>
 802b3c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b3c6:	1ad2      	subs	r2, r2, r3
 802b3c8:	2300      	movs	r3, #0
 802b3ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b3cc:	6a21      	ldr	r1, [r4, #32]
 802b3ce:	4628      	mov	r0, r5
 802b3d0:	47b0      	blx	r6
 802b3d2:	1c43      	adds	r3, r0, #1
 802b3d4:	89a3      	ldrh	r3, [r4, #12]
 802b3d6:	d106      	bne.n	802b3e6 <__sflush_r+0x62>
 802b3d8:	6829      	ldr	r1, [r5, #0]
 802b3da:	291d      	cmp	r1, #29
 802b3dc:	d82b      	bhi.n	802b436 <__sflush_r+0xb2>
 802b3de:	4a2a      	ldr	r2, [pc, #168]	@ (802b488 <__sflush_r+0x104>)
 802b3e0:	40ca      	lsrs	r2, r1
 802b3e2:	07d6      	lsls	r6, r2, #31
 802b3e4:	d527      	bpl.n	802b436 <__sflush_r+0xb2>
 802b3e6:	2200      	movs	r2, #0
 802b3e8:	6062      	str	r2, [r4, #4]
 802b3ea:	04d9      	lsls	r1, r3, #19
 802b3ec:	6922      	ldr	r2, [r4, #16]
 802b3ee:	6022      	str	r2, [r4, #0]
 802b3f0:	d504      	bpl.n	802b3fc <__sflush_r+0x78>
 802b3f2:	1c42      	adds	r2, r0, #1
 802b3f4:	d101      	bne.n	802b3fa <__sflush_r+0x76>
 802b3f6:	682b      	ldr	r3, [r5, #0]
 802b3f8:	b903      	cbnz	r3, 802b3fc <__sflush_r+0x78>
 802b3fa:	6560      	str	r0, [r4, #84]	@ 0x54
 802b3fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b3fe:	602f      	str	r7, [r5, #0]
 802b400:	b1b9      	cbz	r1, 802b432 <__sflush_r+0xae>
 802b402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b406:	4299      	cmp	r1, r3
 802b408:	d002      	beq.n	802b410 <__sflush_r+0x8c>
 802b40a:	4628      	mov	r0, r5
 802b40c:	f001 fa20 	bl	802c850 <_free_r>
 802b410:	2300      	movs	r3, #0
 802b412:	6363      	str	r3, [r4, #52]	@ 0x34
 802b414:	e00d      	b.n	802b432 <__sflush_r+0xae>
 802b416:	2301      	movs	r3, #1
 802b418:	4628      	mov	r0, r5
 802b41a:	47b0      	blx	r6
 802b41c:	4602      	mov	r2, r0
 802b41e:	1c50      	adds	r0, r2, #1
 802b420:	d1c9      	bne.n	802b3b6 <__sflush_r+0x32>
 802b422:	682b      	ldr	r3, [r5, #0]
 802b424:	2b00      	cmp	r3, #0
 802b426:	d0c6      	beq.n	802b3b6 <__sflush_r+0x32>
 802b428:	2b1d      	cmp	r3, #29
 802b42a:	d001      	beq.n	802b430 <__sflush_r+0xac>
 802b42c:	2b16      	cmp	r3, #22
 802b42e:	d11e      	bne.n	802b46e <__sflush_r+0xea>
 802b430:	602f      	str	r7, [r5, #0]
 802b432:	2000      	movs	r0, #0
 802b434:	e022      	b.n	802b47c <__sflush_r+0xf8>
 802b436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b43a:	b21b      	sxth	r3, r3
 802b43c:	e01b      	b.n	802b476 <__sflush_r+0xf2>
 802b43e:	690f      	ldr	r7, [r1, #16]
 802b440:	2f00      	cmp	r7, #0
 802b442:	d0f6      	beq.n	802b432 <__sflush_r+0xae>
 802b444:	0793      	lsls	r3, r2, #30
 802b446:	680e      	ldr	r6, [r1, #0]
 802b448:	bf08      	it	eq
 802b44a:	694b      	ldreq	r3, [r1, #20]
 802b44c:	600f      	str	r7, [r1, #0]
 802b44e:	bf18      	it	ne
 802b450:	2300      	movne	r3, #0
 802b452:	eba6 0807 	sub.w	r8, r6, r7
 802b456:	608b      	str	r3, [r1, #8]
 802b458:	f1b8 0f00 	cmp.w	r8, #0
 802b45c:	dde9      	ble.n	802b432 <__sflush_r+0xae>
 802b45e:	6a21      	ldr	r1, [r4, #32]
 802b460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b462:	4643      	mov	r3, r8
 802b464:	463a      	mov	r2, r7
 802b466:	4628      	mov	r0, r5
 802b468:	47b0      	blx	r6
 802b46a:	2800      	cmp	r0, #0
 802b46c:	dc08      	bgt.n	802b480 <__sflush_r+0xfc>
 802b46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b476:	81a3      	strh	r3, [r4, #12]
 802b478:	f04f 30ff 	mov.w	r0, #4294967295
 802b47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b480:	4407      	add	r7, r0
 802b482:	eba8 0800 	sub.w	r8, r8, r0
 802b486:	e7e7      	b.n	802b458 <__sflush_r+0xd4>
 802b488:	20400001 	.word	0x20400001

0802b48c <_fflush_r>:
 802b48c:	b538      	push	{r3, r4, r5, lr}
 802b48e:	690b      	ldr	r3, [r1, #16]
 802b490:	4605      	mov	r5, r0
 802b492:	460c      	mov	r4, r1
 802b494:	b913      	cbnz	r3, 802b49c <_fflush_r+0x10>
 802b496:	2500      	movs	r5, #0
 802b498:	4628      	mov	r0, r5
 802b49a:	bd38      	pop	{r3, r4, r5, pc}
 802b49c:	b118      	cbz	r0, 802b4a6 <_fflush_r+0x1a>
 802b49e:	6a03      	ldr	r3, [r0, #32]
 802b4a0:	b90b      	cbnz	r3, 802b4a6 <_fflush_r+0x1a>
 802b4a2:	f000 f8a7 	bl	802b5f4 <__sinit>
 802b4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b4aa:	2b00      	cmp	r3, #0
 802b4ac:	d0f3      	beq.n	802b496 <_fflush_r+0xa>
 802b4ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b4b0:	07d0      	lsls	r0, r2, #31
 802b4b2:	d404      	bmi.n	802b4be <_fflush_r+0x32>
 802b4b4:	0599      	lsls	r1, r3, #22
 802b4b6:	d402      	bmi.n	802b4be <_fflush_r+0x32>
 802b4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b4ba:	f000 fb52 	bl	802bb62 <__retarget_lock_acquire_recursive>
 802b4be:	4628      	mov	r0, r5
 802b4c0:	4621      	mov	r1, r4
 802b4c2:	f7ff ff5f 	bl	802b384 <__sflush_r>
 802b4c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b4c8:	07da      	lsls	r2, r3, #31
 802b4ca:	4605      	mov	r5, r0
 802b4cc:	d4e4      	bmi.n	802b498 <_fflush_r+0xc>
 802b4ce:	89a3      	ldrh	r3, [r4, #12]
 802b4d0:	059b      	lsls	r3, r3, #22
 802b4d2:	d4e1      	bmi.n	802b498 <_fflush_r+0xc>
 802b4d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b4d6:	f000 fb45 	bl	802bb64 <__retarget_lock_release_recursive>
 802b4da:	e7dd      	b.n	802b498 <_fflush_r+0xc>

0802b4dc <std>:
 802b4dc:	2300      	movs	r3, #0
 802b4de:	b510      	push	{r4, lr}
 802b4e0:	4604      	mov	r4, r0
 802b4e2:	e9c0 3300 	strd	r3, r3, [r0]
 802b4e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b4ea:	6083      	str	r3, [r0, #8]
 802b4ec:	8181      	strh	r1, [r0, #12]
 802b4ee:	6643      	str	r3, [r0, #100]	@ 0x64
 802b4f0:	81c2      	strh	r2, [r0, #14]
 802b4f2:	6183      	str	r3, [r0, #24]
 802b4f4:	4619      	mov	r1, r3
 802b4f6:	2208      	movs	r2, #8
 802b4f8:	305c      	adds	r0, #92	@ 0x5c
 802b4fa:	f000 fa7d 	bl	802b9f8 <memset>
 802b4fe:	4b0d      	ldr	r3, [pc, #52]	@ (802b534 <std+0x58>)
 802b500:	6263      	str	r3, [r4, #36]	@ 0x24
 802b502:	4b0d      	ldr	r3, [pc, #52]	@ (802b538 <std+0x5c>)
 802b504:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b506:	4b0d      	ldr	r3, [pc, #52]	@ (802b53c <std+0x60>)
 802b508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b50a:	4b0d      	ldr	r3, [pc, #52]	@ (802b540 <std+0x64>)
 802b50c:	6323      	str	r3, [r4, #48]	@ 0x30
 802b50e:	4b0d      	ldr	r3, [pc, #52]	@ (802b544 <std+0x68>)
 802b510:	6224      	str	r4, [r4, #32]
 802b512:	429c      	cmp	r4, r3
 802b514:	d006      	beq.n	802b524 <std+0x48>
 802b516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b51a:	4294      	cmp	r4, r2
 802b51c:	d002      	beq.n	802b524 <std+0x48>
 802b51e:	33d0      	adds	r3, #208	@ 0xd0
 802b520:	429c      	cmp	r4, r3
 802b522:	d105      	bne.n	802b530 <std+0x54>
 802b524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b52c:	f000 bb18 	b.w	802bb60 <__retarget_lock_init_recursive>
 802b530:	bd10      	pop	{r4, pc}
 802b532:	bf00      	nop
 802b534:	0802b815 	.word	0x0802b815
 802b538:	0802b837 	.word	0x0802b837
 802b53c:	0802b86f 	.word	0x0802b86f
 802b540:	0802b893 	.word	0x0802b893
 802b544:	2000e698 	.word	0x2000e698

0802b548 <stdio_exit_handler>:
 802b548:	4a02      	ldr	r2, [pc, #8]	@ (802b554 <stdio_exit_handler+0xc>)
 802b54a:	4903      	ldr	r1, [pc, #12]	@ (802b558 <stdio_exit_handler+0x10>)
 802b54c:	4803      	ldr	r0, [pc, #12]	@ (802b55c <stdio_exit_handler+0x14>)
 802b54e:	f000 b87b 	b.w	802b648 <_fwalk_sglue>
 802b552:	bf00      	nop
 802b554:	20000010 	.word	0x20000010
 802b558:	0802b48d 	.word	0x0802b48d
 802b55c:	20000020 	.word	0x20000020

0802b560 <cleanup_stdio>:
 802b560:	6841      	ldr	r1, [r0, #4]
 802b562:	4b0c      	ldr	r3, [pc, #48]	@ (802b594 <cleanup_stdio+0x34>)
 802b564:	4299      	cmp	r1, r3
 802b566:	b510      	push	{r4, lr}
 802b568:	4604      	mov	r4, r0
 802b56a:	d001      	beq.n	802b570 <cleanup_stdio+0x10>
 802b56c:	f7ff ff8e 	bl	802b48c <_fflush_r>
 802b570:	68a1      	ldr	r1, [r4, #8]
 802b572:	4b09      	ldr	r3, [pc, #36]	@ (802b598 <cleanup_stdio+0x38>)
 802b574:	4299      	cmp	r1, r3
 802b576:	d002      	beq.n	802b57e <cleanup_stdio+0x1e>
 802b578:	4620      	mov	r0, r4
 802b57a:	f7ff ff87 	bl	802b48c <_fflush_r>
 802b57e:	68e1      	ldr	r1, [r4, #12]
 802b580:	4b06      	ldr	r3, [pc, #24]	@ (802b59c <cleanup_stdio+0x3c>)
 802b582:	4299      	cmp	r1, r3
 802b584:	d004      	beq.n	802b590 <cleanup_stdio+0x30>
 802b586:	4620      	mov	r0, r4
 802b588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b58c:	f7ff bf7e 	b.w	802b48c <_fflush_r>
 802b590:	bd10      	pop	{r4, pc}
 802b592:	bf00      	nop
 802b594:	2000e698 	.word	0x2000e698
 802b598:	2000e700 	.word	0x2000e700
 802b59c:	2000e768 	.word	0x2000e768

0802b5a0 <global_stdio_init.part.0>:
 802b5a0:	b510      	push	{r4, lr}
 802b5a2:	4b0b      	ldr	r3, [pc, #44]	@ (802b5d0 <global_stdio_init.part.0+0x30>)
 802b5a4:	4c0b      	ldr	r4, [pc, #44]	@ (802b5d4 <global_stdio_init.part.0+0x34>)
 802b5a6:	4a0c      	ldr	r2, [pc, #48]	@ (802b5d8 <global_stdio_init.part.0+0x38>)
 802b5a8:	601a      	str	r2, [r3, #0]
 802b5aa:	4620      	mov	r0, r4
 802b5ac:	2200      	movs	r2, #0
 802b5ae:	2104      	movs	r1, #4
 802b5b0:	f7ff ff94 	bl	802b4dc <std>
 802b5b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b5b8:	2201      	movs	r2, #1
 802b5ba:	2109      	movs	r1, #9
 802b5bc:	f7ff ff8e 	bl	802b4dc <std>
 802b5c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b5c4:	2202      	movs	r2, #2
 802b5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b5ca:	2112      	movs	r1, #18
 802b5cc:	f7ff bf86 	b.w	802b4dc <std>
 802b5d0:	2000e7d0 	.word	0x2000e7d0
 802b5d4:	2000e698 	.word	0x2000e698
 802b5d8:	0802b549 	.word	0x0802b549

0802b5dc <__sfp_lock_acquire>:
 802b5dc:	4801      	ldr	r0, [pc, #4]	@ (802b5e4 <__sfp_lock_acquire+0x8>)
 802b5de:	f000 bac0 	b.w	802bb62 <__retarget_lock_acquire_recursive>
 802b5e2:	bf00      	nop
 802b5e4:	2000e7d9 	.word	0x2000e7d9

0802b5e8 <__sfp_lock_release>:
 802b5e8:	4801      	ldr	r0, [pc, #4]	@ (802b5f0 <__sfp_lock_release+0x8>)
 802b5ea:	f000 babb 	b.w	802bb64 <__retarget_lock_release_recursive>
 802b5ee:	bf00      	nop
 802b5f0:	2000e7d9 	.word	0x2000e7d9

0802b5f4 <__sinit>:
 802b5f4:	b510      	push	{r4, lr}
 802b5f6:	4604      	mov	r4, r0
 802b5f8:	f7ff fff0 	bl	802b5dc <__sfp_lock_acquire>
 802b5fc:	6a23      	ldr	r3, [r4, #32]
 802b5fe:	b11b      	cbz	r3, 802b608 <__sinit+0x14>
 802b600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b604:	f7ff bff0 	b.w	802b5e8 <__sfp_lock_release>
 802b608:	4b04      	ldr	r3, [pc, #16]	@ (802b61c <__sinit+0x28>)
 802b60a:	6223      	str	r3, [r4, #32]
 802b60c:	4b04      	ldr	r3, [pc, #16]	@ (802b620 <__sinit+0x2c>)
 802b60e:	681b      	ldr	r3, [r3, #0]
 802b610:	2b00      	cmp	r3, #0
 802b612:	d1f5      	bne.n	802b600 <__sinit+0xc>
 802b614:	f7ff ffc4 	bl	802b5a0 <global_stdio_init.part.0>
 802b618:	e7f2      	b.n	802b600 <__sinit+0xc>
 802b61a:	bf00      	nop
 802b61c:	0802b561 	.word	0x0802b561
 802b620:	2000e7d0 	.word	0x2000e7d0

0802b624 <fiprintf>:
 802b624:	b40e      	push	{r1, r2, r3}
 802b626:	b503      	push	{r0, r1, lr}
 802b628:	4601      	mov	r1, r0
 802b62a:	ab03      	add	r3, sp, #12
 802b62c:	4805      	ldr	r0, [pc, #20]	@ (802b644 <fiprintf+0x20>)
 802b62e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b632:	6800      	ldr	r0, [r0, #0]
 802b634:	9301      	str	r3, [sp, #4]
 802b636:	f7ff f9f3 	bl	802aa20 <_vfiprintf_r>
 802b63a:	b002      	add	sp, #8
 802b63c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b640:	b003      	add	sp, #12
 802b642:	4770      	bx	lr
 802b644:	2000001c 	.word	0x2000001c

0802b648 <_fwalk_sglue>:
 802b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b64c:	4607      	mov	r7, r0
 802b64e:	4688      	mov	r8, r1
 802b650:	4614      	mov	r4, r2
 802b652:	2600      	movs	r6, #0
 802b654:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b658:	f1b9 0901 	subs.w	r9, r9, #1
 802b65c:	d505      	bpl.n	802b66a <_fwalk_sglue+0x22>
 802b65e:	6824      	ldr	r4, [r4, #0]
 802b660:	2c00      	cmp	r4, #0
 802b662:	d1f7      	bne.n	802b654 <_fwalk_sglue+0xc>
 802b664:	4630      	mov	r0, r6
 802b666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b66a:	89ab      	ldrh	r3, [r5, #12]
 802b66c:	2b01      	cmp	r3, #1
 802b66e:	d907      	bls.n	802b680 <_fwalk_sglue+0x38>
 802b670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b674:	3301      	adds	r3, #1
 802b676:	d003      	beq.n	802b680 <_fwalk_sglue+0x38>
 802b678:	4629      	mov	r1, r5
 802b67a:	4638      	mov	r0, r7
 802b67c:	47c0      	blx	r8
 802b67e:	4306      	orrs	r6, r0
 802b680:	3568      	adds	r5, #104	@ 0x68
 802b682:	e7e9      	b.n	802b658 <_fwalk_sglue+0x10>

0802b684 <iprintf>:
 802b684:	b40f      	push	{r0, r1, r2, r3}
 802b686:	b507      	push	{r0, r1, r2, lr}
 802b688:	4906      	ldr	r1, [pc, #24]	@ (802b6a4 <iprintf+0x20>)
 802b68a:	ab04      	add	r3, sp, #16
 802b68c:	6808      	ldr	r0, [r1, #0]
 802b68e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b692:	6881      	ldr	r1, [r0, #8]
 802b694:	9301      	str	r3, [sp, #4]
 802b696:	f7ff f9c3 	bl	802aa20 <_vfiprintf_r>
 802b69a:	b003      	add	sp, #12
 802b69c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b6a0:	b004      	add	sp, #16
 802b6a2:	4770      	bx	lr
 802b6a4:	2000001c 	.word	0x2000001c

0802b6a8 <_puts_r>:
 802b6a8:	6a03      	ldr	r3, [r0, #32]
 802b6aa:	b570      	push	{r4, r5, r6, lr}
 802b6ac:	6884      	ldr	r4, [r0, #8]
 802b6ae:	4605      	mov	r5, r0
 802b6b0:	460e      	mov	r6, r1
 802b6b2:	b90b      	cbnz	r3, 802b6b8 <_puts_r+0x10>
 802b6b4:	f7ff ff9e 	bl	802b5f4 <__sinit>
 802b6b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b6ba:	07db      	lsls	r3, r3, #31
 802b6bc:	d405      	bmi.n	802b6ca <_puts_r+0x22>
 802b6be:	89a3      	ldrh	r3, [r4, #12]
 802b6c0:	0598      	lsls	r0, r3, #22
 802b6c2:	d402      	bmi.n	802b6ca <_puts_r+0x22>
 802b6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b6c6:	f000 fa4c 	bl	802bb62 <__retarget_lock_acquire_recursive>
 802b6ca:	89a3      	ldrh	r3, [r4, #12]
 802b6cc:	0719      	lsls	r1, r3, #28
 802b6ce:	d502      	bpl.n	802b6d6 <_puts_r+0x2e>
 802b6d0:	6923      	ldr	r3, [r4, #16]
 802b6d2:	2b00      	cmp	r3, #0
 802b6d4:	d135      	bne.n	802b742 <_puts_r+0x9a>
 802b6d6:	4621      	mov	r1, r4
 802b6d8:	4628      	mov	r0, r5
 802b6da:	f000 f91d 	bl	802b918 <__swsetup_r>
 802b6de:	b380      	cbz	r0, 802b742 <_puts_r+0x9a>
 802b6e0:	f04f 35ff 	mov.w	r5, #4294967295
 802b6e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b6e6:	07da      	lsls	r2, r3, #31
 802b6e8:	d405      	bmi.n	802b6f6 <_puts_r+0x4e>
 802b6ea:	89a3      	ldrh	r3, [r4, #12]
 802b6ec:	059b      	lsls	r3, r3, #22
 802b6ee:	d402      	bmi.n	802b6f6 <_puts_r+0x4e>
 802b6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b6f2:	f000 fa37 	bl	802bb64 <__retarget_lock_release_recursive>
 802b6f6:	4628      	mov	r0, r5
 802b6f8:	bd70      	pop	{r4, r5, r6, pc}
 802b6fa:	2b00      	cmp	r3, #0
 802b6fc:	da04      	bge.n	802b708 <_puts_r+0x60>
 802b6fe:	69a2      	ldr	r2, [r4, #24]
 802b700:	429a      	cmp	r2, r3
 802b702:	dc17      	bgt.n	802b734 <_puts_r+0x8c>
 802b704:	290a      	cmp	r1, #10
 802b706:	d015      	beq.n	802b734 <_puts_r+0x8c>
 802b708:	6823      	ldr	r3, [r4, #0]
 802b70a:	1c5a      	adds	r2, r3, #1
 802b70c:	6022      	str	r2, [r4, #0]
 802b70e:	7019      	strb	r1, [r3, #0]
 802b710:	68a3      	ldr	r3, [r4, #8]
 802b712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802b716:	3b01      	subs	r3, #1
 802b718:	60a3      	str	r3, [r4, #8]
 802b71a:	2900      	cmp	r1, #0
 802b71c:	d1ed      	bne.n	802b6fa <_puts_r+0x52>
 802b71e:	2b00      	cmp	r3, #0
 802b720:	da11      	bge.n	802b746 <_puts_r+0x9e>
 802b722:	4622      	mov	r2, r4
 802b724:	210a      	movs	r1, #10
 802b726:	4628      	mov	r0, r5
 802b728:	f000 f8b7 	bl	802b89a <__swbuf_r>
 802b72c:	3001      	adds	r0, #1
 802b72e:	d0d7      	beq.n	802b6e0 <_puts_r+0x38>
 802b730:	250a      	movs	r5, #10
 802b732:	e7d7      	b.n	802b6e4 <_puts_r+0x3c>
 802b734:	4622      	mov	r2, r4
 802b736:	4628      	mov	r0, r5
 802b738:	f000 f8af 	bl	802b89a <__swbuf_r>
 802b73c:	3001      	adds	r0, #1
 802b73e:	d1e7      	bne.n	802b710 <_puts_r+0x68>
 802b740:	e7ce      	b.n	802b6e0 <_puts_r+0x38>
 802b742:	3e01      	subs	r6, #1
 802b744:	e7e4      	b.n	802b710 <_puts_r+0x68>
 802b746:	6823      	ldr	r3, [r4, #0]
 802b748:	1c5a      	adds	r2, r3, #1
 802b74a:	6022      	str	r2, [r4, #0]
 802b74c:	220a      	movs	r2, #10
 802b74e:	701a      	strb	r2, [r3, #0]
 802b750:	e7ee      	b.n	802b730 <_puts_r+0x88>
	...

0802b754 <puts>:
 802b754:	4b02      	ldr	r3, [pc, #8]	@ (802b760 <puts+0xc>)
 802b756:	4601      	mov	r1, r0
 802b758:	6818      	ldr	r0, [r3, #0]
 802b75a:	f7ff bfa5 	b.w	802b6a8 <_puts_r>
 802b75e:	bf00      	nop
 802b760:	2000001c 	.word	0x2000001c

0802b764 <sniprintf>:
 802b764:	b40c      	push	{r2, r3}
 802b766:	b530      	push	{r4, r5, lr}
 802b768:	4b18      	ldr	r3, [pc, #96]	@ (802b7cc <sniprintf+0x68>)
 802b76a:	1e0c      	subs	r4, r1, #0
 802b76c:	681d      	ldr	r5, [r3, #0]
 802b76e:	b09d      	sub	sp, #116	@ 0x74
 802b770:	da08      	bge.n	802b784 <sniprintf+0x20>
 802b772:	238b      	movs	r3, #139	@ 0x8b
 802b774:	602b      	str	r3, [r5, #0]
 802b776:	f04f 30ff 	mov.w	r0, #4294967295
 802b77a:	b01d      	add	sp, #116	@ 0x74
 802b77c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b780:	b002      	add	sp, #8
 802b782:	4770      	bx	lr
 802b784:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802b788:	f8ad 3014 	strh.w	r3, [sp, #20]
 802b78c:	f04f 0300 	mov.w	r3, #0
 802b790:	931b      	str	r3, [sp, #108]	@ 0x6c
 802b792:	bf14      	ite	ne
 802b794:	f104 33ff 	addne.w	r3, r4, #4294967295
 802b798:	4623      	moveq	r3, r4
 802b79a:	9304      	str	r3, [sp, #16]
 802b79c:	9307      	str	r3, [sp, #28]
 802b79e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b7a2:	9002      	str	r0, [sp, #8]
 802b7a4:	9006      	str	r0, [sp, #24]
 802b7a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b7aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802b7ac:	ab21      	add	r3, sp, #132	@ 0x84
 802b7ae:	a902      	add	r1, sp, #8
 802b7b0:	4628      	mov	r0, r5
 802b7b2:	9301      	str	r3, [sp, #4]
 802b7b4:	f002 fbd2 	bl	802df5c <_svfiprintf_r>
 802b7b8:	1c43      	adds	r3, r0, #1
 802b7ba:	bfbc      	itt	lt
 802b7bc:	238b      	movlt	r3, #139	@ 0x8b
 802b7be:	602b      	strlt	r3, [r5, #0]
 802b7c0:	2c00      	cmp	r4, #0
 802b7c2:	d0da      	beq.n	802b77a <sniprintf+0x16>
 802b7c4:	9b02      	ldr	r3, [sp, #8]
 802b7c6:	2200      	movs	r2, #0
 802b7c8:	701a      	strb	r2, [r3, #0]
 802b7ca:	e7d6      	b.n	802b77a <sniprintf+0x16>
 802b7cc:	2000001c 	.word	0x2000001c

0802b7d0 <siprintf>:
 802b7d0:	b40e      	push	{r1, r2, r3}
 802b7d2:	b510      	push	{r4, lr}
 802b7d4:	b09d      	sub	sp, #116	@ 0x74
 802b7d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 802b7d8:	9002      	str	r0, [sp, #8]
 802b7da:	9006      	str	r0, [sp, #24]
 802b7dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802b7e0:	480a      	ldr	r0, [pc, #40]	@ (802b80c <siprintf+0x3c>)
 802b7e2:	9107      	str	r1, [sp, #28]
 802b7e4:	9104      	str	r1, [sp, #16]
 802b7e6:	490a      	ldr	r1, [pc, #40]	@ (802b810 <siprintf+0x40>)
 802b7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 802b7ec:	9105      	str	r1, [sp, #20]
 802b7ee:	2400      	movs	r4, #0
 802b7f0:	a902      	add	r1, sp, #8
 802b7f2:	6800      	ldr	r0, [r0, #0]
 802b7f4:	9301      	str	r3, [sp, #4]
 802b7f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 802b7f8:	f002 fbb0 	bl	802df5c <_svfiprintf_r>
 802b7fc:	9b02      	ldr	r3, [sp, #8]
 802b7fe:	701c      	strb	r4, [r3, #0]
 802b800:	b01d      	add	sp, #116	@ 0x74
 802b802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b806:	b003      	add	sp, #12
 802b808:	4770      	bx	lr
 802b80a:	bf00      	nop
 802b80c:	2000001c 	.word	0x2000001c
 802b810:	ffff0208 	.word	0xffff0208

0802b814 <__sread>:
 802b814:	b510      	push	{r4, lr}
 802b816:	460c      	mov	r4, r1
 802b818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b81c:	f000 f942 	bl	802baa4 <_read_r>
 802b820:	2800      	cmp	r0, #0
 802b822:	bfab      	itete	ge
 802b824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b826:	89a3      	ldrhlt	r3, [r4, #12]
 802b828:	181b      	addge	r3, r3, r0
 802b82a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b82e:	bfac      	ite	ge
 802b830:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b832:	81a3      	strhlt	r3, [r4, #12]
 802b834:	bd10      	pop	{r4, pc}

0802b836 <__swrite>:
 802b836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b83a:	461f      	mov	r7, r3
 802b83c:	898b      	ldrh	r3, [r1, #12]
 802b83e:	05db      	lsls	r3, r3, #23
 802b840:	4605      	mov	r5, r0
 802b842:	460c      	mov	r4, r1
 802b844:	4616      	mov	r6, r2
 802b846:	d505      	bpl.n	802b854 <__swrite+0x1e>
 802b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b84c:	2302      	movs	r3, #2
 802b84e:	2200      	movs	r2, #0
 802b850:	f000 f916 	bl	802ba80 <_lseek_r>
 802b854:	89a3      	ldrh	r3, [r4, #12]
 802b856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b85a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b85e:	81a3      	strh	r3, [r4, #12]
 802b860:	4632      	mov	r2, r6
 802b862:	463b      	mov	r3, r7
 802b864:	4628      	mov	r0, r5
 802b866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b86a:	f000 b93d 	b.w	802bae8 <_write_r>

0802b86e <__sseek>:
 802b86e:	b510      	push	{r4, lr}
 802b870:	460c      	mov	r4, r1
 802b872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b876:	f000 f903 	bl	802ba80 <_lseek_r>
 802b87a:	1c43      	adds	r3, r0, #1
 802b87c:	89a3      	ldrh	r3, [r4, #12]
 802b87e:	bf15      	itete	ne
 802b880:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b882:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b886:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b88a:	81a3      	strheq	r3, [r4, #12]
 802b88c:	bf18      	it	ne
 802b88e:	81a3      	strhne	r3, [r4, #12]
 802b890:	bd10      	pop	{r4, pc}

0802b892 <__sclose>:
 802b892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b896:	f000 b8e3 	b.w	802ba60 <_close_r>

0802b89a <__swbuf_r>:
 802b89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b89c:	460e      	mov	r6, r1
 802b89e:	4614      	mov	r4, r2
 802b8a0:	4605      	mov	r5, r0
 802b8a2:	b118      	cbz	r0, 802b8ac <__swbuf_r+0x12>
 802b8a4:	6a03      	ldr	r3, [r0, #32]
 802b8a6:	b90b      	cbnz	r3, 802b8ac <__swbuf_r+0x12>
 802b8a8:	f7ff fea4 	bl	802b5f4 <__sinit>
 802b8ac:	69a3      	ldr	r3, [r4, #24]
 802b8ae:	60a3      	str	r3, [r4, #8]
 802b8b0:	89a3      	ldrh	r3, [r4, #12]
 802b8b2:	071a      	lsls	r2, r3, #28
 802b8b4:	d501      	bpl.n	802b8ba <__swbuf_r+0x20>
 802b8b6:	6923      	ldr	r3, [r4, #16]
 802b8b8:	b943      	cbnz	r3, 802b8cc <__swbuf_r+0x32>
 802b8ba:	4621      	mov	r1, r4
 802b8bc:	4628      	mov	r0, r5
 802b8be:	f000 f82b 	bl	802b918 <__swsetup_r>
 802b8c2:	b118      	cbz	r0, 802b8cc <__swbuf_r+0x32>
 802b8c4:	f04f 37ff 	mov.w	r7, #4294967295
 802b8c8:	4638      	mov	r0, r7
 802b8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b8cc:	6823      	ldr	r3, [r4, #0]
 802b8ce:	6922      	ldr	r2, [r4, #16]
 802b8d0:	1a98      	subs	r0, r3, r2
 802b8d2:	6963      	ldr	r3, [r4, #20]
 802b8d4:	b2f6      	uxtb	r6, r6
 802b8d6:	4283      	cmp	r3, r0
 802b8d8:	4637      	mov	r7, r6
 802b8da:	dc05      	bgt.n	802b8e8 <__swbuf_r+0x4e>
 802b8dc:	4621      	mov	r1, r4
 802b8de:	4628      	mov	r0, r5
 802b8e0:	f7ff fdd4 	bl	802b48c <_fflush_r>
 802b8e4:	2800      	cmp	r0, #0
 802b8e6:	d1ed      	bne.n	802b8c4 <__swbuf_r+0x2a>
 802b8e8:	68a3      	ldr	r3, [r4, #8]
 802b8ea:	3b01      	subs	r3, #1
 802b8ec:	60a3      	str	r3, [r4, #8]
 802b8ee:	6823      	ldr	r3, [r4, #0]
 802b8f0:	1c5a      	adds	r2, r3, #1
 802b8f2:	6022      	str	r2, [r4, #0]
 802b8f4:	701e      	strb	r6, [r3, #0]
 802b8f6:	6962      	ldr	r2, [r4, #20]
 802b8f8:	1c43      	adds	r3, r0, #1
 802b8fa:	429a      	cmp	r2, r3
 802b8fc:	d004      	beq.n	802b908 <__swbuf_r+0x6e>
 802b8fe:	89a3      	ldrh	r3, [r4, #12]
 802b900:	07db      	lsls	r3, r3, #31
 802b902:	d5e1      	bpl.n	802b8c8 <__swbuf_r+0x2e>
 802b904:	2e0a      	cmp	r6, #10
 802b906:	d1df      	bne.n	802b8c8 <__swbuf_r+0x2e>
 802b908:	4621      	mov	r1, r4
 802b90a:	4628      	mov	r0, r5
 802b90c:	f7ff fdbe 	bl	802b48c <_fflush_r>
 802b910:	2800      	cmp	r0, #0
 802b912:	d0d9      	beq.n	802b8c8 <__swbuf_r+0x2e>
 802b914:	e7d6      	b.n	802b8c4 <__swbuf_r+0x2a>
	...

0802b918 <__swsetup_r>:
 802b918:	b538      	push	{r3, r4, r5, lr}
 802b91a:	4b29      	ldr	r3, [pc, #164]	@ (802b9c0 <__swsetup_r+0xa8>)
 802b91c:	4605      	mov	r5, r0
 802b91e:	6818      	ldr	r0, [r3, #0]
 802b920:	460c      	mov	r4, r1
 802b922:	b118      	cbz	r0, 802b92c <__swsetup_r+0x14>
 802b924:	6a03      	ldr	r3, [r0, #32]
 802b926:	b90b      	cbnz	r3, 802b92c <__swsetup_r+0x14>
 802b928:	f7ff fe64 	bl	802b5f4 <__sinit>
 802b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b930:	0719      	lsls	r1, r3, #28
 802b932:	d422      	bmi.n	802b97a <__swsetup_r+0x62>
 802b934:	06da      	lsls	r2, r3, #27
 802b936:	d407      	bmi.n	802b948 <__swsetup_r+0x30>
 802b938:	2209      	movs	r2, #9
 802b93a:	602a      	str	r2, [r5, #0]
 802b93c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b940:	81a3      	strh	r3, [r4, #12]
 802b942:	f04f 30ff 	mov.w	r0, #4294967295
 802b946:	e033      	b.n	802b9b0 <__swsetup_r+0x98>
 802b948:	0758      	lsls	r0, r3, #29
 802b94a:	d512      	bpl.n	802b972 <__swsetup_r+0x5a>
 802b94c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b94e:	b141      	cbz	r1, 802b962 <__swsetup_r+0x4a>
 802b950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b954:	4299      	cmp	r1, r3
 802b956:	d002      	beq.n	802b95e <__swsetup_r+0x46>
 802b958:	4628      	mov	r0, r5
 802b95a:	f000 ff79 	bl	802c850 <_free_r>
 802b95e:	2300      	movs	r3, #0
 802b960:	6363      	str	r3, [r4, #52]	@ 0x34
 802b962:	89a3      	ldrh	r3, [r4, #12]
 802b964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b968:	81a3      	strh	r3, [r4, #12]
 802b96a:	2300      	movs	r3, #0
 802b96c:	6063      	str	r3, [r4, #4]
 802b96e:	6923      	ldr	r3, [r4, #16]
 802b970:	6023      	str	r3, [r4, #0]
 802b972:	89a3      	ldrh	r3, [r4, #12]
 802b974:	f043 0308 	orr.w	r3, r3, #8
 802b978:	81a3      	strh	r3, [r4, #12]
 802b97a:	6923      	ldr	r3, [r4, #16]
 802b97c:	b94b      	cbnz	r3, 802b992 <__swsetup_r+0x7a>
 802b97e:	89a3      	ldrh	r3, [r4, #12]
 802b980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b988:	d003      	beq.n	802b992 <__swsetup_r+0x7a>
 802b98a:	4621      	mov	r1, r4
 802b98c:	4628      	mov	r0, r5
 802b98e:	f002 fc07 	bl	802e1a0 <__smakebuf_r>
 802b992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b996:	f013 0201 	ands.w	r2, r3, #1
 802b99a:	d00a      	beq.n	802b9b2 <__swsetup_r+0x9a>
 802b99c:	2200      	movs	r2, #0
 802b99e:	60a2      	str	r2, [r4, #8]
 802b9a0:	6962      	ldr	r2, [r4, #20]
 802b9a2:	4252      	negs	r2, r2
 802b9a4:	61a2      	str	r2, [r4, #24]
 802b9a6:	6922      	ldr	r2, [r4, #16]
 802b9a8:	b942      	cbnz	r2, 802b9bc <__swsetup_r+0xa4>
 802b9aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b9ae:	d1c5      	bne.n	802b93c <__swsetup_r+0x24>
 802b9b0:	bd38      	pop	{r3, r4, r5, pc}
 802b9b2:	0799      	lsls	r1, r3, #30
 802b9b4:	bf58      	it	pl
 802b9b6:	6962      	ldrpl	r2, [r4, #20]
 802b9b8:	60a2      	str	r2, [r4, #8]
 802b9ba:	e7f4      	b.n	802b9a6 <__swsetup_r+0x8e>
 802b9bc:	2000      	movs	r0, #0
 802b9be:	e7f7      	b.n	802b9b0 <__swsetup_r+0x98>
 802b9c0:	2000001c 	.word	0x2000001c

0802b9c4 <memmove>:
 802b9c4:	4288      	cmp	r0, r1
 802b9c6:	b510      	push	{r4, lr}
 802b9c8:	eb01 0402 	add.w	r4, r1, r2
 802b9cc:	d902      	bls.n	802b9d4 <memmove+0x10>
 802b9ce:	4284      	cmp	r4, r0
 802b9d0:	4623      	mov	r3, r4
 802b9d2:	d807      	bhi.n	802b9e4 <memmove+0x20>
 802b9d4:	1e43      	subs	r3, r0, #1
 802b9d6:	42a1      	cmp	r1, r4
 802b9d8:	d008      	beq.n	802b9ec <memmove+0x28>
 802b9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b9e2:	e7f8      	b.n	802b9d6 <memmove+0x12>
 802b9e4:	4402      	add	r2, r0
 802b9e6:	4601      	mov	r1, r0
 802b9e8:	428a      	cmp	r2, r1
 802b9ea:	d100      	bne.n	802b9ee <memmove+0x2a>
 802b9ec:	bd10      	pop	{r4, pc}
 802b9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b9f6:	e7f7      	b.n	802b9e8 <memmove+0x24>

0802b9f8 <memset>:
 802b9f8:	4402      	add	r2, r0
 802b9fa:	4603      	mov	r3, r0
 802b9fc:	4293      	cmp	r3, r2
 802b9fe:	d100      	bne.n	802ba02 <memset+0xa>
 802ba00:	4770      	bx	lr
 802ba02:	f803 1b01 	strb.w	r1, [r3], #1
 802ba06:	e7f9      	b.n	802b9fc <memset+0x4>

0802ba08 <strncmp>:
 802ba08:	b510      	push	{r4, lr}
 802ba0a:	b16a      	cbz	r2, 802ba28 <strncmp+0x20>
 802ba0c:	3901      	subs	r1, #1
 802ba0e:	1884      	adds	r4, r0, r2
 802ba10:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ba14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802ba18:	429a      	cmp	r2, r3
 802ba1a:	d103      	bne.n	802ba24 <strncmp+0x1c>
 802ba1c:	42a0      	cmp	r0, r4
 802ba1e:	d001      	beq.n	802ba24 <strncmp+0x1c>
 802ba20:	2a00      	cmp	r2, #0
 802ba22:	d1f5      	bne.n	802ba10 <strncmp+0x8>
 802ba24:	1ad0      	subs	r0, r2, r3
 802ba26:	bd10      	pop	{r4, pc}
 802ba28:	4610      	mov	r0, r2
 802ba2a:	e7fc      	b.n	802ba26 <strncmp+0x1e>

0802ba2c <strstr>:
 802ba2c:	780a      	ldrb	r2, [r1, #0]
 802ba2e:	b570      	push	{r4, r5, r6, lr}
 802ba30:	b96a      	cbnz	r2, 802ba4e <strstr+0x22>
 802ba32:	bd70      	pop	{r4, r5, r6, pc}
 802ba34:	429a      	cmp	r2, r3
 802ba36:	d109      	bne.n	802ba4c <strstr+0x20>
 802ba38:	460c      	mov	r4, r1
 802ba3a:	4605      	mov	r5, r0
 802ba3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802ba40:	2b00      	cmp	r3, #0
 802ba42:	d0f6      	beq.n	802ba32 <strstr+0x6>
 802ba44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802ba48:	429e      	cmp	r6, r3
 802ba4a:	d0f7      	beq.n	802ba3c <strstr+0x10>
 802ba4c:	3001      	adds	r0, #1
 802ba4e:	7803      	ldrb	r3, [r0, #0]
 802ba50:	2b00      	cmp	r3, #0
 802ba52:	d1ef      	bne.n	802ba34 <strstr+0x8>
 802ba54:	4618      	mov	r0, r3
 802ba56:	e7ec      	b.n	802ba32 <strstr+0x6>

0802ba58 <_localeconv_r>:
 802ba58:	4800      	ldr	r0, [pc, #0]	@ (802ba5c <_localeconv_r+0x4>)
 802ba5a:	4770      	bx	lr
 802ba5c:	2000015c 	.word	0x2000015c

0802ba60 <_close_r>:
 802ba60:	b538      	push	{r3, r4, r5, lr}
 802ba62:	4d06      	ldr	r5, [pc, #24]	@ (802ba7c <_close_r+0x1c>)
 802ba64:	2300      	movs	r3, #0
 802ba66:	4604      	mov	r4, r0
 802ba68:	4608      	mov	r0, r1
 802ba6a:	602b      	str	r3, [r5, #0]
 802ba6c:	f7f6 fb20 	bl	80220b0 <_close>
 802ba70:	1c43      	adds	r3, r0, #1
 802ba72:	d102      	bne.n	802ba7a <_close_r+0x1a>
 802ba74:	682b      	ldr	r3, [r5, #0]
 802ba76:	b103      	cbz	r3, 802ba7a <_close_r+0x1a>
 802ba78:	6023      	str	r3, [r4, #0]
 802ba7a:	bd38      	pop	{r3, r4, r5, pc}
 802ba7c:	2000e7d4 	.word	0x2000e7d4

0802ba80 <_lseek_r>:
 802ba80:	b538      	push	{r3, r4, r5, lr}
 802ba82:	4d07      	ldr	r5, [pc, #28]	@ (802baa0 <_lseek_r+0x20>)
 802ba84:	4604      	mov	r4, r0
 802ba86:	4608      	mov	r0, r1
 802ba88:	4611      	mov	r1, r2
 802ba8a:	2200      	movs	r2, #0
 802ba8c:	602a      	str	r2, [r5, #0]
 802ba8e:	461a      	mov	r2, r3
 802ba90:	f7f6 fb35 	bl	80220fe <_lseek>
 802ba94:	1c43      	adds	r3, r0, #1
 802ba96:	d102      	bne.n	802ba9e <_lseek_r+0x1e>
 802ba98:	682b      	ldr	r3, [r5, #0]
 802ba9a:	b103      	cbz	r3, 802ba9e <_lseek_r+0x1e>
 802ba9c:	6023      	str	r3, [r4, #0]
 802ba9e:	bd38      	pop	{r3, r4, r5, pc}
 802baa0:	2000e7d4 	.word	0x2000e7d4

0802baa4 <_read_r>:
 802baa4:	b538      	push	{r3, r4, r5, lr}
 802baa6:	4d07      	ldr	r5, [pc, #28]	@ (802bac4 <_read_r+0x20>)
 802baa8:	4604      	mov	r4, r0
 802baaa:	4608      	mov	r0, r1
 802baac:	4611      	mov	r1, r2
 802baae:	2200      	movs	r2, #0
 802bab0:	602a      	str	r2, [r5, #0]
 802bab2:	461a      	mov	r2, r3
 802bab4:	f7f6 fadf 	bl	8022076 <_read>
 802bab8:	1c43      	adds	r3, r0, #1
 802baba:	d102      	bne.n	802bac2 <_read_r+0x1e>
 802babc:	682b      	ldr	r3, [r5, #0]
 802babe:	b103      	cbz	r3, 802bac2 <_read_r+0x1e>
 802bac0:	6023      	str	r3, [r4, #0]
 802bac2:	bd38      	pop	{r3, r4, r5, pc}
 802bac4:	2000e7d4 	.word	0x2000e7d4

0802bac8 <_sbrk_r>:
 802bac8:	b538      	push	{r3, r4, r5, lr}
 802baca:	4d06      	ldr	r5, [pc, #24]	@ (802bae4 <_sbrk_r+0x1c>)
 802bacc:	2300      	movs	r3, #0
 802bace:	4604      	mov	r4, r0
 802bad0:	4608      	mov	r0, r1
 802bad2:	602b      	str	r3, [r5, #0]
 802bad4:	f7f6 fb20 	bl	8022118 <_sbrk>
 802bad8:	1c43      	adds	r3, r0, #1
 802bada:	d102      	bne.n	802bae2 <_sbrk_r+0x1a>
 802badc:	682b      	ldr	r3, [r5, #0]
 802bade:	b103      	cbz	r3, 802bae2 <_sbrk_r+0x1a>
 802bae0:	6023      	str	r3, [r4, #0]
 802bae2:	bd38      	pop	{r3, r4, r5, pc}
 802bae4:	2000e7d4 	.word	0x2000e7d4

0802bae8 <_write_r>:
 802bae8:	b538      	push	{r3, r4, r5, lr}
 802baea:	4d07      	ldr	r5, [pc, #28]	@ (802bb08 <_write_r+0x20>)
 802baec:	4604      	mov	r4, r0
 802baee:	4608      	mov	r0, r1
 802baf0:	4611      	mov	r1, r2
 802baf2:	2200      	movs	r2, #0
 802baf4:	602a      	str	r2, [r5, #0]
 802baf6:	461a      	mov	r2, r3
 802baf8:	f7f5 fab2 	bl	8021060 <_write>
 802bafc:	1c43      	adds	r3, r0, #1
 802bafe:	d102      	bne.n	802bb06 <_write_r+0x1e>
 802bb00:	682b      	ldr	r3, [r5, #0]
 802bb02:	b103      	cbz	r3, 802bb06 <_write_r+0x1e>
 802bb04:	6023      	str	r3, [r4, #0]
 802bb06:	bd38      	pop	{r3, r4, r5, pc}
 802bb08:	2000e7d4 	.word	0x2000e7d4

0802bb0c <__errno>:
 802bb0c:	4b01      	ldr	r3, [pc, #4]	@ (802bb14 <__errno+0x8>)
 802bb0e:	6818      	ldr	r0, [r3, #0]
 802bb10:	4770      	bx	lr
 802bb12:	bf00      	nop
 802bb14:	2000001c 	.word	0x2000001c

0802bb18 <__libc_init_array>:
 802bb18:	b570      	push	{r4, r5, r6, lr}
 802bb1a:	4d0d      	ldr	r5, [pc, #52]	@ (802bb50 <__libc_init_array+0x38>)
 802bb1c:	4c0d      	ldr	r4, [pc, #52]	@ (802bb54 <__libc_init_array+0x3c>)
 802bb1e:	1b64      	subs	r4, r4, r5
 802bb20:	10a4      	asrs	r4, r4, #2
 802bb22:	2600      	movs	r6, #0
 802bb24:	42a6      	cmp	r6, r4
 802bb26:	d109      	bne.n	802bb3c <__libc_init_array+0x24>
 802bb28:	4d0b      	ldr	r5, [pc, #44]	@ (802bb58 <__libc_init_array+0x40>)
 802bb2a:	4c0c      	ldr	r4, [pc, #48]	@ (802bb5c <__libc_init_array+0x44>)
 802bb2c:	f002 ff58 	bl	802e9e0 <_init>
 802bb30:	1b64      	subs	r4, r4, r5
 802bb32:	10a4      	asrs	r4, r4, #2
 802bb34:	2600      	movs	r6, #0
 802bb36:	42a6      	cmp	r6, r4
 802bb38:	d105      	bne.n	802bb46 <__libc_init_array+0x2e>
 802bb3a:	bd70      	pop	{r4, r5, r6, pc}
 802bb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 802bb40:	4798      	blx	r3
 802bb42:	3601      	adds	r6, #1
 802bb44:	e7ee      	b.n	802bb24 <__libc_init_array+0xc>
 802bb46:	f855 3b04 	ldr.w	r3, [r5], #4
 802bb4a:	4798      	blx	r3
 802bb4c:	3601      	adds	r6, #1
 802bb4e:	e7f2      	b.n	802bb36 <__libc_init_array+0x1e>
 802bb50:	0802f698 	.word	0x0802f698
 802bb54:	0802f698 	.word	0x0802f698
 802bb58:	0802f698 	.word	0x0802f698
 802bb5c:	0802f69c 	.word	0x0802f69c

0802bb60 <__retarget_lock_init_recursive>:
 802bb60:	4770      	bx	lr

0802bb62 <__retarget_lock_acquire_recursive>:
 802bb62:	4770      	bx	lr

0802bb64 <__retarget_lock_release_recursive>:
 802bb64:	4770      	bx	lr

0802bb66 <memcpy>:
 802bb66:	440a      	add	r2, r1
 802bb68:	4291      	cmp	r1, r2
 802bb6a:	f100 33ff 	add.w	r3, r0, #4294967295
 802bb6e:	d100      	bne.n	802bb72 <memcpy+0xc>
 802bb70:	4770      	bx	lr
 802bb72:	b510      	push	{r4, lr}
 802bb74:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bb78:	f803 4f01 	strb.w	r4, [r3, #1]!
 802bb7c:	4291      	cmp	r1, r2
 802bb7e:	d1f9      	bne.n	802bb74 <memcpy+0xe>
 802bb80:	bd10      	pop	{r4, pc}
	...

0802bb84 <nanf>:
 802bb84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802bb8c <nanf+0x8>
 802bb88:	4770      	bx	lr
 802bb8a:	bf00      	nop
 802bb8c:	7fc00000 	.word	0x7fc00000

0802bb90 <abort>:
 802bb90:	b508      	push	{r3, lr}
 802bb92:	2006      	movs	r0, #6
 802bb94:	f002 fb68 	bl	802e268 <raise>
 802bb98:	2001      	movs	r0, #1
 802bb9a:	f7f6 fa61 	bl	8022060 <_exit>

0802bb9e <quorem>:
 802bb9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bba2:	6903      	ldr	r3, [r0, #16]
 802bba4:	690c      	ldr	r4, [r1, #16]
 802bba6:	42a3      	cmp	r3, r4
 802bba8:	4607      	mov	r7, r0
 802bbaa:	db7e      	blt.n	802bcaa <quorem+0x10c>
 802bbac:	3c01      	subs	r4, #1
 802bbae:	f101 0814 	add.w	r8, r1, #20
 802bbb2:	00a3      	lsls	r3, r4, #2
 802bbb4:	f100 0514 	add.w	r5, r0, #20
 802bbb8:	9300      	str	r3, [sp, #0]
 802bbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802bbbe:	9301      	str	r3, [sp, #4]
 802bbc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802bbc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802bbc8:	3301      	adds	r3, #1
 802bbca:	429a      	cmp	r2, r3
 802bbcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802bbd0:	fbb2 f6f3 	udiv	r6, r2, r3
 802bbd4:	d32e      	bcc.n	802bc34 <quorem+0x96>
 802bbd6:	f04f 0a00 	mov.w	sl, #0
 802bbda:	46c4      	mov	ip, r8
 802bbdc:	46ae      	mov	lr, r5
 802bbde:	46d3      	mov	fp, sl
 802bbe0:	f85c 3b04 	ldr.w	r3, [ip], #4
 802bbe4:	b298      	uxth	r0, r3
 802bbe6:	fb06 a000 	mla	r0, r6, r0, sl
 802bbea:	0c02      	lsrs	r2, r0, #16
 802bbec:	0c1b      	lsrs	r3, r3, #16
 802bbee:	fb06 2303 	mla	r3, r6, r3, r2
 802bbf2:	f8de 2000 	ldr.w	r2, [lr]
 802bbf6:	b280      	uxth	r0, r0
 802bbf8:	b292      	uxth	r2, r2
 802bbfa:	1a12      	subs	r2, r2, r0
 802bbfc:	445a      	add	r2, fp
 802bbfe:	f8de 0000 	ldr.w	r0, [lr]
 802bc02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802bc06:	b29b      	uxth	r3, r3
 802bc08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802bc0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802bc10:	b292      	uxth	r2, r2
 802bc12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802bc16:	45e1      	cmp	r9, ip
 802bc18:	f84e 2b04 	str.w	r2, [lr], #4
 802bc1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802bc20:	d2de      	bcs.n	802bbe0 <quorem+0x42>
 802bc22:	9b00      	ldr	r3, [sp, #0]
 802bc24:	58eb      	ldr	r3, [r5, r3]
 802bc26:	b92b      	cbnz	r3, 802bc34 <quorem+0x96>
 802bc28:	9b01      	ldr	r3, [sp, #4]
 802bc2a:	3b04      	subs	r3, #4
 802bc2c:	429d      	cmp	r5, r3
 802bc2e:	461a      	mov	r2, r3
 802bc30:	d32f      	bcc.n	802bc92 <quorem+0xf4>
 802bc32:	613c      	str	r4, [r7, #16]
 802bc34:	4638      	mov	r0, r7
 802bc36:	f001 f911 	bl	802ce5c <__mcmp>
 802bc3a:	2800      	cmp	r0, #0
 802bc3c:	db25      	blt.n	802bc8a <quorem+0xec>
 802bc3e:	4629      	mov	r1, r5
 802bc40:	2000      	movs	r0, #0
 802bc42:	f858 2b04 	ldr.w	r2, [r8], #4
 802bc46:	f8d1 c000 	ldr.w	ip, [r1]
 802bc4a:	fa1f fe82 	uxth.w	lr, r2
 802bc4e:	fa1f f38c 	uxth.w	r3, ip
 802bc52:	eba3 030e 	sub.w	r3, r3, lr
 802bc56:	4403      	add	r3, r0
 802bc58:	0c12      	lsrs	r2, r2, #16
 802bc5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802bc5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802bc62:	b29b      	uxth	r3, r3
 802bc64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802bc68:	45c1      	cmp	r9, r8
 802bc6a:	f841 3b04 	str.w	r3, [r1], #4
 802bc6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 802bc72:	d2e6      	bcs.n	802bc42 <quorem+0xa4>
 802bc74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802bc78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802bc7c:	b922      	cbnz	r2, 802bc88 <quorem+0xea>
 802bc7e:	3b04      	subs	r3, #4
 802bc80:	429d      	cmp	r5, r3
 802bc82:	461a      	mov	r2, r3
 802bc84:	d30b      	bcc.n	802bc9e <quorem+0x100>
 802bc86:	613c      	str	r4, [r7, #16]
 802bc88:	3601      	adds	r6, #1
 802bc8a:	4630      	mov	r0, r6
 802bc8c:	b003      	add	sp, #12
 802bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc92:	6812      	ldr	r2, [r2, #0]
 802bc94:	3b04      	subs	r3, #4
 802bc96:	2a00      	cmp	r2, #0
 802bc98:	d1cb      	bne.n	802bc32 <quorem+0x94>
 802bc9a:	3c01      	subs	r4, #1
 802bc9c:	e7c6      	b.n	802bc2c <quorem+0x8e>
 802bc9e:	6812      	ldr	r2, [r2, #0]
 802bca0:	3b04      	subs	r3, #4
 802bca2:	2a00      	cmp	r2, #0
 802bca4:	d1ef      	bne.n	802bc86 <quorem+0xe8>
 802bca6:	3c01      	subs	r4, #1
 802bca8:	e7ea      	b.n	802bc80 <quorem+0xe2>
 802bcaa:	2000      	movs	r0, #0
 802bcac:	e7ee      	b.n	802bc8c <quorem+0xee>
	...

0802bcb0 <_dtoa_r>:
 802bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bcb4:	69c7      	ldr	r7, [r0, #28]
 802bcb6:	b097      	sub	sp, #92	@ 0x5c
 802bcb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 802bcbc:	ec55 4b10 	vmov	r4, r5, d0
 802bcc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802bcc2:	9107      	str	r1, [sp, #28]
 802bcc4:	4681      	mov	r9, r0
 802bcc6:	920c      	str	r2, [sp, #48]	@ 0x30
 802bcc8:	9311      	str	r3, [sp, #68]	@ 0x44
 802bcca:	b97f      	cbnz	r7, 802bcec <_dtoa_r+0x3c>
 802bccc:	2010      	movs	r0, #16
 802bcce:	f7fe fa77 	bl	802a1c0 <malloc>
 802bcd2:	4602      	mov	r2, r0
 802bcd4:	f8c9 001c 	str.w	r0, [r9, #28]
 802bcd8:	b920      	cbnz	r0, 802bce4 <_dtoa_r+0x34>
 802bcda:	4ba9      	ldr	r3, [pc, #676]	@ (802bf80 <_dtoa_r+0x2d0>)
 802bcdc:	21ef      	movs	r1, #239	@ 0xef
 802bcde:	48a9      	ldr	r0, [pc, #676]	@ (802bf84 <_dtoa_r+0x2d4>)
 802bce0:	f7fe fa4c 	bl	802a17c <__assert_func>
 802bce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802bce8:	6007      	str	r7, [r0, #0]
 802bcea:	60c7      	str	r7, [r0, #12]
 802bcec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802bcf0:	6819      	ldr	r1, [r3, #0]
 802bcf2:	b159      	cbz	r1, 802bd0c <_dtoa_r+0x5c>
 802bcf4:	685a      	ldr	r2, [r3, #4]
 802bcf6:	604a      	str	r2, [r1, #4]
 802bcf8:	2301      	movs	r3, #1
 802bcfa:	4093      	lsls	r3, r2
 802bcfc:	608b      	str	r3, [r1, #8]
 802bcfe:	4648      	mov	r0, r9
 802bd00:	f000 fe30 	bl	802c964 <_Bfree>
 802bd04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802bd08:	2200      	movs	r2, #0
 802bd0a:	601a      	str	r2, [r3, #0]
 802bd0c:	1e2b      	subs	r3, r5, #0
 802bd0e:	bfb9      	ittee	lt
 802bd10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802bd14:	9305      	strlt	r3, [sp, #20]
 802bd16:	2300      	movge	r3, #0
 802bd18:	6033      	strge	r3, [r6, #0]
 802bd1a:	9f05      	ldr	r7, [sp, #20]
 802bd1c:	4b9a      	ldr	r3, [pc, #616]	@ (802bf88 <_dtoa_r+0x2d8>)
 802bd1e:	bfbc      	itt	lt
 802bd20:	2201      	movlt	r2, #1
 802bd22:	6032      	strlt	r2, [r6, #0]
 802bd24:	43bb      	bics	r3, r7
 802bd26:	d112      	bne.n	802bd4e <_dtoa_r+0x9e>
 802bd28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802bd2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 802bd2e:	6013      	str	r3, [r2, #0]
 802bd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802bd34:	4323      	orrs	r3, r4
 802bd36:	f000 855a 	beq.w	802c7ee <_dtoa_r+0xb3e>
 802bd3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bd3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 802bf9c <_dtoa_r+0x2ec>
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	f000 855c 	beq.w	802c7fe <_dtoa_r+0xb4e>
 802bd46:	f10a 0303 	add.w	r3, sl, #3
 802bd4a:	f000 bd56 	b.w	802c7fa <_dtoa_r+0xb4a>
 802bd4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 802bd52:	2200      	movs	r2, #0
 802bd54:	ec51 0b17 	vmov	r0, r1, d7
 802bd58:	2300      	movs	r3, #0
 802bd5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802bd5e:	f7f4 fed3 	bl	8020b08 <__aeabi_dcmpeq>
 802bd62:	4680      	mov	r8, r0
 802bd64:	b158      	cbz	r0, 802bd7e <_dtoa_r+0xce>
 802bd66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802bd68:	2301      	movs	r3, #1
 802bd6a:	6013      	str	r3, [r2, #0]
 802bd6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bd6e:	b113      	cbz	r3, 802bd76 <_dtoa_r+0xc6>
 802bd70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802bd72:	4b86      	ldr	r3, [pc, #536]	@ (802bf8c <_dtoa_r+0x2dc>)
 802bd74:	6013      	str	r3, [r2, #0]
 802bd76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 802bfa0 <_dtoa_r+0x2f0>
 802bd7a:	f000 bd40 	b.w	802c7fe <_dtoa_r+0xb4e>
 802bd7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 802bd82:	aa14      	add	r2, sp, #80	@ 0x50
 802bd84:	a915      	add	r1, sp, #84	@ 0x54
 802bd86:	4648      	mov	r0, r9
 802bd88:	f001 f988 	bl	802d09c <__d2b>
 802bd8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802bd90:	9002      	str	r0, [sp, #8]
 802bd92:	2e00      	cmp	r6, #0
 802bd94:	d078      	beq.n	802be88 <_dtoa_r+0x1d8>
 802bd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bd98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 802bd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802bda0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802bda4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802bda8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802bdac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802bdb0:	4619      	mov	r1, r3
 802bdb2:	2200      	movs	r2, #0
 802bdb4:	4b76      	ldr	r3, [pc, #472]	@ (802bf90 <_dtoa_r+0x2e0>)
 802bdb6:	f7f4 fa87 	bl	80202c8 <__aeabi_dsub>
 802bdba:	a36b      	add	r3, pc, #428	@ (adr r3, 802bf68 <_dtoa_r+0x2b8>)
 802bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdc0:	f7f4 fc3a 	bl	8020638 <__aeabi_dmul>
 802bdc4:	a36a      	add	r3, pc, #424	@ (adr r3, 802bf70 <_dtoa_r+0x2c0>)
 802bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdca:	f7f4 fa7f 	bl	80202cc <__adddf3>
 802bdce:	4604      	mov	r4, r0
 802bdd0:	4630      	mov	r0, r6
 802bdd2:	460d      	mov	r5, r1
 802bdd4:	f7f4 fbc6 	bl	8020564 <__aeabi_i2d>
 802bdd8:	a367      	add	r3, pc, #412	@ (adr r3, 802bf78 <_dtoa_r+0x2c8>)
 802bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdde:	f7f4 fc2b 	bl	8020638 <__aeabi_dmul>
 802bde2:	4602      	mov	r2, r0
 802bde4:	460b      	mov	r3, r1
 802bde6:	4620      	mov	r0, r4
 802bde8:	4629      	mov	r1, r5
 802bdea:	f7f4 fa6f 	bl	80202cc <__adddf3>
 802bdee:	4604      	mov	r4, r0
 802bdf0:	460d      	mov	r5, r1
 802bdf2:	f7f4 fed1 	bl	8020b98 <__aeabi_d2iz>
 802bdf6:	2200      	movs	r2, #0
 802bdf8:	4607      	mov	r7, r0
 802bdfa:	2300      	movs	r3, #0
 802bdfc:	4620      	mov	r0, r4
 802bdfe:	4629      	mov	r1, r5
 802be00:	f7f4 fe8c 	bl	8020b1c <__aeabi_dcmplt>
 802be04:	b140      	cbz	r0, 802be18 <_dtoa_r+0x168>
 802be06:	4638      	mov	r0, r7
 802be08:	f7f4 fbac 	bl	8020564 <__aeabi_i2d>
 802be0c:	4622      	mov	r2, r4
 802be0e:	462b      	mov	r3, r5
 802be10:	f7f4 fe7a 	bl	8020b08 <__aeabi_dcmpeq>
 802be14:	b900      	cbnz	r0, 802be18 <_dtoa_r+0x168>
 802be16:	3f01      	subs	r7, #1
 802be18:	2f16      	cmp	r7, #22
 802be1a:	d852      	bhi.n	802bec2 <_dtoa_r+0x212>
 802be1c:	4b5d      	ldr	r3, [pc, #372]	@ (802bf94 <_dtoa_r+0x2e4>)
 802be1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802be2a:	f7f4 fe77 	bl	8020b1c <__aeabi_dcmplt>
 802be2e:	2800      	cmp	r0, #0
 802be30:	d049      	beq.n	802bec6 <_dtoa_r+0x216>
 802be32:	3f01      	subs	r7, #1
 802be34:	2300      	movs	r3, #0
 802be36:	9310      	str	r3, [sp, #64]	@ 0x40
 802be38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802be3a:	1b9b      	subs	r3, r3, r6
 802be3c:	1e5a      	subs	r2, r3, #1
 802be3e:	bf45      	ittet	mi
 802be40:	f1c3 0301 	rsbmi	r3, r3, #1
 802be44:	9300      	strmi	r3, [sp, #0]
 802be46:	2300      	movpl	r3, #0
 802be48:	2300      	movmi	r3, #0
 802be4a:	9206      	str	r2, [sp, #24]
 802be4c:	bf54      	ite	pl
 802be4e:	9300      	strpl	r3, [sp, #0]
 802be50:	9306      	strmi	r3, [sp, #24]
 802be52:	2f00      	cmp	r7, #0
 802be54:	db39      	blt.n	802beca <_dtoa_r+0x21a>
 802be56:	9b06      	ldr	r3, [sp, #24]
 802be58:	970d      	str	r7, [sp, #52]	@ 0x34
 802be5a:	443b      	add	r3, r7
 802be5c:	9306      	str	r3, [sp, #24]
 802be5e:	2300      	movs	r3, #0
 802be60:	9308      	str	r3, [sp, #32]
 802be62:	9b07      	ldr	r3, [sp, #28]
 802be64:	2b09      	cmp	r3, #9
 802be66:	d863      	bhi.n	802bf30 <_dtoa_r+0x280>
 802be68:	2b05      	cmp	r3, #5
 802be6a:	bfc4      	itt	gt
 802be6c:	3b04      	subgt	r3, #4
 802be6e:	9307      	strgt	r3, [sp, #28]
 802be70:	9b07      	ldr	r3, [sp, #28]
 802be72:	f1a3 0302 	sub.w	r3, r3, #2
 802be76:	bfcc      	ite	gt
 802be78:	2400      	movgt	r4, #0
 802be7a:	2401      	movle	r4, #1
 802be7c:	2b03      	cmp	r3, #3
 802be7e:	d863      	bhi.n	802bf48 <_dtoa_r+0x298>
 802be80:	e8df f003 	tbb	[pc, r3]
 802be84:	2b375452 	.word	0x2b375452
 802be88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 802be8c:	441e      	add	r6, r3
 802be8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802be92:	2b20      	cmp	r3, #32
 802be94:	bfc1      	itttt	gt
 802be96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802be9a:	409f      	lslgt	r7, r3
 802be9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802bea0:	fa24 f303 	lsrgt.w	r3, r4, r3
 802bea4:	bfd6      	itet	le
 802bea6:	f1c3 0320 	rsble	r3, r3, #32
 802beaa:	ea47 0003 	orrgt.w	r0, r7, r3
 802beae:	fa04 f003 	lslle.w	r0, r4, r3
 802beb2:	f7f4 fb47 	bl	8020544 <__aeabi_ui2d>
 802beb6:	2201      	movs	r2, #1
 802beb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802bebc:	3e01      	subs	r6, #1
 802bebe:	9212      	str	r2, [sp, #72]	@ 0x48
 802bec0:	e776      	b.n	802bdb0 <_dtoa_r+0x100>
 802bec2:	2301      	movs	r3, #1
 802bec4:	e7b7      	b.n	802be36 <_dtoa_r+0x186>
 802bec6:	9010      	str	r0, [sp, #64]	@ 0x40
 802bec8:	e7b6      	b.n	802be38 <_dtoa_r+0x188>
 802beca:	9b00      	ldr	r3, [sp, #0]
 802becc:	1bdb      	subs	r3, r3, r7
 802bece:	9300      	str	r3, [sp, #0]
 802bed0:	427b      	negs	r3, r7
 802bed2:	9308      	str	r3, [sp, #32]
 802bed4:	2300      	movs	r3, #0
 802bed6:	930d      	str	r3, [sp, #52]	@ 0x34
 802bed8:	e7c3      	b.n	802be62 <_dtoa_r+0x1b2>
 802beda:	2301      	movs	r3, #1
 802bedc:	9309      	str	r3, [sp, #36]	@ 0x24
 802bede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802bee0:	eb07 0b03 	add.w	fp, r7, r3
 802bee4:	f10b 0301 	add.w	r3, fp, #1
 802bee8:	2b01      	cmp	r3, #1
 802beea:	9303      	str	r3, [sp, #12]
 802beec:	bfb8      	it	lt
 802beee:	2301      	movlt	r3, #1
 802bef0:	e006      	b.n	802bf00 <_dtoa_r+0x250>
 802bef2:	2301      	movs	r3, #1
 802bef4:	9309      	str	r3, [sp, #36]	@ 0x24
 802bef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802bef8:	2b00      	cmp	r3, #0
 802befa:	dd28      	ble.n	802bf4e <_dtoa_r+0x29e>
 802befc:	469b      	mov	fp, r3
 802befe:	9303      	str	r3, [sp, #12]
 802bf00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 802bf04:	2100      	movs	r1, #0
 802bf06:	2204      	movs	r2, #4
 802bf08:	f102 0514 	add.w	r5, r2, #20
 802bf0c:	429d      	cmp	r5, r3
 802bf0e:	d926      	bls.n	802bf5e <_dtoa_r+0x2ae>
 802bf10:	6041      	str	r1, [r0, #4]
 802bf12:	4648      	mov	r0, r9
 802bf14:	f000 fce6 	bl	802c8e4 <_Balloc>
 802bf18:	4682      	mov	sl, r0
 802bf1a:	2800      	cmp	r0, #0
 802bf1c:	d142      	bne.n	802bfa4 <_dtoa_r+0x2f4>
 802bf1e:	4b1e      	ldr	r3, [pc, #120]	@ (802bf98 <_dtoa_r+0x2e8>)
 802bf20:	4602      	mov	r2, r0
 802bf22:	f240 11af 	movw	r1, #431	@ 0x1af
 802bf26:	e6da      	b.n	802bcde <_dtoa_r+0x2e>
 802bf28:	2300      	movs	r3, #0
 802bf2a:	e7e3      	b.n	802bef4 <_dtoa_r+0x244>
 802bf2c:	2300      	movs	r3, #0
 802bf2e:	e7d5      	b.n	802bedc <_dtoa_r+0x22c>
 802bf30:	2401      	movs	r4, #1
 802bf32:	2300      	movs	r3, #0
 802bf34:	9307      	str	r3, [sp, #28]
 802bf36:	9409      	str	r4, [sp, #36]	@ 0x24
 802bf38:	f04f 3bff 	mov.w	fp, #4294967295
 802bf3c:	2200      	movs	r2, #0
 802bf3e:	f8cd b00c 	str.w	fp, [sp, #12]
 802bf42:	2312      	movs	r3, #18
 802bf44:	920c      	str	r2, [sp, #48]	@ 0x30
 802bf46:	e7db      	b.n	802bf00 <_dtoa_r+0x250>
 802bf48:	2301      	movs	r3, #1
 802bf4a:	9309      	str	r3, [sp, #36]	@ 0x24
 802bf4c:	e7f4      	b.n	802bf38 <_dtoa_r+0x288>
 802bf4e:	f04f 0b01 	mov.w	fp, #1
 802bf52:	f8cd b00c 	str.w	fp, [sp, #12]
 802bf56:	465b      	mov	r3, fp
 802bf58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 802bf5c:	e7d0      	b.n	802bf00 <_dtoa_r+0x250>
 802bf5e:	3101      	adds	r1, #1
 802bf60:	0052      	lsls	r2, r2, #1
 802bf62:	e7d1      	b.n	802bf08 <_dtoa_r+0x258>
 802bf64:	f3af 8000 	nop.w
 802bf68:	636f4361 	.word	0x636f4361
 802bf6c:	3fd287a7 	.word	0x3fd287a7
 802bf70:	8b60c8b3 	.word	0x8b60c8b3
 802bf74:	3fc68a28 	.word	0x3fc68a28
 802bf78:	509f79fb 	.word	0x509f79fb
 802bf7c:	3fd34413 	.word	0x3fd34413
 802bf80:	0802f2fb 	.word	0x0802f2fb
 802bf84:	0802f312 	.word	0x0802f312
 802bf88:	7ff00000 	.word	0x7ff00000
 802bf8c:	0802f2b5 	.word	0x0802f2b5
 802bf90:	3ff80000 	.word	0x3ff80000
 802bf94:	0802f578 	.word	0x0802f578
 802bf98:	0802f36a 	.word	0x0802f36a
 802bf9c:	0802f2f7 	.word	0x0802f2f7
 802bfa0:	0802f2b4 	.word	0x0802f2b4
 802bfa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802bfa8:	6018      	str	r0, [r3, #0]
 802bfaa:	9b03      	ldr	r3, [sp, #12]
 802bfac:	2b0e      	cmp	r3, #14
 802bfae:	f200 80a1 	bhi.w	802c0f4 <_dtoa_r+0x444>
 802bfb2:	2c00      	cmp	r4, #0
 802bfb4:	f000 809e 	beq.w	802c0f4 <_dtoa_r+0x444>
 802bfb8:	2f00      	cmp	r7, #0
 802bfba:	dd33      	ble.n	802c024 <_dtoa_r+0x374>
 802bfbc:	4b9c      	ldr	r3, [pc, #624]	@ (802c230 <_dtoa_r+0x580>)
 802bfbe:	f007 020f 	and.w	r2, r7, #15
 802bfc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802bfc6:	ed93 7b00 	vldr	d7, [r3]
 802bfca:	05f8      	lsls	r0, r7, #23
 802bfcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 802bfd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 802bfd4:	d516      	bpl.n	802c004 <_dtoa_r+0x354>
 802bfd6:	4b97      	ldr	r3, [pc, #604]	@ (802c234 <_dtoa_r+0x584>)
 802bfd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802bfdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802bfe0:	f7f4 fc54 	bl	802088c <__aeabi_ddiv>
 802bfe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802bfe8:	f004 040f 	and.w	r4, r4, #15
 802bfec:	2603      	movs	r6, #3
 802bfee:	4d91      	ldr	r5, [pc, #580]	@ (802c234 <_dtoa_r+0x584>)
 802bff0:	b954      	cbnz	r4, 802c008 <_dtoa_r+0x358>
 802bff2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802bff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802bffa:	f7f4 fc47 	bl	802088c <__aeabi_ddiv>
 802bffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c002:	e028      	b.n	802c056 <_dtoa_r+0x3a6>
 802c004:	2602      	movs	r6, #2
 802c006:	e7f2      	b.n	802bfee <_dtoa_r+0x33e>
 802c008:	07e1      	lsls	r1, r4, #31
 802c00a:	d508      	bpl.n	802c01e <_dtoa_r+0x36e>
 802c00c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 802c010:	e9d5 2300 	ldrd	r2, r3, [r5]
 802c014:	f7f4 fb10 	bl	8020638 <__aeabi_dmul>
 802c018:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 802c01c:	3601      	adds	r6, #1
 802c01e:	1064      	asrs	r4, r4, #1
 802c020:	3508      	adds	r5, #8
 802c022:	e7e5      	b.n	802bff0 <_dtoa_r+0x340>
 802c024:	f000 80af 	beq.w	802c186 <_dtoa_r+0x4d6>
 802c028:	427c      	negs	r4, r7
 802c02a:	4b81      	ldr	r3, [pc, #516]	@ (802c230 <_dtoa_r+0x580>)
 802c02c:	4d81      	ldr	r5, [pc, #516]	@ (802c234 <_dtoa_r+0x584>)
 802c02e:	f004 020f 	and.w	r2, r4, #15
 802c032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c03a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802c03e:	f7f4 fafb 	bl	8020638 <__aeabi_dmul>
 802c042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c046:	1124      	asrs	r4, r4, #4
 802c048:	2300      	movs	r3, #0
 802c04a:	2602      	movs	r6, #2
 802c04c:	2c00      	cmp	r4, #0
 802c04e:	f040 808f 	bne.w	802c170 <_dtoa_r+0x4c0>
 802c052:	2b00      	cmp	r3, #0
 802c054:	d1d3      	bne.n	802bffe <_dtoa_r+0x34e>
 802c056:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c058:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 802c05c:	2b00      	cmp	r3, #0
 802c05e:	f000 8094 	beq.w	802c18a <_dtoa_r+0x4da>
 802c062:	4b75      	ldr	r3, [pc, #468]	@ (802c238 <_dtoa_r+0x588>)
 802c064:	2200      	movs	r2, #0
 802c066:	4620      	mov	r0, r4
 802c068:	4629      	mov	r1, r5
 802c06a:	f7f4 fd57 	bl	8020b1c <__aeabi_dcmplt>
 802c06e:	2800      	cmp	r0, #0
 802c070:	f000 808b 	beq.w	802c18a <_dtoa_r+0x4da>
 802c074:	9b03      	ldr	r3, [sp, #12]
 802c076:	2b00      	cmp	r3, #0
 802c078:	f000 8087 	beq.w	802c18a <_dtoa_r+0x4da>
 802c07c:	f1bb 0f00 	cmp.w	fp, #0
 802c080:	dd34      	ble.n	802c0ec <_dtoa_r+0x43c>
 802c082:	4620      	mov	r0, r4
 802c084:	4b6d      	ldr	r3, [pc, #436]	@ (802c23c <_dtoa_r+0x58c>)
 802c086:	2200      	movs	r2, #0
 802c088:	4629      	mov	r1, r5
 802c08a:	f7f4 fad5 	bl	8020638 <__aeabi_dmul>
 802c08e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c092:	f107 38ff 	add.w	r8, r7, #4294967295
 802c096:	3601      	adds	r6, #1
 802c098:	465c      	mov	r4, fp
 802c09a:	4630      	mov	r0, r6
 802c09c:	f7f4 fa62 	bl	8020564 <__aeabi_i2d>
 802c0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c0a4:	f7f4 fac8 	bl	8020638 <__aeabi_dmul>
 802c0a8:	4b65      	ldr	r3, [pc, #404]	@ (802c240 <_dtoa_r+0x590>)
 802c0aa:	2200      	movs	r2, #0
 802c0ac:	f7f4 f90e 	bl	80202cc <__adddf3>
 802c0b0:	4605      	mov	r5, r0
 802c0b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802c0b6:	2c00      	cmp	r4, #0
 802c0b8:	d16a      	bne.n	802c190 <_dtoa_r+0x4e0>
 802c0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c0be:	4b61      	ldr	r3, [pc, #388]	@ (802c244 <_dtoa_r+0x594>)
 802c0c0:	2200      	movs	r2, #0
 802c0c2:	f7f4 f901 	bl	80202c8 <__aeabi_dsub>
 802c0c6:	4602      	mov	r2, r0
 802c0c8:	460b      	mov	r3, r1
 802c0ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802c0ce:	462a      	mov	r2, r5
 802c0d0:	4633      	mov	r3, r6
 802c0d2:	f7f4 fd41 	bl	8020b58 <__aeabi_dcmpgt>
 802c0d6:	2800      	cmp	r0, #0
 802c0d8:	f040 8298 	bne.w	802c60c <_dtoa_r+0x95c>
 802c0dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c0e0:	462a      	mov	r2, r5
 802c0e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802c0e6:	f7f4 fd19 	bl	8020b1c <__aeabi_dcmplt>
 802c0ea:	bb38      	cbnz	r0, 802c13c <_dtoa_r+0x48c>
 802c0ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 802c0f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 802c0f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802c0f6:	2b00      	cmp	r3, #0
 802c0f8:	f2c0 8157 	blt.w	802c3aa <_dtoa_r+0x6fa>
 802c0fc:	2f0e      	cmp	r7, #14
 802c0fe:	f300 8154 	bgt.w	802c3aa <_dtoa_r+0x6fa>
 802c102:	4b4b      	ldr	r3, [pc, #300]	@ (802c230 <_dtoa_r+0x580>)
 802c104:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802c108:	ed93 7b00 	vldr	d7, [r3]
 802c10c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802c10e:	2b00      	cmp	r3, #0
 802c110:	ed8d 7b00 	vstr	d7, [sp]
 802c114:	f280 80e5 	bge.w	802c2e2 <_dtoa_r+0x632>
 802c118:	9b03      	ldr	r3, [sp, #12]
 802c11a:	2b00      	cmp	r3, #0
 802c11c:	f300 80e1 	bgt.w	802c2e2 <_dtoa_r+0x632>
 802c120:	d10c      	bne.n	802c13c <_dtoa_r+0x48c>
 802c122:	4b48      	ldr	r3, [pc, #288]	@ (802c244 <_dtoa_r+0x594>)
 802c124:	2200      	movs	r2, #0
 802c126:	ec51 0b17 	vmov	r0, r1, d7
 802c12a:	f7f4 fa85 	bl	8020638 <__aeabi_dmul>
 802c12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c132:	f7f4 fd07 	bl	8020b44 <__aeabi_dcmpge>
 802c136:	2800      	cmp	r0, #0
 802c138:	f000 8266 	beq.w	802c608 <_dtoa_r+0x958>
 802c13c:	2400      	movs	r4, #0
 802c13e:	4625      	mov	r5, r4
 802c140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802c142:	4656      	mov	r6, sl
 802c144:	ea6f 0803 	mvn.w	r8, r3
 802c148:	2700      	movs	r7, #0
 802c14a:	4621      	mov	r1, r4
 802c14c:	4648      	mov	r0, r9
 802c14e:	f000 fc09 	bl	802c964 <_Bfree>
 802c152:	2d00      	cmp	r5, #0
 802c154:	f000 80bd 	beq.w	802c2d2 <_dtoa_r+0x622>
 802c158:	b12f      	cbz	r7, 802c166 <_dtoa_r+0x4b6>
 802c15a:	42af      	cmp	r7, r5
 802c15c:	d003      	beq.n	802c166 <_dtoa_r+0x4b6>
 802c15e:	4639      	mov	r1, r7
 802c160:	4648      	mov	r0, r9
 802c162:	f000 fbff 	bl	802c964 <_Bfree>
 802c166:	4629      	mov	r1, r5
 802c168:	4648      	mov	r0, r9
 802c16a:	f000 fbfb 	bl	802c964 <_Bfree>
 802c16e:	e0b0      	b.n	802c2d2 <_dtoa_r+0x622>
 802c170:	07e2      	lsls	r2, r4, #31
 802c172:	d505      	bpl.n	802c180 <_dtoa_r+0x4d0>
 802c174:	e9d5 2300 	ldrd	r2, r3, [r5]
 802c178:	f7f4 fa5e 	bl	8020638 <__aeabi_dmul>
 802c17c:	3601      	adds	r6, #1
 802c17e:	2301      	movs	r3, #1
 802c180:	1064      	asrs	r4, r4, #1
 802c182:	3508      	adds	r5, #8
 802c184:	e762      	b.n	802c04c <_dtoa_r+0x39c>
 802c186:	2602      	movs	r6, #2
 802c188:	e765      	b.n	802c056 <_dtoa_r+0x3a6>
 802c18a:	9c03      	ldr	r4, [sp, #12]
 802c18c:	46b8      	mov	r8, r7
 802c18e:	e784      	b.n	802c09a <_dtoa_r+0x3ea>
 802c190:	4b27      	ldr	r3, [pc, #156]	@ (802c230 <_dtoa_r+0x580>)
 802c192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802c194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802c198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802c19c:	4454      	add	r4, sl
 802c19e:	2900      	cmp	r1, #0
 802c1a0:	d054      	beq.n	802c24c <_dtoa_r+0x59c>
 802c1a2:	4929      	ldr	r1, [pc, #164]	@ (802c248 <_dtoa_r+0x598>)
 802c1a4:	2000      	movs	r0, #0
 802c1a6:	f7f4 fb71 	bl	802088c <__aeabi_ddiv>
 802c1aa:	4633      	mov	r3, r6
 802c1ac:	462a      	mov	r2, r5
 802c1ae:	f7f4 f88b 	bl	80202c8 <__aeabi_dsub>
 802c1b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 802c1b6:	4656      	mov	r6, sl
 802c1b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c1bc:	f7f4 fcec 	bl	8020b98 <__aeabi_d2iz>
 802c1c0:	4605      	mov	r5, r0
 802c1c2:	f7f4 f9cf 	bl	8020564 <__aeabi_i2d>
 802c1c6:	4602      	mov	r2, r0
 802c1c8:	460b      	mov	r3, r1
 802c1ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c1ce:	f7f4 f87b 	bl	80202c8 <__aeabi_dsub>
 802c1d2:	3530      	adds	r5, #48	@ 0x30
 802c1d4:	4602      	mov	r2, r0
 802c1d6:	460b      	mov	r3, r1
 802c1d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802c1dc:	f806 5b01 	strb.w	r5, [r6], #1
 802c1e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802c1e4:	f7f4 fc9a 	bl	8020b1c <__aeabi_dcmplt>
 802c1e8:	2800      	cmp	r0, #0
 802c1ea:	d172      	bne.n	802c2d2 <_dtoa_r+0x622>
 802c1ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c1f0:	4911      	ldr	r1, [pc, #68]	@ (802c238 <_dtoa_r+0x588>)
 802c1f2:	2000      	movs	r0, #0
 802c1f4:	f7f4 f868 	bl	80202c8 <__aeabi_dsub>
 802c1f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802c1fc:	f7f4 fc8e 	bl	8020b1c <__aeabi_dcmplt>
 802c200:	2800      	cmp	r0, #0
 802c202:	f040 80b4 	bne.w	802c36e <_dtoa_r+0x6be>
 802c206:	42a6      	cmp	r6, r4
 802c208:	f43f af70 	beq.w	802c0ec <_dtoa_r+0x43c>
 802c20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 802c210:	4b0a      	ldr	r3, [pc, #40]	@ (802c23c <_dtoa_r+0x58c>)
 802c212:	2200      	movs	r2, #0
 802c214:	f7f4 fa10 	bl	8020638 <__aeabi_dmul>
 802c218:	4b08      	ldr	r3, [pc, #32]	@ (802c23c <_dtoa_r+0x58c>)
 802c21a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 802c21e:	2200      	movs	r2, #0
 802c220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c224:	f7f4 fa08 	bl	8020638 <__aeabi_dmul>
 802c228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c22c:	e7c4      	b.n	802c1b8 <_dtoa_r+0x508>
 802c22e:	bf00      	nop
 802c230:	0802f578 	.word	0x0802f578
 802c234:	0802f550 	.word	0x0802f550
 802c238:	3ff00000 	.word	0x3ff00000
 802c23c:	40240000 	.word	0x40240000
 802c240:	401c0000 	.word	0x401c0000
 802c244:	40140000 	.word	0x40140000
 802c248:	3fe00000 	.word	0x3fe00000
 802c24c:	4631      	mov	r1, r6
 802c24e:	4628      	mov	r0, r5
 802c250:	f7f4 f9f2 	bl	8020638 <__aeabi_dmul>
 802c254:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 802c258:	9413      	str	r4, [sp, #76]	@ 0x4c
 802c25a:	4656      	mov	r6, sl
 802c25c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c260:	f7f4 fc9a 	bl	8020b98 <__aeabi_d2iz>
 802c264:	4605      	mov	r5, r0
 802c266:	f7f4 f97d 	bl	8020564 <__aeabi_i2d>
 802c26a:	4602      	mov	r2, r0
 802c26c:	460b      	mov	r3, r1
 802c26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c272:	f7f4 f829 	bl	80202c8 <__aeabi_dsub>
 802c276:	3530      	adds	r5, #48	@ 0x30
 802c278:	f806 5b01 	strb.w	r5, [r6], #1
 802c27c:	4602      	mov	r2, r0
 802c27e:	460b      	mov	r3, r1
 802c280:	42a6      	cmp	r6, r4
 802c282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802c286:	f04f 0200 	mov.w	r2, #0
 802c28a:	d124      	bne.n	802c2d6 <_dtoa_r+0x626>
 802c28c:	4baf      	ldr	r3, [pc, #700]	@ (802c54c <_dtoa_r+0x89c>)
 802c28e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 802c292:	f7f4 f81b 	bl	80202cc <__adddf3>
 802c296:	4602      	mov	r2, r0
 802c298:	460b      	mov	r3, r1
 802c29a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c29e:	f7f4 fc5b 	bl	8020b58 <__aeabi_dcmpgt>
 802c2a2:	2800      	cmp	r0, #0
 802c2a4:	d163      	bne.n	802c36e <_dtoa_r+0x6be>
 802c2a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802c2aa:	49a8      	ldr	r1, [pc, #672]	@ (802c54c <_dtoa_r+0x89c>)
 802c2ac:	2000      	movs	r0, #0
 802c2ae:	f7f4 f80b 	bl	80202c8 <__aeabi_dsub>
 802c2b2:	4602      	mov	r2, r0
 802c2b4:	460b      	mov	r3, r1
 802c2b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c2ba:	f7f4 fc2f 	bl	8020b1c <__aeabi_dcmplt>
 802c2be:	2800      	cmp	r0, #0
 802c2c0:	f43f af14 	beq.w	802c0ec <_dtoa_r+0x43c>
 802c2c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 802c2c6:	1e73      	subs	r3, r6, #1
 802c2c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c2ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802c2ce:	2b30      	cmp	r3, #48	@ 0x30
 802c2d0:	d0f8      	beq.n	802c2c4 <_dtoa_r+0x614>
 802c2d2:	4647      	mov	r7, r8
 802c2d4:	e03b      	b.n	802c34e <_dtoa_r+0x69e>
 802c2d6:	4b9e      	ldr	r3, [pc, #632]	@ (802c550 <_dtoa_r+0x8a0>)
 802c2d8:	f7f4 f9ae 	bl	8020638 <__aeabi_dmul>
 802c2dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c2e0:	e7bc      	b.n	802c25c <_dtoa_r+0x5ac>
 802c2e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 802c2e6:	4656      	mov	r6, sl
 802c2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c2ec:	4620      	mov	r0, r4
 802c2ee:	4629      	mov	r1, r5
 802c2f0:	f7f4 facc 	bl	802088c <__aeabi_ddiv>
 802c2f4:	f7f4 fc50 	bl	8020b98 <__aeabi_d2iz>
 802c2f8:	4680      	mov	r8, r0
 802c2fa:	f7f4 f933 	bl	8020564 <__aeabi_i2d>
 802c2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c302:	f7f4 f999 	bl	8020638 <__aeabi_dmul>
 802c306:	4602      	mov	r2, r0
 802c308:	460b      	mov	r3, r1
 802c30a:	4620      	mov	r0, r4
 802c30c:	4629      	mov	r1, r5
 802c30e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802c312:	f7f3 ffd9 	bl	80202c8 <__aeabi_dsub>
 802c316:	f806 4b01 	strb.w	r4, [r6], #1
 802c31a:	9d03      	ldr	r5, [sp, #12]
 802c31c:	eba6 040a 	sub.w	r4, r6, sl
 802c320:	42a5      	cmp	r5, r4
 802c322:	4602      	mov	r2, r0
 802c324:	460b      	mov	r3, r1
 802c326:	d133      	bne.n	802c390 <_dtoa_r+0x6e0>
 802c328:	f7f3 ffd0 	bl	80202cc <__adddf3>
 802c32c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c330:	4604      	mov	r4, r0
 802c332:	460d      	mov	r5, r1
 802c334:	f7f4 fc10 	bl	8020b58 <__aeabi_dcmpgt>
 802c338:	b9c0      	cbnz	r0, 802c36c <_dtoa_r+0x6bc>
 802c33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c33e:	4620      	mov	r0, r4
 802c340:	4629      	mov	r1, r5
 802c342:	f7f4 fbe1 	bl	8020b08 <__aeabi_dcmpeq>
 802c346:	b110      	cbz	r0, 802c34e <_dtoa_r+0x69e>
 802c348:	f018 0f01 	tst.w	r8, #1
 802c34c:	d10e      	bne.n	802c36c <_dtoa_r+0x6bc>
 802c34e:	9902      	ldr	r1, [sp, #8]
 802c350:	4648      	mov	r0, r9
 802c352:	f000 fb07 	bl	802c964 <_Bfree>
 802c356:	2300      	movs	r3, #0
 802c358:	7033      	strb	r3, [r6, #0]
 802c35a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802c35c:	3701      	adds	r7, #1
 802c35e:	601f      	str	r7, [r3, #0]
 802c360:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802c362:	2b00      	cmp	r3, #0
 802c364:	f000 824b 	beq.w	802c7fe <_dtoa_r+0xb4e>
 802c368:	601e      	str	r6, [r3, #0]
 802c36a:	e248      	b.n	802c7fe <_dtoa_r+0xb4e>
 802c36c:	46b8      	mov	r8, r7
 802c36e:	4633      	mov	r3, r6
 802c370:	461e      	mov	r6, r3
 802c372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c376:	2a39      	cmp	r2, #57	@ 0x39
 802c378:	d106      	bne.n	802c388 <_dtoa_r+0x6d8>
 802c37a:	459a      	cmp	sl, r3
 802c37c:	d1f8      	bne.n	802c370 <_dtoa_r+0x6c0>
 802c37e:	2230      	movs	r2, #48	@ 0x30
 802c380:	f108 0801 	add.w	r8, r8, #1
 802c384:	f88a 2000 	strb.w	r2, [sl]
 802c388:	781a      	ldrb	r2, [r3, #0]
 802c38a:	3201      	adds	r2, #1
 802c38c:	701a      	strb	r2, [r3, #0]
 802c38e:	e7a0      	b.n	802c2d2 <_dtoa_r+0x622>
 802c390:	4b6f      	ldr	r3, [pc, #444]	@ (802c550 <_dtoa_r+0x8a0>)
 802c392:	2200      	movs	r2, #0
 802c394:	f7f4 f950 	bl	8020638 <__aeabi_dmul>
 802c398:	2200      	movs	r2, #0
 802c39a:	2300      	movs	r3, #0
 802c39c:	4604      	mov	r4, r0
 802c39e:	460d      	mov	r5, r1
 802c3a0:	f7f4 fbb2 	bl	8020b08 <__aeabi_dcmpeq>
 802c3a4:	2800      	cmp	r0, #0
 802c3a6:	d09f      	beq.n	802c2e8 <_dtoa_r+0x638>
 802c3a8:	e7d1      	b.n	802c34e <_dtoa_r+0x69e>
 802c3aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c3ac:	2a00      	cmp	r2, #0
 802c3ae:	f000 80ea 	beq.w	802c586 <_dtoa_r+0x8d6>
 802c3b2:	9a07      	ldr	r2, [sp, #28]
 802c3b4:	2a01      	cmp	r2, #1
 802c3b6:	f300 80cd 	bgt.w	802c554 <_dtoa_r+0x8a4>
 802c3ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802c3bc:	2a00      	cmp	r2, #0
 802c3be:	f000 80c1 	beq.w	802c544 <_dtoa_r+0x894>
 802c3c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802c3c6:	9c08      	ldr	r4, [sp, #32]
 802c3c8:	9e00      	ldr	r6, [sp, #0]
 802c3ca:	9a00      	ldr	r2, [sp, #0]
 802c3cc:	441a      	add	r2, r3
 802c3ce:	9200      	str	r2, [sp, #0]
 802c3d0:	9a06      	ldr	r2, [sp, #24]
 802c3d2:	2101      	movs	r1, #1
 802c3d4:	441a      	add	r2, r3
 802c3d6:	4648      	mov	r0, r9
 802c3d8:	9206      	str	r2, [sp, #24]
 802c3da:	f000 fbc1 	bl	802cb60 <__i2b>
 802c3de:	4605      	mov	r5, r0
 802c3e0:	b166      	cbz	r6, 802c3fc <_dtoa_r+0x74c>
 802c3e2:	9b06      	ldr	r3, [sp, #24]
 802c3e4:	2b00      	cmp	r3, #0
 802c3e6:	dd09      	ble.n	802c3fc <_dtoa_r+0x74c>
 802c3e8:	42b3      	cmp	r3, r6
 802c3ea:	9a00      	ldr	r2, [sp, #0]
 802c3ec:	bfa8      	it	ge
 802c3ee:	4633      	movge	r3, r6
 802c3f0:	1ad2      	subs	r2, r2, r3
 802c3f2:	9200      	str	r2, [sp, #0]
 802c3f4:	9a06      	ldr	r2, [sp, #24]
 802c3f6:	1af6      	subs	r6, r6, r3
 802c3f8:	1ad3      	subs	r3, r2, r3
 802c3fa:	9306      	str	r3, [sp, #24]
 802c3fc:	9b08      	ldr	r3, [sp, #32]
 802c3fe:	b30b      	cbz	r3, 802c444 <_dtoa_r+0x794>
 802c400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c402:	2b00      	cmp	r3, #0
 802c404:	f000 80c6 	beq.w	802c594 <_dtoa_r+0x8e4>
 802c408:	2c00      	cmp	r4, #0
 802c40a:	f000 80c0 	beq.w	802c58e <_dtoa_r+0x8de>
 802c40e:	4629      	mov	r1, r5
 802c410:	4622      	mov	r2, r4
 802c412:	4648      	mov	r0, r9
 802c414:	f000 fc5c 	bl	802ccd0 <__pow5mult>
 802c418:	9a02      	ldr	r2, [sp, #8]
 802c41a:	4601      	mov	r1, r0
 802c41c:	4605      	mov	r5, r0
 802c41e:	4648      	mov	r0, r9
 802c420:	f000 fbb4 	bl	802cb8c <__multiply>
 802c424:	9902      	ldr	r1, [sp, #8]
 802c426:	4680      	mov	r8, r0
 802c428:	4648      	mov	r0, r9
 802c42a:	f000 fa9b 	bl	802c964 <_Bfree>
 802c42e:	9b08      	ldr	r3, [sp, #32]
 802c430:	1b1b      	subs	r3, r3, r4
 802c432:	9308      	str	r3, [sp, #32]
 802c434:	f000 80b1 	beq.w	802c59a <_dtoa_r+0x8ea>
 802c438:	9a08      	ldr	r2, [sp, #32]
 802c43a:	4641      	mov	r1, r8
 802c43c:	4648      	mov	r0, r9
 802c43e:	f000 fc47 	bl	802ccd0 <__pow5mult>
 802c442:	9002      	str	r0, [sp, #8]
 802c444:	2101      	movs	r1, #1
 802c446:	4648      	mov	r0, r9
 802c448:	f000 fb8a 	bl	802cb60 <__i2b>
 802c44c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802c44e:	4604      	mov	r4, r0
 802c450:	2b00      	cmp	r3, #0
 802c452:	f000 81d8 	beq.w	802c806 <_dtoa_r+0xb56>
 802c456:	461a      	mov	r2, r3
 802c458:	4601      	mov	r1, r0
 802c45a:	4648      	mov	r0, r9
 802c45c:	f000 fc38 	bl	802ccd0 <__pow5mult>
 802c460:	9b07      	ldr	r3, [sp, #28]
 802c462:	2b01      	cmp	r3, #1
 802c464:	4604      	mov	r4, r0
 802c466:	f300 809f 	bgt.w	802c5a8 <_dtoa_r+0x8f8>
 802c46a:	9b04      	ldr	r3, [sp, #16]
 802c46c:	2b00      	cmp	r3, #0
 802c46e:	f040 8097 	bne.w	802c5a0 <_dtoa_r+0x8f0>
 802c472:	9b05      	ldr	r3, [sp, #20]
 802c474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802c478:	2b00      	cmp	r3, #0
 802c47a:	f040 8093 	bne.w	802c5a4 <_dtoa_r+0x8f4>
 802c47e:	9b05      	ldr	r3, [sp, #20]
 802c480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802c484:	0d1b      	lsrs	r3, r3, #20
 802c486:	051b      	lsls	r3, r3, #20
 802c488:	b133      	cbz	r3, 802c498 <_dtoa_r+0x7e8>
 802c48a:	9b00      	ldr	r3, [sp, #0]
 802c48c:	3301      	adds	r3, #1
 802c48e:	9300      	str	r3, [sp, #0]
 802c490:	9b06      	ldr	r3, [sp, #24]
 802c492:	3301      	adds	r3, #1
 802c494:	9306      	str	r3, [sp, #24]
 802c496:	2301      	movs	r3, #1
 802c498:	9308      	str	r3, [sp, #32]
 802c49a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802c49c:	2b00      	cmp	r3, #0
 802c49e:	f000 81b8 	beq.w	802c812 <_dtoa_r+0xb62>
 802c4a2:	6923      	ldr	r3, [r4, #16]
 802c4a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802c4a8:	6918      	ldr	r0, [r3, #16]
 802c4aa:	f000 fb0d 	bl	802cac8 <__hi0bits>
 802c4ae:	f1c0 0020 	rsb	r0, r0, #32
 802c4b2:	9b06      	ldr	r3, [sp, #24]
 802c4b4:	4418      	add	r0, r3
 802c4b6:	f010 001f 	ands.w	r0, r0, #31
 802c4ba:	f000 8082 	beq.w	802c5c2 <_dtoa_r+0x912>
 802c4be:	f1c0 0320 	rsb	r3, r0, #32
 802c4c2:	2b04      	cmp	r3, #4
 802c4c4:	dd73      	ble.n	802c5ae <_dtoa_r+0x8fe>
 802c4c6:	9b00      	ldr	r3, [sp, #0]
 802c4c8:	f1c0 001c 	rsb	r0, r0, #28
 802c4cc:	4403      	add	r3, r0
 802c4ce:	9300      	str	r3, [sp, #0]
 802c4d0:	9b06      	ldr	r3, [sp, #24]
 802c4d2:	4403      	add	r3, r0
 802c4d4:	4406      	add	r6, r0
 802c4d6:	9306      	str	r3, [sp, #24]
 802c4d8:	9b00      	ldr	r3, [sp, #0]
 802c4da:	2b00      	cmp	r3, #0
 802c4dc:	dd05      	ble.n	802c4ea <_dtoa_r+0x83a>
 802c4de:	9902      	ldr	r1, [sp, #8]
 802c4e0:	461a      	mov	r2, r3
 802c4e2:	4648      	mov	r0, r9
 802c4e4:	f000 fc4e 	bl	802cd84 <__lshift>
 802c4e8:	9002      	str	r0, [sp, #8]
 802c4ea:	9b06      	ldr	r3, [sp, #24]
 802c4ec:	2b00      	cmp	r3, #0
 802c4ee:	dd05      	ble.n	802c4fc <_dtoa_r+0x84c>
 802c4f0:	4621      	mov	r1, r4
 802c4f2:	461a      	mov	r2, r3
 802c4f4:	4648      	mov	r0, r9
 802c4f6:	f000 fc45 	bl	802cd84 <__lshift>
 802c4fa:	4604      	mov	r4, r0
 802c4fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c4fe:	2b00      	cmp	r3, #0
 802c500:	d061      	beq.n	802c5c6 <_dtoa_r+0x916>
 802c502:	9802      	ldr	r0, [sp, #8]
 802c504:	4621      	mov	r1, r4
 802c506:	f000 fca9 	bl	802ce5c <__mcmp>
 802c50a:	2800      	cmp	r0, #0
 802c50c:	da5b      	bge.n	802c5c6 <_dtoa_r+0x916>
 802c50e:	2300      	movs	r3, #0
 802c510:	9902      	ldr	r1, [sp, #8]
 802c512:	220a      	movs	r2, #10
 802c514:	4648      	mov	r0, r9
 802c516:	f000 fa47 	bl	802c9a8 <__multadd>
 802c51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c51c:	9002      	str	r0, [sp, #8]
 802c51e:	f107 38ff 	add.w	r8, r7, #4294967295
 802c522:	2b00      	cmp	r3, #0
 802c524:	f000 8177 	beq.w	802c816 <_dtoa_r+0xb66>
 802c528:	4629      	mov	r1, r5
 802c52a:	2300      	movs	r3, #0
 802c52c:	220a      	movs	r2, #10
 802c52e:	4648      	mov	r0, r9
 802c530:	f000 fa3a 	bl	802c9a8 <__multadd>
 802c534:	f1bb 0f00 	cmp.w	fp, #0
 802c538:	4605      	mov	r5, r0
 802c53a:	dc6f      	bgt.n	802c61c <_dtoa_r+0x96c>
 802c53c:	9b07      	ldr	r3, [sp, #28]
 802c53e:	2b02      	cmp	r3, #2
 802c540:	dc49      	bgt.n	802c5d6 <_dtoa_r+0x926>
 802c542:	e06b      	b.n	802c61c <_dtoa_r+0x96c>
 802c544:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802c546:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802c54a:	e73c      	b.n	802c3c6 <_dtoa_r+0x716>
 802c54c:	3fe00000 	.word	0x3fe00000
 802c550:	40240000 	.word	0x40240000
 802c554:	9b03      	ldr	r3, [sp, #12]
 802c556:	1e5c      	subs	r4, r3, #1
 802c558:	9b08      	ldr	r3, [sp, #32]
 802c55a:	42a3      	cmp	r3, r4
 802c55c:	db09      	blt.n	802c572 <_dtoa_r+0x8c2>
 802c55e:	1b1c      	subs	r4, r3, r4
 802c560:	9b03      	ldr	r3, [sp, #12]
 802c562:	2b00      	cmp	r3, #0
 802c564:	f6bf af30 	bge.w	802c3c8 <_dtoa_r+0x718>
 802c568:	9b00      	ldr	r3, [sp, #0]
 802c56a:	9a03      	ldr	r2, [sp, #12]
 802c56c:	1a9e      	subs	r6, r3, r2
 802c56e:	2300      	movs	r3, #0
 802c570:	e72b      	b.n	802c3ca <_dtoa_r+0x71a>
 802c572:	9b08      	ldr	r3, [sp, #32]
 802c574:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802c576:	9408      	str	r4, [sp, #32]
 802c578:	1ae3      	subs	r3, r4, r3
 802c57a:	441a      	add	r2, r3
 802c57c:	9e00      	ldr	r6, [sp, #0]
 802c57e:	9b03      	ldr	r3, [sp, #12]
 802c580:	920d      	str	r2, [sp, #52]	@ 0x34
 802c582:	2400      	movs	r4, #0
 802c584:	e721      	b.n	802c3ca <_dtoa_r+0x71a>
 802c586:	9c08      	ldr	r4, [sp, #32]
 802c588:	9e00      	ldr	r6, [sp, #0]
 802c58a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802c58c:	e728      	b.n	802c3e0 <_dtoa_r+0x730>
 802c58e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802c592:	e751      	b.n	802c438 <_dtoa_r+0x788>
 802c594:	9a08      	ldr	r2, [sp, #32]
 802c596:	9902      	ldr	r1, [sp, #8]
 802c598:	e750      	b.n	802c43c <_dtoa_r+0x78c>
 802c59a:	f8cd 8008 	str.w	r8, [sp, #8]
 802c59e:	e751      	b.n	802c444 <_dtoa_r+0x794>
 802c5a0:	2300      	movs	r3, #0
 802c5a2:	e779      	b.n	802c498 <_dtoa_r+0x7e8>
 802c5a4:	9b04      	ldr	r3, [sp, #16]
 802c5a6:	e777      	b.n	802c498 <_dtoa_r+0x7e8>
 802c5a8:	2300      	movs	r3, #0
 802c5aa:	9308      	str	r3, [sp, #32]
 802c5ac:	e779      	b.n	802c4a2 <_dtoa_r+0x7f2>
 802c5ae:	d093      	beq.n	802c4d8 <_dtoa_r+0x828>
 802c5b0:	9a00      	ldr	r2, [sp, #0]
 802c5b2:	331c      	adds	r3, #28
 802c5b4:	441a      	add	r2, r3
 802c5b6:	9200      	str	r2, [sp, #0]
 802c5b8:	9a06      	ldr	r2, [sp, #24]
 802c5ba:	441a      	add	r2, r3
 802c5bc:	441e      	add	r6, r3
 802c5be:	9206      	str	r2, [sp, #24]
 802c5c0:	e78a      	b.n	802c4d8 <_dtoa_r+0x828>
 802c5c2:	4603      	mov	r3, r0
 802c5c4:	e7f4      	b.n	802c5b0 <_dtoa_r+0x900>
 802c5c6:	9b03      	ldr	r3, [sp, #12]
 802c5c8:	2b00      	cmp	r3, #0
 802c5ca:	46b8      	mov	r8, r7
 802c5cc:	dc20      	bgt.n	802c610 <_dtoa_r+0x960>
 802c5ce:	469b      	mov	fp, r3
 802c5d0:	9b07      	ldr	r3, [sp, #28]
 802c5d2:	2b02      	cmp	r3, #2
 802c5d4:	dd1e      	ble.n	802c614 <_dtoa_r+0x964>
 802c5d6:	f1bb 0f00 	cmp.w	fp, #0
 802c5da:	f47f adb1 	bne.w	802c140 <_dtoa_r+0x490>
 802c5de:	4621      	mov	r1, r4
 802c5e0:	465b      	mov	r3, fp
 802c5e2:	2205      	movs	r2, #5
 802c5e4:	4648      	mov	r0, r9
 802c5e6:	f000 f9df 	bl	802c9a8 <__multadd>
 802c5ea:	4601      	mov	r1, r0
 802c5ec:	4604      	mov	r4, r0
 802c5ee:	9802      	ldr	r0, [sp, #8]
 802c5f0:	f000 fc34 	bl	802ce5c <__mcmp>
 802c5f4:	2800      	cmp	r0, #0
 802c5f6:	f77f ada3 	ble.w	802c140 <_dtoa_r+0x490>
 802c5fa:	4656      	mov	r6, sl
 802c5fc:	2331      	movs	r3, #49	@ 0x31
 802c5fe:	f806 3b01 	strb.w	r3, [r6], #1
 802c602:	f108 0801 	add.w	r8, r8, #1
 802c606:	e59f      	b.n	802c148 <_dtoa_r+0x498>
 802c608:	9c03      	ldr	r4, [sp, #12]
 802c60a:	46b8      	mov	r8, r7
 802c60c:	4625      	mov	r5, r4
 802c60e:	e7f4      	b.n	802c5fa <_dtoa_r+0x94a>
 802c610:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802c614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c616:	2b00      	cmp	r3, #0
 802c618:	f000 8101 	beq.w	802c81e <_dtoa_r+0xb6e>
 802c61c:	2e00      	cmp	r6, #0
 802c61e:	dd05      	ble.n	802c62c <_dtoa_r+0x97c>
 802c620:	4629      	mov	r1, r5
 802c622:	4632      	mov	r2, r6
 802c624:	4648      	mov	r0, r9
 802c626:	f000 fbad 	bl	802cd84 <__lshift>
 802c62a:	4605      	mov	r5, r0
 802c62c:	9b08      	ldr	r3, [sp, #32]
 802c62e:	2b00      	cmp	r3, #0
 802c630:	d05c      	beq.n	802c6ec <_dtoa_r+0xa3c>
 802c632:	6869      	ldr	r1, [r5, #4]
 802c634:	4648      	mov	r0, r9
 802c636:	f000 f955 	bl	802c8e4 <_Balloc>
 802c63a:	4606      	mov	r6, r0
 802c63c:	b928      	cbnz	r0, 802c64a <_dtoa_r+0x99a>
 802c63e:	4b82      	ldr	r3, [pc, #520]	@ (802c848 <_dtoa_r+0xb98>)
 802c640:	4602      	mov	r2, r0
 802c642:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802c646:	f7ff bb4a 	b.w	802bcde <_dtoa_r+0x2e>
 802c64a:	692a      	ldr	r2, [r5, #16]
 802c64c:	3202      	adds	r2, #2
 802c64e:	0092      	lsls	r2, r2, #2
 802c650:	f105 010c 	add.w	r1, r5, #12
 802c654:	300c      	adds	r0, #12
 802c656:	f7ff fa86 	bl	802bb66 <memcpy>
 802c65a:	2201      	movs	r2, #1
 802c65c:	4631      	mov	r1, r6
 802c65e:	4648      	mov	r0, r9
 802c660:	f000 fb90 	bl	802cd84 <__lshift>
 802c664:	f10a 0301 	add.w	r3, sl, #1
 802c668:	9300      	str	r3, [sp, #0]
 802c66a:	eb0a 030b 	add.w	r3, sl, fp
 802c66e:	9308      	str	r3, [sp, #32]
 802c670:	9b04      	ldr	r3, [sp, #16]
 802c672:	f003 0301 	and.w	r3, r3, #1
 802c676:	462f      	mov	r7, r5
 802c678:	9306      	str	r3, [sp, #24]
 802c67a:	4605      	mov	r5, r0
 802c67c:	9b00      	ldr	r3, [sp, #0]
 802c67e:	9802      	ldr	r0, [sp, #8]
 802c680:	4621      	mov	r1, r4
 802c682:	f103 3bff 	add.w	fp, r3, #4294967295
 802c686:	f7ff fa8a 	bl	802bb9e <quorem>
 802c68a:	4603      	mov	r3, r0
 802c68c:	3330      	adds	r3, #48	@ 0x30
 802c68e:	9003      	str	r0, [sp, #12]
 802c690:	4639      	mov	r1, r7
 802c692:	9802      	ldr	r0, [sp, #8]
 802c694:	9309      	str	r3, [sp, #36]	@ 0x24
 802c696:	f000 fbe1 	bl	802ce5c <__mcmp>
 802c69a:	462a      	mov	r2, r5
 802c69c:	9004      	str	r0, [sp, #16]
 802c69e:	4621      	mov	r1, r4
 802c6a0:	4648      	mov	r0, r9
 802c6a2:	f000 fbf7 	bl	802ce94 <__mdiff>
 802c6a6:	68c2      	ldr	r2, [r0, #12]
 802c6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c6aa:	4606      	mov	r6, r0
 802c6ac:	bb02      	cbnz	r2, 802c6f0 <_dtoa_r+0xa40>
 802c6ae:	4601      	mov	r1, r0
 802c6b0:	9802      	ldr	r0, [sp, #8]
 802c6b2:	f000 fbd3 	bl	802ce5c <__mcmp>
 802c6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c6b8:	4602      	mov	r2, r0
 802c6ba:	4631      	mov	r1, r6
 802c6bc:	4648      	mov	r0, r9
 802c6be:	920c      	str	r2, [sp, #48]	@ 0x30
 802c6c0:	9309      	str	r3, [sp, #36]	@ 0x24
 802c6c2:	f000 f94f 	bl	802c964 <_Bfree>
 802c6c6:	9b07      	ldr	r3, [sp, #28]
 802c6c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802c6ca:	9e00      	ldr	r6, [sp, #0]
 802c6cc:	ea42 0103 	orr.w	r1, r2, r3
 802c6d0:	9b06      	ldr	r3, [sp, #24]
 802c6d2:	4319      	orrs	r1, r3
 802c6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c6d6:	d10d      	bne.n	802c6f4 <_dtoa_r+0xa44>
 802c6d8:	2b39      	cmp	r3, #57	@ 0x39
 802c6da:	d027      	beq.n	802c72c <_dtoa_r+0xa7c>
 802c6dc:	9a04      	ldr	r2, [sp, #16]
 802c6de:	2a00      	cmp	r2, #0
 802c6e0:	dd01      	ble.n	802c6e6 <_dtoa_r+0xa36>
 802c6e2:	9b03      	ldr	r3, [sp, #12]
 802c6e4:	3331      	adds	r3, #49	@ 0x31
 802c6e6:	f88b 3000 	strb.w	r3, [fp]
 802c6ea:	e52e      	b.n	802c14a <_dtoa_r+0x49a>
 802c6ec:	4628      	mov	r0, r5
 802c6ee:	e7b9      	b.n	802c664 <_dtoa_r+0x9b4>
 802c6f0:	2201      	movs	r2, #1
 802c6f2:	e7e2      	b.n	802c6ba <_dtoa_r+0xa0a>
 802c6f4:	9904      	ldr	r1, [sp, #16]
 802c6f6:	2900      	cmp	r1, #0
 802c6f8:	db04      	blt.n	802c704 <_dtoa_r+0xa54>
 802c6fa:	9807      	ldr	r0, [sp, #28]
 802c6fc:	4301      	orrs	r1, r0
 802c6fe:	9806      	ldr	r0, [sp, #24]
 802c700:	4301      	orrs	r1, r0
 802c702:	d120      	bne.n	802c746 <_dtoa_r+0xa96>
 802c704:	2a00      	cmp	r2, #0
 802c706:	ddee      	ble.n	802c6e6 <_dtoa_r+0xa36>
 802c708:	9902      	ldr	r1, [sp, #8]
 802c70a:	9300      	str	r3, [sp, #0]
 802c70c:	2201      	movs	r2, #1
 802c70e:	4648      	mov	r0, r9
 802c710:	f000 fb38 	bl	802cd84 <__lshift>
 802c714:	4621      	mov	r1, r4
 802c716:	9002      	str	r0, [sp, #8]
 802c718:	f000 fba0 	bl	802ce5c <__mcmp>
 802c71c:	2800      	cmp	r0, #0
 802c71e:	9b00      	ldr	r3, [sp, #0]
 802c720:	dc02      	bgt.n	802c728 <_dtoa_r+0xa78>
 802c722:	d1e0      	bne.n	802c6e6 <_dtoa_r+0xa36>
 802c724:	07da      	lsls	r2, r3, #31
 802c726:	d5de      	bpl.n	802c6e6 <_dtoa_r+0xa36>
 802c728:	2b39      	cmp	r3, #57	@ 0x39
 802c72a:	d1da      	bne.n	802c6e2 <_dtoa_r+0xa32>
 802c72c:	2339      	movs	r3, #57	@ 0x39
 802c72e:	f88b 3000 	strb.w	r3, [fp]
 802c732:	4633      	mov	r3, r6
 802c734:	461e      	mov	r6, r3
 802c736:	3b01      	subs	r3, #1
 802c738:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802c73c:	2a39      	cmp	r2, #57	@ 0x39
 802c73e:	d04e      	beq.n	802c7de <_dtoa_r+0xb2e>
 802c740:	3201      	adds	r2, #1
 802c742:	701a      	strb	r2, [r3, #0]
 802c744:	e501      	b.n	802c14a <_dtoa_r+0x49a>
 802c746:	2a00      	cmp	r2, #0
 802c748:	dd03      	ble.n	802c752 <_dtoa_r+0xaa2>
 802c74a:	2b39      	cmp	r3, #57	@ 0x39
 802c74c:	d0ee      	beq.n	802c72c <_dtoa_r+0xa7c>
 802c74e:	3301      	adds	r3, #1
 802c750:	e7c9      	b.n	802c6e6 <_dtoa_r+0xa36>
 802c752:	9a00      	ldr	r2, [sp, #0]
 802c754:	9908      	ldr	r1, [sp, #32]
 802c756:	f802 3c01 	strb.w	r3, [r2, #-1]
 802c75a:	428a      	cmp	r2, r1
 802c75c:	d028      	beq.n	802c7b0 <_dtoa_r+0xb00>
 802c75e:	9902      	ldr	r1, [sp, #8]
 802c760:	2300      	movs	r3, #0
 802c762:	220a      	movs	r2, #10
 802c764:	4648      	mov	r0, r9
 802c766:	f000 f91f 	bl	802c9a8 <__multadd>
 802c76a:	42af      	cmp	r7, r5
 802c76c:	9002      	str	r0, [sp, #8]
 802c76e:	f04f 0300 	mov.w	r3, #0
 802c772:	f04f 020a 	mov.w	r2, #10
 802c776:	4639      	mov	r1, r7
 802c778:	4648      	mov	r0, r9
 802c77a:	d107      	bne.n	802c78c <_dtoa_r+0xadc>
 802c77c:	f000 f914 	bl	802c9a8 <__multadd>
 802c780:	4607      	mov	r7, r0
 802c782:	4605      	mov	r5, r0
 802c784:	9b00      	ldr	r3, [sp, #0]
 802c786:	3301      	adds	r3, #1
 802c788:	9300      	str	r3, [sp, #0]
 802c78a:	e777      	b.n	802c67c <_dtoa_r+0x9cc>
 802c78c:	f000 f90c 	bl	802c9a8 <__multadd>
 802c790:	4629      	mov	r1, r5
 802c792:	4607      	mov	r7, r0
 802c794:	2300      	movs	r3, #0
 802c796:	220a      	movs	r2, #10
 802c798:	4648      	mov	r0, r9
 802c79a:	f000 f905 	bl	802c9a8 <__multadd>
 802c79e:	4605      	mov	r5, r0
 802c7a0:	e7f0      	b.n	802c784 <_dtoa_r+0xad4>
 802c7a2:	f1bb 0f00 	cmp.w	fp, #0
 802c7a6:	bfcc      	ite	gt
 802c7a8:	465e      	movgt	r6, fp
 802c7aa:	2601      	movle	r6, #1
 802c7ac:	4456      	add	r6, sl
 802c7ae:	2700      	movs	r7, #0
 802c7b0:	9902      	ldr	r1, [sp, #8]
 802c7b2:	9300      	str	r3, [sp, #0]
 802c7b4:	2201      	movs	r2, #1
 802c7b6:	4648      	mov	r0, r9
 802c7b8:	f000 fae4 	bl	802cd84 <__lshift>
 802c7bc:	4621      	mov	r1, r4
 802c7be:	9002      	str	r0, [sp, #8]
 802c7c0:	f000 fb4c 	bl	802ce5c <__mcmp>
 802c7c4:	2800      	cmp	r0, #0
 802c7c6:	dcb4      	bgt.n	802c732 <_dtoa_r+0xa82>
 802c7c8:	d102      	bne.n	802c7d0 <_dtoa_r+0xb20>
 802c7ca:	9b00      	ldr	r3, [sp, #0]
 802c7cc:	07db      	lsls	r3, r3, #31
 802c7ce:	d4b0      	bmi.n	802c732 <_dtoa_r+0xa82>
 802c7d0:	4633      	mov	r3, r6
 802c7d2:	461e      	mov	r6, r3
 802c7d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c7d8:	2a30      	cmp	r2, #48	@ 0x30
 802c7da:	d0fa      	beq.n	802c7d2 <_dtoa_r+0xb22>
 802c7dc:	e4b5      	b.n	802c14a <_dtoa_r+0x49a>
 802c7de:	459a      	cmp	sl, r3
 802c7e0:	d1a8      	bne.n	802c734 <_dtoa_r+0xa84>
 802c7e2:	2331      	movs	r3, #49	@ 0x31
 802c7e4:	f108 0801 	add.w	r8, r8, #1
 802c7e8:	f88a 3000 	strb.w	r3, [sl]
 802c7ec:	e4ad      	b.n	802c14a <_dtoa_r+0x49a>
 802c7ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802c7f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802c84c <_dtoa_r+0xb9c>
 802c7f4:	b11b      	cbz	r3, 802c7fe <_dtoa_r+0xb4e>
 802c7f6:	f10a 0308 	add.w	r3, sl, #8
 802c7fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802c7fc:	6013      	str	r3, [r2, #0]
 802c7fe:	4650      	mov	r0, sl
 802c800:	b017      	add	sp, #92	@ 0x5c
 802c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c806:	9b07      	ldr	r3, [sp, #28]
 802c808:	2b01      	cmp	r3, #1
 802c80a:	f77f ae2e 	ble.w	802c46a <_dtoa_r+0x7ba>
 802c80e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802c810:	9308      	str	r3, [sp, #32]
 802c812:	2001      	movs	r0, #1
 802c814:	e64d      	b.n	802c4b2 <_dtoa_r+0x802>
 802c816:	f1bb 0f00 	cmp.w	fp, #0
 802c81a:	f77f aed9 	ble.w	802c5d0 <_dtoa_r+0x920>
 802c81e:	4656      	mov	r6, sl
 802c820:	9802      	ldr	r0, [sp, #8]
 802c822:	4621      	mov	r1, r4
 802c824:	f7ff f9bb 	bl	802bb9e <quorem>
 802c828:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802c82c:	f806 3b01 	strb.w	r3, [r6], #1
 802c830:	eba6 020a 	sub.w	r2, r6, sl
 802c834:	4593      	cmp	fp, r2
 802c836:	ddb4      	ble.n	802c7a2 <_dtoa_r+0xaf2>
 802c838:	9902      	ldr	r1, [sp, #8]
 802c83a:	2300      	movs	r3, #0
 802c83c:	220a      	movs	r2, #10
 802c83e:	4648      	mov	r0, r9
 802c840:	f000 f8b2 	bl	802c9a8 <__multadd>
 802c844:	9002      	str	r0, [sp, #8]
 802c846:	e7eb      	b.n	802c820 <_dtoa_r+0xb70>
 802c848:	0802f36a 	.word	0x0802f36a
 802c84c:	0802f2ee 	.word	0x0802f2ee

0802c850 <_free_r>:
 802c850:	b538      	push	{r3, r4, r5, lr}
 802c852:	4605      	mov	r5, r0
 802c854:	2900      	cmp	r1, #0
 802c856:	d041      	beq.n	802c8dc <_free_r+0x8c>
 802c858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c85c:	1f0c      	subs	r4, r1, #4
 802c85e:	2b00      	cmp	r3, #0
 802c860:	bfb8      	it	lt
 802c862:	18e4      	addlt	r4, r4, r3
 802c864:	f7fd fd56 	bl	802a314 <__malloc_lock>
 802c868:	4a1d      	ldr	r2, [pc, #116]	@ (802c8e0 <_free_r+0x90>)
 802c86a:	6813      	ldr	r3, [r2, #0]
 802c86c:	b933      	cbnz	r3, 802c87c <_free_r+0x2c>
 802c86e:	6063      	str	r3, [r4, #4]
 802c870:	6014      	str	r4, [r2, #0]
 802c872:	4628      	mov	r0, r5
 802c874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c878:	f7fd bd52 	b.w	802a320 <__malloc_unlock>
 802c87c:	42a3      	cmp	r3, r4
 802c87e:	d908      	bls.n	802c892 <_free_r+0x42>
 802c880:	6820      	ldr	r0, [r4, #0]
 802c882:	1821      	adds	r1, r4, r0
 802c884:	428b      	cmp	r3, r1
 802c886:	bf01      	itttt	eq
 802c888:	6819      	ldreq	r1, [r3, #0]
 802c88a:	685b      	ldreq	r3, [r3, #4]
 802c88c:	1809      	addeq	r1, r1, r0
 802c88e:	6021      	streq	r1, [r4, #0]
 802c890:	e7ed      	b.n	802c86e <_free_r+0x1e>
 802c892:	461a      	mov	r2, r3
 802c894:	685b      	ldr	r3, [r3, #4]
 802c896:	b10b      	cbz	r3, 802c89c <_free_r+0x4c>
 802c898:	42a3      	cmp	r3, r4
 802c89a:	d9fa      	bls.n	802c892 <_free_r+0x42>
 802c89c:	6811      	ldr	r1, [r2, #0]
 802c89e:	1850      	adds	r0, r2, r1
 802c8a0:	42a0      	cmp	r0, r4
 802c8a2:	d10b      	bne.n	802c8bc <_free_r+0x6c>
 802c8a4:	6820      	ldr	r0, [r4, #0]
 802c8a6:	4401      	add	r1, r0
 802c8a8:	1850      	adds	r0, r2, r1
 802c8aa:	4283      	cmp	r3, r0
 802c8ac:	6011      	str	r1, [r2, #0]
 802c8ae:	d1e0      	bne.n	802c872 <_free_r+0x22>
 802c8b0:	6818      	ldr	r0, [r3, #0]
 802c8b2:	685b      	ldr	r3, [r3, #4]
 802c8b4:	6053      	str	r3, [r2, #4]
 802c8b6:	4408      	add	r0, r1
 802c8b8:	6010      	str	r0, [r2, #0]
 802c8ba:	e7da      	b.n	802c872 <_free_r+0x22>
 802c8bc:	d902      	bls.n	802c8c4 <_free_r+0x74>
 802c8be:	230c      	movs	r3, #12
 802c8c0:	602b      	str	r3, [r5, #0]
 802c8c2:	e7d6      	b.n	802c872 <_free_r+0x22>
 802c8c4:	6820      	ldr	r0, [r4, #0]
 802c8c6:	1821      	adds	r1, r4, r0
 802c8c8:	428b      	cmp	r3, r1
 802c8ca:	bf04      	itt	eq
 802c8cc:	6819      	ldreq	r1, [r3, #0]
 802c8ce:	685b      	ldreq	r3, [r3, #4]
 802c8d0:	6063      	str	r3, [r4, #4]
 802c8d2:	bf04      	itt	eq
 802c8d4:	1809      	addeq	r1, r1, r0
 802c8d6:	6021      	streq	r1, [r4, #0]
 802c8d8:	6054      	str	r4, [r2, #4]
 802c8da:	e7ca      	b.n	802c872 <_free_r+0x22>
 802c8dc:	bd38      	pop	{r3, r4, r5, pc}
 802c8de:	bf00      	nop
 802c8e0:	2000e694 	.word	0x2000e694

0802c8e4 <_Balloc>:
 802c8e4:	b570      	push	{r4, r5, r6, lr}
 802c8e6:	69c6      	ldr	r6, [r0, #28]
 802c8e8:	4604      	mov	r4, r0
 802c8ea:	460d      	mov	r5, r1
 802c8ec:	b976      	cbnz	r6, 802c90c <_Balloc+0x28>
 802c8ee:	2010      	movs	r0, #16
 802c8f0:	f7fd fc66 	bl	802a1c0 <malloc>
 802c8f4:	4602      	mov	r2, r0
 802c8f6:	61e0      	str	r0, [r4, #28]
 802c8f8:	b920      	cbnz	r0, 802c904 <_Balloc+0x20>
 802c8fa:	4b18      	ldr	r3, [pc, #96]	@ (802c95c <_Balloc+0x78>)
 802c8fc:	4818      	ldr	r0, [pc, #96]	@ (802c960 <_Balloc+0x7c>)
 802c8fe:	216b      	movs	r1, #107	@ 0x6b
 802c900:	f7fd fc3c 	bl	802a17c <__assert_func>
 802c904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c908:	6006      	str	r6, [r0, #0]
 802c90a:	60c6      	str	r6, [r0, #12]
 802c90c:	69e6      	ldr	r6, [r4, #28]
 802c90e:	68f3      	ldr	r3, [r6, #12]
 802c910:	b183      	cbz	r3, 802c934 <_Balloc+0x50>
 802c912:	69e3      	ldr	r3, [r4, #28]
 802c914:	68db      	ldr	r3, [r3, #12]
 802c916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802c91a:	b9b8      	cbnz	r0, 802c94c <_Balloc+0x68>
 802c91c:	2101      	movs	r1, #1
 802c91e:	fa01 f605 	lsl.w	r6, r1, r5
 802c922:	1d72      	adds	r2, r6, #5
 802c924:	0092      	lsls	r2, r2, #2
 802c926:	4620      	mov	r0, r4
 802c928:	f001 fce6 	bl	802e2f8 <_calloc_r>
 802c92c:	b160      	cbz	r0, 802c948 <_Balloc+0x64>
 802c92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802c932:	e00e      	b.n	802c952 <_Balloc+0x6e>
 802c934:	2221      	movs	r2, #33	@ 0x21
 802c936:	2104      	movs	r1, #4
 802c938:	4620      	mov	r0, r4
 802c93a:	f001 fcdd 	bl	802e2f8 <_calloc_r>
 802c93e:	69e3      	ldr	r3, [r4, #28]
 802c940:	60f0      	str	r0, [r6, #12]
 802c942:	68db      	ldr	r3, [r3, #12]
 802c944:	2b00      	cmp	r3, #0
 802c946:	d1e4      	bne.n	802c912 <_Balloc+0x2e>
 802c948:	2000      	movs	r0, #0
 802c94a:	bd70      	pop	{r4, r5, r6, pc}
 802c94c:	6802      	ldr	r2, [r0, #0]
 802c94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802c952:	2300      	movs	r3, #0
 802c954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c958:	e7f7      	b.n	802c94a <_Balloc+0x66>
 802c95a:	bf00      	nop
 802c95c:	0802f2fb 	.word	0x0802f2fb
 802c960:	0802f37b 	.word	0x0802f37b

0802c964 <_Bfree>:
 802c964:	b570      	push	{r4, r5, r6, lr}
 802c966:	69c6      	ldr	r6, [r0, #28]
 802c968:	4605      	mov	r5, r0
 802c96a:	460c      	mov	r4, r1
 802c96c:	b976      	cbnz	r6, 802c98c <_Bfree+0x28>
 802c96e:	2010      	movs	r0, #16
 802c970:	f7fd fc26 	bl	802a1c0 <malloc>
 802c974:	4602      	mov	r2, r0
 802c976:	61e8      	str	r0, [r5, #28]
 802c978:	b920      	cbnz	r0, 802c984 <_Bfree+0x20>
 802c97a:	4b09      	ldr	r3, [pc, #36]	@ (802c9a0 <_Bfree+0x3c>)
 802c97c:	4809      	ldr	r0, [pc, #36]	@ (802c9a4 <_Bfree+0x40>)
 802c97e:	218f      	movs	r1, #143	@ 0x8f
 802c980:	f7fd fbfc 	bl	802a17c <__assert_func>
 802c984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c988:	6006      	str	r6, [r0, #0]
 802c98a:	60c6      	str	r6, [r0, #12]
 802c98c:	b13c      	cbz	r4, 802c99e <_Bfree+0x3a>
 802c98e:	69eb      	ldr	r3, [r5, #28]
 802c990:	6862      	ldr	r2, [r4, #4]
 802c992:	68db      	ldr	r3, [r3, #12]
 802c994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c998:	6021      	str	r1, [r4, #0]
 802c99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802c99e:	bd70      	pop	{r4, r5, r6, pc}
 802c9a0:	0802f2fb 	.word	0x0802f2fb
 802c9a4:	0802f37b 	.word	0x0802f37b

0802c9a8 <__multadd>:
 802c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c9ac:	690d      	ldr	r5, [r1, #16]
 802c9ae:	4607      	mov	r7, r0
 802c9b0:	460c      	mov	r4, r1
 802c9b2:	461e      	mov	r6, r3
 802c9b4:	f101 0c14 	add.w	ip, r1, #20
 802c9b8:	2000      	movs	r0, #0
 802c9ba:	f8dc 3000 	ldr.w	r3, [ip]
 802c9be:	b299      	uxth	r1, r3
 802c9c0:	fb02 6101 	mla	r1, r2, r1, r6
 802c9c4:	0c1e      	lsrs	r6, r3, #16
 802c9c6:	0c0b      	lsrs	r3, r1, #16
 802c9c8:	fb02 3306 	mla	r3, r2, r6, r3
 802c9cc:	b289      	uxth	r1, r1
 802c9ce:	3001      	adds	r0, #1
 802c9d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c9d4:	4285      	cmp	r5, r0
 802c9d6:	f84c 1b04 	str.w	r1, [ip], #4
 802c9da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c9de:	dcec      	bgt.n	802c9ba <__multadd+0x12>
 802c9e0:	b30e      	cbz	r6, 802ca26 <__multadd+0x7e>
 802c9e2:	68a3      	ldr	r3, [r4, #8]
 802c9e4:	42ab      	cmp	r3, r5
 802c9e6:	dc19      	bgt.n	802ca1c <__multadd+0x74>
 802c9e8:	6861      	ldr	r1, [r4, #4]
 802c9ea:	4638      	mov	r0, r7
 802c9ec:	3101      	adds	r1, #1
 802c9ee:	f7ff ff79 	bl	802c8e4 <_Balloc>
 802c9f2:	4680      	mov	r8, r0
 802c9f4:	b928      	cbnz	r0, 802ca02 <__multadd+0x5a>
 802c9f6:	4602      	mov	r2, r0
 802c9f8:	4b0c      	ldr	r3, [pc, #48]	@ (802ca2c <__multadd+0x84>)
 802c9fa:	480d      	ldr	r0, [pc, #52]	@ (802ca30 <__multadd+0x88>)
 802c9fc:	21ba      	movs	r1, #186	@ 0xba
 802c9fe:	f7fd fbbd 	bl	802a17c <__assert_func>
 802ca02:	6922      	ldr	r2, [r4, #16]
 802ca04:	3202      	adds	r2, #2
 802ca06:	f104 010c 	add.w	r1, r4, #12
 802ca0a:	0092      	lsls	r2, r2, #2
 802ca0c:	300c      	adds	r0, #12
 802ca0e:	f7ff f8aa 	bl	802bb66 <memcpy>
 802ca12:	4621      	mov	r1, r4
 802ca14:	4638      	mov	r0, r7
 802ca16:	f7ff ffa5 	bl	802c964 <_Bfree>
 802ca1a:	4644      	mov	r4, r8
 802ca1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ca20:	3501      	adds	r5, #1
 802ca22:	615e      	str	r6, [r3, #20]
 802ca24:	6125      	str	r5, [r4, #16]
 802ca26:	4620      	mov	r0, r4
 802ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ca2c:	0802f36a 	.word	0x0802f36a
 802ca30:	0802f37b 	.word	0x0802f37b

0802ca34 <__s2b>:
 802ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ca38:	460c      	mov	r4, r1
 802ca3a:	4615      	mov	r5, r2
 802ca3c:	461f      	mov	r7, r3
 802ca3e:	2209      	movs	r2, #9
 802ca40:	3308      	adds	r3, #8
 802ca42:	4606      	mov	r6, r0
 802ca44:	fb93 f3f2 	sdiv	r3, r3, r2
 802ca48:	2100      	movs	r1, #0
 802ca4a:	2201      	movs	r2, #1
 802ca4c:	429a      	cmp	r2, r3
 802ca4e:	db09      	blt.n	802ca64 <__s2b+0x30>
 802ca50:	4630      	mov	r0, r6
 802ca52:	f7ff ff47 	bl	802c8e4 <_Balloc>
 802ca56:	b940      	cbnz	r0, 802ca6a <__s2b+0x36>
 802ca58:	4602      	mov	r2, r0
 802ca5a:	4b19      	ldr	r3, [pc, #100]	@ (802cac0 <__s2b+0x8c>)
 802ca5c:	4819      	ldr	r0, [pc, #100]	@ (802cac4 <__s2b+0x90>)
 802ca5e:	21d3      	movs	r1, #211	@ 0xd3
 802ca60:	f7fd fb8c 	bl	802a17c <__assert_func>
 802ca64:	0052      	lsls	r2, r2, #1
 802ca66:	3101      	adds	r1, #1
 802ca68:	e7f0      	b.n	802ca4c <__s2b+0x18>
 802ca6a:	9b08      	ldr	r3, [sp, #32]
 802ca6c:	6143      	str	r3, [r0, #20]
 802ca6e:	2d09      	cmp	r5, #9
 802ca70:	f04f 0301 	mov.w	r3, #1
 802ca74:	6103      	str	r3, [r0, #16]
 802ca76:	dd16      	ble.n	802caa6 <__s2b+0x72>
 802ca78:	f104 0909 	add.w	r9, r4, #9
 802ca7c:	46c8      	mov	r8, r9
 802ca7e:	442c      	add	r4, r5
 802ca80:	f818 3b01 	ldrb.w	r3, [r8], #1
 802ca84:	4601      	mov	r1, r0
 802ca86:	3b30      	subs	r3, #48	@ 0x30
 802ca88:	220a      	movs	r2, #10
 802ca8a:	4630      	mov	r0, r6
 802ca8c:	f7ff ff8c 	bl	802c9a8 <__multadd>
 802ca90:	45a0      	cmp	r8, r4
 802ca92:	d1f5      	bne.n	802ca80 <__s2b+0x4c>
 802ca94:	f1a5 0408 	sub.w	r4, r5, #8
 802ca98:	444c      	add	r4, r9
 802ca9a:	1b2d      	subs	r5, r5, r4
 802ca9c:	1963      	adds	r3, r4, r5
 802ca9e:	42bb      	cmp	r3, r7
 802caa0:	db04      	blt.n	802caac <__s2b+0x78>
 802caa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802caa6:	340a      	adds	r4, #10
 802caa8:	2509      	movs	r5, #9
 802caaa:	e7f6      	b.n	802ca9a <__s2b+0x66>
 802caac:	f814 3b01 	ldrb.w	r3, [r4], #1
 802cab0:	4601      	mov	r1, r0
 802cab2:	3b30      	subs	r3, #48	@ 0x30
 802cab4:	220a      	movs	r2, #10
 802cab6:	4630      	mov	r0, r6
 802cab8:	f7ff ff76 	bl	802c9a8 <__multadd>
 802cabc:	e7ee      	b.n	802ca9c <__s2b+0x68>
 802cabe:	bf00      	nop
 802cac0:	0802f36a 	.word	0x0802f36a
 802cac4:	0802f37b 	.word	0x0802f37b

0802cac8 <__hi0bits>:
 802cac8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802cacc:	4603      	mov	r3, r0
 802cace:	bf36      	itet	cc
 802cad0:	0403      	lslcc	r3, r0, #16
 802cad2:	2000      	movcs	r0, #0
 802cad4:	2010      	movcc	r0, #16
 802cad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802cada:	bf3c      	itt	cc
 802cadc:	021b      	lslcc	r3, r3, #8
 802cade:	3008      	addcc	r0, #8
 802cae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802cae4:	bf3c      	itt	cc
 802cae6:	011b      	lslcc	r3, r3, #4
 802cae8:	3004      	addcc	r0, #4
 802caea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802caee:	bf3c      	itt	cc
 802caf0:	009b      	lslcc	r3, r3, #2
 802caf2:	3002      	addcc	r0, #2
 802caf4:	2b00      	cmp	r3, #0
 802caf6:	db05      	blt.n	802cb04 <__hi0bits+0x3c>
 802caf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802cafc:	f100 0001 	add.w	r0, r0, #1
 802cb00:	bf08      	it	eq
 802cb02:	2020      	moveq	r0, #32
 802cb04:	4770      	bx	lr

0802cb06 <__lo0bits>:
 802cb06:	6803      	ldr	r3, [r0, #0]
 802cb08:	4602      	mov	r2, r0
 802cb0a:	f013 0007 	ands.w	r0, r3, #7
 802cb0e:	d00b      	beq.n	802cb28 <__lo0bits+0x22>
 802cb10:	07d9      	lsls	r1, r3, #31
 802cb12:	d421      	bmi.n	802cb58 <__lo0bits+0x52>
 802cb14:	0798      	lsls	r0, r3, #30
 802cb16:	bf49      	itett	mi
 802cb18:	085b      	lsrmi	r3, r3, #1
 802cb1a:	089b      	lsrpl	r3, r3, #2
 802cb1c:	2001      	movmi	r0, #1
 802cb1e:	6013      	strmi	r3, [r2, #0]
 802cb20:	bf5c      	itt	pl
 802cb22:	6013      	strpl	r3, [r2, #0]
 802cb24:	2002      	movpl	r0, #2
 802cb26:	4770      	bx	lr
 802cb28:	b299      	uxth	r1, r3
 802cb2a:	b909      	cbnz	r1, 802cb30 <__lo0bits+0x2a>
 802cb2c:	0c1b      	lsrs	r3, r3, #16
 802cb2e:	2010      	movs	r0, #16
 802cb30:	b2d9      	uxtb	r1, r3
 802cb32:	b909      	cbnz	r1, 802cb38 <__lo0bits+0x32>
 802cb34:	3008      	adds	r0, #8
 802cb36:	0a1b      	lsrs	r3, r3, #8
 802cb38:	0719      	lsls	r1, r3, #28
 802cb3a:	bf04      	itt	eq
 802cb3c:	091b      	lsreq	r3, r3, #4
 802cb3e:	3004      	addeq	r0, #4
 802cb40:	0799      	lsls	r1, r3, #30
 802cb42:	bf04      	itt	eq
 802cb44:	089b      	lsreq	r3, r3, #2
 802cb46:	3002      	addeq	r0, #2
 802cb48:	07d9      	lsls	r1, r3, #31
 802cb4a:	d403      	bmi.n	802cb54 <__lo0bits+0x4e>
 802cb4c:	085b      	lsrs	r3, r3, #1
 802cb4e:	f100 0001 	add.w	r0, r0, #1
 802cb52:	d003      	beq.n	802cb5c <__lo0bits+0x56>
 802cb54:	6013      	str	r3, [r2, #0]
 802cb56:	4770      	bx	lr
 802cb58:	2000      	movs	r0, #0
 802cb5a:	4770      	bx	lr
 802cb5c:	2020      	movs	r0, #32
 802cb5e:	4770      	bx	lr

0802cb60 <__i2b>:
 802cb60:	b510      	push	{r4, lr}
 802cb62:	460c      	mov	r4, r1
 802cb64:	2101      	movs	r1, #1
 802cb66:	f7ff febd 	bl	802c8e4 <_Balloc>
 802cb6a:	4602      	mov	r2, r0
 802cb6c:	b928      	cbnz	r0, 802cb7a <__i2b+0x1a>
 802cb6e:	4b05      	ldr	r3, [pc, #20]	@ (802cb84 <__i2b+0x24>)
 802cb70:	4805      	ldr	r0, [pc, #20]	@ (802cb88 <__i2b+0x28>)
 802cb72:	f240 1145 	movw	r1, #325	@ 0x145
 802cb76:	f7fd fb01 	bl	802a17c <__assert_func>
 802cb7a:	2301      	movs	r3, #1
 802cb7c:	6144      	str	r4, [r0, #20]
 802cb7e:	6103      	str	r3, [r0, #16]
 802cb80:	bd10      	pop	{r4, pc}
 802cb82:	bf00      	nop
 802cb84:	0802f36a 	.word	0x0802f36a
 802cb88:	0802f37b 	.word	0x0802f37b

0802cb8c <__multiply>:
 802cb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb90:	4617      	mov	r7, r2
 802cb92:	690a      	ldr	r2, [r1, #16]
 802cb94:	693b      	ldr	r3, [r7, #16]
 802cb96:	429a      	cmp	r2, r3
 802cb98:	bfa8      	it	ge
 802cb9a:	463b      	movge	r3, r7
 802cb9c:	4689      	mov	r9, r1
 802cb9e:	bfa4      	itt	ge
 802cba0:	460f      	movge	r7, r1
 802cba2:	4699      	movge	r9, r3
 802cba4:	693d      	ldr	r5, [r7, #16]
 802cba6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802cbaa:	68bb      	ldr	r3, [r7, #8]
 802cbac:	6879      	ldr	r1, [r7, #4]
 802cbae:	eb05 060a 	add.w	r6, r5, sl
 802cbb2:	42b3      	cmp	r3, r6
 802cbb4:	b085      	sub	sp, #20
 802cbb6:	bfb8      	it	lt
 802cbb8:	3101      	addlt	r1, #1
 802cbba:	f7ff fe93 	bl	802c8e4 <_Balloc>
 802cbbe:	b930      	cbnz	r0, 802cbce <__multiply+0x42>
 802cbc0:	4602      	mov	r2, r0
 802cbc2:	4b41      	ldr	r3, [pc, #260]	@ (802ccc8 <__multiply+0x13c>)
 802cbc4:	4841      	ldr	r0, [pc, #260]	@ (802cccc <__multiply+0x140>)
 802cbc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802cbca:	f7fd fad7 	bl	802a17c <__assert_func>
 802cbce:	f100 0414 	add.w	r4, r0, #20
 802cbd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 802cbd6:	4623      	mov	r3, r4
 802cbd8:	2200      	movs	r2, #0
 802cbda:	4573      	cmp	r3, lr
 802cbdc:	d320      	bcc.n	802cc20 <__multiply+0x94>
 802cbde:	f107 0814 	add.w	r8, r7, #20
 802cbe2:	f109 0114 	add.w	r1, r9, #20
 802cbe6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 802cbea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 802cbee:	9302      	str	r3, [sp, #8]
 802cbf0:	1beb      	subs	r3, r5, r7
 802cbf2:	3b15      	subs	r3, #21
 802cbf4:	f023 0303 	bic.w	r3, r3, #3
 802cbf8:	3304      	adds	r3, #4
 802cbfa:	3715      	adds	r7, #21
 802cbfc:	42bd      	cmp	r5, r7
 802cbfe:	bf38      	it	cc
 802cc00:	2304      	movcc	r3, #4
 802cc02:	9301      	str	r3, [sp, #4]
 802cc04:	9b02      	ldr	r3, [sp, #8]
 802cc06:	9103      	str	r1, [sp, #12]
 802cc08:	428b      	cmp	r3, r1
 802cc0a:	d80c      	bhi.n	802cc26 <__multiply+0x9a>
 802cc0c:	2e00      	cmp	r6, #0
 802cc0e:	dd03      	ble.n	802cc18 <__multiply+0x8c>
 802cc10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802cc14:	2b00      	cmp	r3, #0
 802cc16:	d055      	beq.n	802ccc4 <__multiply+0x138>
 802cc18:	6106      	str	r6, [r0, #16]
 802cc1a:	b005      	add	sp, #20
 802cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cc20:	f843 2b04 	str.w	r2, [r3], #4
 802cc24:	e7d9      	b.n	802cbda <__multiply+0x4e>
 802cc26:	f8b1 a000 	ldrh.w	sl, [r1]
 802cc2a:	f1ba 0f00 	cmp.w	sl, #0
 802cc2e:	d01f      	beq.n	802cc70 <__multiply+0xe4>
 802cc30:	46c4      	mov	ip, r8
 802cc32:	46a1      	mov	r9, r4
 802cc34:	2700      	movs	r7, #0
 802cc36:	f85c 2b04 	ldr.w	r2, [ip], #4
 802cc3a:	f8d9 3000 	ldr.w	r3, [r9]
 802cc3e:	fa1f fb82 	uxth.w	fp, r2
 802cc42:	b29b      	uxth	r3, r3
 802cc44:	fb0a 330b 	mla	r3, sl, fp, r3
 802cc48:	443b      	add	r3, r7
 802cc4a:	f8d9 7000 	ldr.w	r7, [r9]
 802cc4e:	0c12      	lsrs	r2, r2, #16
 802cc50:	0c3f      	lsrs	r7, r7, #16
 802cc52:	fb0a 7202 	mla	r2, sl, r2, r7
 802cc56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 802cc5a:	b29b      	uxth	r3, r3
 802cc5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802cc60:	4565      	cmp	r5, ip
 802cc62:	f849 3b04 	str.w	r3, [r9], #4
 802cc66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 802cc6a:	d8e4      	bhi.n	802cc36 <__multiply+0xaa>
 802cc6c:	9b01      	ldr	r3, [sp, #4]
 802cc6e:	50e7      	str	r7, [r4, r3]
 802cc70:	9b03      	ldr	r3, [sp, #12]
 802cc72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802cc76:	3104      	adds	r1, #4
 802cc78:	f1b9 0f00 	cmp.w	r9, #0
 802cc7c:	d020      	beq.n	802ccc0 <__multiply+0x134>
 802cc7e:	6823      	ldr	r3, [r4, #0]
 802cc80:	4647      	mov	r7, r8
 802cc82:	46a4      	mov	ip, r4
 802cc84:	f04f 0a00 	mov.w	sl, #0
 802cc88:	f8b7 b000 	ldrh.w	fp, [r7]
 802cc8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 802cc90:	fb09 220b 	mla	r2, r9, fp, r2
 802cc94:	4452      	add	r2, sl
 802cc96:	b29b      	uxth	r3, r3
 802cc98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802cc9c:	f84c 3b04 	str.w	r3, [ip], #4
 802cca0:	f857 3b04 	ldr.w	r3, [r7], #4
 802cca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802cca8:	f8bc 3000 	ldrh.w	r3, [ip]
 802ccac:	fb09 330a 	mla	r3, r9, sl, r3
 802ccb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 802ccb4:	42bd      	cmp	r5, r7
 802ccb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802ccba:	d8e5      	bhi.n	802cc88 <__multiply+0xfc>
 802ccbc:	9a01      	ldr	r2, [sp, #4]
 802ccbe:	50a3      	str	r3, [r4, r2]
 802ccc0:	3404      	adds	r4, #4
 802ccc2:	e79f      	b.n	802cc04 <__multiply+0x78>
 802ccc4:	3e01      	subs	r6, #1
 802ccc6:	e7a1      	b.n	802cc0c <__multiply+0x80>
 802ccc8:	0802f36a 	.word	0x0802f36a
 802cccc:	0802f37b 	.word	0x0802f37b

0802ccd0 <__pow5mult>:
 802ccd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ccd4:	4615      	mov	r5, r2
 802ccd6:	f012 0203 	ands.w	r2, r2, #3
 802ccda:	4607      	mov	r7, r0
 802ccdc:	460e      	mov	r6, r1
 802ccde:	d007      	beq.n	802ccf0 <__pow5mult+0x20>
 802cce0:	4c25      	ldr	r4, [pc, #148]	@ (802cd78 <__pow5mult+0xa8>)
 802cce2:	3a01      	subs	r2, #1
 802cce4:	2300      	movs	r3, #0
 802cce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802ccea:	f7ff fe5d 	bl	802c9a8 <__multadd>
 802ccee:	4606      	mov	r6, r0
 802ccf0:	10ad      	asrs	r5, r5, #2
 802ccf2:	d03d      	beq.n	802cd70 <__pow5mult+0xa0>
 802ccf4:	69fc      	ldr	r4, [r7, #28]
 802ccf6:	b97c      	cbnz	r4, 802cd18 <__pow5mult+0x48>
 802ccf8:	2010      	movs	r0, #16
 802ccfa:	f7fd fa61 	bl	802a1c0 <malloc>
 802ccfe:	4602      	mov	r2, r0
 802cd00:	61f8      	str	r0, [r7, #28]
 802cd02:	b928      	cbnz	r0, 802cd10 <__pow5mult+0x40>
 802cd04:	4b1d      	ldr	r3, [pc, #116]	@ (802cd7c <__pow5mult+0xac>)
 802cd06:	481e      	ldr	r0, [pc, #120]	@ (802cd80 <__pow5mult+0xb0>)
 802cd08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802cd0c:	f7fd fa36 	bl	802a17c <__assert_func>
 802cd10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802cd14:	6004      	str	r4, [r0, #0]
 802cd16:	60c4      	str	r4, [r0, #12]
 802cd18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802cd1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802cd20:	b94c      	cbnz	r4, 802cd36 <__pow5mult+0x66>
 802cd22:	f240 2171 	movw	r1, #625	@ 0x271
 802cd26:	4638      	mov	r0, r7
 802cd28:	f7ff ff1a 	bl	802cb60 <__i2b>
 802cd2c:	2300      	movs	r3, #0
 802cd2e:	f8c8 0008 	str.w	r0, [r8, #8]
 802cd32:	4604      	mov	r4, r0
 802cd34:	6003      	str	r3, [r0, #0]
 802cd36:	f04f 0900 	mov.w	r9, #0
 802cd3a:	07eb      	lsls	r3, r5, #31
 802cd3c:	d50a      	bpl.n	802cd54 <__pow5mult+0x84>
 802cd3e:	4631      	mov	r1, r6
 802cd40:	4622      	mov	r2, r4
 802cd42:	4638      	mov	r0, r7
 802cd44:	f7ff ff22 	bl	802cb8c <__multiply>
 802cd48:	4631      	mov	r1, r6
 802cd4a:	4680      	mov	r8, r0
 802cd4c:	4638      	mov	r0, r7
 802cd4e:	f7ff fe09 	bl	802c964 <_Bfree>
 802cd52:	4646      	mov	r6, r8
 802cd54:	106d      	asrs	r5, r5, #1
 802cd56:	d00b      	beq.n	802cd70 <__pow5mult+0xa0>
 802cd58:	6820      	ldr	r0, [r4, #0]
 802cd5a:	b938      	cbnz	r0, 802cd6c <__pow5mult+0x9c>
 802cd5c:	4622      	mov	r2, r4
 802cd5e:	4621      	mov	r1, r4
 802cd60:	4638      	mov	r0, r7
 802cd62:	f7ff ff13 	bl	802cb8c <__multiply>
 802cd66:	6020      	str	r0, [r4, #0]
 802cd68:	f8c0 9000 	str.w	r9, [r0]
 802cd6c:	4604      	mov	r4, r0
 802cd6e:	e7e4      	b.n	802cd3a <__pow5mult+0x6a>
 802cd70:	4630      	mov	r0, r6
 802cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cd76:	bf00      	nop
 802cd78:	0802f540 	.word	0x0802f540
 802cd7c:	0802f2fb 	.word	0x0802f2fb
 802cd80:	0802f37b 	.word	0x0802f37b

0802cd84 <__lshift>:
 802cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cd88:	460c      	mov	r4, r1
 802cd8a:	6849      	ldr	r1, [r1, #4]
 802cd8c:	6923      	ldr	r3, [r4, #16]
 802cd8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802cd92:	68a3      	ldr	r3, [r4, #8]
 802cd94:	4607      	mov	r7, r0
 802cd96:	4691      	mov	r9, r2
 802cd98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802cd9c:	f108 0601 	add.w	r6, r8, #1
 802cda0:	42b3      	cmp	r3, r6
 802cda2:	db0b      	blt.n	802cdbc <__lshift+0x38>
 802cda4:	4638      	mov	r0, r7
 802cda6:	f7ff fd9d 	bl	802c8e4 <_Balloc>
 802cdaa:	4605      	mov	r5, r0
 802cdac:	b948      	cbnz	r0, 802cdc2 <__lshift+0x3e>
 802cdae:	4602      	mov	r2, r0
 802cdb0:	4b28      	ldr	r3, [pc, #160]	@ (802ce54 <__lshift+0xd0>)
 802cdb2:	4829      	ldr	r0, [pc, #164]	@ (802ce58 <__lshift+0xd4>)
 802cdb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802cdb8:	f7fd f9e0 	bl	802a17c <__assert_func>
 802cdbc:	3101      	adds	r1, #1
 802cdbe:	005b      	lsls	r3, r3, #1
 802cdc0:	e7ee      	b.n	802cda0 <__lshift+0x1c>
 802cdc2:	2300      	movs	r3, #0
 802cdc4:	f100 0114 	add.w	r1, r0, #20
 802cdc8:	f100 0210 	add.w	r2, r0, #16
 802cdcc:	4618      	mov	r0, r3
 802cdce:	4553      	cmp	r3, sl
 802cdd0:	db33      	blt.n	802ce3a <__lshift+0xb6>
 802cdd2:	6920      	ldr	r0, [r4, #16]
 802cdd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802cdd8:	f104 0314 	add.w	r3, r4, #20
 802cddc:	f019 091f 	ands.w	r9, r9, #31
 802cde0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802cde4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802cde8:	d02b      	beq.n	802ce42 <__lshift+0xbe>
 802cdea:	f1c9 0e20 	rsb	lr, r9, #32
 802cdee:	468a      	mov	sl, r1
 802cdf0:	2200      	movs	r2, #0
 802cdf2:	6818      	ldr	r0, [r3, #0]
 802cdf4:	fa00 f009 	lsl.w	r0, r0, r9
 802cdf8:	4310      	orrs	r0, r2
 802cdfa:	f84a 0b04 	str.w	r0, [sl], #4
 802cdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 802ce02:	459c      	cmp	ip, r3
 802ce04:	fa22 f20e 	lsr.w	r2, r2, lr
 802ce08:	d8f3      	bhi.n	802cdf2 <__lshift+0x6e>
 802ce0a:	ebac 0304 	sub.w	r3, ip, r4
 802ce0e:	3b15      	subs	r3, #21
 802ce10:	f023 0303 	bic.w	r3, r3, #3
 802ce14:	3304      	adds	r3, #4
 802ce16:	f104 0015 	add.w	r0, r4, #21
 802ce1a:	4560      	cmp	r0, ip
 802ce1c:	bf88      	it	hi
 802ce1e:	2304      	movhi	r3, #4
 802ce20:	50ca      	str	r2, [r1, r3]
 802ce22:	b10a      	cbz	r2, 802ce28 <__lshift+0xa4>
 802ce24:	f108 0602 	add.w	r6, r8, #2
 802ce28:	3e01      	subs	r6, #1
 802ce2a:	4638      	mov	r0, r7
 802ce2c:	612e      	str	r6, [r5, #16]
 802ce2e:	4621      	mov	r1, r4
 802ce30:	f7ff fd98 	bl	802c964 <_Bfree>
 802ce34:	4628      	mov	r0, r5
 802ce36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ce3a:	f842 0f04 	str.w	r0, [r2, #4]!
 802ce3e:	3301      	adds	r3, #1
 802ce40:	e7c5      	b.n	802cdce <__lshift+0x4a>
 802ce42:	3904      	subs	r1, #4
 802ce44:	f853 2b04 	ldr.w	r2, [r3], #4
 802ce48:	f841 2f04 	str.w	r2, [r1, #4]!
 802ce4c:	459c      	cmp	ip, r3
 802ce4e:	d8f9      	bhi.n	802ce44 <__lshift+0xc0>
 802ce50:	e7ea      	b.n	802ce28 <__lshift+0xa4>
 802ce52:	bf00      	nop
 802ce54:	0802f36a 	.word	0x0802f36a
 802ce58:	0802f37b 	.word	0x0802f37b

0802ce5c <__mcmp>:
 802ce5c:	690a      	ldr	r2, [r1, #16]
 802ce5e:	4603      	mov	r3, r0
 802ce60:	6900      	ldr	r0, [r0, #16]
 802ce62:	1a80      	subs	r0, r0, r2
 802ce64:	b530      	push	{r4, r5, lr}
 802ce66:	d10e      	bne.n	802ce86 <__mcmp+0x2a>
 802ce68:	3314      	adds	r3, #20
 802ce6a:	3114      	adds	r1, #20
 802ce6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802ce70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802ce74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802ce78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802ce7c:	4295      	cmp	r5, r2
 802ce7e:	d003      	beq.n	802ce88 <__mcmp+0x2c>
 802ce80:	d205      	bcs.n	802ce8e <__mcmp+0x32>
 802ce82:	f04f 30ff 	mov.w	r0, #4294967295
 802ce86:	bd30      	pop	{r4, r5, pc}
 802ce88:	42a3      	cmp	r3, r4
 802ce8a:	d3f3      	bcc.n	802ce74 <__mcmp+0x18>
 802ce8c:	e7fb      	b.n	802ce86 <__mcmp+0x2a>
 802ce8e:	2001      	movs	r0, #1
 802ce90:	e7f9      	b.n	802ce86 <__mcmp+0x2a>
	...

0802ce94 <__mdiff>:
 802ce94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce98:	4689      	mov	r9, r1
 802ce9a:	4606      	mov	r6, r0
 802ce9c:	4611      	mov	r1, r2
 802ce9e:	4648      	mov	r0, r9
 802cea0:	4614      	mov	r4, r2
 802cea2:	f7ff ffdb 	bl	802ce5c <__mcmp>
 802cea6:	1e05      	subs	r5, r0, #0
 802cea8:	d112      	bne.n	802ced0 <__mdiff+0x3c>
 802ceaa:	4629      	mov	r1, r5
 802ceac:	4630      	mov	r0, r6
 802ceae:	f7ff fd19 	bl	802c8e4 <_Balloc>
 802ceb2:	4602      	mov	r2, r0
 802ceb4:	b928      	cbnz	r0, 802cec2 <__mdiff+0x2e>
 802ceb6:	4b3f      	ldr	r3, [pc, #252]	@ (802cfb4 <__mdiff+0x120>)
 802ceb8:	f240 2137 	movw	r1, #567	@ 0x237
 802cebc:	483e      	ldr	r0, [pc, #248]	@ (802cfb8 <__mdiff+0x124>)
 802cebe:	f7fd f95d 	bl	802a17c <__assert_func>
 802cec2:	2301      	movs	r3, #1
 802cec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802cec8:	4610      	mov	r0, r2
 802ceca:	b003      	add	sp, #12
 802cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ced0:	bfbc      	itt	lt
 802ced2:	464b      	movlt	r3, r9
 802ced4:	46a1      	movlt	r9, r4
 802ced6:	4630      	mov	r0, r6
 802ced8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802cedc:	bfba      	itte	lt
 802cede:	461c      	movlt	r4, r3
 802cee0:	2501      	movlt	r5, #1
 802cee2:	2500      	movge	r5, #0
 802cee4:	f7ff fcfe 	bl	802c8e4 <_Balloc>
 802cee8:	4602      	mov	r2, r0
 802ceea:	b918      	cbnz	r0, 802cef4 <__mdiff+0x60>
 802ceec:	4b31      	ldr	r3, [pc, #196]	@ (802cfb4 <__mdiff+0x120>)
 802ceee:	f240 2145 	movw	r1, #581	@ 0x245
 802cef2:	e7e3      	b.n	802cebc <__mdiff+0x28>
 802cef4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802cef8:	6926      	ldr	r6, [r4, #16]
 802cefa:	60c5      	str	r5, [r0, #12]
 802cefc:	f109 0310 	add.w	r3, r9, #16
 802cf00:	f109 0514 	add.w	r5, r9, #20
 802cf04:	f104 0e14 	add.w	lr, r4, #20
 802cf08:	f100 0b14 	add.w	fp, r0, #20
 802cf0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802cf10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802cf14:	9301      	str	r3, [sp, #4]
 802cf16:	46d9      	mov	r9, fp
 802cf18:	f04f 0c00 	mov.w	ip, #0
 802cf1c:	9b01      	ldr	r3, [sp, #4]
 802cf1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 802cf22:	f853 af04 	ldr.w	sl, [r3, #4]!
 802cf26:	9301      	str	r3, [sp, #4]
 802cf28:	fa1f f38a 	uxth.w	r3, sl
 802cf2c:	4619      	mov	r1, r3
 802cf2e:	b283      	uxth	r3, r0
 802cf30:	1acb      	subs	r3, r1, r3
 802cf32:	0c00      	lsrs	r0, r0, #16
 802cf34:	4463      	add	r3, ip
 802cf36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802cf3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802cf3e:	b29b      	uxth	r3, r3
 802cf40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802cf44:	4576      	cmp	r6, lr
 802cf46:	f849 3b04 	str.w	r3, [r9], #4
 802cf4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cf4e:	d8e5      	bhi.n	802cf1c <__mdiff+0x88>
 802cf50:	1b33      	subs	r3, r6, r4
 802cf52:	3b15      	subs	r3, #21
 802cf54:	f023 0303 	bic.w	r3, r3, #3
 802cf58:	3415      	adds	r4, #21
 802cf5a:	3304      	adds	r3, #4
 802cf5c:	42a6      	cmp	r6, r4
 802cf5e:	bf38      	it	cc
 802cf60:	2304      	movcc	r3, #4
 802cf62:	441d      	add	r5, r3
 802cf64:	445b      	add	r3, fp
 802cf66:	461e      	mov	r6, r3
 802cf68:	462c      	mov	r4, r5
 802cf6a:	4544      	cmp	r4, r8
 802cf6c:	d30e      	bcc.n	802cf8c <__mdiff+0xf8>
 802cf6e:	f108 0103 	add.w	r1, r8, #3
 802cf72:	1b49      	subs	r1, r1, r5
 802cf74:	f021 0103 	bic.w	r1, r1, #3
 802cf78:	3d03      	subs	r5, #3
 802cf7a:	45a8      	cmp	r8, r5
 802cf7c:	bf38      	it	cc
 802cf7e:	2100      	movcc	r1, #0
 802cf80:	440b      	add	r3, r1
 802cf82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802cf86:	b191      	cbz	r1, 802cfae <__mdiff+0x11a>
 802cf88:	6117      	str	r7, [r2, #16]
 802cf8a:	e79d      	b.n	802cec8 <__mdiff+0x34>
 802cf8c:	f854 1b04 	ldr.w	r1, [r4], #4
 802cf90:	46e6      	mov	lr, ip
 802cf92:	0c08      	lsrs	r0, r1, #16
 802cf94:	fa1c fc81 	uxtah	ip, ip, r1
 802cf98:	4471      	add	r1, lr
 802cf9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802cf9e:	b289      	uxth	r1, r1
 802cfa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802cfa4:	f846 1b04 	str.w	r1, [r6], #4
 802cfa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cfac:	e7dd      	b.n	802cf6a <__mdiff+0xd6>
 802cfae:	3f01      	subs	r7, #1
 802cfb0:	e7e7      	b.n	802cf82 <__mdiff+0xee>
 802cfb2:	bf00      	nop
 802cfb4:	0802f36a 	.word	0x0802f36a
 802cfb8:	0802f37b 	.word	0x0802f37b

0802cfbc <__ulp>:
 802cfbc:	b082      	sub	sp, #8
 802cfbe:	ed8d 0b00 	vstr	d0, [sp]
 802cfc2:	9a01      	ldr	r2, [sp, #4]
 802cfc4:	4b0f      	ldr	r3, [pc, #60]	@ (802d004 <__ulp+0x48>)
 802cfc6:	4013      	ands	r3, r2
 802cfc8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802cfcc:	2b00      	cmp	r3, #0
 802cfce:	dc08      	bgt.n	802cfe2 <__ulp+0x26>
 802cfd0:	425b      	negs	r3, r3
 802cfd2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802cfd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 802cfda:	da04      	bge.n	802cfe6 <__ulp+0x2a>
 802cfdc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802cfe0:	4113      	asrs	r3, r2
 802cfe2:	2200      	movs	r2, #0
 802cfe4:	e008      	b.n	802cff8 <__ulp+0x3c>
 802cfe6:	f1a2 0314 	sub.w	r3, r2, #20
 802cfea:	2b1e      	cmp	r3, #30
 802cfec:	bfda      	itte	le
 802cfee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802cff2:	40da      	lsrle	r2, r3
 802cff4:	2201      	movgt	r2, #1
 802cff6:	2300      	movs	r3, #0
 802cff8:	4619      	mov	r1, r3
 802cffa:	4610      	mov	r0, r2
 802cffc:	ec41 0b10 	vmov	d0, r0, r1
 802d000:	b002      	add	sp, #8
 802d002:	4770      	bx	lr
 802d004:	7ff00000 	.word	0x7ff00000

0802d008 <__b2d>:
 802d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d00c:	6906      	ldr	r6, [r0, #16]
 802d00e:	f100 0814 	add.w	r8, r0, #20
 802d012:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802d016:	1f37      	subs	r7, r6, #4
 802d018:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802d01c:	4610      	mov	r0, r2
 802d01e:	f7ff fd53 	bl	802cac8 <__hi0bits>
 802d022:	f1c0 0320 	rsb	r3, r0, #32
 802d026:	280a      	cmp	r0, #10
 802d028:	600b      	str	r3, [r1, #0]
 802d02a:	491b      	ldr	r1, [pc, #108]	@ (802d098 <__b2d+0x90>)
 802d02c:	dc15      	bgt.n	802d05a <__b2d+0x52>
 802d02e:	f1c0 0c0b 	rsb	ip, r0, #11
 802d032:	fa22 f30c 	lsr.w	r3, r2, ip
 802d036:	45b8      	cmp	r8, r7
 802d038:	ea43 0501 	orr.w	r5, r3, r1
 802d03c:	bf34      	ite	cc
 802d03e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802d042:	2300      	movcs	r3, #0
 802d044:	3015      	adds	r0, #21
 802d046:	fa02 f000 	lsl.w	r0, r2, r0
 802d04a:	fa23 f30c 	lsr.w	r3, r3, ip
 802d04e:	4303      	orrs	r3, r0
 802d050:	461c      	mov	r4, r3
 802d052:	ec45 4b10 	vmov	d0, r4, r5
 802d056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d05a:	45b8      	cmp	r8, r7
 802d05c:	bf3a      	itte	cc
 802d05e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802d062:	f1a6 0708 	subcc.w	r7, r6, #8
 802d066:	2300      	movcs	r3, #0
 802d068:	380b      	subs	r0, #11
 802d06a:	d012      	beq.n	802d092 <__b2d+0x8a>
 802d06c:	f1c0 0120 	rsb	r1, r0, #32
 802d070:	fa23 f401 	lsr.w	r4, r3, r1
 802d074:	4082      	lsls	r2, r0
 802d076:	4322      	orrs	r2, r4
 802d078:	4547      	cmp	r7, r8
 802d07a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802d07e:	bf8c      	ite	hi
 802d080:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802d084:	2200      	movls	r2, #0
 802d086:	4083      	lsls	r3, r0
 802d088:	40ca      	lsrs	r2, r1
 802d08a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802d08e:	4313      	orrs	r3, r2
 802d090:	e7de      	b.n	802d050 <__b2d+0x48>
 802d092:	ea42 0501 	orr.w	r5, r2, r1
 802d096:	e7db      	b.n	802d050 <__b2d+0x48>
 802d098:	3ff00000 	.word	0x3ff00000

0802d09c <__d2b>:
 802d09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802d0a0:	460f      	mov	r7, r1
 802d0a2:	2101      	movs	r1, #1
 802d0a4:	ec59 8b10 	vmov	r8, r9, d0
 802d0a8:	4616      	mov	r6, r2
 802d0aa:	f7ff fc1b 	bl	802c8e4 <_Balloc>
 802d0ae:	4604      	mov	r4, r0
 802d0b0:	b930      	cbnz	r0, 802d0c0 <__d2b+0x24>
 802d0b2:	4602      	mov	r2, r0
 802d0b4:	4b23      	ldr	r3, [pc, #140]	@ (802d144 <__d2b+0xa8>)
 802d0b6:	4824      	ldr	r0, [pc, #144]	@ (802d148 <__d2b+0xac>)
 802d0b8:	f240 310f 	movw	r1, #783	@ 0x30f
 802d0bc:	f7fd f85e 	bl	802a17c <__assert_func>
 802d0c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802d0c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802d0c8:	b10d      	cbz	r5, 802d0ce <__d2b+0x32>
 802d0ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802d0ce:	9301      	str	r3, [sp, #4]
 802d0d0:	f1b8 0300 	subs.w	r3, r8, #0
 802d0d4:	d023      	beq.n	802d11e <__d2b+0x82>
 802d0d6:	4668      	mov	r0, sp
 802d0d8:	9300      	str	r3, [sp, #0]
 802d0da:	f7ff fd14 	bl	802cb06 <__lo0bits>
 802d0de:	e9dd 1200 	ldrd	r1, r2, [sp]
 802d0e2:	b1d0      	cbz	r0, 802d11a <__d2b+0x7e>
 802d0e4:	f1c0 0320 	rsb	r3, r0, #32
 802d0e8:	fa02 f303 	lsl.w	r3, r2, r3
 802d0ec:	430b      	orrs	r3, r1
 802d0ee:	40c2      	lsrs	r2, r0
 802d0f0:	6163      	str	r3, [r4, #20]
 802d0f2:	9201      	str	r2, [sp, #4]
 802d0f4:	9b01      	ldr	r3, [sp, #4]
 802d0f6:	61a3      	str	r3, [r4, #24]
 802d0f8:	2b00      	cmp	r3, #0
 802d0fa:	bf0c      	ite	eq
 802d0fc:	2201      	moveq	r2, #1
 802d0fe:	2202      	movne	r2, #2
 802d100:	6122      	str	r2, [r4, #16]
 802d102:	b1a5      	cbz	r5, 802d12e <__d2b+0x92>
 802d104:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802d108:	4405      	add	r5, r0
 802d10a:	603d      	str	r5, [r7, #0]
 802d10c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802d110:	6030      	str	r0, [r6, #0]
 802d112:	4620      	mov	r0, r4
 802d114:	b003      	add	sp, #12
 802d116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d11a:	6161      	str	r1, [r4, #20]
 802d11c:	e7ea      	b.n	802d0f4 <__d2b+0x58>
 802d11e:	a801      	add	r0, sp, #4
 802d120:	f7ff fcf1 	bl	802cb06 <__lo0bits>
 802d124:	9b01      	ldr	r3, [sp, #4]
 802d126:	6163      	str	r3, [r4, #20]
 802d128:	3020      	adds	r0, #32
 802d12a:	2201      	movs	r2, #1
 802d12c:	e7e8      	b.n	802d100 <__d2b+0x64>
 802d12e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802d132:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802d136:	6038      	str	r0, [r7, #0]
 802d138:	6918      	ldr	r0, [r3, #16]
 802d13a:	f7ff fcc5 	bl	802cac8 <__hi0bits>
 802d13e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802d142:	e7e5      	b.n	802d110 <__d2b+0x74>
 802d144:	0802f36a 	.word	0x0802f36a
 802d148:	0802f37b 	.word	0x0802f37b

0802d14c <__ratio>:
 802d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d150:	b085      	sub	sp, #20
 802d152:	e9cd 1000 	strd	r1, r0, [sp]
 802d156:	a902      	add	r1, sp, #8
 802d158:	f7ff ff56 	bl	802d008 <__b2d>
 802d15c:	9800      	ldr	r0, [sp, #0]
 802d15e:	a903      	add	r1, sp, #12
 802d160:	ec55 4b10 	vmov	r4, r5, d0
 802d164:	f7ff ff50 	bl	802d008 <__b2d>
 802d168:	9b01      	ldr	r3, [sp, #4]
 802d16a:	6919      	ldr	r1, [r3, #16]
 802d16c:	9b00      	ldr	r3, [sp, #0]
 802d16e:	691b      	ldr	r3, [r3, #16]
 802d170:	1ac9      	subs	r1, r1, r3
 802d172:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802d176:	1a9b      	subs	r3, r3, r2
 802d178:	ec5b ab10 	vmov	sl, fp, d0
 802d17c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 802d180:	2b00      	cmp	r3, #0
 802d182:	bfce      	itee	gt
 802d184:	462a      	movgt	r2, r5
 802d186:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802d18a:	465a      	movle	r2, fp
 802d18c:	462f      	mov	r7, r5
 802d18e:	46d9      	mov	r9, fp
 802d190:	bfcc      	ite	gt
 802d192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802d196:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802d19a:	464b      	mov	r3, r9
 802d19c:	4652      	mov	r2, sl
 802d19e:	4620      	mov	r0, r4
 802d1a0:	4639      	mov	r1, r7
 802d1a2:	f7f3 fb73 	bl	802088c <__aeabi_ddiv>
 802d1a6:	ec41 0b10 	vmov	d0, r0, r1
 802d1aa:	b005      	add	sp, #20
 802d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802d1b0 <__copybits>:
 802d1b0:	3901      	subs	r1, #1
 802d1b2:	b570      	push	{r4, r5, r6, lr}
 802d1b4:	1149      	asrs	r1, r1, #5
 802d1b6:	6914      	ldr	r4, [r2, #16]
 802d1b8:	3101      	adds	r1, #1
 802d1ba:	f102 0314 	add.w	r3, r2, #20
 802d1be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802d1c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802d1c6:	1f05      	subs	r5, r0, #4
 802d1c8:	42a3      	cmp	r3, r4
 802d1ca:	d30c      	bcc.n	802d1e6 <__copybits+0x36>
 802d1cc:	1aa3      	subs	r3, r4, r2
 802d1ce:	3b11      	subs	r3, #17
 802d1d0:	f023 0303 	bic.w	r3, r3, #3
 802d1d4:	3211      	adds	r2, #17
 802d1d6:	42a2      	cmp	r2, r4
 802d1d8:	bf88      	it	hi
 802d1da:	2300      	movhi	r3, #0
 802d1dc:	4418      	add	r0, r3
 802d1de:	2300      	movs	r3, #0
 802d1e0:	4288      	cmp	r0, r1
 802d1e2:	d305      	bcc.n	802d1f0 <__copybits+0x40>
 802d1e4:	bd70      	pop	{r4, r5, r6, pc}
 802d1e6:	f853 6b04 	ldr.w	r6, [r3], #4
 802d1ea:	f845 6f04 	str.w	r6, [r5, #4]!
 802d1ee:	e7eb      	b.n	802d1c8 <__copybits+0x18>
 802d1f0:	f840 3b04 	str.w	r3, [r0], #4
 802d1f4:	e7f4      	b.n	802d1e0 <__copybits+0x30>

0802d1f6 <__any_on>:
 802d1f6:	f100 0214 	add.w	r2, r0, #20
 802d1fa:	6900      	ldr	r0, [r0, #16]
 802d1fc:	114b      	asrs	r3, r1, #5
 802d1fe:	4298      	cmp	r0, r3
 802d200:	b510      	push	{r4, lr}
 802d202:	db11      	blt.n	802d228 <__any_on+0x32>
 802d204:	dd0a      	ble.n	802d21c <__any_on+0x26>
 802d206:	f011 011f 	ands.w	r1, r1, #31
 802d20a:	d007      	beq.n	802d21c <__any_on+0x26>
 802d20c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802d210:	fa24 f001 	lsr.w	r0, r4, r1
 802d214:	fa00 f101 	lsl.w	r1, r0, r1
 802d218:	428c      	cmp	r4, r1
 802d21a:	d10b      	bne.n	802d234 <__any_on+0x3e>
 802d21c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802d220:	4293      	cmp	r3, r2
 802d222:	d803      	bhi.n	802d22c <__any_on+0x36>
 802d224:	2000      	movs	r0, #0
 802d226:	bd10      	pop	{r4, pc}
 802d228:	4603      	mov	r3, r0
 802d22a:	e7f7      	b.n	802d21c <__any_on+0x26>
 802d22c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802d230:	2900      	cmp	r1, #0
 802d232:	d0f5      	beq.n	802d220 <__any_on+0x2a>
 802d234:	2001      	movs	r0, #1
 802d236:	e7f6      	b.n	802d226 <__any_on+0x30>

0802d238 <_realloc_r>:
 802d238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d23c:	4607      	mov	r7, r0
 802d23e:	4614      	mov	r4, r2
 802d240:	460d      	mov	r5, r1
 802d242:	b921      	cbnz	r1, 802d24e <_realloc_r+0x16>
 802d244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d248:	4611      	mov	r1, r2
 802d24a:	f7fc bfe3 	b.w	802a214 <_malloc_r>
 802d24e:	b92a      	cbnz	r2, 802d25c <_realloc_r+0x24>
 802d250:	f7ff fafe 	bl	802c850 <_free_r>
 802d254:	4625      	mov	r5, r4
 802d256:	4628      	mov	r0, r5
 802d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d25c:	f001 fbab 	bl	802e9b6 <_malloc_usable_size_r>
 802d260:	4284      	cmp	r4, r0
 802d262:	4606      	mov	r6, r0
 802d264:	d802      	bhi.n	802d26c <_realloc_r+0x34>
 802d266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802d26a:	d8f4      	bhi.n	802d256 <_realloc_r+0x1e>
 802d26c:	4621      	mov	r1, r4
 802d26e:	4638      	mov	r0, r7
 802d270:	f7fc ffd0 	bl	802a214 <_malloc_r>
 802d274:	4680      	mov	r8, r0
 802d276:	b908      	cbnz	r0, 802d27c <_realloc_r+0x44>
 802d278:	4645      	mov	r5, r8
 802d27a:	e7ec      	b.n	802d256 <_realloc_r+0x1e>
 802d27c:	42b4      	cmp	r4, r6
 802d27e:	4622      	mov	r2, r4
 802d280:	4629      	mov	r1, r5
 802d282:	bf28      	it	cs
 802d284:	4632      	movcs	r2, r6
 802d286:	f7fe fc6e 	bl	802bb66 <memcpy>
 802d28a:	4629      	mov	r1, r5
 802d28c:	4638      	mov	r0, r7
 802d28e:	f7ff fadf 	bl	802c850 <_free_r>
 802d292:	e7f1      	b.n	802d278 <_realloc_r+0x40>

0802d294 <sulp>:
 802d294:	b570      	push	{r4, r5, r6, lr}
 802d296:	4604      	mov	r4, r0
 802d298:	460d      	mov	r5, r1
 802d29a:	ec45 4b10 	vmov	d0, r4, r5
 802d29e:	4616      	mov	r6, r2
 802d2a0:	f7ff fe8c 	bl	802cfbc <__ulp>
 802d2a4:	ec51 0b10 	vmov	r0, r1, d0
 802d2a8:	b17e      	cbz	r6, 802d2ca <sulp+0x36>
 802d2aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802d2ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802d2b2:	2b00      	cmp	r3, #0
 802d2b4:	dd09      	ble.n	802d2ca <sulp+0x36>
 802d2b6:	051b      	lsls	r3, r3, #20
 802d2b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 802d2bc:	2400      	movs	r4, #0
 802d2be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802d2c2:	4622      	mov	r2, r4
 802d2c4:	462b      	mov	r3, r5
 802d2c6:	f7f3 f9b7 	bl	8020638 <__aeabi_dmul>
 802d2ca:	ec41 0b10 	vmov	d0, r0, r1
 802d2ce:	bd70      	pop	{r4, r5, r6, pc}

0802d2d0 <_strtod_l>:
 802d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d2d4:	b09f      	sub	sp, #124	@ 0x7c
 802d2d6:	460c      	mov	r4, r1
 802d2d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 802d2da:	2200      	movs	r2, #0
 802d2dc:	921a      	str	r2, [sp, #104]	@ 0x68
 802d2de:	9005      	str	r0, [sp, #20]
 802d2e0:	f04f 0a00 	mov.w	sl, #0
 802d2e4:	f04f 0b00 	mov.w	fp, #0
 802d2e8:	460a      	mov	r2, r1
 802d2ea:	9219      	str	r2, [sp, #100]	@ 0x64
 802d2ec:	7811      	ldrb	r1, [r2, #0]
 802d2ee:	292b      	cmp	r1, #43	@ 0x2b
 802d2f0:	d04a      	beq.n	802d388 <_strtod_l+0xb8>
 802d2f2:	d838      	bhi.n	802d366 <_strtod_l+0x96>
 802d2f4:	290d      	cmp	r1, #13
 802d2f6:	d832      	bhi.n	802d35e <_strtod_l+0x8e>
 802d2f8:	2908      	cmp	r1, #8
 802d2fa:	d832      	bhi.n	802d362 <_strtod_l+0x92>
 802d2fc:	2900      	cmp	r1, #0
 802d2fe:	d03b      	beq.n	802d378 <_strtod_l+0xa8>
 802d300:	2200      	movs	r2, #0
 802d302:	920e      	str	r2, [sp, #56]	@ 0x38
 802d304:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802d306:	782a      	ldrb	r2, [r5, #0]
 802d308:	2a30      	cmp	r2, #48	@ 0x30
 802d30a:	f040 80b2 	bne.w	802d472 <_strtod_l+0x1a2>
 802d30e:	786a      	ldrb	r2, [r5, #1]
 802d310:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802d314:	2a58      	cmp	r2, #88	@ 0x58
 802d316:	d16e      	bne.n	802d3f6 <_strtod_l+0x126>
 802d318:	9302      	str	r3, [sp, #8]
 802d31a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d31c:	9301      	str	r3, [sp, #4]
 802d31e:	ab1a      	add	r3, sp, #104	@ 0x68
 802d320:	9300      	str	r3, [sp, #0]
 802d322:	4a8f      	ldr	r2, [pc, #572]	@ (802d560 <_strtod_l+0x290>)
 802d324:	9805      	ldr	r0, [sp, #20]
 802d326:	ab1b      	add	r3, sp, #108	@ 0x6c
 802d328:	a919      	add	r1, sp, #100	@ 0x64
 802d32a:	f001 f861 	bl	802e3f0 <__gethex>
 802d32e:	f010 060f 	ands.w	r6, r0, #15
 802d332:	4604      	mov	r4, r0
 802d334:	d005      	beq.n	802d342 <_strtod_l+0x72>
 802d336:	2e06      	cmp	r6, #6
 802d338:	d128      	bne.n	802d38c <_strtod_l+0xbc>
 802d33a:	3501      	adds	r5, #1
 802d33c:	2300      	movs	r3, #0
 802d33e:	9519      	str	r5, [sp, #100]	@ 0x64
 802d340:	930e      	str	r3, [sp, #56]	@ 0x38
 802d342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d344:	2b00      	cmp	r3, #0
 802d346:	f040 858e 	bne.w	802de66 <_strtod_l+0xb96>
 802d34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d34c:	b1cb      	cbz	r3, 802d382 <_strtod_l+0xb2>
 802d34e:	4652      	mov	r2, sl
 802d350:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802d354:	ec43 2b10 	vmov	d0, r2, r3
 802d358:	b01f      	add	sp, #124	@ 0x7c
 802d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d35e:	2920      	cmp	r1, #32
 802d360:	d1ce      	bne.n	802d300 <_strtod_l+0x30>
 802d362:	3201      	adds	r2, #1
 802d364:	e7c1      	b.n	802d2ea <_strtod_l+0x1a>
 802d366:	292d      	cmp	r1, #45	@ 0x2d
 802d368:	d1ca      	bne.n	802d300 <_strtod_l+0x30>
 802d36a:	2101      	movs	r1, #1
 802d36c:	910e      	str	r1, [sp, #56]	@ 0x38
 802d36e:	1c51      	adds	r1, r2, #1
 802d370:	9119      	str	r1, [sp, #100]	@ 0x64
 802d372:	7852      	ldrb	r2, [r2, #1]
 802d374:	2a00      	cmp	r2, #0
 802d376:	d1c5      	bne.n	802d304 <_strtod_l+0x34>
 802d378:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d37a:	9419      	str	r4, [sp, #100]	@ 0x64
 802d37c:	2b00      	cmp	r3, #0
 802d37e:	f040 8570 	bne.w	802de62 <_strtod_l+0xb92>
 802d382:	4652      	mov	r2, sl
 802d384:	465b      	mov	r3, fp
 802d386:	e7e5      	b.n	802d354 <_strtod_l+0x84>
 802d388:	2100      	movs	r1, #0
 802d38a:	e7ef      	b.n	802d36c <_strtod_l+0x9c>
 802d38c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802d38e:	b13a      	cbz	r2, 802d3a0 <_strtod_l+0xd0>
 802d390:	2135      	movs	r1, #53	@ 0x35
 802d392:	a81c      	add	r0, sp, #112	@ 0x70
 802d394:	f7ff ff0c 	bl	802d1b0 <__copybits>
 802d398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d39a:	9805      	ldr	r0, [sp, #20]
 802d39c:	f7ff fae2 	bl	802c964 <_Bfree>
 802d3a0:	3e01      	subs	r6, #1
 802d3a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802d3a4:	2e04      	cmp	r6, #4
 802d3a6:	d806      	bhi.n	802d3b6 <_strtod_l+0xe6>
 802d3a8:	e8df f006 	tbb	[pc, r6]
 802d3ac:	201d0314 	.word	0x201d0314
 802d3b0:	14          	.byte	0x14
 802d3b1:	00          	.byte	0x00
 802d3b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802d3b6:	05e1      	lsls	r1, r4, #23
 802d3b8:	bf48      	it	mi
 802d3ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802d3be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802d3c2:	0d1b      	lsrs	r3, r3, #20
 802d3c4:	051b      	lsls	r3, r3, #20
 802d3c6:	2b00      	cmp	r3, #0
 802d3c8:	d1bb      	bne.n	802d342 <_strtod_l+0x72>
 802d3ca:	f7fe fb9f 	bl	802bb0c <__errno>
 802d3ce:	2322      	movs	r3, #34	@ 0x22
 802d3d0:	6003      	str	r3, [r0, #0]
 802d3d2:	e7b6      	b.n	802d342 <_strtod_l+0x72>
 802d3d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 802d3d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802d3dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 802d3e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802d3e4:	e7e7      	b.n	802d3b6 <_strtod_l+0xe6>
 802d3e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 802d568 <_strtod_l+0x298>
 802d3ea:	e7e4      	b.n	802d3b6 <_strtod_l+0xe6>
 802d3ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 802d3f0:	f04f 3aff 	mov.w	sl, #4294967295
 802d3f4:	e7df      	b.n	802d3b6 <_strtod_l+0xe6>
 802d3f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d3f8:	1c5a      	adds	r2, r3, #1
 802d3fa:	9219      	str	r2, [sp, #100]	@ 0x64
 802d3fc:	785b      	ldrb	r3, [r3, #1]
 802d3fe:	2b30      	cmp	r3, #48	@ 0x30
 802d400:	d0f9      	beq.n	802d3f6 <_strtod_l+0x126>
 802d402:	2b00      	cmp	r3, #0
 802d404:	d09d      	beq.n	802d342 <_strtod_l+0x72>
 802d406:	2301      	movs	r3, #1
 802d408:	2700      	movs	r7, #0
 802d40a:	9308      	str	r3, [sp, #32]
 802d40c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d40e:	930c      	str	r3, [sp, #48]	@ 0x30
 802d410:	970b      	str	r7, [sp, #44]	@ 0x2c
 802d412:	46b9      	mov	r9, r7
 802d414:	220a      	movs	r2, #10
 802d416:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802d418:	7805      	ldrb	r5, [r0, #0]
 802d41a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802d41e:	b2d9      	uxtb	r1, r3
 802d420:	2909      	cmp	r1, #9
 802d422:	d928      	bls.n	802d476 <_strtod_l+0x1a6>
 802d424:	494f      	ldr	r1, [pc, #316]	@ (802d564 <_strtod_l+0x294>)
 802d426:	2201      	movs	r2, #1
 802d428:	f7fe faee 	bl	802ba08 <strncmp>
 802d42c:	2800      	cmp	r0, #0
 802d42e:	d032      	beq.n	802d496 <_strtod_l+0x1c6>
 802d430:	2000      	movs	r0, #0
 802d432:	462a      	mov	r2, r5
 802d434:	900a      	str	r0, [sp, #40]	@ 0x28
 802d436:	464d      	mov	r5, r9
 802d438:	4603      	mov	r3, r0
 802d43a:	2a65      	cmp	r2, #101	@ 0x65
 802d43c:	d001      	beq.n	802d442 <_strtod_l+0x172>
 802d43e:	2a45      	cmp	r2, #69	@ 0x45
 802d440:	d114      	bne.n	802d46c <_strtod_l+0x19c>
 802d442:	b91d      	cbnz	r5, 802d44c <_strtod_l+0x17c>
 802d444:	9a08      	ldr	r2, [sp, #32]
 802d446:	4302      	orrs	r2, r0
 802d448:	d096      	beq.n	802d378 <_strtod_l+0xa8>
 802d44a:	2500      	movs	r5, #0
 802d44c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802d44e:	1c62      	adds	r2, r4, #1
 802d450:	9219      	str	r2, [sp, #100]	@ 0x64
 802d452:	7862      	ldrb	r2, [r4, #1]
 802d454:	2a2b      	cmp	r2, #43	@ 0x2b
 802d456:	d07a      	beq.n	802d54e <_strtod_l+0x27e>
 802d458:	2a2d      	cmp	r2, #45	@ 0x2d
 802d45a:	d07e      	beq.n	802d55a <_strtod_l+0x28a>
 802d45c:	f04f 0c00 	mov.w	ip, #0
 802d460:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802d464:	2909      	cmp	r1, #9
 802d466:	f240 8085 	bls.w	802d574 <_strtod_l+0x2a4>
 802d46a:	9419      	str	r4, [sp, #100]	@ 0x64
 802d46c:	f04f 0800 	mov.w	r8, #0
 802d470:	e0a5      	b.n	802d5be <_strtod_l+0x2ee>
 802d472:	2300      	movs	r3, #0
 802d474:	e7c8      	b.n	802d408 <_strtod_l+0x138>
 802d476:	f1b9 0f08 	cmp.w	r9, #8
 802d47a:	bfd8      	it	le
 802d47c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 802d47e:	f100 0001 	add.w	r0, r0, #1
 802d482:	bfda      	itte	le
 802d484:	fb02 3301 	mlale	r3, r2, r1, r3
 802d488:	930b      	strle	r3, [sp, #44]	@ 0x2c
 802d48a:	fb02 3707 	mlagt	r7, r2, r7, r3
 802d48e:	f109 0901 	add.w	r9, r9, #1
 802d492:	9019      	str	r0, [sp, #100]	@ 0x64
 802d494:	e7bf      	b.n	802d416 <_strtod_l+0x146>
 802d496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d498:	1c5a      	adds	r2, r3, #1
 802d49a:	9219      	str	r2, [sp, #100]	@ 0x64
 802d49c:	785a      	ldrb	r2, [r3, #1]
 802d49e:	f1b9 0f00 	cmp.w	r9, #0
 802d4a2:	d03b      	beq.n	802d51c <_strtod_l+0x24c>
 802d4a4:	900a      	str	r0, [sp, #40]	@ 0x28
 802d4a6:	464d      	mov	r5, r9
 802d4a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802d4ac:	2b09      	cmp	r3, #9
 802d4ae:	d912      	bls.n	802d4d6 <_strtod_l+0x206>
 802d4b0:	2301      	movs	r3, #1
 802d4b2:	e7c2      	b.n	802d43a <_strtod_l+0x16a>
 802d4b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d4b6:	1c5a      	adds	r2, r3, #1
 802d4b8:	9219      	str	r2, [sp, #100]	@ 0x64
 802d4ba:	785a      	ldrb	r2, [r3, #1]
 802d4bc:	3001      	adds	r0, #1
 802d4be:	2a30      	cmp	r2, #48	@ 0x30
 802d4c0:	d0f8      	beq.n	802d4b4 <_strtod_l+0x1e4>
 802d4c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802d4c6:	2b08      	cmp	r3, #8
 802d4c8:	f200 84d2 	bhi.w	802de70 <_strtod_l+0xba0>
 802d4cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d4ce:	900a      	str	r0, [sp, #40]	@ 0x28
 802d4d0:	2000      	movs	r0, #0
 802d4d2:	930c      	str	r3, [sp, #48]	@ 0x30
 802d4d4:	4605      	mov	r5, r0
 802d4d6:	3a30      	subs	r2, #48	@ 0x30
 802d4d8:	f100 0301 	add.w	r3, r0, #1
 802d4dc:	d018      	beq.n	802d510 <_strtod_l+0x240>
 802d4de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802d4e0:	4419      	add	r1, r3
 802d4e2:	910a      	str	r1, [sp, #40]	@ 0x28
 802d4e4:	462e      	mov	r6, r5
 802d4e6:	f04f 0e0a 	mov.w	lr, #10
 802d4ea:	1c71      	adds	r1, r6, #1
 802d4ec:	eba1 0c05 	sub.w	ip, r1, r5
 802d4f0:	4563      	cmp	r3, ip
 802d4f2:	dc15      	bgt.n	802d520 <_strtod_l+0x250>
 802d4f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 802d4f8:	182b      	adds	r3, r5, r0
 802d4fa:	2b08      	cmp	r3, #8
 802d4fc:	f105 0501 	add.w	r5, r5, #1
 802d500:	4405      	add	r5, r0
 802d502:	dc1a      	bgt.n	802d53a <_strtod_l+0x26a>
 802d504:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802d506:	230a      	movs	r3, #10
 802d508:	fb03 2301 	mla	r3, r3, r1, r2
 802d50c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d50e:	2300      	movs	r3, #0
 802d510:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d512:	1c51      	adds	r1, r2, #1
 802d514:	9119      	str	r1, [sp, #100]	@ 0x64
 802d516:	7852      	ldrb	r2, [r2, #1]
 802d518:	4618      	mov	r0, r3
 802d51a:	e7c5      	b.n	802d4a8 <_strtod_l+0x1d8>
 802d51c:	4648      	mov	r0, r9
 802d51e:	e7ce      	b.n	802d4be <_strtod_l+0x1ee>
 802d520:	2e08      	cmp	r6, #8
 802d522:	dc05      	bgt.n	802d530 <_strtod_l+0x260>
 802d524:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802d526:	fb0e f606 	mul.w	r6, lr, r6
 802d52a:	960b      	str	r6, [sp, #44]	@ 0x2c
 802d52c:	460e      	mov	r6, r1
 802d52e:	e7dc      	b.n	802d4ea <_strtod_l+0x21a>
 802d530:	2910      	cmp	r1, #16
 802d532:	bfd8      	it	le
 802d534:	fb0e f707 	mulle.w	r7, lr, r7
 802d538:	e7f8      	b.n	802d52c <_strtod_l+0x25c>
 802d53a:	2b0f      	cmp	r3, #15
 802d53c:	bfdc      	itt	le
 802d53e:	230a      	movle	r3, #10
 802d540:	fb03 2707 	mlale	r7, r3, r7, r2
 802d544:	e7e3      	b.n	802d50e <_strtod_l+0x23e>
 802d546:	2300      	movs	r3, #0
 802d548:	930a      	str	r3, [sp, #40]	@ 0x28
 802d54a:	2301      	movs	r3, #1
 802d54c:	e77a      	b.n	802d444 <_strtod_l+0x174>
 802d54e:	f04f 0c00 	mov.w	ip, #0
 802d552:	1ca2      	adds	r2, r4, #2
 802d554:	9219      	str	r2, [sp, #100]	@ 0x64
 802d556:	78a2      	ldrb	r2, [r4, #2]
 802d558:	e782      	b.n	802d460 <_strtod_l+0x190>
 802d55a:	f04f 0c01 	mov.w	ip, #1
 802d55e:	e7f8      	b.n	802d552 <_strtod_l+0x282>
 802d560:	0802f654 	.word	0x0802f654
 802d564:	0802f3d4 	.word	0x0802f3d4
 802d568:	7ff00000 	.word	0x7ff00000
 802d56c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d56e:	1c51      	adds	r1, r2, #1
 802d570:	9119      	str	r1, [sp, #100]	@ 0x64
 802d572:	7852      	ldrb	r2, [r2, #1]
 802d574:	2a30      	cmp	r2, #48	@ 0x30
 802d576:	d0f9      	beq.n	802d56c <_strtod_l+0x29c>
 802d578:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 802d57c:	2908      	cmp	r1, #8
 802d57e:	f63f af75 	bhi.w	802d46c <_strtod_l+0x19c>
 802d582:	3a30      	subs	r2, #48	@ 0x30
 802d584:	9209      	str	r2, [sp, #36]	@ 0x24
 802d586:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d588:	920f      	str	r2, [sp, #60]	@ 0x3c
 802d58a:	f04f 080a 	mov.w	r8, #10
 802d58e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d590:	1c56      	adds	r6, r2, #1
 802d592:	9619      	str	r6, [sp, #100]	@ 0x64
 802d594:	7852      	ldrb	r2, [r2, #1]
 802d596:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802d59a:	f1be 0f09 	cmp.w	lr, #9
 802d59e:	d939      	bls.n	802d614 <_strtod_l+0x344>
 802d5a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802d5a2:	1a76      	subs	r6, r6, r1
 802d5a4:	2e08      	cmp	r6, #8
 802d5a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802d5aa:	dc03      	bgt.n	802d5b4 <_strtod_l+0x2e4>
 802d5ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802d5ae:	4588      	cmp	r8, r1
 802d5b0:	bfa8      	it	ge
 802d5b2:	4688      	movge	r8, r1
 802d5b4:	f1bc 0f00 	cmp.w	ip, #0
 802d5b8:	d001      	beq.n	802d5be <_strtod_l+0x2ee>
 802d5ba:	f1c8 0800 	rsb	r8, r8, #0
 802d5be:	2d00      	cmp	r5, #0
 802d5c0:	d14e      	bne.n	802d660 <_strtod_l+0x390>
 802d5c2:	9908      	ldr	r1, [sp, #32]
 802d5c4:	4308      	orrs	r0, r1
 802d5c6:	f47f aebc 	bne.w	802d342 <_strtod_l+0x72>
 802d5ca:	2b00      	cmp	r3, #0
 802d5cc:	f47f aed4 	bne.w	802d378 <_strtod_l+0xa8>
 802d5d0:	2a69      	cmp	r2, #105	@ 0x69
 802d5d2:	d028      	beq.n	802d626 <_strtod_l+0x356>
 802d5d4:	dc25      	bgt.n	802d622 <_strtod_l+0x352>
 802d5d6:	2a49      	cmp	r2, #73	@ 0x49
 802d5d8:	d025      	beq.n	802d626 <_strtod_l+0x356>
 802d5da:	2a4e      	cmp	r2, #78	@ 0x4e
 802d5dc:	f47f aecc 	bne.w	802d378 <_strtod_l+0xa8>
 802d5e0:	499a      	ldr	r1, [pc, #616]	@ (802d84c <_strtod_l+0x57c>)
 802d5e2:	a819      	add	r0, sp, #100	@ 0x64
 802d5e4:	f001 f926 	bl	802e834 <__match>
 802d5e8:	2800      	cmp	r0, #0
 802d5ea:	f43f aec5 	beq.w	802d378 <_strtod_l+0xa8>
 802d5ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d5f0:	781b      	ldrb	r3, [r3, #0]
 802d5f2:	2b28      	cmp	r3, #40	@ 0x28
 802d5f4:	d12e      	bne.n	802d654 <_strtod_l+0x384>
 802d5f6:	4996      	ldr	r1, [pc, #600]	@ (802d850 <_strtod_l+0x580>)
 802d5f8:	aa1c      	add	r2, sp, #112	@ 0x70
 802d5fa:	a819      	add	r0, sp, #100	@ 0x64
 802d5fc:	f001 f92e 	bl	802e85c <__hexnan>
 802d600:	2805      	cmp	r0, #5
 802d602:	d127      	bne.n	802d654 <_strtod_l+0x384>
 802d604:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802d606:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802d60a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802d60e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802d612:	e696      	b.n	802d342 <_strtod_l+0x72>
 802d614:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802d616:	fb08 2101 	mla	r1, r8, r1, r2
 802d61a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802d61e:	9209      	str	r2, [sp, #36]	@ 0x24
 802d620:	e7b5      	b.n	802d58e <_strtod_l+0x2be>
 802d622:	2a6e      	cmp	r2, #110	@ 0x6e
 802d624:	e7da      	b.n	802d5dc <_strtod_l+0x30c>
 802d626:	498b      	ldr	r1, [pc, #556]	@ (802d854 <_strtod_l+0x584>)
 802d628:	a819      	add	r0, sp, #100	@ 0x64
 802d62a:	f001 f903 	bl	802e834 <__match>
 802d62e:	2800      	cmp	r0, #0
 802d630:	f43f aea2 	beq.w	802d378 <_strtod_l+0xa8>
 802d634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d636:	4988      	ldr	r1, [pc, #544]	@ (802d858 <_strtod_l+0x588>)
 802d638:	3b01      	subs	r3, #1
 802d63a:	a819      	add	r0, sp, #100	@ 0x64
 802d63c:	9319      	str	r3, [sp, #100]	@ 0x64
 802d63e:	f001 f8f9 	bl	802e834 <__match>
 802d642:	b910      	cbnz	r0, 802d64a <_strtod_l+0x37a>
 802d644:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d646:	3301      	adds	r3, #1
 802d648:	9319      	str	r3, [sp, #100]	@ 0x64
 802d64a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 802d868 <_strtod_l+0x598>
 802d64e:	f04f 0a00 	mov.w	sl, #0
 802d652:	e676      	b.n	802d342 <_strtod_l+0x72>
 802d654:	4881      	ldr	r0, [pc, #516]	@ (802d85c <_strtod_l+0x58c>)
 802d656:	f000 fe47 	bl	802e2e8 <nan>
 802d65a:	ec5b ab10 	vmov	sl, fp, d0
 802d65e:	e670      	b.n	802d342 <_strtod_l+0x72>
 802d660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d662:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802d664:	eba8 0303 	sub.w	r3, r8, r3
 802d668:	f1b9 0f00 	cmp.w	r9, #0
 802d66c:	bf08      	it	eq
 802d66e:	46a9      	moveq	r9, r5
 802d670:	2d10      	cmp	r5, #16
 802d672:	9309      	str	r3, [sp, #36]	@ 0x24
 802d674:	462c      	mov	r4, r5
 802d676:	bfa8      	it	ge
 802d678:	2410      	movge	r4, #16
 802d67a:	f7f2 ff63 	bl	8020544 <__aeabi_ui2d>
 802d67e:	2d09      	cmp	r5, #9
 802d680:	4682      	mov	sl, r0
 802d682:	468b      	mov	fp, r1
 802d684:	dc13      	bgt.n	802d6ae <_strtod_l+0x3de>
 802d686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d688:	2b00      	cmp	r3, #0
 802d68a:	f43f ae5a 	beq.w	802d342 <_strtod_l+0x72>
 802d68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d690:	dd78      	ble.n	802d784 <_strtod_l+0x4b4>
 802d692:	2b16      	cmp	r3, #22
 802d694:	dc5f      	bgt.n	802d756 <_strtod_l+0x486>
 802d696:	4972      	ldr	r1, [pc, #456]	@ (802d860 <_strtod_l+0x590>)
 802d698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d6a0:	4652      	mov	r2, sl
 802d6a2:	465b      	mov	r3, fp
 802d6a4:	f7f2 ffc8 	bl	8020638 <__aeabi_dmul>
 802d6a8:	4682      	mov	sl, r0
 802d6aa:	468b      	mov	fp, r1
 802d6ac:	e649      	b.n	802d342 <_strtod_l+0x72>
 802d6ae:	4b6c      	ldr	r3, [pc, #432]	@ (802d860 <_strtod_l+0x590>)
 802d6b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802d6b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 802d6b8:	f7f2 ffbe 	bl	8020638 <__aeabi_dmul>
 802d6bc:	4682      	mov	sl, r0
 802d6be:	4638      	mov	r0, r7
 802d6c0:	468b      	mov	fp, r1
 802d6c2:	f7f2 ff3f 	bl	8020544 <__aeabi_ui2d>
 802d6c6:	4602      	mov	r2, r0
 802d6c8:	460b      	mov	r3, r1
 802d6ca:	4650      	mov	r0, sl
 802d6cc:	4659      	mov	r1, fp
 802d6ce:	f7f2 fdfd 	bl	80202cc <__adddf3>
 802d6d2:	2d0f      	cmp	r5, #15
 802d6d4:	4682      	mov	sl, r0
 802d6d6:	468b      	mov	fp, r1
 802d6d8:	ddd5      	ble.n	802d686 <_strtod_l+0x3b6>
 802d6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d6dc:	1b2c      	subs	r4, r5, r4
 802d6de:	441c      	add	r4, r3
 802d6e0:	2c00      	cmp	r4, #0
 802d6e2:	f340 8093 	ble.w	802d80c <_strtod_l+0x53c>
 802d6e6:	f014 030f 	ands.w	r3, r4, #15
 802d6ea:	d00a      	beq.n	802d702 <_strtod_l+0x432>
 802d6ec:	495c      	ldr	r1, [pc, #368]	@ (802d860 <_strtod_l+0x590>)
 802d6ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d6f2:	4652      	mov	r2, sl
 802d6f4:	465b      	mov	r3, fp
 802d6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d6fa:	f7f2 ff9d 	bl	8020638 <__aeabi_dmul>
 802d6fe:	4682      	mov	sl, r0
 802d700:	468b      	mov	fp, r1
 802d702:	f034 040f 	bics.w	r4, r4, #15
 802d706:	d073      	beq.n	802d7f0 <_strtod_l+0x520>
 802d708:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802d70c:	dd49      	ble.n	802d7a2 <_strtod_l+0x4d2>
 802d70e:	2400      	movs	r4, #0
 802d710:	46a0      	mov	r8, r4
 802d712:	940b      	str	r4, [sp, #44]	@ 0x2c
 802d714:	46a1      	mov	r9, r4
 802d716:	9a05      	ldr	r2, [sp, #20]
 802d718:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 802d868 <_strtod_l+0x598>
 802d71c:	2322      	movs	r3, #34	@ 0x22
 802d71e:	6013      	str	r3, [r2, #0]
 802d720:	f04f 0a00 	mov.w	sl, #0
 802d724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d726:	2b00      	cmp	r3, #0
 802d728:	f43f ae0b 	beq.w	802d342 <_strtod_l+0x72>
 802d72c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d72e:	9805      	ldr	r0, [sp, #20]
 802d730:	f7ff f918 	bl	802c964 <_Bfree>
 802d734:	9805      	ldr	r0, [sp, #20]
 802d736:	4649      	mov	r1, r9
 802d738:	f7ff f914 	bl	802c964 <_Bfree>
 802d73c:	9805      	ldr	r0, [sp, #20]
 802d73e:	4641      	mov	r1, r8
 802d740:	f7ff f910 	bl	802c964 <_Bfree>
 802d744:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802d746:	9805      	ldr	r0, [sp, #20]
 802d748:	f7ff f90c 	bl	802c964 <_Bfree>
 802d74c:	9805      	ldr	r0, [sp, #20]
 802d74e:	4621      	mov	r1, r4
 802d750:	f7ff f908 	bl	802c964 <_Bfree>
 802d754:	e5f5      	b.n	802d342 <_strtod_l+0x72>
 802d756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d758:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802d75c:	4293      	cmp	r3, r2
 802d75e:	dbbc      	blt.n	802d6da <_strtod_l+0x40a>
 802d760:	4c3f      	ldr	r4, [pc, #252]	@ (802d860 <_strtod_l+0x590>)
 802d762:	f1c5 050f 	rsb	r5, r5, #15
 802d766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802d76a:	4652      	mov	r2, sl
 802d76c:	465b      	mov	r3, fp
 802d76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d772:	f7f2 ff61 	bl	8020638 <__aeabi_dmul>
 802d776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d778:	1b5d      	subs	r5, r3, r5
 802d77a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802d77e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802d782:	e78f      	b.n	802d6a4 <_strtod_l+0x3d4>
 802d784:	3316      	adds	r3, #22
 802d786:	dba8      	blt.n	802d6da <_strtod_l+0x40a>
 802d788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d78a:	eba3 0808 	sub.w	r8, r3, r8
 802d78e:	4b34      	ldr	r3, [pc, #208]	@ (802d860 <_strtod_l+0x590>)
 802d790:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802d794:	e9d8 2300 	ldrd	r2, r3, [r8]
 802d798:	4650      	mov	r0, sl
 802d79a:	4659      	mov	r1, fp
 802d79c:	f7f3 f876 	bl	802088c <__aeabi_ddiv>
 802d7a0:	e782      	b.n	802d6a8 <_strtod_l+0x3d8>
 802d7a2:	2300      	movs	r3, #0
 802d7a4:	4f2f      	ldr	r7, [pc, #188]	@ (802d864 <_strtod_l+0x594>)
 802d7a6:	1124      	asrs	r4, r4, #4
 802d7a8:	4650      	mov	r0, sl
 802d7aa:	4659      	mov	r1, fp
 802d7ac:	461e      	mov	r6, r3
 802d7ae:	2c01      	cmp	r4, #1
 802d7b0:	dc21      	bgt.n	802d7f6 <_strtod_l+0x526>
 802d7b2:	b10b      	cbz	r3, 802d7b8 <_strtod_l+0x4e8>
 802d7b4:	4682      	mov	sl, r0
 802d7b6:	468b      	mov	fp, r1
 802d7b8:	492a      	ldr	r1, [pc, #168]	@ (802d864 <_strtod_l+0x594>)
 802d7ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802d7be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802d7c2:	4652      	mov	r2, sl
 802d7c4:	465b      	mov	r3, fp
 802d7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d7ca:	f7f2 ff35 	bl	8020638 <__aeabi_dmul>
 802d7ce:	4b26      	ldr	r3, [pc, #152]	@ (802d868 <_strtod_l+0x598>)
 802d7d0:	460a      	mov	r2, r1
 802d7d2:	400b      	ands	r3, r1
 802d7d4:	4925      	ldr	r1, [pc, #148]	@ (802d86c <_strtod_l+0x59c>)
 802d7d6:	428b      	cmp	r3, r1
 802d7d8:	4682      	mov	sl, r0
 802d7da:	d898      	bhi.n	802d70e <_strtod_l+0x43e>
 802d7dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 802d7e0:	428b      	cmp	r3, r1
 802d7e2:	bf86      	itte	hi
 802d7e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 802d870 <_strtod_l+0x5a0>
 802d7e8:	f04f 3aff 	movhi.w	sl, #4294967295
 802d7ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 802d7f0:	2300      	movs	r3, #0
 802d7f2:	9308      	str	r3, [sp, #32]
 802d7f4:	e076      	b.n	802d8e4 <_strtod_l+0x614>
 802d7f6:	07e2      	lsls	r2, r4, #31
 802d7f8:	d504      	bpl.n	802d804 <_strtod_l+0x534>
 802d7fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 802d7fe:	f7f2 ff1b 	bl	8020638 <__aeabi_dmul>
 802d802:	2301      	movs	r3, #1
 802d804:	3601      	adds	r6, #1
 802d806:	1064      	asrs	r4, r4, #1
 802d808:	3708      	adds	r7, #8
 802d80a:	e7d0      	b.n	802d7ae <_strtod_l+0x4de>
 802d80c:	d0f0      	beq.n	802d7f0 <_strtod_l+0x520>
 802d80e:	4264      	negs	r4, r4
 802d810:	f014 020f 	ands.w	r2, r4, #15
 802d814:	d00a      	beq.n	802d82c <_strtod_l+0x55c>
 802d816:	4b12      	ldr	r3, [pc, #72]	@ (802d860 <_strtod_l+0x590>)
 802d818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d81c:	4650      	mov	r0, sl
 802d81e:	4659      	mov	r1, fp
 802d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d824:	f7f3 f832 	bl	802088c <__aeabi_ddiv>
 802d828:	4682      	mov	sl, r0
 802d82a:	468b      	mov	fp, r1
 802d82c:	1124      	asrs	r4, r4, #4
 802d82e:	d0df      	beq.n	802d7f0 <_strtod_l+0x520>
 802d830:	2c1f      	cmp	r4, #31
 802d832:	dd1f      	ble.n	802d874 <_strtod_l+0x5a4>
 802d834:	2400      	movs	r4, #0
 802d836:	46a0      	mov	r8, r4
 802d838:	940b      	str	r4, [sp, #44]	@ 0x2c
 802d83a:	46a1      	mov	r9, r4
 802d83c:	9a05      	ldr	r2, [sp, #20]
 802d83e:	2322      	movs	r3, #34	@ 0x22
 802d840:	f04f 0a00 	mov.w	sl, #0
 802d844:	f04f 0b00 	mov.w	fp, #0
 802d848:	6013      	str	r3, [r2, #0]
 802d84a:	e76b      	b.n	802d724 <_strtod_l+0x454>
 802d84c:	0802f2b1 	.word	0x0802f2b1
 802d850:	0802f640 	.word	0x0802f640
 802d854:	0802f2a9 	.word	0x0802f2a9
 802d858:	0802f2f1 	.word	0x0802f2f1
 802d85c:	0802f2a3 	.word	0x0802f2a3
 802d860:	0802f578 	.word	0x0802f578
 802d864:	0802f550 	.word	0x0802f550
 802d868:	7ff00000 	.word	0x7ff00000
 802d86c:	7ca00000 	.word	0x7ca00000
 802d870:	7fefffff 	.word	0x7fefffff
 802d874:	f014 0310 	ands.w	r3, r4, #16
 802d878:	bf18      	it	ne
 802d87a:	236a      	movne	r3, #106	@ 0x6a
 802d87c:	4ea9      	ldr	r6, [pc, #676]	@ (802db24 <_strtod_l+0x854>)
 802d87e:	9308      	str	r3, [sp, #32]
 802d880:	4650      	mov	r0, sl
 802d882:	4659      	mov	r1, fp
 802d884:	2300      	movs	r3, #0
 802d886:	07e7      	lsls	r7, r4, #31
 802d888:	d504      	bpl.n	802d894 <_strtod_l+0x5c4>
 802d88a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802d88e:	f7f2 fed3 	bl	8020638 <__aeabi_dmul>
 802d892:	2301      	movs	r3, #1
 802d894:	1064      	asrs	r4, r4, #1
 802d896:	f106 0608 	add.w	r6, r6, #8
 802d89a:	d1f4      	bne.n	802d886 <_strtod_l+0x5b6>
 802d89c:	b10b      	cbz	r3, 802d8a2 <_strtod_l+0x5d2>
 802d89e:	4682      	mov	sl, r0
 802d8a0:	468b      	mov	fp, r1
 802d8a2:	9b08      	ldr	r3, [sp, #32]
 802d8a4:	b1b3      	cbz	r3, 802d8d4 <_strtod_l+0x604>
 802d8a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802d8aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802d8ae:	2b00      	cmp	r3, #0
 802d8b0:	4659      	mov	r1, fp
 802d8b2:	dd0f      	ble.n	802d8d4 <_strtod_l+0x604>
 802d8b4:	2b1f      	cmp	r3, #31
 802d8b6:	dd56      	ble.n	802d966 <_strtod_l+0x696>
 802d8b8:	2b34      	cmp	r3, #52	@ 0x34
 802d8ba:	bfde      	ittt	le
 802d8bc:	f04f 33ff 	movle.w	r3, #4294967295
 802d8c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802d8c4:	4093      	lslle	r3, r2
 802d8c6:	f04f 0a00 	mov.w	sl, #0
 802d8ca:	bfcc      	ite	gt
 802d8cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802d8d0:	ea03 0b01 	andle.w	fp, r3, r1
 802d8d4:	2200      	movs	r2, #0
 802d8d6:	2300      	movs	r3, #0
 802d8d8:	4650      	mov	r0, sl
 802d8da:	4659      	mov	r1, fp
 802d8dc:	f7f3 f914 	bl	8020b08 <__aeabi_dcmpeq>
 802d8e0:	2800      	cmp	r0, #0
 802d8e2:	d1a7      	bne.n	802d834 <_strtod_l+0x564>
 802d8e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d8e6:	9300      	str	r3, [sp, #0]
 802d8e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802d8ea:	9805      	ldr	r0, [sp, #20]
 802d8ec:	462b      	mov	r3, r5
 802d8ee:	464a      	mov	r2, r9
 802d8f0:	f7ff f8a0 	bl	802ca34 <__s2b>
 802d8f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 802d8f6:	2800      	cmp	r0, #0
 802d8f8:	f43f af09 	beq.w	802d70e <_strtod_l+0x43e>
 802d8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d8fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d900:	2a00      	cmp	r2, #0
 802d902:	eba3 0308 	sub.w	r3, r3, r8
 802d906:	bfa8      	it	ge
 802d908:	2300      	movge	r3, #0
 802d90a:	9312      	str	r3, [sp, #72]	@ 0x48
 802d90c:	2400      	movs	r4, #0
 802d90e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802d912:	9316      	str	r3, [sp, #88]	@ 0x58
 802d914:	46a0      	mov	r8, r4
 802d916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d918:	9805      	ldr	r0, [sp, #20]
 802d91a:	6859      	ldr	r1, [r3, #4]
 802d91c:	f7fe ffe2 	bl	802c8e4 <_Balloc>
 802d920:	4681      	mov	r9, r0
 802d922:	2800      	cmp	r0, #0
 802d924:	f43f aef7 	beq.w	802d716 <_strtod_l+0x446>
 802d928:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d92a:	691a      	ldr	r2, [r3, #16]
 802d92c:	3202      	adds	r2, #2
 802d92e:	f103 010c 	add.w	r1, r3, #12
 802d932:	0092      	lsls	r2, r2, #2
 802d934:	300c      	adds	r0, #12
 802d936:	f7fe f916 	bl	802bb66 <memcpy>
 802d93a:	ec4b ab10 	vmov	d0, sl, fp
 802d93e:	9805      	ldr	r0, [sp, #20]
 802d940:	aa1c      	add	r2, sp, #112	@ 0x70
 802d942:	a91b      	add	r1, sp, #108	@ 0x6c
 802d944:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802d948:	f7ff fba8 	bl	802d09c <__d2b>
 802d94c:	901a      	str	r0, [sp, #104]	@ 0x68
 802d94e:	2800      	cmp	r0, #0
 802d950:	f43f aee1 	beq.w	802d716 <_strtod_l+0x446>
 802d954:	9805      	ldr	r0, [sp, #20]
 802d956:	2101      	movs	r1, #1
 802d958:	f7ff f902 	bl	802cb60 <__i2b>
 802d95c:	4680      	mov	r8, r0
 802d95e:	b948      	cbnz	r0, 802d974 <_strtod_l+0x6a4>
 802d960:	f04f 0800 	mov.w	r8, #0
 802d964:	e6d7      	b.n	802d716 <_strtod_l+0x446>
 802d966:	f04f 32ff 	mov.w	r2, #4294967295
 802d96a:	fa02 f303 	lsl.w	r3, r2, r3
 802d96e:	ea03 0a0a 	and.w	sl, r3, sl
 802d972:	e7af      	b.n	802d8d4 <_strtod_l+0x604>
 802d974:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802d976:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802d978:	2d00      	cmp	r5, #0
 802d97a:	bfab      	itete	ge
 802d97c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802d97e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802d980:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 802d982:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802d984:	bfac      	ite	ge
 802d986:	18ef      	addge	r7, r5, r3
 802d988:	1b5e      	sublt	r6, r3, r5
 802d98a:	9b08      	ldr	r3, [sp, #32]
 802d98c:	1aed      	subs	r5, r5, r3
 802d98e:	4415      	add	r5, r2
 802d990:	4b65      	ldr	r3, [pc, #404]	@ (802db28 <_strtod_l+0x858>)
 802d992:	3d01      	subs	r5, #1
 802d994:	429d      	cmp	r5, r3
 802d996:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802d99a:	da50      	bge.n	802da3e <_strtod_l+0x76e>
 802d99c:	1b5b      	subs	r3, r3, r5
 802d99e:	2b1f      	cmp	r3, #31
 802d9a0:	eba2 0203 	sub.w	r2, r2, r3
 802d9a4:	f04f 0101 	mov.w	r1, #1
 802d9a8:	dc3d      	bgt.n	802da26 <_strtod_l+0x756>
 802d9aa:	fa01 f303 	lsl.w	r3, r1, r3
 802d9ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d9b0:	2300      	movs	r3, #0
 802d9b2:	9310      	str	r3, [sp, #64]	@ 0x40
 802d9b4:	18bd      	adds	r5, r7, r2
 802d9b6:	9b08      	ldr	r3, [sp, #32]
 802d9b8:	42af      	cmp	r7, r5
 802d9ba:	4416      	add	r6, r2
 802d9bc:	441e      	add	r6, r3
 802d9be:	463b      	mov	r3, r7
 802d9c0:	bfa8      	it	ge
 802d9c2:	462b      	movge	r3, r5
 802d9c4:	42b3      	cmp	r3, r6
 802d9c6:	bfa8      	it	ge
 802d9c8:	4633      	movge	r3, r6
 802d9ca:	2b00      	cmp	r3, #0
 802d9cc:	bfc2      	ittt	gt
 802d9ce:	1aed      	subgt	r5, r5, r3
 802d9d0:	1af6      	subgt	r6, r6, r3
 802d9d2:	1aff      	subgt	r7, r7, r3
 802d9d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802d9d6:	2b00      	cmp	r3, #0
 802d9d8:	dd16      	ble.n	802da08 <_strtod_l+0x738>
 802d9da:	4641      	mov	r1, r8
 802d9dc:	9805      	ldr	r0, [sp, #20]
 802d9de:	461a      	mov	r2, r3
 802d9e0:	f7ff f976 	bl	802ccd0 <__pow5mult>
 802d9e4:	4680      	mov	r8, r0
 802d9e6:	2800      	cmp	r0, #0
 802d9e8:	d0ba      	beq.n	802d960 <_strtod_l+0x690>
 802d9ea:	4601      	mov	r1, r0
 802d9ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802d9ee:	9805      	ldr	r0, [sp, #20]
 802d9f0:	f7ff f8cc 	bl	802cb8c <__multiply>
 802d9f4:	900a      	str	r0, [sp, #40]	@ 0x28
 802d9f6:	2800      	cmp	r0, #0
 802d9f8:	f43f ae8d 	beq.w	802d716 <_strtod_l+0x446>
 802d9fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d9fe:	9805      	ldr	r0, [sp, #20]
 802da00:	f7fe ffb0 	bl	802c964 <_Bfree>
 802da04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da06:	931a      	str	r3, [sp, #104]	@ 0x68
 802da08:	2d00      	cmp	r5, #0
 802da0a:	dc1d      	bgt.n	802da48 <_strtod_l+0x778>
 802da0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da0e:	2b00      	cmp	r3, #0
 802da10:	dd23      	ble.n	802da5a <_strtod_l+0x78a>
 802da12:	4649      	mov	r1, r9
 802da14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802da16:	9805      	ldr	r0, [sp, #20]
 802da18:	f7ff f95a 	bl	802ccd0 <__pow5mult>
 802da1c:	4681      	mov	r9, r0
 802da1e:	b9e0      	cbnz	r0, 802da5a <_strtod_l+0x78a>
 802da20:	f04f 0900 	mov.w	r9, #0
 802da24:	e677      	b.n	802d716 <_strtod_l+0x446>
 802da26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 802da2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802da2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 802da32:	35e2      	adds	r5, #226	@ 0xe2
 802da34:	fa01 f305 	lsl.w	r3, r1, r5
 802da38:	9310      	str	r3, [sp, #64]	@ 0x40
 802da3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 802da3c:	e7ba      	b.n	802d9b4 <_strtod_l+0x6e4>
 802da3e:	2300      	movs	r3, #0
 802da40:	9310      	str	r3, [sp, #64]	@ 0x40
 802da42:	2301      	movs	r3, #1
 802da44:	9313      	str	r3, [sp, #76]	@ 0x4c
 802da46:	e7b5      	b.n	802d9b4 <_strtod_l+0x6e4>
 802da48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802da4a:	9805      	ldr	r0, [sp, #20]
 802da4c:	462a      	mov	r2, r5
 802da4e:	f7ff f999 	bl	802cd84 <__lshift>
 802da52:	901a      	str	r0, [sp, #104]	@ 0x68
 802da54:	2800      	cmp	r0, #0
 802da56:	d1d9      	bne.n	802da0c <_strtod_l+0x73c>
 802da58:	e65d      	b.n	802d716 <_strtod_l+0x446>
 802da5a:	2e00      	cmp	r6, #0
 802da5c:	dd07      	ble.n	802da6e <_strtod_l+0x79e>
 802da5e:	4649      	mov	r1, r9
 802da60:	9805      	ldr	r0, [sp, #20]
 802da62:	4632      	mov	r2, r6
 802da64:	f7ff f98e 	bl	802cd84 <__lshift>
 802da68:	4681      	mov	r9, r0
 802da6a:	2800      	cmp	r0, #0
 802da6c:	d0d8      	beq.n	802da20 <_strtod_l+0x750>
 802da6e:	2f00      	cmp	r7, #0
 802da70:	dd08      	ble.n	802da84 <_strtod_l+0x7b4>
 802da72:	4641      	mov	r1, r8
 802da74:	9805      	ldr	r0, [sp, #20]
 802da76:	463a      	mov	r2, r7
 802da78:	f7ff f984 	bl	802cd84 <__lshift>
 802da7c:	4680      	mov	r8, r0
 802da7e:	2800      	cmp	r0, #0
 802da80:	f43f ae49 	beq.w	802d716 <_strtod_l+0x446>
 802da84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802da86:	9805      	ldr	r0, [sp, #20]
 802da88:	464a      	mov	r2, r9
 802da8a:	f7ff fa03 	bl	802ce94 <__mdiff>
 802da8e:	4604      	mov	r4, r0
 802da90:	2800      	cmp	r0, #0
 802da92:	f43f ae40 	beq.w	802d716 <_strtod_l+0x446>
 802da96:	68c3      	ldr	r3, [r0, #12]
 802da98:	930f      	str	r3, [sp, #60]	@ 0x3c
 802da9a:	2300      	movs	r3, #0
 802da9c:	60c3      	str	r3, [r0, #12]
 802da9e:	4641      	mov	r1, r8
 802daa0:	f7ff f9dc 	bl	802ce5c <__mcmp>
 802daa4:	2800      	cmp	r0, #0
 802daa6:	da45      	bge.n	802db34 <_strtod_l+0x864>
 802daa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802daaa:	ea53 030a 	orrs.w	r3, r3, sl
 802daae:	d16b      	bne.n	802db88 <_strtod_l+0x8b8>
 802dab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802dab4:	2b00      	cmp	r3, #0
 802dab6:	d167      	bne.n	802db88 <_strtod_l+0x8b8>
 802dab8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802dabc:	0d1b      	lsrs	r3, r3, #20
 802dabe:	051b      	lsls	r3, r3, #20
 802dac0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802dac4:	d960      	bls.n	802db88 <_strtod_l+0x8b8>
 802dac6:	6963      	ldr	r3, [r4, #20]
 802dac8:	b913      	cbnz	r3, 802dad0 <_strtod_l+0x800>
 802daca:	6923      	ldr	r3, [r4, #16]
 802dacc:	2b01      	cmp	r3, #1
 802dace:	dd5b      	ble.n	802db88 <_strtod_l+0x8b8>
 802dad0:	4621      	mov	r1, r4
 802dad2:	2201      	movs	r2, #1
 802dad4:	9805      	ldr	r0, [sp, #20]
 802dad6:	f7ff f955 	bl	802cd84 <__lshift>
 802dada:	4641      	mov	r1, r8
 802dadc:	4604      	mov	r4, r0
 802dade:	f7ff f9bd 	bl	802ce5c <__mcmp>
 802dae2:	2800      	cmp	r0, #0
 802dae4:	dd50      	ble.n	802db88 <_strtod_l+0x8b8>
 802dae6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802daea:	9a08      	ldr	r2, [sp, #32]
 802daec:	0d1b      	lsrs	r3, r3, #20
 802daee:	051b      	lsls	r3, r3, #20
 802daf0:	2a00      	cmp	r2, #0
 802daf2:	d06a      	beq.n	802dbca <_strtod_l+0x8fa>
 802daf4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802daf8:	d867      	bhi.n	802dbca <_strtod_l+0x8fa>
 802dafa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802dafe:	f67f ae9d 	bls.w	802d83c <_strtod_l+0x56c>
 802db02:	4b0a      	ldr	r3, [pc, #40]	@ (802db2c <_strtod_l+0x85c>)
 802db04:	4650      	mov	r0, sl
 802db06:	4659      	mov	r1, fp
 802db08:	2200      	movs	r2, #0
 802db0a:	f7f2 fd95 	bl	8020638 <__aeabi_dmul>
 802db0e:	4b08      	ldr	r3, [pc, #32]	@ (802db30 <_strtod_l+0x860>)
 802db10:	400b      	ands	r3, r1
 802db12:	4682      	mov	sl, r0
 802db14:	468b      	mov	fp, r1
 802db16:	2b00      	cmp	r3, #0
 802db18:	f47f ae08 	bne.w	802d72c <_strtod_l+0x45c>
 802db1c:	9a05      	ldr	r2, [sp, #20]
 802db1e:	2322      	movs	r3, #34	@ 0x22
 802db20:	6013      	str	r3, [r2, #0]
 802db22:	e603      	b.n	802d72c <_strtod_l+0x45c>
 802db24:	0802f668 	.word	0x0802f668
 802db28:	fffffc02 	.word	0xfffffc02
 802db2c:	39500000 	.word	0x39500000
 802db30:	7ff00000 	.word	0x7ff00000
 802db34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 802db38:	d165      	bne.n	802dc06 <_strtod_l+0x936>
 802db3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802db3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802db40:	b35a      	cbz	r2, 802db9a <_strtod_l+0x8ca>
 802db42:	4a9f      	ldr	r2, [pc, #636]	@ (802ddc0 <_strtod_l+0xaf0>)
 802db44:	4293      	cmp	r3, r2
 802db46:	d12b      	bne.n	802dba0 <_strtod_l+0x8d0>
 802db48:	9b08      	ldr	r3, [sp, #32]
 802db4a:	4651      	mov	r1, sl
 802db4c:	b303      	cbz	r3, 802db90 <_strtod_l+0x8c0>
 802db4e:	4b9d      	ldr	r3, [pc, #628]	@ (802ddc4 <_strtod_l+0xaf4>)
 802db50:	465a      	mov	r2, fp
 802db52:	4013      	ands	r3, r2
 802db54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 802db58:	f04f 32ff 	mov.w	r2, #4294967295
 802db5c:	d81b      	bhi.n	802db96 <_strtod_l+0x8c6>
 802db5e:	0d1b      	lsrs	r3, r3, #20
 802db60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802db64:	fa02 f303 	lsl.w	r3, r2, r3
 802db68:	4299      	cmp	r1, r3
 802db6a:	d119      	bne.n	802dba0 <_strtod_l+0x8d0>
 802db6c:	4b96      	ldr	r3, [pc, #600]	@ (802ddc8 <_strtod_l+0xaf8>)
 802db6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802db70:	429a      	cmp	r2, r3
 802db72:	d102      	bne.n	802db7a <_strtod_l+0x8aa>
 802db74:	3101      	adds	r1, #1
 802db76:	f43f adce 	beq.w	802d716 <_strtod_l+0x446>
 802db7a:	4b92      	ldr	r3, [pc, #584]	@ (802ddc4 <_strtod_l+0xaf4>)
 802db7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802db7e:	401a      	ands	r2, r3
 802db80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802db84:	f04f 0a00 	mov.w	sl, #0
 802db88:	9b08      	ldr	r3, [sp, #32]
 802db8a:	2b00      	cmp	r3, #0
 802db8c:	d1b9      	bne.n	802db02 <_strtod_l+0x832>
 802db8e:	e5cd      	b.n	802d72c <_strtod_l+0x45c>
 802db90:	f04f 33ff 	mov.w	r3, #4294967295
 802db94:	e7e8      	b.n	802db68 <_strtod_l+0x898>
 802db96:	4613      	mov	r3, r2
 802db98:	e7e6      	b.n	802db68 <_strtod_l+0x898>
 802db9a:	ea53 030a 	orrs.w	r3, r3, sl
 802db9e:	d0a2      	beq.n	802dae6 <_strtod_l+0x816>
 802dba0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802dba2:	b1db      	cbz	r3, 802dbdc <_strtod_l+0x90c>
 802dba4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802dba6:	4213      	tst	r3, r2
 802dba8:	d0ee      	beq.n	802db88 <_strtod_l+0x8b8>
 802dbaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dbac:	9a08      	ldr	r2, [sp, #32]
 802dbae:	4650      	mov	r0, sl
 802dbb0:	4659      	mov	r1, fp
 802dbb2:	b1bb      	cbz	r3, 802dbe4 <_strtod_l+0x914>
 802dbb4:	f7ff fb6e 	bl	802d294 <sulp>
 802dbb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dbbc:	ec53 2b10 	vmov	r2, r3, d0
 802dbc0:	f7f2 fb84 	bl	80202cc <__adddf3>
 802dbc4:	4682      	mov	sl, r0
 802dbc6:	468b      	mov	fp, r1
 802dbc8:	e7de      	b.n	802db88 <_strtod_l+0x8b8>
 802dbca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802dbce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802dbd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802dbd6:	f04f 3aff 	mov.w	sl, #4294967295
 802dbda:	e7d5      	b.n	802db88 <_strtod_l+0x8b8>
 802dbdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802dbde:	ea13 0f0a 	tst.w	r3, sl
 802dbe2:	e7e1      	b.n	802dba8 <_strtod_l+0x8d8>
 802dbe4:	f7ff fb56 	bl	802d294 <sulp>
 802dbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dbec:	ec53 2b10 	vmov	r2, r3, d0
 802dbf0:	f7f2 fb6a 	bl	80202c8 <__aeabi_dsub>
 802dbf4:	2200      	movs	r2, #0
 802dbf6:	2300      	movs	r3, #0
 802dbf8:	4682      	mov	sl, r0
 802dbfa:	468b      	mov	fp, r1
 802dbfc:	f7f2 ff84 	bl	8020b08 <__aeabi_dcmpeq>
 802dc00:	2800      	cmp	r0, #0
 802dc02:	d0c1      	beq.n	802db88 <_strtod_l+0x8b8>
 802dc04:	e61a      	b.n	802d83c <_strtod_l+0x56c>
 802dc06:	4641      	mov	r1, r8
 802dc08:	4620      	mov	r0, r4
 802dc0a:	f7ff fa9f 	bl	802d14c <__ratio>
 802dc0e:	ec57 6b10 	vmov	r6, r7, d0
 802dc12:	2200      	movs	r2, #0
 802dc14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802dc18:	4630      	mov	r0, r6
 802dc1a:	4639      	mov	r1, r7
 802dc1c:	f7f2 ff88 	bl	8020b30 <__aeabi_dcmple>
 802dc20:	2800      	cmp	r0, #0
 802dc22:	d06f      	beq.n	802dd04 <_strtod_l+0xa34>
 802dc24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dc26:	2b00      	cmp	r3, #0
 802dc28:	d17a      	bne.n	802dd20 <_strtod_l+0xa50>
 802dc2a:	f1ba 0f00 	cmp.w	sl, #0
 802dc2e:	d158      	bne.n	802dce2 <_strtod_l+0xa12>
 802dc30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dc36:	2b00      	cmp	r3, #0
 802dc38:	d15a      	bne.n	802dcf0 <_strtod_l+0xa20>
 802dc3a:	4b64      	ldr	r3, [pc, #400]	@ (802ddcc <_strtod_l+0xafc>)
 802dc3c:	2200      	movs	r2, #0
 802dc3e:	4630      	mov	r0, r6
 802dc40:	4639      	mov	r1, r7
 802dc42:	f7f2 ff6b 	bl	8020b1c <__aeabi_dcmplt>
 802dc46:	2800      	cmp	r0, #0
 802dc48:	d159      	bne.n	802dcfe <_strtod_l+0xa2e>
 802dc4a:	4630      	mov	r0, r6
 802dc4c:	4639      	mov	r1, r7
 802dc4e:	4b60      	ldr	r3, [pc, #384]	@ (802ddd0 <_strtod_l+0xb00>)
 802dc50:	2200      	movs	r2, #0
 802dc52:	f7f2 fcf1 	bl	8020638 <__aeabi_dmul>
 802dc56:	4606      	mov	r6, r0
 802dc58:	460f      	mov	r7, r1
 802dc5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802dc5e:	9606      	str	r6, [sp, #24]
 802dc60:	9307      	str	r3, [sp, #28]
 802dc62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802dc66:	4d57      	ldr	r5, [pc, #348]	@ (802ddc4 <_strtod_l+0xaf4>)
 802dc68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802dc6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc6e:	401d      	ands	r5, r3
 802dc70:	4b58      	ldr	r3, [pc, #352]	@ (802ddd4 <_strtod_l+0xb04>)
 802dc72:	429d      	cmp	r5, r3
 802dc74:	f040 80b2 	bne.w	802dddc <_strtod_l+0xb0c>
 802dc78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802dc7e:	ec4b ab10 	vmov	d0, sl, fp
 802dc82:	f7ff f99b 	bl	802cfbc <__ulp>
 802dc86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802dc8a:	ec51 0b10 	vmov	r0, r1, d0
 802dc8e:	f7f2 fcd3 	bl	8020638 <__aeabi_dmul>
 802dc92:	4652      	mov	r2, sl
 802dc94:	465b      	mov	r3, fp
 802dc96:	f7f2 fb19 	bl	80202cc <__adddf3>
 802dc9a:	460b      	mov	r3, r1
 802dc9c:	4949      	ldr	r1, [pc, #292]	@ (802ddc4 <_strtod_l+0xaf4>)
 802dc9e:	4a4e      	ldr	r2, [pc, #312]	@ (802ddd8 <_strtod_l+0xb08>)
 802dca0:	4019      	ands	r1, r3
 802dca2:	4291      	cmp	r1, r2
 802dca4:	4682      	mov	sl, r0
 802dca6:	d942      	bls.n	802dd2e <_strtod_l+0xa5e>
 802dca8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802dcaa:	4b47      	ldr	r3, [pc, #284]	@ (802ddc8 <_strtod_l+0xaf8>)
 802dcac:	429a      	cmp	r2, r3
 802dcae:	d103      	bne.n	802dcb8 <_strtod_l+0x9e8>
 802dcb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802dcb2:	3301      	adds	r3, #1
 802dcb4:	f43f ad2f 	beq.w	802d716 <_strtod_l+0x446>
 802dcb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 802ddc8 <_strtod_l+0xaf8>
 802dcbc:	f04f 3aff 	mov.w	sl, #4294967295
 802dcc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dcc2:	9805      	ldr	r0, [sp, #20]
 802dcc4:	f7fe fe4e 	bl	802c964 <_Bfree>
 802dcc8:	9805      	ldr	r0, [sp, #20]
 802dcca:	4649      	mov	r1, r9
 802dccc:	f7fe fe4a 	bl	802c964 <_Bfree>
 802dcd0:	9805      	ldr	r0, [sp, #20]
 802dcd2:	4641      	mov	r1, r8
 802dcd4:	f7fe fe46 	bl	802c964 <_Bfree>
 802dcd8:	9805      	ldr	r0, [sp, #20]
 802dcda:	4621      	mov	r1, r4
 802dcdc:	f7fe fe42 	bl	802c964 <_Bfree>
 802dce0:	e619      	b.n	802d916 <_strtod_l+0x646>
 802dce2:	f1ba 0f01 	cmp.w	sl, #1
 802dce6:	d103      	bne.n	802dcf0 <_strtod_l+0xa20>
 802dce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dcea:	2b00      	cmp	r3, #0
 802dcec:	f43f ada6 	beq.w	802d83c <_strtod_l+0x56c>
 802dcf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 802dda0 <_strtod_l+0xad0>
 802dcf4:	4f35      	ldr	r7, [pc, #212]	@ (802ddcc <_strtod_l+0xafc>)
 802dcf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dcfa:	2600      	movs	r6, #0
 802dcfc:	e7b1      	b.n	802dc62 <_strtod_l+0x992>
 802dcfe:	4f34      	ldr	r7, [pc, #208]	@ (802ddd0 <_strtod_l+0xb00>)
 802dd00:	2600      	movs	r6, #0
 802dd02:	e7aa      	b.n	802dc5a <_strtod_l+0x98a>
 802dd04:	4b32      	ldr	r3, [pc, #200]	@ (802ddd0 <_strtod_l+0xb00>)
 802dd06:	4630      	mov	r0, r6
 802dd08:	4639      	mov	r1, r7
 802dd0a:	2200      	movs	r2, #0
 802dd0c:	f7f2 fc94 	bl	8020638 <__aeabi_dmul>
 802dd10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dd12:	4606      	mov	r6, r0
 802dd14:	460f      	mov	r7, r1
 802dd16:	2b00      	cmp	r3, #0
 802dd18:	d09f      	beq.n	802dc5a <_strtod_l+0x98a>
 802dd1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802dd1e:	e7a0      	b.n	802dc62 <_strtod_l+0x992>
 802dd20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 802dda8 <_strtod_l+0xad8>
 802dd24:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dd28:	ec57 6b17 	vmov	r6, r7, d7
 802dd2c:	e799      	b.n	802dc62 <_strtod_l+0x992>
 802dd2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802dd32:	9b08      	ldr	r3, [sp, #32]
 802dd34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 802dd38:	2b00      	cmp	r3, #0
 802dd3a:	d1c1      	bne.n	802dcc0 <_strtod_l+0x9f0>
 802dd3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802dd40:	0d1b      	lsrs	r3, r3, #20
 802dd42:	051b      	lsls	r3, r3, #20
 802dd44:	429d      	cmp	r5, r3
 802dd46:	d1bb      	bne.n	802dcc0 <_strtod_l+0x9f0>
 802dd48:	4630      	mov	r0, r6
 802dd4a:	4639      	mov	r1, r7
 802dd4c:	f7f2 ffd4 	bl	8020cf8 <__aeabi_d2lz>
 802dd50:	f7f2 fc44 	bl	80205dc <__aeabi_l2d>
 802dd54:	4602      	mov	r2, r0
 802dd56:	460b      	mov	r3, r1
 802dd58:	4630      	mov	r0, r6
 802dd5a:	4639      	mov	r1, r7
 802dd5c:	f7f2 fab4 	bl	80202c8 <__aeabi_dsub>
 802dd60:	460b      	mov	r3, r1
 802dd62:	4602      	mov	r2, r0
 802dd64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 802dd68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 802dd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dd6e:	ea46 060a 	orr.w	r6, r6, sl
 802dd72:	431e      	orrs	r6, r3
 802dd74:	d06f      	beq.n	802de56 <_strtod_l+0xb86>
 802dd76:	a30e      	add	r3, pc, #56	@ (adr r3, 802ddb0 <_strtod_l+0xae0>)
 802dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd7c:	f7f2 fece 	bl	8020b1c <__aeabi_dcmplt>
 802dd80:	2800      	cmp	r0, #0
 802dd82:	f47f acd3 	bne.w	802d72c <_strtod_l+0x45c>
 802dd86:	a30c      	add	r3, pc, #48	@ (adr r3, 802ddb8 <_strtod_l+0xae8>)
 802dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dd90:	f7f2 fee2 	bl	8020b58 <__aeabi_dcmpgt>
 802dd94:	2800      	cmp	r0, #0
 802dd96:	d093      	beq.n	802dcc0 <_strtod_l+0x9f0>
 802dd98:	e4c8      	b.n	802d72c <_strtod_l+0x45c>
 802dd9a:	bf00      	nop
 802dd9c:	f3af 8000 	nop.w
 802dda0:	00000000 	.word	0x00000000
 802dda4:	bff00000 	.word	0xbff00000
 802dda8:	00000000 	.word	0x00000000
 802ddac:	3ff00000 	.word	0x3ff00000
 802ddb0:	94a03595 	.word	0x94a03595
 802ddb4:	3fdfffff 	.word	0x3fdfffff
 802ddb8:	35afe535 	.word	0x35afe535
 802ddbc:	3fe00000 	.word	0x3fe00000
 802ddc0:	000fffff 	.word	0x000fffff
 802ddc4:	7ff00000 	.word	0x7ff00000
 802ddc8:	7fefffff 	.word	0x7fefffff
 802ddcc:	3ff00000 	.word	0x3ff00000
 802ddd0:	3fe00000 	.word	0x3fe00000
 802ddd4:	7fe00000 	.word	0x7fe00000
 802ddd8:	7c9fffff 	.word	0x7c9fffff
 802dddc:	9b08      	ldr	r3, [sp, #32]
 802ddde:	b323      	cbz	r3, 802de2a <_strtod_l+0xb5a>
 802dde0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802dde4:	d821      	bhi.n	802de2a <_strtod_l+0xb5a>
 802dde6:	a328      	add	r3, pc, #160	@ (adr r3, 802de88 <_strtod_l+0xbb8>)
 802dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddec:	4630      	mov	r0, r6
 802ddee:	4639      	mov	r1, r7
 802ddf0:	f7f2 fe9e 	bl	8020b30 <__aeabi_dcmple>
 802ddf4:	b1a0      	cbz	r0, 802de20 <_strtod_l+0xb50>
 802ddf6:	4639      	mov	r1, r7
 802ddf8:	4630      	mov	r0, r6
 802ddfa:	f7f2 fef5 	bl	8020be8 <__aeabi_d2uiz>
 802ddfe:	2801      	cmp	r0, #1
 802de00:	bf38      	it	cc
 802de02:	2001      	movcc	r0, #1
 802de04:	f7f2 fb9e 	bl	8020544 <__aeabi_ui2d>
 802de08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802de0a:	4606      	mov	r6, r0
 802de0c:	460f      	mov	r7, r1
 802de0e:	b9fb      	cbnz	r3, 802de50 <_strtod_l+0xb80>
 802de10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802de14:	9014      	str	r0, [sp, #80]	@ 0x50
 802de16:	9315      	str	r3, [sp, #84]	@ 0x54
 802de18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802de1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802de20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802de22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802de26:	1b5b      	subs	r3, r3, r5
 802de28:	9311      	str	r3, [sp, #68]	@ 0x44
 802de2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802de2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802de32:	f7ff f8c3 	bl	802cfbc <__ulp>
 802de36:	4650      	mov	r0, sl
 802de38:	ec53 2b10 	vmov	r2, r3, d0
 802de3c:	4659      	mov	r1, fp
 802de3e:	f7f2 fbfb 	bl	8020638 <__aeabi_dmul>
 802de42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802de46:	f7f2 fa41 	bl	80202cc <__adddf3>
 802de4a:	4682      	mov	sl, r0
 802de4c:	468b      	mov	fp, r1
 802de4e:	e770      	b.n	802dd32 <_strtod_l+0xa62>
 802de50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802de54:	e7e0      	b.n	802de18 <_strtod_l+0xb48>
 802de56:	a30e      	add	r3, pc, #56	@ (adr r3, 802de90 <_strtod_l+0xbc0>)
 802de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de5c:	f7f2 fe5e 	bl	8020b1c <__aeabi_dcmplt>
 802de60:	e798      	b.n	802dd94 <_strtod_l+0xac4>
 802de62:	2300      	movs	r3, #0
 802de64:	930e      	str	r3, [sp, #56]	@ 0x38
 802de66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802de68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802de6a:	6013      	str	r3, [r2, #0]
 802de6c:	f7ff ba6d 	b.w	802d34a <_strtod_l+0x7a>
 802de70:	2a65      	cmp	r2, #101	@ 0x65
 802de72:	f43f ab68 	beq.w	802d546 <_strtod_l+0x276>
 802de76:	2a45      	cmp	r2, #69	@ 0x45
 802de78:	f43f ab65 	beq.w	802d546 <_strtod_l+0x276>
 802de7c:	2301      	movs	r3, #1
 802de7e:	f7ff bba0 	b.w	802d5c2 <_strtod_l+0x2f2>
 802de82:	bf00      	nop
 802de84:	f3af 8000 	nop.w
 802de88:	ffc00000 	.word	0xffc00000
 802de8c:	41dfffff 	.word	0x41dfffff
 802de90:	94a03595 	.word	0x94a03595
 802de94:	3fcfffff 	.word	0x3fcfffff

0802de98 <_strtod_r>:
 802de98:	4b01      	ldr	r3, [pc, #4]	@ (802dea0 <_strtod_r+0x8>)
 802de9a:	f7ff ba19 	b.w	802d2d0 <_strtod_l>
 802de9e:	bf00      	nop
 802dea0:	2000006c 	.word	0x2000006c

0802dea4 <__ssputs_r>:
 802dea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802dea8:	688e      	ldr	r6, [r1, #8]
 802deaa:	461f      	mov	r7, r3
 802deac:	42be      	cmp	r6, r7
 802deae:	680b      	ldr	r3, [r1, #0]
 802deb0:	4682      	mov	sl, r0
 802deb2:	460c      	mov	r4, r1
 802deb4:	4690      	mov	r8, r2
 802deb6:	d82d      	bhi.n	802df14 <__ssputs_r+0x70>
 802deb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802debc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802dec0:	d026      	beq.n	802df10 <__ssputs_r+0x6c>
 802dec2:	6965      	ldr	r5, [r4, #20]
 802dec4:	6909      	ldr	r1, [r1, #16]
 802dec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802deca:	eba3 0901 	sub.w	r9, r3, r1
 802dece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ded2:	1c7b      	adds	r3, r7, #1
 802ded4:	444b      	add	r3, r9
 802ded6:	106d      	asrs	r5, r5, #1
 802ded8:	429d      	cmp	r5, r3
 802deda:	bf38      	it	cc
 802dedc:	461d      	movcc	r5, r3
 802dede:	0553      	lsls	r3, r2, #21
 802dee0:	d527      	bpl.n	802df32 <__ssputs_r+0x8e>
 802dee2:	4629      	mov	r1, r5
 802dee4:	f7fc f996 	bl	802a214 <_malloc_r>
 802dee8:	4606      	mov	r6, r0
 802deea:	b360      	cbz	r0, 802df46 <__ssputs_r+0xa2>
 802deec:	6921      	ldr	r1, [r4, #16]
 802deee:	464a      	mov	r2, r9
 802def0:	f7fd fe39 	bl	802bb66 <memcpy>
 802def4:	89a3      	ldrh	r3, [r4, #12]
 802def6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802defa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802defe:	81a3      	strh	r3, [r4, #12]
 802df00:	6126      	str	r6, [r4, #16]
 802df02:	6165      	str	r5, [r4, #20]
 802df04:	444e      	add	r6, r9
 802df06:	eba5 0509 	sub.w	r5, r5, r9
 802df0a:	6026      	str	r6, [r4, #0]
 802df0c:	60a5      	str	r5, [r4, #8]
 802df0e:	463e      	mov	r6, r7
 802df10:	42be      	cmp	r6, r7
 802df12:	d900      	bls.n	802df16 <__ssputs_r+0x72>
 802df14:	463e      	mov	r6, r7
 802df16:	6820      	ldr	r0, [r4, #0]
 802df18:	4632      	mov	r2, r6
 802df1a:	4641      	mov	r1, r8
 802df1c:	f7fd fd52 	bl	802b9c4 <memmove>
 802df20:	68a3      	ldr	r3, [r4, #8]
 802df22:	1b9b      	subs	r3, r3, r6
 802df24:	60a3      	str	r3, [r4, #8]
 802df26:	6823      	ldr	r3, [r4, #0]
 802df28:	4433      	add	r3, r6
 802df2a:	6023      	str	r3, [r4, #0]
 802df2c:	2000      	movs	r0, #0
 802df2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802df32:	462a      	mov	r2, r5
 802df34:	f7ff f980 	bl	802d238 <_realloc_r>
 802df38:	4606      	mov	r6, r0
 802df3a:	2800      	cmp	r0, #0
 802df3c:	d1e0      	bne.n	802df00 <__ssputs_r+0x5c>
 802df3e:	6921      	ldr	r1, [r4, #16]
 802df40:	4650      	mov	r0, sl
 802df42:	f7fe fc85 	bl	802c850 <_free_r>
 802df46:	230c      	movs	r3, #12
 802df48:	f8ca 3000 	str.w	r3, [sl]
 802df4c:	89a3      	ldrh	r3, [r4, #12]
 802df4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802df52:	81a3      	strh	r3, [r4, #12]
 802df54:	f04f 30ff 	mov.w	r0, #4294967295
 802df58:	e7e9      	b.n	802df2e <__ssputs_r+0x8a>
	...

0802df5c <_svfiprintf_r>:
 802df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df60:	4698      	mov	r8, r3
 802df62:	898b      	ldrh	r3, [r1, #12]
 802df64:	061b      	lsls	r3, r3, #24
 802df66:	b09d      	sub	sp, #116	@ 0x74
 802df68:	4607      	mov	r7, r0
 802df6a:	460d      	mov	r5, r1
 802df6c:	4614      	mov	r4, r2
 802df6e:	d510      	bpl.n	802df92 <_svfiprintf_r+0x36>
 802df70:	690b      	ldr	r3, [r1, #16]
 802df72:	b973      	cbnz	r3, 802df92 <_svfiprintf_r+0x36>
 802df74:	2140      	movs	r1, #64	@ 0x40
 802df76:	f7fc f94d 	bl	802a214 <_malloc_r>
 802df7a:	6028      	str	r0, [r5, #0]
 802df7c:	6128      	str	r0, [r5, #16]
 802df7e:	b930      	cbnz	r0, 802df8e <_svfiprintf_r+0x32>
 802df80:	230c      	movs	r3, #12
 802df82:	603b      	str	r3, [r7, #0]
 802df84:	f04f 30ff 	mov.w	r0, #4294967295
 802df88:	b01d      	add	sp, #116	@ 0x74
 802df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802df8e:	2340      	movs	r3, #64	@ 0x40
 802df90:	616b      	str	r3, [r5, #20]
 802df92:	2300      	movs	r3, #0
 802df94:	9309      	str	r3, [sp, #36]	@ 0x24
 802df96:	2320      	movs	r3, #32
 802df98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802df9c:	f8cd 800c 	str.w	r8, [sp, #12]
 802dfa0:	2330      	movs	r3, #48	@ 0x30
 802dfa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802e140 <_svfiprintf_r+0x1e4>
 802dfa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802dfaa:	f04f 0901 	mov.w	r9, #1
 802dfae:	4623      	mov	r3, r4
 802dfb0:	469a      	mov	sl, r3
 802dfb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dfb6:	b10a      	cbz	r2, 802dfbc <_svfiprintf_r+0x60>
 802dfb8:	2a25      	cmp	r2, #37	@ 0x25
 802dfba:	d1f9      	bne.n	802dfb0 <_svfiprintf_r+0x54>
 802dfbc:	ebba 0b04 	subs.w	fp, sl, r4
 802dfc0:	d00b      	beq.n	802dfda <_svfiprintf_r+0x7e>
 802dfc2:	465b      	mov	r3, fp
 802dfc4:	4622      	mov	r2, r4
 802dfc6:	4629      	mov	r1, r5
 802dfc8:	4638      	mov	r0, r7
 802dfca:	f7ff ff6b 	bl	802dea4 <__ssputs_r>
 802dfce:	3001      	adds	r0, #1
 802dfd0:	f000 80a7 	beq.w	802e122 <_svfiprintf_r+0x1c6>
 802dfd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802dfd6:	445a      	add	r2, fp
 802dfd8:	9209      	str	r2, [sp, #36]	@ 0x24
 802dfda:	f89a 3000 	ldrb.w	r3, [sl]
 802dfde:	2b00      	cmp	r3, #0
 802dfe0:	f000 809f 	beq.w	802e122 <_svfiprintf_r+0x1c6>
 802dfe4:	2300      	movs	r3, #0
 802dfe6:	f04f 32ff 	mov.w	r2, #4294967295
 802dfea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802dfee:	f10a 0a01 	add.w	sl, sl, #1
 802dff2:	9304      	str	r3, [sp, #16]
 802dff4:	9307      	str	r3, [sp, #28]
 802dff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802dffa:	931a      	str	r3, [sp, #104]	@ 0x68
 802dffc:	4654      	mov	r4, sl
 802dffe:	2205      	movs	r2, #5
 802e000:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e004:	484e      	ldr	r0, [pc, #312]	@ (802e140 <_svfiprintf_r+0x1e4>)
 802e006:	f7f2 f903 	bl	8020210 <memchr>
 802e00a:	9a04      	ldr	r2, [sp, #16]
 802e00c:	b9d8      	cbnz	r0, 802e046 <_svfiprintf_r+0xea>
 802e00e:	06d0      	lsls	r0, r2, #27
 802e010:	bf44      	itt	mi
 802e012:	2320      	movmi	r3, #32
 802e014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e018:	0711      	lsls	r1, r2, #28
 802e01a:	bf44      	itt	mi
 802e01c:	232b      	movmi	r3, #43	@ 0x2b
 802e01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e022:	f89a 3000 	ldrb.w	r3, [sl]
 802e026:	2b2a      	cmp	r3, #42	@ 0x2a
 802e028:	d015      	beq.n	802e056 <_svfiprintf_r+0xfa>
 802e02a:	9a07      	ldr	r2, [sp, #28]
 802e02c:	4654      	mov	r4, sl
 802e02e:	2000      	movs	r0, #0
 802e030:	f04f 0c0a 	mov.w	ip, #10
 802e034:	4621      	mov	r1, r4
 802e036:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e03a:	3b30      	subs	r3, #48	@ 0x30
 802e03c:	2b09      	cmp	r3, #9
 802e03e:	d94b      	bls.n	802e0d8 <_svfiprintf_r+0x17c>
 802e040:	b1b0      	cbz	r0, 802e070 <_svfiprintf_r+0x114>
 802e042:	9207      	str	r2, [sp, #28]
 802e044:	e014      	b.n	802e070 <_svfiprintf_r+0x114>
 802e046:	eba0 0308 	sub.w	r3, r0, r8
 802e04a:	fa09 f303 	lsl.w	r3, r9, r3
 802e04e:	4313      	orrs	r3, r2
 802e050:	9304      	str	r3, [sp, #16]
 802e052:	46a2      	mov	sl, r4
 802e054:	e7d2      	b.n	802dffc <_svfiprintf_r+0xa0>
 802e056:	9b03      	ldr	r3, [sp, #12]
 802e058:	1d19      	adds	r1, r3, #4
 802e05a:	681b      	ldr	r3, [r3, #0]
 802e05c:	9103      	str	r1, [sp, #12]
 802e05e:	2b00      	cmp	r3, #0
 802e060:	bfbb      	ittet	lt
 802e062:	425b      	neglt	r3, r3
 802e064:	f042 0202 	orrlt.w	r2, r2, #2
 802e068:	9307      	strge	r3, [sp, #28]
 802e06a:	9307      	strlt	r3, [sp, #28]
 802e06c:	bfb8      	it	lt
 802e06e:	9204      	strlt	r2, [sp, #16]
 802e070:	7823      	ldrb	r3, [r4, #0]
 802e072:	2b2e      	cmp	r3, #46	@ 0x2e
 802e074:	d10a      	bne.n	802e08c <_svfiprintf_r+0x130>
 802e076:	7863      	ldrb	r3, [r4, #1]
 802e078:	2b2a      	cmp	r3, #42	@ 0x2a
 802e07a:	d132      	bne.n	802e0e2 <_svfiprintf_r+0x186>
 802e07c:	9b03      	ldr	r3, [sp, #12]
 802e07e:	1d1a      	adds	r2, r3, #4
 802e080:	681b      	ldr	r3, [r3, #0]
 802e082:	9203      	str	r2, [sp, #12]
 802e084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802e088:	3402      	adds	r4, #2
 802e08a:	9305      	str	r3, [sp, #20]
 802e08c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802e150 <_svfiprintf_r+0x1f4>
 802e090:	7821      	ldrb	r1, [r4, #0]
 802e092:	2203      	movs	r2, #3
 802e094:	4650      	mov	r0, sl
 802e096:	f7f2 f8bb 	bl	8020210 <memchr>
 802e09a:	b138      	cbz	r0, 802e0ac <_svfiprintf_r+0x150>
 802e09c:	9b04      	ldr	r3, [sp, #16]
 802e09e:	eba0 000a 	sub.w	r0, r0, sl
 802e0a2:	2240      	movs	r2, #64	@ 0x40
 802e0a4:	4082      	lsls	r2, r0
 802e0a6:	4313      	orrs	r3, r2
 802e0a8:	3401      	adds	r4, #1
 802e0aa:	9304      	str	r3, [sp, #16]
 802e0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e0b0:	4824      	ldr	r0, [pc, #144]	@ (802e144 <_svfiprintf_r+0x1e8>)
 802e0b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802e0b6:	2206      	movs	r2, #6
 802e0b8:	f7f2 f8aa 	bl	8020210 <memchr>
 802e0bc:	2800      	cmp	r0, #0
 802e0be:	d036      	beq.n	802e12e <_svfiprintf_r+0x1d2>
 802e0c0:	4b21      	ldr	r3, [pc, #132]	@ (802e148 <_svfiprintf_r+0x1ec>)
 802e0c2:	bb1b      	cbnz	r3, 802e10c <_svfiprintf_r+0x1b0>
 802e0c4:	9b03      	ldr	r3, [sp, #12]
 802e0c6:	3307      	adds	r3, #7
 802e0c8:	f023 0307 	bic.w	r3, r3, #7
 802e0cc:	3308      	adds	r3, #8
 802e0ce:	9303      	str	r3, [sp, #12]
 802e0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e0d2:	4433      	add	r3, r6
 802e0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 802e0d6:	e76a      	b.n	802dfae <_svfiprintf_r+0x52>
 802e0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 802e0dc:	460c      	mov	r4, r1
 802e0de:	2001      	movs	r0, #1
 802e0e0:	e7a8      	b.n	802e034 <_svfiprintf_r+0xd8>
 802e0e2:	2300      	movs	r3, #0
 802e0e4:	3401      	adds	r4, #1
 802e0e6:	9305      	str	r3, [sp, #20]
 802e0e8:	4619      	mov	r1, r3
 802e0ea:	f04f 0c0a 	mov.w	ip, #10
 802e0ee:	4620      	mov	r0, r4
 802e0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e0f4:	3a30      	subs	r2, #48	@ 0x30
 802e0f6:	2a09      	cmp	r2, #9
 802e0f8:	d903      	bls.n	802e102 <_svfiprintf_r+0x1a6>
 802e0fa:	2b00      	cmp	r3, #0
 802e0fc:	d0c6      	beq.n	802e08c <_svfiprintf_r+0x130>
 802e0fe:	9105      	str	r1, [sp, #20]
 802e100:	e7c4      	b.n	802e08c <_svfiprintf_r+0x130>
 802e102:	fb0c 2101 	mla	r1, ip, r1, r2
 802e106:	4604      	mov	r4, r0
 802e108:	2301      	movs	r3, #1
 802e10a:	e7f0      	b.n	802e0ee <_svfiprintf_r+0x192>
 802e10c:	ab03      	add	r3, sp, #12
 802e10e:	9300      	str	r3, [sp, #0]
 802e110:	462a      	mov	r2, r5
 802e112:	4b0e      	ldr	r3, [pc, #56]	@ (802e14c <_svfiprintf_r+0x1f0>)
 802e114:	a904      	add	r1, sp, #16
 802e116:	4638      	mov	r0, r7
 802e118:	f7fc fa2e 	bl	802a578 <_printf_float>
 802e11c:	1c42      	adds	r2, r0, #1
 802e11e:	4606      	mov	r6, r0
 802e120:	d1d6      	bne.n	802e0d0 <_svfiprintf_r+0x174>
 802e122:	89ab      	ldrh	r3, [r5, #12]
 802e124:	065b      	lsls	r3, r3, #25
 802e126:	f53f af2d 	bmi.w	802df84 <_svfiprintf_r+0x28>
 802e12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802e12c:	e72c      	b.n	802df88 <_svfiprintf_r+0x2c>
 802e12e:	ab03      	add	r3, sp, #12
 802e130:	9300      	str	r3, [sp, #0]
 802e132:	462a      	mov	r2, r5
 802e134:	4b05      	ldr	r3, [pc, #20]	@ (802e14c <_svfiprintf_r+0x1f0>)
 802e136:	a904      	add	r1, sp, #16
 802e138:	4638      	mov	r0, r7
 802e13a:	f7fc fdf7 	bl	802ad2c <_printf_i>
 802e13e:	e7ed      	b.n	802e11c <_svfiprintf_r+0x1c0>
 802e140:	0802f2b6 	.word	0x0802f2b6
 802e144:	0802f2c0 	.word	0x0802f2c0
 802e148:	0802a579 	.word	0x0802a579
 802e14c:	0802dea5 	.word	0x0802dea5
 802e150:	0802f2bc 	.word	0x0802f2bc

0802e154 <__swhatbuf_r>:
 802e154:	b570      	push	{r4, r5, r6, lr}
 802e156:	460c      	mov	r4, r1
 802e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e15c:	2900      	cmp	r1, #0
 802e15e:	b096      	sub	sp, #88	@ 0x58
 802e160:	4615      	mov	r5, r2
 802e162:	461e      	mov	r6, r3
 802e164:	da0d      	bge.n	802e182 <__swhatbuf_r+0x2e>
 802e166:	89a3      	ldrh	r3, [r4, #12]
 802e168:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802e16c:	f04f 0100 	mov.w	r1, #0
 802e170:	bf14      	ite	ne
 802e172:	2340      	movne	r3, #64	@ 0x40
 802e174:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802e178:	2000      	movs	r0, #0
 802e17a:	6031      	str	r1, [r6, #0]
 802e17c:	602b      	str	r3, [r5, #0]
 802e17e:	b016      	add	sp, #88	@ 0x58
 802e180:	bd70      	pop	{r4, r5, r6, pc}
 802e182:	466a      	mov	r2, sp
 802e184:	f000 f878 	bl	802e278 <_fstat_r>
 802e188:	2800      	cmp	r0, #0
 802e18a:	dbec      	blt.n	802e166 <__swhatbuf_r+0x12>
 802e18c:	9901      	ldr	r1, [sp, #4]
 802e18e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802e192:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802e196:	4259      	negs	r1, r3
 802e198:	4159      	adcs	r1, r3
 802e19a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802e19e:	e7eb      	b.n	802e178 <__swhatbuf_r+0x24>

0802e1a0 <__smakebuf_r>:
 802e1a0:	898b      	ldrh	r3, [r1, #12]
 802e1a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e1a4:	079d      	lsls	r5, r3, #30
 802e1a6:	4606      	mov	r6, r0
 802e1a8:	460c      	mov	r4, r1
 802e1aa:	d507      	bpl.n	802e1bc <__smakebuf_r+0x1c>
 802e1ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802e1b0:	6023      	str	r3, [r4, #0]
 802e1b2:	6123      	str	r3, [r4, #16]
 802e1b4:	2301      	movs	r3, #1
 802e1b6:	6163      	str	r3, [r4, #20]
 802e1b8:	b003      	add	sp, #12
 802e1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e1bc:	ab01      	add	r3, sp, #4
 802e1be:	466a      	mov	r2, sp
 802e1c0:	f7ff ffc8 	bl	802e154 <__swhatbuf_r>
 802e1c4:	9f00      	ldr	r7, [sp, #0]
 802e1c6:	4605      	mov	r5, r0
 802e1c8:	4639      	mov	r1, r7
 802e1ca:	4630      	mov	r0, r6
 802e1cc:	f7fc f822 	bl	802a214 <_malloc_r>
 802e1d0:	b948      	cbnz	r0, 802e1e6 <__smakebuf_r+0x46>
 802e1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e1d6:	059a      	lsls	r2, r3, #22
 802e1d8:	d4ee      	bmi.n	802e1b8 <__smakebuf_r+0x18>
 802e1da:	f023 0303 	bic.w	r3, r3, #3
 802e1de:	f043 0302 	orr.w	r3, r3, #2
 802e1e2:	81a3      	strh	r3, [r4, #12]
 802e1e4:	e7e2      	b.n	802e1ac <__smakebuf_r+0xc>
 802e1e6:	89a3      	ldrh	r3, [r4, #12]
 802e1e8:	6020      	str	r0, [r4, #0]
 802e1ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802e1ee:	81a3      	strh	r3, [r4, #12]
 802e1f0:	9b01      	ldr	r3, [sp, #4]
 802e1f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802e1f6:	b15b      	cbz	r3, 802e210 <__smakebuf_r+0x70>
 802e1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e1fc:	4630      	mov	r0, r6
 802e1fe:	f000 f84d 	bl	802e29c <_isatty_r>
 802e202:	b128      	cbz	r0, 802e210 <__smakebuf_r+0x70>
 802e204:	89a3      	ldrh	r3, [r4, #12]
 802e206:	f023 0303 	bic.w	r3, r3, #3
 802e20a:	f043 0301 	orr.w	r3, r3, #1
 802e20e:	81a3      	strh	r3, [r4, #12]
 802e210:	89a3      	ldrh	r3, [r4, #12]
 802e212:	431d      	orrs	r5, r3
 802e214:	81a5      	strh	r5, [r4, #12]
 802e216:	e7cf      	b.n	802e1b8 <__smakebuf_r+0x18>

0802e218 <_raise_r>:
 802e218:	291f      	cmp	r1, #31
 802e21a:	b538      	push	{r3, r4, r5, lr}
 802e21c:	4605      	mov	r5, r0
 802e21e:	460c      	mov	r4, r1
 802e220:	d904      	bls.n	802e22c <_raise_r+0x14>
 802e222:	2316      	movs	r3, #22
 802e224:	6003      	str	r3, [r0, #0]
 802e226:	f04f 30ff 	mov.w	r0, #4294967295
 802e22a:	bd38      	pop	{r3, r4, r5, pc}
 802e22c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e22e:	b112      	cbz	r2, 802e236 <_raise_r+0x1e>
 802e230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e234:	b94b      	cbnz	r3, 802e24a <_raise_r+0x32>
 802e236:	4628      	mov	r0, r5
 802e238:	f000 f852 	bl	802e2e0 <_getpid_r>
 802e23c:	4622      	mov	r2, r4
 802e23e:	4601      	mov	r1, r0
 802e240:	4628      	mov	r0, r5
 802e242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e246:	f000 b839 	b.w	802e2bc <_kill_r>
 802e24a:	2b01      	cmp	r3, #1
 802e24c:	d00a      	beq.n	802e264 <_raise_r+0x4c>
 802e24e:	1c59      	adds	r1, r3, #1
 802e250:	d103      	bne.n	802e25a <_raise_r+0x42>
 802e252:	2316      	movs	r3, #22
 802e254:	6003      	str	r3, [r0, #0]
 802e256:	2001      	movs	r0, #1
 802e258:	e7e7      	b.n	802e22a <_raise_r+0x12>
 802e25a:	2100      	movs	r1, #0
 802e25c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802e260:	4620      	mov	r0, r4
 802e262:	4798      	blx	r3
 802e264:	2000      	movs	r0, #0
 802e266:	e7e0      	b.n	802e22a <_raise_r+0x12>

0802e268 <raise>:
 802e268:	4b02      	ldr	r3, [pc, #8]	@ (802e274 <raise+0xc>)
 802e26a:	4601      	mov	r1, r0
 802e26c:	6818      	ldr	r0, [r3, #0]
 802e26e:	f7ff bfd3 	b.w	802e218 <_raise_r>
 802e272:	bf00      	nop
 802e274:	2000001c 	.word	0x2000001c

0802e278 <_fstat_r>:
 802e278:	b538      	push	{r3, r4, r5, lr}
 802e27a:	4d07      	ldr	r5, [pc, #28]	@ (802e298 <_fstat_r+0x20>)
 802e27c:	2300      	movs	r3, #0
 802e27e:	4604      	mov	r4, r0
 802e280:	4608      	mov	r0, r1
 802e282:	4611      	mov	r1, r2
 802e284:	602b      	str	r3, [r5, #0]
 802e286:	f7f3 ff1f 	bl	80220c8 <_fstat>
 802e28a:	1c43      	adds	r3, r0, #1
 802e28c:	d102      	bne.n	802e294 <_fstat_r+0x1c>
 802e28e:	682b      	ldr	r3, [r5, #0]
 802e290:	b103      	cbz	r3, 802e294 <_fstat_r+0x1c>
 802e292:	6023      	str	r3, [r4, #0]
 802e294:	bd38      	pop	{r3, r4, r5, pc}
 802e296:	bf00      	nop
 802e298:	2000e7d4 	.word	0x2000e7d4

0802e29c <_isatty_r>:
 802e29c:	b538      	push	{r3, r4, r5, lr}
 802e29e:	4d06      	ldr	r5, [pc, #24]	@ (802e2b8 <_isatty_r+0x1c>)
 802e2a0:	2300      	movs	r3, #0
 802e2a2:	4604      	mov	r4, r0
 802e2a4:	4608      	mov	r0, r1
 802e2a6:	602b      	str	r3, [r5, #0]
 802e2a8:	f7f3 ff1e 	bl	80220e8 <_isatty>
 802e2ac:	1c43      	adds	r3, r0, #1
 802e2ae:	d102      	bne.n	802e2b6 <_isatty_r+0x1a>
 802e2b0:	682b      	ldr	r3, [r5, #0]
 802e2b2:	b103      	cbz	r3, 802e2b6 <_isatty_r+0x1a>
 802e2b4:	6023      	str	r3, [r4, #0]
 802e2b6:	bd38      	pop	{r3, r4, r5, pc}
 802e2b8:	2000e7d4 	.word	0x2000e7d4

0802e2bc <_kill_r>:
 802e2bc:	b538      	push	{r3, r4, r5, lr}
 802e2be:	4d07      	ldr	r5, [pc, #28]	@ (802e2dc <_kill_r+0x20>)
 802e2c0:	2300      	movs	r3, #0
 802e2c2:	4604      	mov	r4, r0
 802e2c4:	4608      	mov	r0, r1
 802e2c6:	4611      	mov	r1, r2
 802e2c8:	602b      	str	r3, [r5, #0]
 802e2ca:	f7f3 feb9 	bl	8022040 <_kill>
 802e2ce:	1c43      	adds	r3, r0, #1
 802e2d0:	d102      	bne.n	802e2d8 <_kill_r+0x1c>
 802e2d2:	682b      	ldr	r3, [r5, #0]
 802e2d4:	b103      	cbz	r3, 802e2d8 <_kill_r+0x1c>
 802e2d6:	6023      	str	r3, [r4, #0]
 802e2d8:	bd38      	pop	{r3, r4, r5, pc}
 802e2da:	bf00      	nop
 802e2dc:	2000e7d4 	.word	0x2000e7d4

0802e2e0 <_getpid_r>:
 802e2e0:	f7f3 bea6 	b.w	8022030 <_getpid>
 802e2e4:	0000      	movs	r0, r0
	...

0802e2e8 <nan>:
 802e2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802e2f0 <nan+0x8>
 802e2ec:	4770      	bx	lr
 802e2ee:	bf00      	nop
 802e2f0:	00000000 	.word	0x00000000
 802e2f4:	7ff80000 	.word	0x7ff80000

0802e2f8 <_calloc_r>:
 802e2f8:	b570      	push	{r4, r5, r6, lr}
 802e2fa:	fba1 5402 	umull	r5, r4, r1, r2
 802e2fe:	b934      	cbnz	r4, 802e30e <_calloc_r+0x16>
 802e300:	4629      	mov	r1, r5
 802e302:	f7fb ff87 	bl	802a214 <_malloc_r>
 802e306:	4606      	mov	r6, r0
 802e308:	b928      	cbnz	r0, 802e316 <_calloc_r+0x1e>
 802e30a:	4630      	mov	r0, r6
 802e30c:	bd70      	pop	{r4, r5, r6, pc}
 802e30e:	220c      	movs	r2, #12
 802e310:	6002      	str	r2, [r0, #0]
 802e312:	2600      	movs	r6, #0
 802e314:	e7f9      	b.n	802e30a <_calloc_r+0x12>
 802e316:	462a      	mov	r2, r5
 802e318:	4621      	mov	r1, r4
 802e31a:	f7fd fb6d 	bl	802b9f8 <memset>
 802e31e:	e7f4      	b.n	802e30a <_calloc_r+0x12>

0802e320 <rshift>:
 802e320:	6903      	ldr	r3, [r0, #16]
 802e322:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802e326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e32a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802e32e:	f100 0414 	add.w	r4, r0, #20
 802e332:	dd45      	ble.n	802e3c0 <rshift+0xa0>
 802e334:	f011 011f 	ands.w	r1, r1, #31
 802e338:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802e33c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802e340:	d10c      	bne.n	802e35c <rshift+0x3c>
 802e342:	f100 0710 	add.w	r7, r0, #16
 802e346:	4629      	mov	r1, r5
 802e348:	42b1      	cmp	r1, r6
 802e34a:	d334      	bcc.n	802e3b6 <rshift+0x96>
 802e34c:	1a9b      	subs	r3, r3, r2
 802e34e:	009b      	lsls	r3, r3, #2
 802e350:	1eea      	subs	r2, r5, #3
 802e352:	4296      	cmp	r6, r2
 802e354:	bf38      	it	cc
 802e356:	2300      	movcc	r3, #0
 802e358:	4423      	add	r3, r4
 802e35a:	e015      	b.n	802e388 <rshift+0x68>
 802e35c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802e360:	f1c1 0820 	rsb	r8, r1, #32
 802e364:	40cf      	lsrs	r7, r1
 802e366:	f105 0e04 	add.w	lr, r5, #4
 802e36a:	46a1      	mov	r9, r4
 802e36c:	4576      	cmp	r6, lr
 802e36e:	46f4      	mov	ip, lr
 802e370:	d815      	bhi.n	802e39e <rshift+0x7e>
 802e372:	1a9a      	subs	r2, r3, r2
 802e374:	0092      	lsls	r2, r2, #2
 802e376:	3a04      	subs	r2, #4
 802e378:	3501      	adds	r5, #1
 802e37a:	42ae      	cmp	r6, r5
 802e37c:	bf38      	it	cc
 802e37e:	2200      	movcc	r2, #0
 802e380:	18a3      	adds	r3, r4, r2
 802e382:	50a7      	str	r7, [r4, r2]
 802e384:	b107      	cbz	r7, 802e388 <rshift+0x68>
 802e386:	3304      	adds	r3, #4
 802e388:	1b1a      	subs	r2, r3, r4
 802e38a:	42a3      	cmp	r3, r4
 802e38c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802e390:	bf08      	it	eq
 802e392:	2300      	moveq	r3, #0
 802e394:	6102      	str	r2, [r0, #16]
 802e396:	bf08      	it	eq
 802e398:	6143      	streq	r3, [r0, #20]
 802e39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e39e:	f8dc c000 	ldr.w	ip, [ip]
 802e3a2:	fa0c fc08 	lsl.w	ip, ip, r8
 802e3a6:	ea4c 0707 	orr.w	r7, ip, r7
 802e3aa:	f849 7b04 	str.w	r7, [r9], #4
 802e3ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 802e3b2:	40cf      	lsrs	r7, r1
 802e3b4:	e7da      	b.n	802e36c <rshift+0x4c>
 802e3b6:	f851 cb04 	ldr.w	ip, [r1], #4
 802e3ba:	f847 cf04 	str.w	ip, [r7, #4]!
 802e3be:	e7c3      	b.n	802e348 <rshift+0x28>
 802e3c0:	4623      	mov	r3, r4
 802e3c2:	e7e1      	b.n	802e388 <rshift+0x68>

0802e3c4 <__hexdig_fun>:
 802e3c4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802e3c8:	2b09      	cmp	r3, #9
 802e3ca:	d802      	bhi.n	802e3d2 <__hexdig_fun+0xe>
 802e3cc:	3820      	subs	r0, #32
 802e3ce:	b2c0      	uxtb	r0, r0
 802e3d0:	4770      	bx	lr
 802e3d2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802e3d6:	2b05      	cmp	r3, #5
 802e3d8:	d801      	bhi.n	802e3de <__hexdig_fun+0x1a>
 802e3da:	3847      	subs	r0, #71	@ 0x47
 802e3dc:	e7f7      	b.n	802e3ce <__hexdig_fun+0xa>
 802e3de:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802e3e2:	2b05      	cmp	r3, #5
 802e3e4:	d801      	bhi.n	802e3ea <__hexdig_fun+0x26>
 802e3e6:	3827      	subs	r0, #39	@ 0x27
 802e3e8:	e7f1      	b.n	802e3ce <__hexdig_fun+0xa>
 802e3ea:	2000      	movs	r0, #0
 802e3ec:	4770      	bx	lr
	...

0802e3f0 <__gethex>:
 802e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e3f4:	b085      	sub	sp, #20
 802e3f6:	468a      	mov	sl, r1
 802e3f8:	9302      	str	r3, [sp, #8]
 802e3fa:	680b      	ldr	r3, [r1, #0]
 802e3fc:	9001      	str	r0, [sp, #4]
 802e3fe:	4690      	mov	r8, r2
 802e400:	1c9c      	adds	r4, r3, #2
 802e402:	46a1      	mov	r9, r4
 802e404:	f814 0b01 	ldrb.w	r0, [r4], #1
 802e408:	2830      	cmp	r0, #48	@ 0x30
 802e40a:	d0fa      	beq.n	802e402 <__gethex+0x12>
 802e40c:	eba9 0303 	sub.w	r3, r9, r3
 802e410:	f1a3 0b02 	sub.w	fp, r3, #2
 802e414:	f7ff ffd6 	bl	802e3c4 <__hexdig_fun>
 802e418:	4605      	mov	r5, r0
 802e41a:	2800      	cmp	r0, #0
 802e41c:	d168      	bne.n	802e4f0 <__gethex+0x100>
 802e41e:	49a0      	ldr	r1, [pc, #640]	@ (802e6a0 <__gethex+0x2b0>)
 802e420:	2201      	movs	r2, #1
 802e422:	4648      	mov	r0, r9
 802e424:	f7fd faf0 	bl	802ba08 <strncmp>
 802e428:	4607      	mov	r7, r0
 802e42a:	2800      	cmp	r0, #0
 802e42c:	d167      	bne.n	802e4fe <__gethex+0x10e>
 802e42e:	f899 0001 	ldrb.w	r0, [r9, #1]
 802e432:	4626      	mov	r6, r4
 802e434:	f7ff ffc6 	bl	802e3c4 <__hexdig_fun>
 802e438:	2800      	cmp	r0, #0
 802e43a:	d062      	beq.n	802e502 <__gethex+0x112>
 802e43c:	4623      	mov	r3, r4
 802e43e:	7818      	ldrb	r0, [r3, #0]
 802e440:	2830      	cmp	r0, #48	@ 0x30
 802e442:	4699      	mov	r9, r3
 802e444:	f103 0301 	add.w	r3, r3, #1
 802e448:	d0f9      	beq.n	802e43e <__gethex+0x4e>
 802e44a:	f7ff ffbb 	bl	802e3c4 <__hexdig_fun>
 802e44e:	fab0 f580 	clz	r5, r0
 802e452:	096d      	lsrs	r5, r5, #5
 802e454:	f04f 0b01 	mov.w	fp, #1
 802e458:	464a      	mov	r2, r9
 802e45a:	4616      	mov	r6, r2
 802e45c:	3201      	adds	r2, #1
 802e45e:	7830      	ldrb	r0, [r6, #0]
 802e460:	f7ff ffb0 	bl	802e3c4 <__hexdig_fun>
 802e464:	2800      	cmp	r0, #0
 802e466:	d1f8      	bne.n	802e45a <__gethex+0x6a>
 802e468:	498d      	ldr	r1, [pc, #564]	@ (802e6a0 <__gethex+0x2b0>)
 802e46a:	2201      	movs	r2, #1
 802e46c:	4630      	mov	r0, r6
 802e46e:	f7fd facb 	bl	802ba08 <strncmp>
 802e472:	2800      	cmp	r0, #0
 802e474:	d13f      	bne.n	802e4f6 <__gethex+0x106>
 802e476:	b944      	cbnz	r4, 802e48a <__gethex+0x9a>
 802e478:	1c74      	adds	r4, r6, #1
 802e47a:	4622      	mov	r2, r4
 802e47c:	4616      	mov	r6, r2
 802e47e:	3201      	adds	r2, #1
 802e480:	7830      	ldrb	r0, [r6, #0]
 802e482:	f7ff ff9f 	bl	802e3c4 <__hexdig_fun>
 802e486:	2800      	cmp	r0, #0
 802e488:	d1f8      	bne.n	802e47c <__gethex+0x8c>
 802e48a:	1ba4      	subs	r4, r4, r6
 802e48c:	00a7      	lsls	r7, r4, #2
 802e48e:	7833      	ldrb	r3, [r6, #0]
 802e490:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e494:	2b50      	cmp	r3, #80	@ 0x50
 802e496:	d13e      	bne.n	802e516 <__gethex+0x126>
 802e498:	7873      	ldrb	r3, [r6, #1]
 802e49a:	2b2b      	cmp	r3, #43	@ 0x2b
 802e49c:	d033      	beq.n	802e506 <__gethex+0x116>
 802e49e:	2b2d      	cmp	r3, #45	@ 0x2d
 802e4a0:	d034      	beq.n	802e50c <__gethex+0x11c>
 802e4a2:	1c71      	adds	r1, r6, #1
 802e4a4:	2400      	movs	r4, #0
 802e4a6:	7808      	ldrb	r0, [r1, #0]
 802e4a8:	f7ff ff8c 	bl	802e3c4 <__hexdig_fun>
 802e4ac:	1e43      	subs	r3, r0, #1
 802e4ae:	b2db      	uxtb	r3, r3
 802e4b0:	2b18      	cmp	r3, #24
 802e4b2:	d830      	bhi.n	802e516 <__gethex+0x126>
 802e4b4:	f1a0 0210 	sub.w	r2, r0, #16
 802e4b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802e4bc:	f7ff ff82 	bl	802e3c4 <__hexdig_fun>
 802e4c0:	f100 3cff 	add.w	ip, r0, #4294967295
 802e4c4:	fa5f fc8c 	uxtb.w	ip, ip
 802e4c8:	f1bc 0f18 	cmp.w	ip, #24
 802e4cc:	f04f 030a 	mov.w	r3, #10
 802e4d0:	d91e      	bls.n	802e510 <__gethex+0x120>
 802e4d2:	b104      	cbz	r4, 802e4d6 <__gethex+0xe6>
 802e4d4:	4252      	negs	r2, r2
 802e4d6:	4417      	add	r7, r2
 802e4d8:	f8ca 1000 	str.w	r1, [sl]
 802e4dc:	b1ed      	cbz	r5, 802e51a <__gethex+0x12a>
 802e4de:	f1bb 0f00 	cmp.w	fp, #0
 802e4e2:	bf0c      	ite	eq
 802e4e4:	2506      	moveq	r5, #6
 802e4e6:	2500      	movne	r5, #0
 802e4e8:	4628      	mov	r0, r5
 802e4ea:	b005      	add	sp, #20
 802e4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e4f0:	2500      	movs	r5, #0
 802e4f2:	462c      	mov	r4, r5
 802e4f4:	e7b0      	b.n	802e458 <__gethex+0x68>
 802e4f6:	2c00      	cmp	r4, #0
 802e4f8:	d1c7      	bne.n	802e48a <__gethex+0x9a>
 802e4fa:	4627      	mov	r7, r4
 802e4fc:	e7c7      	b.n	802e48e <__gethex+0x9e>
 802e4fe:	464e      	mov	r6, r9
 802e500:	462f      	mov	r7, r5
 802e502:	2501      	movs	r5, #1
 802e504:	e7c3      	b.n	802e48e <__gethex+0x9e>
 802e506:	2400      	movs	r4, #0
 802e508:	1cb1      	adds	r1, r6, #2
 802e50a:	e7cc      	b.n	802e4a6 <__gethex+0xb6>
 802e50c:	2401      	movs	r4, #1
 802e50e:	e7fb      	b.n	802e508 <__gethex+0x118>
 802e510:	fb03 0002 	mla	r0, r3, r2, r0
 802e514:	e7ce      	b.n	802e4b4 <__gethex+0xc4>
 802e516:	4631      	mov	r1, r6
 802e518:	e7de      	b.n	802e4d8 <__gethex+0xe8>
 802e51a:	eba6 0309 	sub.w	r3, r6, r9
 802e51e:	3b01      	subs	r3, #1
 802e520:	4629      	mov	r1, r5
 802e522:	2b07      	cmp	r3, #7
 802e524:	dc0a      	bgt.n	802e53c <__gethex+0x14c>
 802e526:	9801      	ldr	r0, [sp, #4]
 802e528:	f7fe f9dc 	bl	802c8e4 <_Balloc>
 802e52c:	4604      	mov	r4, r0
 802e52e:	b940      	cbnz	r0, 802e542 <__gethex+0x152>
 802e530:	4b5c      	ldr	r3, [pc, #368]	@ (802e6a4 <__gethex+0x2b4>)
 802e532:	4602      	mov	r2, r0
 802e534:	21e4      	movs	r1, #228	@ 0xe4
 802e536:	485c      	ldr	r0, [pc, #368]	@ (802e6a8 <__gethex+0x2b8>)
 802e538:	f7fb fe20 	bl	802a17c <__assert_func>
 802e53c:	3101      	adds	r1, #1
 802e53e:	105b      	asrs	r3, r3, #1
 802e540:	e7ef      	b.n	802e522 <__gethex+0x132>
 802e542:	f100 0a14 	add.w	sl, r0, #20
 802e546:	2300      	movs	r3, #0
 802e548:	4655      	mov	r5, sl
 802e54a:	469b      	mov	fp, r3
 802e54c:	45b1      	cmp	r9, r6
 802e54e:	d337      	bcc.n	802e5c0 <__gethex+0x1d0>
 802e550:	f845 bb04 	str.w	fp, [r5], #4
 802e554:	eba5 050a 	sub.w	r5, r5, sl
 802e558:	10ad      	asrs	r5, r5, #2
 802e55a:	6125      	str	r5, [r4, #16]
 802e55c:	4658      	mov	r0, fp
 802e55e:	f7fe fab3 	bl	802cac8 <__hi0bits>
 802e562:	016d      	lsls	r5, r5, #5
 802e564:	f8d8 6000 	ldr.w	r6, [r8]
 802e568:	1a2d      	subs	r5, r5, r0
 802e56a:	42b5      	cmp	r5, r6
 802e56c:	dd54      	ble.n	802e618 <__gethex+0x228>
 802e56e:	1bad      	subs	r5, r5, r6
 802e570:	4629      	mov	r1, r5
 802e572:	4620      	mov	r0, r4
 802e574:	f7fe fe3f 	bl	802d1f6 <__any_on>
 802e578:	4681      	mov	r9, r0
 802e57a:	b178      	cbz	r0, 802e59c <__gethex+0x1ac>
 802e57c:	1e6b      	subs	r3, r5, #1
 802e57e:	1159      	asrs	r1, r3, #5
 802e580:	f003 021f 	and.w	r2, r3, #31
 802e584:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802e588:	f04f 0901 	mov.w	r9, #1
 802e58c:	fa09 f202 	lsl.w	r2, r9, r2
 802e590:	420a      	tst	r2, r1
 802e592:	d003      	beq.n	802e59c <__gethex+0x1ac>
 802e594:	454b      	cmp	r3, r9
 802e596:	dc36      	bgt.n	802e606 <__gethex+0x216>
 802e598:	f04f 0902 	mov.w	r9, #2
 802e59c:	4629      	mov	r1, r5
 802e59e:	4620      	mov	r0, r4
 802e5a0:	f7ff febe 	bl	802e320 <rshift>
 802e5a4:	442f      	add	r7, r5
 802e5a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802e5aa:	42bb      	cmp	r3, r7
 802e5ac:	da42      	bge.n	802e634 <__gethex+0x244>
 802e5ae:	9801      	ldr	r0, [sp, #4]
 802e5b0:	4621      	mov	r1, r4
 802e5b2:	f7fe f9d7 	bl	802c964 <_Bfree>
 802e5b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e5b8:	2300      	movs	r3, #0
 802e5ba:	6013      	str	r3, [r2, #0]
 802e5bc:	25a3      	movs	r5, #163	@ 0xa3
 802e5be:	e793      	b.n	802e4e8 <__gethex+0xf8>
 802e5c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802e5c4:	2a2e      	cmp	r2, #46	@ 0x2e
 802e5c6:	d012      	beq.n	802e5ee <__gethex+0x1fe>
 802e5c8:	2b20      	cmp	r3, #32
 802e5ca:	d104      	bne.n	802e5d6 <__gethex+0x1e6>
 802e5cc:	f845 bb04 	str.w	fp, [r5], #4
 802e5d0:	f04f 0b00 	mov.w	fp, #0
 802e5d4:	465b      	mov	r3, fp
 802e5d6:	7830      	ldrb	r0, [r6, #0]
 802e5d8:	9303      	str	r3, [sp, #12]
 802e5da:	f7ff fef3 	bl	802e3c4 <__hexdig_fun>
 802e5de:	9b03      	ldr	r3, [sp, #12]
 802e5e0:	f000 000f 	and.w	r0, r0, #15
 802e5e4:	4098      	lsls	r0, r3
 802e5e6:	ea4b 0b00 	orr.w	fp, fp, r0
 802e5ea:	3304      	adds	r3, #4
 802e5ec:	e7ae      	b.n	802e54c <__gethex+0x15c>
 802e5ee:	45b1      	cmp	r9, r6
 802e5f0:	d8ea      	bhi.n	802e5c8 <__gethex+0x1d8>
 802e5f2:	492b      	ldr	r1, [pc, #172]	@ (802e6a0 <__gethex+0x2b0>)
 802e5f4:	9303      	str	r3, [sp, #12]
 802e5f6:	2201      	movs	r2, #1
 802e5f8:	4630      	mov	r0, r6
 802e5fa:	f7fd fa05 	bl	802ba08 <strncmp>
 802e5fe:	9b03      	ldr	r3, [sp, #12]
 802e600:	2800      	cmp	r0, #0
 802e602:	d1e1      	bne.n	802e5c8 <__gethex+0x1d8>
 802e604:	e7a2      	b.n	802e54c <__gethex+0x15c>
 802e606:	1ea9      	subs	r1, r5, #2
 802e608:	4620      	mov	r0, r4
 802e60a:	f7fe fdf4 	bl	802d1f6 <__any_on>
 802e60e:	2800      	cmp	r0, #0
 802e610:	d0c2      	beq.n	802e598 <__gethex+0x1a8>
 802e612:	f04f 0903 	mov.w	r9, #3
 802e616:	e7c1      	b.n	802e59c <__gethex+0x1ac>
 802e618:	da09      	bge.n	802e62e <__gethex+0x23e>
 802e61a:	1b75      	subs	r5, r6, r5
 802e61c:	4621      	mov	r1, r4
 802e61e:	9801      	ldr	r0, [sp, #4]
 802e620:	462a      	mov	r2, r5
 802e622:	f7fe fbaf 	bl	802cd84 <__lshift>
 802e626:	1b7f      	subs	r7, r7, r5
 802e628:	4604      	mov	r4, r0
 802e62a:	f100 0a14 	add.w	sl, r0, #20
 802e62e:	f04f 0900 	mov.w	r9, #0
 802e632:	e7b8      	b.n	802e5a6 <__gethex+0x1b6>
 802e634:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802e638:	42bd      	cmp	r5, r7
 802e63a:	dd6f      	ble.n	802e71c <__gethex+0x32c>
 802e63c:	1bed      	subs	r5, r5, r7
 802e63e:	42ae      	cmp	r6, r5
 802e640:	dc34      	bgt.n	802e6ac <__gethex+0x2bc>
 802e642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802e646:	2b02      	cmp	r3, #2
 802e648:	d022      	beq.n	802e690 <__gethex+0x2a0>
 802e64a:	2b03      	cmp	r3, #3
 802e64c:	d024      	beq.n	802e698 <__gethex+0x2a8>
 802e64e:	2b01      	cmp	r3, #1
 802e650:	d115      	bne.n	802e67e <__gethex+0x28e>
 802e652:	42ae      	cmp	r6, r5
 802e654:	d113      	bne.n	802e67e <__gethex+0x28e>
 802e656:	2e01      	cmp	r6, #1
 802e658:	d10b      	bne.n	802e672 <__gethex+0x282>
 802e65a:	9a02      	ldr	r2, [sp, #8]
 802e65c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802e660:	6013      	str	r3, [r2, #0]
 802e662:	2301      	movs	r3, #1
 802e664:	6123      	str	r3, [r4, #16]
 802e666:	f8ca 3000 	str.w	r3, [sl]
 802e66a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e66c:	2562      	movs	r5, #98	@ 0x62
 802e66e:	601c      	str	r4, [r3, #0]
 802e670:	e73a      	b.n	802e4e8 <__gethex+0xf8>
 802e672:	1e71      	subs	r1, r6, #1
 802e674:	4620      	mov	r0, r4
 802e676:	f7fe fdbe 	bl	802d1f6 <__any_on>
 802e67a:	2800      	cmp	r0, #0
 802e67c:	d1ed      	bne.n	802e65a <__gethex+0x26a>
 802e67e:	9801      	ldr	r0, [sp, #4]
 802e680:	4621      	mov	r1, r4
 802e682:	f7fe f96f 	bl	802c964 <_Bfree>
 802e686:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e688:	2300      	movs	r3, #0
 802e68a:	6013      	str	r3, [r2, #0]
 802e68c:	2550      	movs	r5, #80	@ 0x50
 802e68e:	e72b      	b.n	802e4e8 <__gethex+0xf8>
 802e690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e692:	2b00      	cmp	r3, #0
 802e694:	d1f3      	bne.n	802e67e <__gethex+0x28e>
 802e696:	e7e0      	b.n	802e65a <__gethex+0x26a>
 802e698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e69a:	2b00      	cmp	r3, #0
 802e69c:	d1dd      	bne.n	802e65a <__gethex+0x26a>
 802e69e:	e7ee      	b.n	802e67e <__gethex+0x28e>
 802e6a0:	0802f3d4 	.word	0x0802f3d4
 802e6a4:	0802f36a 	.word	0x0802f36a
 802e6a8:	0802f3de 	.word	0x0802f3de
 802e6ac:	1e6f      	subs	r7, r5, #1
 802e6ae:	f1b9 0f00 	cmp.w	r9, #0
 802e6b2:	d130      	bne.n	802e716 <__gethex+0x326>
 802e6b4:	b127      	cbz	r7, 802e6c0 <__gethex+0x2d0>
 802e6b6:	4639      	mov	r1, r7
 802e6b8:	4620      	mov	r0, r4
 802e6ba:	f7fe fd9c 	bl	802d1f6 <__any_on>
 802e6be:	4681      	mov	r9, r0
 802e6c0:	117a      	asrs	r2, r7, #5
 802e6c2:	2301      	movs	r3, #1
 802e6c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802e6c8:	f007 071f 	and.w	r7, r7, #31
 802e6cc:	40bb      	lsls	r3, r7
 802e6ce:	4213      	tst	r3, r2
 802e6d0:	4629      	mov	r1, r5
 802e6d2:	4620      	mov	r0, r4
 802e6d4:	bf18      	it	ne
 802e6d6:	f049 0902 	orrne.w	r9, r9, #2
 802e6da:	f7ff fe21 	bl	802e320 <rshift>
 802e6de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802e6e2:	1b76      	subs	r6, r6, r5
 802e6e4:	2502      	movs	r5, #2
 802e6e6:	f1b9 0f00 	cmp.w	r9, #0
 802e6ea:	d047      	beq.n	802e77c <__gethex+0x38c>
 802e6ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802e6f0:	2b02      	cmp	r3, #2
 802e6f2:	d015      	beq.n	802e720 <__gethex+0x330>
 802e6f4:	2b03      	cmp	r3, #3
 802e6f6:	d017      	beq.n	802e728 <__gethex+0x338>
 802e6f8:	2b01      	cmp	r3, #1
 802e6fa:	d109      	bne.n	802e710 <__gethex+0x320>
 802e6fc:	f019 0f02 	tst.w	r9, #2
 802e700:	d006      	beq.n	802e710 <__gethex+0x320>
 802e702:	f8da 3000 	ldr.w	r3, [sl]
 802e706:	ea49 0903 	orr.w	r9, r9, r3
 802e70a:	f019 0f01 	tst.w	r9, #1
 802e70e:	d10e      	bne.n	802e72e <__gethex+0x33e>
 802e710:	f045 0510 	orr.w	r5, r5, #16
 802e714:	e032      	b.n	802e77c <__gethex+0x38c>
 802e716:	f04f 0901 	mov.w	r9, #1
 802e71a:	e7d1      	b.n	802e6c0 <__gethex+0x2d0>
 802e71c:	2501      	movs	r5, #1
 802e71e:	e7e2      	b.n	802e6e6 <__gethex+0x2f6>
 802e720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e722:	f1c3 0301 	rsb	r3, r3, #1
 802e726:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e72a:	2b00      	cmp	r3, #0
 802e72c:	d0f0      	beq.n	802e710 <__gethex+0x320>
 802e72e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802e732:	f104 0314 	add.w	r3, r4, #20
 802e736:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802e73a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802e73e:	f04f 0c00 	mov.w	ip, #0
 802e742:	4618      	mov	r0, r3
 802e744:	f853 2b04 	ldr.w	r2, [r3], #4
 802e748:	f1b2 3fff 	cmp.w	r2, #4294967295
 802e74c:	d01b      	beq.n	802e786 <__gethex+0x396>
 802e74e:	3201      	adds	r2, #1
 802e750:	6002      	str	r2, [r0, #0]
 802e752:	2d02      	cmp	r5, #2
 802e754:	f104 0314 	add.w	r3, r4, #20
 802e758:	d13c      	bne.n	802e7d4 <__gethex+0x3e4>
 802e75a:	f8d8 2000 	ldr.w	r2, [r8]
 802e75e:	3a01      	subs	r2, #1
 802e760:	42b2      	cmp	r2, r6
 802e762:	d109      	bne.n	802e778 <__gethex+0x388>
 802e764:	1171      	asrs	r1, r6, #5
 802e766:	2201      	movs	r2, #1
 802e768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802e76c:	f006 061f 	and.w	r6, r6, #31
 802e770:	fa02 f606 	lsl.w	r6, r2, r6
 802e774:	421e      	tst	r6, r3
 802e776:	d13a      	bne.n	802e7ee <__gethex+0x3fe>
 802e778:	f045 0520 	orr.w	r5, r5, #32
 802e77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e77e:	601c      	str	r4, [r3, #0]
 802e780:	9b02      	ldr	r3, [sp, #8]
 802e782:	601f      	str	r7, [r3, #0]
 802e784:	e6b0      	b.n	802e4e8 <__gethex+0xf8>
 802e786:	4299      	cmp	r1, r3
 802e788:	f843 cc04 	str.w	ip, [r3, #-4]
 802e78c:	d8d9      	bhi.n	802e742 <__gethex+0x352>
 802e78e:	68a3      	ldr	r3, [r4, #8]
 802e790:	459b      	cmp	fp, r3
 802e792:	db17      	blt.n	802e7c4 <__gethex+0x3d4>
 802e794:	6861      	ldr	r1, [r4, #4]
 802e796:	9801      	ldr	r0, [sp, #4]
 802e798:	3101      	adds	r1, #1
 802e79a:	f7fe f8a3 	bl	802c8e4 <_Balloc>
 802e79e:	4681      	mov	r9, r0
 802e7a0:	b918      	cbnz	r0, 802e7aa <__gethex+0x3ba>
 802e7a2:	4b1a      	ldr	r3, [pc, #104]	@ (802e80c <__gethex+0x41c>)
 802e7a4:	4602      	mov	r2, r0
 802e7a6:	2184      	movs	r1, #132	@ 0x84
 802e7a8:	e6c5      	b.n	802e536 <__gethex+0x146>
 802e7aa:	6922      	ldr	r2, [r4, #16]
 802e7ac:	3202      	adds	r2, #2
 802e7ae:	f104 010c 	add.w	r1, r4, #12
 802e7b2:	0092      	lsls	r2, r2, #2
 802e7b4:	300c      	adds	r0, #12
 802e7b6:	f7fd f9d6 	bl	802bb66 <memcpy>
 802e7ba:	4621      	mov	r1, r4
 802e7bc:	9801      	ldr	r0, [sp, #4]
 802e7be:	f7fe f8d1 	bl	802c964 <_Bfree>
 802e7c2:	464c      	mov	r4, r9
 802e7c4:	6923      	ldr	r3, [r4, #16]
 802e7c6:	1c5a      	adds	r2, r3, #1
 802e7c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e7cc:	6122      	str	r2, [r4, #16]
 802e7ce:	2201      	movs	r2, #1
 802e7d0:	615a      	str	r2, [r3, #20]
 802e7d2:	e7be      	b.n	802e752 <__gethex+0x362>
 802e7d4:	6922      	ldr	r2, [r4, #16]
 802e7d6:	455a      	cmp	r2, fp
 802e7d8:	dd0b      	ble.n	802e7f2 <__gethex+0x402>
 802e7da:	2101      	movs	r1, #1
 802e7dc:	4620      	mov	r0, r4
 802e7de:	f7ff fd9f 	bl	802e320 <rshift>
 802e7e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802e7e6:	3701      	adds	r7, #1
 802e7e8:	42bb      	cmp	r3, r7
 802e7ea:	f6ff aee0 	blt.w	802e5ae <__gethex+0x1be>
 802e7ee:	2501      	movs	r5, #1
 802e7f0:	e7c2      	b.n	802e778 <__gethex+0x388>
 802e7f2:	f016 061f 	ands.w	r6, r6, #31
 802e7f6:	d0fa      	beq.n	802e7ee <__gethex+0x3fe>
 802e7f8:	4453      	add	r3, sl
 802e7fa:	f1c6 0620 	rsb	r6, r6, #32
 802e7fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802e802:	f7fe f961 	bl	802cac8 <__hi0bits>
 802e806:	42b0      	cmp	r0, r6
 802e808:	dbe7      	blt.n	802e7da <__gethex+0x3ea>
 802e80a:	e7f0      	b.n	802e7ee <__gethex+0x3fe>
 802e80c:	0802f36a 	.word	0x0802f36a

0802e810 <L_shift>:
 802e810:	f1c2 0208 	rsb	r2, r2, #8
 802e814:	0092      	lsls	r2, r2, #2
 802e816:	b570      	push	{r4, r5, r6, lr}
 802e818:	f1c2 0620 	rsb	r6, r2, #32
 802e81c:	6843      	ldr	r3, [r0, #4]
 802e81e:	6804      	ldr	r4, [r0, #0]
 802e820:	fa03 f506 	lsl.w	r5, r3, r6
 802e824:	432c      	orrs	r4, r5
 802e826:	40d3      	lsrs	r3, r2
 802e828:	6004      	str	r4, [r0, #0]
 802e82a:	f840 3f04 	str.w	r3, [r0, #4]!
 802e82e:	4288      	cmp	r0, r1
 802e830:	d3f4      	bcc.n	802e81c <L_shift+0xc>
 802e832:	bd70      	pop	{r4, r5, r6, pc}

0802e834 <__match>:
 802e834:	b530      	push	{r4, r5, lr}
 802e836:	6803      	ldr	r3, [r0, #0]
 802e838:	3301      	adds	r3, #1
 802e83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e83e:	b914      	cbnz	r4, 802e846 <__match+0x12>
 802e840:	6003      	str	r3, [r0, #0]
 802e842:	2001      	movs	r0, #1
 802e844:	bd30      	pop	{r4, r5, pc}
 802e846:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e84a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802e84e:	2d19      	cmp	r5, #25
 802e850:	bf98      	it	ls
 802e852:	3220      	addls	r2, #32
 802e854:	42a2      	cmp	r2, r4
 802e856:	d0f0      	beq.n	802e83a <__match+0x6>
 802e858:	2000      	movs	r0, #0
 802e85a:	e7f3      	b.n	802e844 <__match+0x10>

0802e85c <__hexnan>:
 802e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e860:	680b      	ldr	r3, [r1, #0]
 802e862:	6801      	ldr	r1, [r0, #0]
 802e864:	115e      	asrs	r6, r3, #5
 802e866:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802e86a:	f013 031f 	ands.w	r3, r3, #31
 802e86e:	b087      	sub	sp, #28
 802e870:	bf18      	it	ne
 802e872:	3604      	addne	r6, #4
 802e874:	2500      	movs	r5, #0
 802e876:	1f37      	subs	r7, r6, #4
 802e878:	4682      	mov	sl, r0
 802e87a:	4690      	mov	r8, r2
 802e87c:	9301      	str	r3, [sp, #4]
 802e87e:	f846 5c04 	str.w	r5, [r6, #-4]
 802e882:	46b9      	mov	r9, r7
 802e884:	463c      	mov	r4, r7
 802e886:	9502      	str	r5, [sp, #8]
 802e888:	46ab      	mov	fp, r5
 802e88a:	784a      	ldrb	r2, [r1, #1]
 802e88c:	1c4b      	adds	r3, r1, #1
 802e88e:	9303      	str	r3, [sp, #12]
 802e890:	b342      	cbz	r2, 802e8e4 <__hexnan+0x88>
 802e892:	4610      	mov	r0, r2
 802e894:	9105      	str	r1, [sp, #20]
 802e896:	9204      	str	r2, [sp, #16]
 802e898:	f7ff fd94 	bl	802e3c4 <__hexdig_fun>
 802e89c:	2800      	cmp	r0, #0
 802e89e:	d151      	bne.n	802e944 <__hexnan+0xe8>
 802e8a0:	9a04      	ldr	r2, [sp, #16]
 802e8a2:	9905      	ldr	r1, [sp, #20]
 802e8a4:	2a20      	cmp	r2, #32
 802e8a6:	d818      	bhi.n	802e8da <__hexnan+0x7e>
 802e8a8:	9b02      	ldr	r3, [sp, #8]
 802e8aa:	459b      	cmp	fp, r3
 802e8ac:	dd13      	ble.n	802e8d6 <__hexnan+0x7a>
 802e8ae:	454c      	cmp	r4, r9
 802e8b0:	d206      	bcs.n	802e8c0 <__hexnan+0x64>
 802e8b2:	2d07      	cmp	r5, #7
 802e8b4:	dc04      	bgt.n	802e8c0 <__hexnan+0x64>
 802e8b6:	462a      	mov	r2, r5
 802e8b8:	4649      	mov	r1, r9
 802e8ba:	4620      	mov	r0, r4
 802e8bc:	f7ff ffa8 	bl	802e810 <L_shift>
 802e8c0:	4544      	cmp	r4, r8
 802e8c2:	d952      	bls.n	802e96a <__hexnan+0x10e>
 802e8c4:	2300      	movs	r3, #0
 802e8c6:	f1a4 0904 	sub.w	r9, r4, #4
 802e8ca:	f844 3c04 	str.w	r3, [r4, #-4]
 802e8ce:	f8cd b008 	str.w	fp, [sp, #8]
 802e8d2:	464c      	mov	r4, r9
 802e8d4:	461d      	mov	r5, r3
 802e8d6:	9903      	ldr	r1, [sp, #12]
 802e8d8:	e7d7      	b.n	802e88a <__hexnan+0x2e>
 802e8da:	2a29      	cmp	r2, #41	@ 0x29
 802e8dc:	d157      	bne.n	802e98e <__hexnan+0x132>
 802e8de:	3102      	adds	r1, #2
 802e8e0:	f8ca 1000 	str.w	r1, [sl]
 802e8e4:	f1bb 0f00 	cmp.w	fp, #0
 802e8e8:	d051      	beq.n	802e98e <__hexnan+0x132>
 802e8ea:	454c      	cmp	r4, r9
 802e8ec:	d206      	bcs.n	802e8fc <__hexnan+0xa0>
 802e8ee:	2d07      	cmp	r5, #7
 802e8f0:	dc04      	bgt.n	802e8fc <__hexnan+0xa0>
 802e8f2:	462a      	mov	r2, r5
 802e8f4:	4649      	mov	r1, r9
 802e8f6:	4620      	mov	r0, r4
 802e8f8:	f7ff ff8a 	bl	802e810 <L_shift>
 802e8fc:	4544      	cmp	r4, r8
 802e8fe:	d936      	bls.n	802e96e <__hexnan+0x112>
 802e900:	f1a8 0204 	sub.w	r2, r8, #4
 802e904:	4623      	mov	r3, r4
 802e906:	f853 1b04 	ldr.w	r1, [r3], #4
 802e90a:	f842 1f04 	str.w	r1, [r2, #4]!
 802e90e:	429f      	cmp	r7, r3
 802e910:	d2f9      	bcs.n	802e906 <__hexnan+0xaa>
 802e912:	1b3b      	subs	r3, r7, r4
 802e914:	f023 0303 	bic.w	r3, r3, #3
 802e918:	3304      	adds	r3, #4
 802e91a:	3401      	adds	r4, #1
 802e91c:	3e03      	subs	r6, #3
 802e91e:	42b4      	cmp	r4, r6
 802e920:	bf88      	it	hi
 802e922:	2304      	movhi	r3, #4
 802e924:	4443      	add	r3, r8
 802e926:	2200      	movs	r2, #0
 802e928:	f843 2b04 	str.w	r2, [r3], #4
 802e92c:	429f      	cmp	r7, r3
 802e92e:	d2fb      	bcs.n	802e928 <__hexnan+0xcc>
 802e930:	683b      	ldr	r3, [r7, #0]
 802e932:	b91b      	cbnz	r3, 802e93c <__hexnan+0xe0>
 802e934:	4547      	cmp	r7, r8
 802e936:	d128      	bne.n	802e98a <__hexnan+0x12e>
 802e938:	2301      	movs	r3, #1
 802e93a:	603b      	str	r3, [r7, #0]
 802e93c:	2005      	movs	r0, #5
 802e93e:	b007      	add	sp, #28
 802e940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e944:	3501      	adds	r5, #1
 802e946:	2d08      	cmp	r5, #8
 802e948:	f10b 0b01 	add.w	fp, fp, #1
 802e94c:	dd06      	ble.n	802e95c <__hexnan+0x100>
 802e94e:	4544      	cmp	r4, r8
 802e950:	d9c1      	bls.n	802e8d6 <__hexnan+0x7a>
 802e952:	2300      	movs	r3, #0
 802e954:	f844 3c04 	str.w	r3, [r4, #-4]
 802e958:	2501      	movs	r5, #1
 802e95a:	3c04      	subs	r4, #4
 802e95c:	6822      	ldr	r2, [r4, #0]
 802e95e:	f000 000f 	and.w	r0, r0, #15
 802e962:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802e966:	6020      	str	r0, [r4, #0]
 802e968:	e7b5      	b.n	802e8d6 <__hexnan+0x7a>
 802e96a:	2508      	movs	r5, #8
 802e96c:	e7b3      	b.n	802e8d6 <__hexnan+0x7a>
 802e96e:	9b01      	ldr	r3, [sp, #4]
 802e970:	2b00      	cmp	r3, #0
 802e972:	d0dd      	beq.n	802e930 <__hexnan+0xd4>
 802e974:	f1c3 0320 	rsb	r3, r3, #32
 802e978:	f04f 32ff 	mov.w	r2, #4294967295
 802e97c:	40da      	lsrs	r2, r3
 802e97e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802e982:	4013      	ands	r3, r2
 802e984:	f846 3c04 	str.w	r3, [r6, #-4]
 802e988:	e7d2      	b.n	802e930 <__hexnan+0xd4>
 802e98a:	3f04      	subs	r7, #4
 802e98c:	e7d0      	b.n	802e930 <__hexnan+0xd4>
 802e98e:	2004      	movs	r0, #4
 802e990:	e7d5      	b.n	802e93e <__hexnan+0xe2>

0802e992 <__ascii_mbtowc>:
 802e992:	b082      	sub	sp, #8
 802e994:	b901      	cbnz	r1, 802e998 <__ascii_mbtowc+0x6>
 802e996:	a901      	add	r1, sp, #4
 802e998:	b142      	cbz	r2, 802e9ac <__ascii_mbtowc+0x1a>
 802e99a:	b14b      	cbz	r3, 802e9b0 <__ascii_mbtowc+0x1e>
 802e99c:	7813      	ldrb	r3, [r2, #0]
 802e99e:	600b      	str	r3, [r1, #0]
 802e9a0:	7812      	ldrb	r2, [r2, #0]
 802e9a2:	1e10      	subs	r0, r2, #0
 802e9a4:	bf18      	it	ne
 802e9a6:	2001      	movne	r0, #1
 802e9a8:	b002      	add	sp, #8
 802e9aa:	4770      	bx	lr
 802e9ac:	4610      	mov	r0, r2
 802e9ae:	e7fb      	b.n	802e9a8 <__ascii_mbtowc+0x16>
 802e9b0:	f06f 0001 	mvn.w	r0, #1
 802e9b4:	e7f8      	b.n	802e9a8 <__ascii_mbtowc+0x16>

0802e9b6 <_malloc_usable_size_r>:
 802e9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e9ba:	1f18      	subs	r0, r3, #4
 802e9bc:	2b00      	cmp	r3, #0
 802e9be:	bfbc      	itt	lt
 802e9c0:	580b      	ldrlt	r3, [r1, r0]
 802e9c2:	18c0      	addlt	r0, r0, r3
 802e9c4:	4770      	bx	lr

0802e9c6 <__ascii_wctomb>:
 802e9c6:	4603      	mov	r3, r0
 802e9c8:	4608      	mov	r0, r1
 802e9ca:	b141      	cbz	r1, 802e9de <__ascii_wctomb+0x18>
 802e9cc:	2aff      	cmp	r2, #255	@ 0xff
 802e9ce:	d904      	bls.n	802e9da <__ascii_wctomb+0x14>
 802e9d0:	228a      	movs	r2, #138	@ 0x8a
 802e9d2:	601a      	str	r2, [r3, #0]
 802e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 802e9d8:	4770      	bx	lr
 802e9da:	700a      	strb	r2, [r1, #0]
 802e9dc:	2001      	movs	r0, #1
 802e9de:	4770      	bx	lr

0802e9e0 <_init>:
 802e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e9e2:	bf00      	nop
 802e9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e9e6:	bc08      	pop	{r3}
 802e9e8:	469e      	mov	lr, r3
 802e9ea:	4770      	bx	lr

0802e9ec <_fini>:
 802e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e9ee:	bf00      	nop
 802e9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e9f2:	bc08      	pop	{r3}
 802e9f4:	469e      	mov	lr, r3
 802e9f6:	4770      	bx	lr
